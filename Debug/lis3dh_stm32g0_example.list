
lis3dh_stm32g0_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009144  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ac  08009200  08009200  00019200  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097ac  080097ac  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080097ac  080097ac  000197ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097b4  080097b4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097b4  080097b4  000197b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097b8  080097b8  000197b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080097bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000052c  200001dc  08009998  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000708  08009998  00020708  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d47  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026d7  00000000  00000000  00031f4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  00034628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000de8  00000000  00000000  00035528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d87  00000000  00000000  00036310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010be0  00000000  00000000  00050097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c040  00000000  00000000  00060c77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fccb7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004724  00000000  00000000  000fcd08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001dc 	.word	0x200001dc
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080091e8 	.word	0x080091e8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001e0 	.word	0x200001e0
 8000100:	080091e8 	.word	0x080091e8

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f95f 	bl	80016fc <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f8af 	bl	80015ac <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f951 	bl	80016fc <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f947 	bl	80016fc <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f8d7 	bl	8001630 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f8cd 	bl	8001630 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f806 	bl	80004e4 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__udivmoddi4>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	4657      	mov	r7, sl
 80004e8:	464e      	mov	r6, r9
 80004ea:	4645      	mov	r5, r8
 80004ec:	46de      	mov	lr, fp
 80004ee:	b5e0      	push	{r5, r6, r7, lr}
 80004f0:	0004      	movs	r4, r0
 80004f2:	000d      	movs	r5, r1
 80004f4:	4692      	mov	sl, r2
 80004f6:	4699      	mov	r9, r3
 80004f8:	b083      	sub	sp, #12
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d830      	bhi.n	8000560 <__udivmoddi4+0x7c>
 80004fe:	d02d      	beq.n	800055c <__udivmoddi4+0x78>
 8000500:	4649      	mov	r1, r9
 8000502:	4650      	mov	r0, sl
 8000504:	f002 f86c 	bl	80025e0 <__clzdi2>
 8000508:	0029      	movs	r1, r5
 800050a:	0006      	movs	r6, r0
 800050c:	0020      	movs	r0, r4
 800050e:	f002 f867 	bl	80025e0 <__clzdi2>
 8000512:	1a33      	subs	r3, r6, r0
 8000514:	4698      	mov	r8, r3
 8000516:	3b20      	subs	r3, #32
 8000518:	469b      	mov	fp, r3
 800051a:	d433      	bmi.n	8000584 <__udivmoddi4+0xa0>
 800051c:	465a      	mov	r2, fp
 800051e:	4653      	mov	r3, sl
 8000520:	4093      	lsls	r3, r2
 8000522:	4642      	mov	r2, r8
 8000524:	001f      	movs	r7, r3
 8000526:	4653      	mov	r3, sl
 8000528:	4093      	lsls	r3, r2
 800052a:	001e      	movs	r6, r3
 800052c:	42af      	cmp	r7, r5
 800052e:	d83a      	bhi.n	80005a6 <__udivmoddi4+0xc2>
 8000530:	42af      	cmp	r7, r5
 8000532:	d100      	bne.n	8000536 <__udivmoddi4+0x52>
 8000534:	e078      	b.n	8000628 <__udivmoddi4+0x144>
 8000536:	465b      	mov	r3, fp
 8000538:	1ba4      	subs	r4, r4, r6
 800053a:	41bd      	sbcs	r5, r7
 800053c:	2b00      	cmp	r3, #0
 800053e:	da00      	bge.n	8000542 <__udivmoddi4+0x5e>
 8000540:	e075      	b.n	800062e <__udivmoddi4+0x14a>
 8000542:	2200      	movs	r2, #0
 8000544:	2300      	movs	r3, #0
 8000546:	9200      	str	r2, [sp, #0]
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	2301      	movs	r3, #1
 800054c:	465a      	mov	r2, fp
 800054e:	4093      	lsls	r3, r2
 8000550:	9301      	str	r3, [sp, #4]
 8000552:	2301      	movs	r3, #1
 8000554:	4642      	mov	r2, r8
 8000556:	4093      	lsls	r3, r2
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	e028      	b.n	80005ae <__udivmoddi4+0xca>
 800055c:	4282      	cmp	r2, r0
 800055e:	d9cf      	bls.n	8000500 <__udivmoddi4+0x1c>
 8000560:	2200      	movs	r2, #0
 8000562:	2300      	movs	r3, #0
 8000564:	9200      	str	r2, [sp, #0]
 8000566:	9301      	str	r3, [sp, #4]
 8000568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <__udivmoddi4+0x8e>
 800056e:	601c      	str	r4, [r3, #0]
 8000570:	605d      	str	r5, [r3, #4]
 8000572:	9800      	ldr	r0, [sp, #0]
 8000574:	9901      	ldr	r1, [sp, #4]
 8000576:	b003      	add	sp, #12
 8000578:	bcf0      	pop	{r4, r5, r6, r7}
 800057a:	46bb      	mov	fp, r7
 800057c:	46b2      	mov	sl, r6
 800057e:	46a9      	mov	r9, r5
 8000580:	46a0      	mov	r8, r4
 8000582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000584:	4642      	mov	r2, r8
 8000586:	2320      	movs	r3, #32
 8000588:	1a9b      	subs	r3, r3, r2
 800058a:	4652      	mov	r2, sl
 800058c:	40da      	lsrs	r2, r3
 800058e:	4641      	mov	r1, r8
 8000590:	0013      	movs	r3, r2
 8000592:	464a      	mov	r2, r9
 8000594:	408a      	lsls	r2, r1
 8000596:	0017      	movs	r7, r2
 8000598:	4642      	mov	r2, r8
 800059a:	431f      	orrs	r7, r3
 800059c:	4653      	mov	r3, sl
 800059e:	4093      	lsls	r3, r2
 80005a0:	001e      	movs	r6, r3
 80005a2:	42af      	cmp	r7, r5
 80005a4:	d9c4      	bls.n	8000530 <__udivmoddi4+0x4c>
 80005a6:	2200      	movs	r2, #0
 80005a8:	2300      	movs	r3, #0
 80005aa:	9200      	str	r2, [sp, #0]
 80005ac:	9301      	str	r3, [sp, #4]
 80005ae:	4643      	mov	r3, r8
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d0d9      	beq.n	8000568 <__udivmoddi4+0x84>
 80005b4:	07fb      	lsls	r3, r7, #31
 80005b6:	0872      	lsrs	r2, r6, #1
 80005b8:	431a      	orrs	r2, r3
 80005ba:	4646      	mov	r6, r8
 80005bc:	087b      	lsrs	r3, r7, #1
 80005be:	e00e      	b.n	80005de <__udivmoddi4+0xfa>
 80005c0:	42ab      	cmp	r3, r5
 80005c2:	d101      	bne.n	80005c8 <__udivmoddi4+0xe4>
 80005c4:	42a2      	cmp	r2, r4
 80005c6:	d80c      	bhi.n	80005e2 <__udivmoddi4+0xfe>
 80005c8:	1aa4      	subs	r4, r4, r2
 80005ca:	419d      	sbcs	r5, r3
 80005cc:	2001      	movs	r0, #1
 80005ce:	1924      	adds	r4, r4, r4
 80005d0:	416d      	adcs	r5, r5
 80005d2:	2100      	movs	r1, #0
 80005d4:	3e01      	subs	r6, #1
 80005d6:	1824      	adds	r4, r4, r0
 80005d8:	414d      	adcs	r5, r1
 80005da:	2e00      	cmp	r6, #0
 80005dc:	d006      	beq.n	80005ec <__udivmoddi4+0x108>
 80005de:	42ab      	cmp	r3, r5
 80005e0:	d9ee      	bls.n	80005c0 <__udivmoddi4+0xdc>
 80005e2:	3e01      	subs	r6, #1
 80005e4:	1924      	adds	r4, r4, r4
 80005e6:	416d      	adcs	r5, r5
 80005e8:	2e00      	cmp	r6, #0
 80005ea:	d1f8      	bne.n	80005de <__udivmoddi4+0xfa>
 80005ec:	9800      	ldr	r0, [sp, #0]
 80005ee:	9901      	ldr	r1, [sp, #4]
 80005f0:	465b      	mov	r3, fp
 80005f2:	1900      	adds	r0, r0, r4
 80005f4:	4169      	adcs	r1, r5
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	db24      	blt.n	8000644 <__udivmoddi4+0x160>
 80005fa:	002b      	movs	r3, r5
 80005fc:	465a      	mov	r2, fp
 80005fe:	4644      	mov	r4, r8
 8000600:	40d3      	lsrs	r3, r2
 8000602:	002a      	movs	r2, r5
 8000604:	40e2      	lsrs	r2, r4
 8000606:	001c      	movs	r4, r3
 8000608:	465b      	mov	r3, fp
 800060a:	0015      	movs	r5, r2
 800060c:	2b00      	cmp	r3, #0
 800060e:	db2a      	blt.n	8000666 <__udivmoddi4+0x182>
 8000610:	0026      	movs	r6, r4
 8000612:	409e      	lsls	r6, r3
 8000614:	0033      	movs	r3, r6
 8000616:	0026      	movs	r6, r4
 8000618:	4647      	mov	r7, r8
 800061a:	40be      	lsls	r6, r7
 800061c:	0032      	movs	r2, r6
 800061e:	1a80      	subs	r0, r0, r2
 8000620:	4199      	sbcs	r1, r3
 8000622:	9000      	str	r0, [sp, #0]
 8000624:	9101      	str	r1, [sp, #4]
 8000626:	e79f      	b.n	8000568 <__udivmoddi4+0x84>
 8000628:	42a3      	cmp	r3, r4
 800062a:	d8bc      	bhi.n	80005a6 <__udivmoddi4+0xc2>
 800062c:	e783      	b.n	8000536 <__udivmoddi4+0x52>
 800062e:	4642      	mov	r2, r8
 8000630:	2320      	movs	r3, #32
 8000632:	2100      	movs	r1, #0
 8000634:	1a9b      	subs	r3, r3, r2
 8000636:	2200      	movs	r2, #0
 8000638:	9100      	str	r1, [sp, #0]
 800063a:	9201      	str	r2, [sp, #4]
 800063c:	2201      	movs	r2, #1
 800063e:	40da      	lsrs	r2, r3
 8000640:	9201      	str	r2, [sp, #4]
 8000642:	e786      	b.n	8000552 <__udivmoddi4+0x6e>
 8000644:	4642      	mov	r2, r8
 8000646:	2320      	movs	r3, #32
 8000648:	1a9b      	subs	r3, r3, r2
 800064a:	002a      	movs	r2, r5
 800064c:	4646      	mov	r6, r8
 800064e:	409a      	lsls	r2, r3
 8000650:	0023      	movs	r3, r4
 8000652:	40f3      	lsrs	r3, r6
 8000654:	4644      	mov	r4, r8
 8000656:	4313      	orrs	r3, r2
 8000658:	002a      	movs	r2, r5
 800065a:	40e2      	lsrs	r2, r4
 800065c:	001c      	movs	r4, r3
 800065e:	465b      	mov	r3, fp
 8000660:	0015      	movs	r5, r2
 8000662:	2b00      	cmp	r3, #0
 8000664:	dad4      	bge.n	8000610 <__udivmoddi4+0x12c>
 8000666:	4642      	mov	r2, r8
 8000668:	002f      	movs	r7, r5
 800066a:	2320      	movs	r3, #32
 800066c:	0026      	movs	r6, r4
 800066e:	4097      	lsls	r7, r2
 8000670:	1a9b      	subs	r3, r3, r2
 8000672:	40de      	lsrs	r6, r3
 8000674:	003b      	movs	r3, r7
 8000676:	4333      	orrs	r3, r6
 8000678:	e7cd      	b.n	8000616 <__udivmoddi4+0x132>
 800067a:	46c0      	nop			; (mov r8, r8)

0800067c <__aeabi_fdiv>:
 800067c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800067e:	464f      	mov	r7, r9
 8000680:	4646      	mov	r6, r8
 8000682:	46d6      	mov	lr, sl
 8000684:	0245      	lsls	r5, r0, #9
 8000686:	b5c0      	push	{r6, r7, lr}
 8000688:	0047      	lsls	r7, r0, #1
 800068a:	1c0c      	adds	r4, r1, #0
 800068c:	0a6d      	lsrs	r5, r5, #9
 800068e:	0e3f      	lsrs	r7, r7, #24
 8000690:	0fc6      	lsrs	r6, r0, #31
 8000692:	2f00      	cmp	r7, #0
 8000694:	d100      	bne.n	8000698 <__aeabi_fdiv+0x1c>
 8000696:	e070      	b.n	800077a <__aeabi_fdiv+0xfe>
 8000698:	2fff      	cmp	r7, #255	; 0xff
 800069a:	d100      	bne.n	800069e <__aeabi_fdiv+0x22>
 800069c:	e075      	b.n	800078a <__aeabi_fdiv+0x10e>
 800069e:	00eb      	lsls	r3, r5, #3
 80006a0:	2580      	movs	r5, #128	; 0x80
 80006a2:	04ed      	lsls	r5, r5, #19
 80006a4:	431d      	orrs	r5, r3
 80006a6:	2300      	movs	r3, #0
 80006a8:	4699      	mov	r9, r3
 80006aa:	469a      	mov	sl, r3
 80006ac:	3f7f      	subs	r7, #127	; 0x7f
 80006ae:	0260      	lsls	r0, r4, #9
 80006b0:	0a43      	lsrs	r3, r0, #9
 80006b2:	4698      	mov	r8, r3
 80006b4:	0063      	lsls	r3, r4, #1
 80006b6:	0e1b      	lsrs	r3, r3, #24
 80006b8:	0fe4      	lsrs	r4, r4, #31
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d04e      	beq.n	800075c <__aeabi_fdiv+0xe0>
 80006be:	2bff      	cmp	r3, #255	; 0xff
 80006c0:	d046      	beq.n	8000750 <__aeabi_fdiv+0xd4>
 80006c2:	4642      	mov	r2, r8
 80006c4:	00d0      	lsls	r0, r2, #3
 80006c6:	2280      	movs	r2, #128	; 0x80
 80006c8:	04d2      	lsls	r2, r2, #19
 80006ca:	4302      	orrs	r2, r0
 80006cc:	4690      	mov	r8, r2
 80006ce:	2200      	movs	r2, #0
 80006d0:	3b7f      	subs	r3, #127	; 0x7f
 80006d2:	0031      	movs	r1, r6
 80006d4:	1aff      	subs	r7, r7, r3
 80006d6:	464b      	mov	r3, r9
 80006d8:	4061      	eors	r1, r4
 80006da:	b2c9      	uxtb	r1, r1
 80006dc:	4313      	orrs	r3, r2
 80006de:	2b0f      	cmp	r3, #15
 80006e0:	d900      	bls.n	80006e4 <__aeabi_fdiv+0x68>
 80006e2:	e0b5      	b.n	8000850 <__aeabi_fdiv+0x1d4>
 80006e4:	486e      	ldr	r0, [pc, #440]	; (80008a0 <__aeabi_fdiv+0x224>)
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	58c3      	ldr	r3, [r0, r3]
 80006ea:	469f      	mov	pc, r3
 80006ec:	2300      	movs	r3, #0
 80006ee:	4698      	mov	r8, r3
 80006f0:	0026      	movs	r6, r4
 80006f2:	4645      	mov	r5, r8
 80006f4:	4692      	mov	sl, r2
 80006f6:	4653      	mov	r3, sl
 80006f8:	2b02      	cmp	r3, #2
 80006fa:	d100      	bne.n	80006fe <__aeabi_fdiv+0x82>
 80006fc:	e089      	b.n	8000812 <__aeabi_fdiv+0x196>
 80006fe:	2b03      	cmp	r3, #3
 8000700:	d100      	bne.n	8000704 <__aeabi_fdiv+0x88>
 8000702:	e09e      	b.n	8000842 <__aeabi_fdiv+0x1c6>
 8000704:	2b01      	cmp	r3, #1
 8000706:	d018      	beq.n	800073a <__aeabi_fdiv+0xbe>
 8000708:	003b      	movs	r3, r7
 800070a:	337f      	adds	r3, #127	; 0x7f
 800070c:	2b00      	cmp	r3, #0
 800070e:	dd69      	ble.n	80007e4 <__aeabi_fdiv+0x168>
 8000710:	076a      	lsls	r2, r5, #29
 8000712:	d004      	beq.n	800071e <__aeabi_fdiv+0xa2>
 8000714:	220f      	movs	r2, #15
 8000716:	402a      	ands	r2, r5
 8000718:	2a04      	cmp	r2, #4
 800071a:	d000      	beq.n	800071e <__aeabi_fdiv+0xa2>
 800071c:	3504      	adds	r5, #4
 800071e:	012a      	lsls	r2, r5, #4
 8000720:	d503      	bpl.n	800072a <__aeabi_fdiv+0xae>
 8000722:	4b60      	ldr	r3, [pc, #384]	; (80008a4 <__aeabi_fdiv+0x228>)
 8000724:	401d      	ands	r5, r3
 8000726:	003b      	movs	r3, r7
 8000728:	3380      	adds	r3, #128	; 0x80
 800072a:	2bfe      	cmp	r3, #254	; 0xfe
 800072c:	dd00      	ble.n	8000730 <__aeabi_fdiv+0xb4>
 800072e:	e070      	b.n	8000812 <__aeabi_fdiv+0x196>
 8000730:	01ad      	lsls	r5, r5, #6
 8000732:	0a6d      	lsrs	r5, r5, #9
 8000734:	b2d8      	uxtb	r0, r3
 8000736:	e002      	b.n	800073e <__aeabi_fdiv+0xc2>
 8000738:	000e      	movs	r6, r1
 800073a:	2000      	movs	r0, #0
 800073c:	2500      	movs	r5, #0
 800073e:	05c0      	lsls	r0, r0, #23
 8000740:	4328      	orrs	r0, r5
 8000742:	07f6      	lsls	r6, r6, #31
 8000744:	4330      	orrs	r0, r6
 8000746:	bce0      	pop	{r5, r6, r7}
 8000748:	46ba      	mov	sl, r7
 800074a:	46b1      	mov	r9, r6
 800074c:	46a8      	mov	r8, r5
 800074e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000750:	4643      	mov	r3, r8
 8000752:	2b00      	cmp	r3, #0
 8000754:	d13f      	bne.n	80007d6 <__aeabi_fdiv+0x15a>
 8000756:	2202      	movs	r2, #2
 8000758:	3fff      	subs	r7, #255	; 0xff
 800075a:	e003      	b.n	8000764 <__aeabi_fdiv+0xe8>
 800075c:	4643      	mov	r3, r8
 800075e:	2b00      	cmp	r3, #0
 8000760:	d12d      	bne.n	80007be <__aeabi_fdiv+0x142>
 8000762:	2201      	movs	r2, #1
 8000764:	0031      	movs	r1, r6
 8000766:	464b      	mov	r3, r9
 8000768:	4061      	eors	r1, r4
 800076a:	b2c9      	uxtb	r1, r1
 800076c:	4313      	orrs	r3, r2
 800076e:	2b0f      	cmp	r3, #15
 8000770:	d834      	bhi.n	80007dc <__aeabi_fdiv+0x160>
 8000772:	484d      	ldr	r0, [pc, #308]	; (80008a8 <__aeabi_fdiv+0x22c>)
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	58c3      	ldr	r3, [r0, r3]
 8000778:	469f      	mov	pc, r3
 800077a:	2d00      	cmp	r5, #0
 800077c:	d113      	bne.n	80007a6 <__aeabi_fdiv+0x12a>
 800077e:	2304      	movs	r3, #4
 8000780:	4699      	mov	r9, r3
 8000782:	3b03      	subs	r3, #3
 8000784:	2700      	movs	r7, #0
 8000786:	469a      	mov	sl, r3
 8000788:	e791      	b.n	80006ae <__aeabi_fdiv+0x32>
 800078a:	2d00      	cmp	r5, #0
 800078c:	d105      	bne.n	800079a <__aeabi_fdiv+0x11e>
 800078e:	2308      	movs	r3, #8
 8000790:	4699      	mov	r9, r3
 8000792:	3b06      	subs	r3, #6
 8000794:	27ff      	movs	r7, #255	; 0xff
 8000796:	469a      	mov	sl, r3
 8000798:	e789      	b.n	80006ae <__aeabi_fdiv+0x32>
 800079a:	230c      	movs	r3, #12
 800079c:	4699      	mov	r9, r3
 800079e:	3b09      	subs	r3, #9
 80007a0:	27ff      	movs	r7, #255	; 0xff
 80007a2:	469a      	mov	sl, r3
 80007a4:	e783      	b.n	80006ae <__aeabi_fdiv+0x32>
 80007a6:	0028      	movs	r0, r5
 80007a8:	f001 fefc 	bl	80025a4 <__clzsi2>
 80007ac:	2776      	movs	r7, #118	; 0x76
 80007ae:	1f43      	subs	r3, r0, #5
 80007b0:	409d      	lsls	r5, r3
 80007b2:	2300      	movs	r3, #0
 80007b4:	427f      	negs	r7, r7
 80007b6:	4699      	mov	r9, r3
 80007b8:	469a      	mov	sl, r3
 80007ba:	1a3f      	subs	r7, r7, r0
 80007bc:	e777      	b.n	80006ae <__aeabi_fdiv+0x32>
 80007be:	4640      	mov	r0, r8
 80007c0:	f001 fef0 	bl	80025a4 <__clzsi2>
 80007c4:	4642      	mov	r2, r8
 80007c6:	1f43      	subs	r3, r0, #5
 80007c8:	409a      	lsls	r2, r3
 80007ca:	2376      	movs	r3, #118	; 0x76
 80007cc:	425b      	negs	r3, r3
 80007ce:	4690      	mov	r8, r2
 80007d0:	1a1b      	subs	r3, r3, r0
 80007d2:	2200      	movs	r2, #0
 80007d4:	e77d      	b.n	80006d2 <__aeabi_fdiv+0x56>
 80007d6:	23ff      	movs	r3, #255	; 0xff
 80007d8:	2203      	movs	r2, #3
 80007da:	e77a      	b.n	80006d2 <__aeabi_fdiv+0x56>
 80007dc:	000e      	movs	r6, r1
 80007de:	20ff      	movs	r0, #255	; 0xff
 80007e0:	2500      	movs	r5, #0
 80007e2:	e7ac      	b.n	800073e <__aeabi_fdiv+0xc2>
 80007e4:	2001      	movs	r0, #1
 80007e6:	1ac0      	subs	r0, r0, r3
 80007e8:	281b      	cmp	r0, #27
 80007ea:	dca6      	bgt.n	800073a <__aeabi_fdiv+0xbe>
 80007ec:	379e      	adds	r7, #158	; 0x9e
 80007ee:	002a      	movs	r2, r5
 80007f0:	40bd      	lsls	r5, r7
 80007f2:	40c2      	lsrs	r2, r0
 80007f4:	1e6b      	subs	r3, r5, #1
 80007f6:	419d      	sbcs	r5, r3
 80007f8:	4315      	orrs	r5, r2
 80007fa:	076b      	lsls	r3, r5, #29
 80007fc:	d004      	beq.n	8000808 <__aeabi_fdiv+0x18c>
 80007fe:	230f      	movs	r3, #15
 8000800:	402b      	ands	r3, r5
 8000802:	2b04      	cmp	r3, #4
 8000804:	d000      	beq.n	8000808 <__aeabi_fdiv+0x18c>
 8000806:	3504      	adds	r5, #4
 8000808:	016b      	lsls	r3, r5, #5
 800080a:	d544      	bpl.n	8000896 <__aeabi_fdiv+0x21a>
 800080c:	2001      	movs	r0, #1
 800080e:	2500      	movs	r5, #0
 8000810:	e795      	b.n	800073e <__aeabi_fdiv+0xc2>
 8000812:	20ff      	movs	r0, #255	; 0xff
 8000814:	2500      	movs	r5, #0
 8000816:	e792      	b.n	800073e <__aeabi_fdiv+0xc2>
 8000818:	2580      	movs	r5, #128	; 0x80
 800081a:	2600      	movs	r6, #0
 800081c:	20ff      	movs	r0, #255	; 0xff
 800081e:	03ed      	lsls	r5, r5, #15
 8000820:	e78d      	b.n	800073e <__aeabi_fdiv+0xc2>
 8000822:	2300      	movs	r3, #0
 8000824:	4698      	mov	r8, r3
 8000826:	2080      	movs	r0, #128	; 0x80
 8000828:	03c0      	lsls	r0, r0, #15
 800082a:	4205      	tst	r5, r0
 800082c:	d009      	beq.n	8000842 <__aeabi_fdiv+0x1c6>
 800082e:	4643      	mov	r3, r8
 8000830:	4203      	tst	r3, r0
 8000832:	d106      	bne.n	8000842 <__aeabi_fdiv+0x1c6>
 8000834:	4645      	mov	r5, r8
 8000836:	4305      	orrs	r5, r0
 8000838:	026d      	lsls	r5, r5, #9
 800083a:	0026      	movs	r6, r4
 800083c:	20ff      	movs	r0, #255	; 0xff
 800083e:	0a6d      	lsrs	r5, r5, #9
 8000840:	e77d      	b.n	800073e <__aeabi_fdiv+0xc2>
 8000842:	2080      	movs	r0, #128	; 0x80
 8000844:	03c0      	lsls	r0, r0, #15
 8000846:	4305      	orrs	r5, r0
 8000848:	026d      	lsls	r5, r5, #9
 800084a:	20ff      	movs	r0, #255	; 0xff
 800084c:	0a6d      	lsrs	r5, r5, #9
 800084e:	e776      	b.n	800073e <__aeabi_fdiv+0xc2>
 8000850:	4642      	mov	r2, r8
 8000852:	016b      	lsls	r3, r5, #5
 8000854:	0150      	lsls	r0, r2, #5
 8000856:	4283      	cmp	r3, r0
 8000858:	d219      	bcs.n	800088e <__aeabi_fdiv+0x212>
 800085a:	221b      	movs	r2, #27
 800085c:	2500      	movs	r5, #0
 800085e:	3f01      	subs	r7, #1
 8000860:	2601      	movs	r6, #1
 8000862:	001c      	movs	r4, r3
 8000864:	006d      	lsls	r5, r5, #1
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	2c00      	cmp	r4, #0
 800086a:	db01      	blt.n	8000870 <__aeabi_fdiv+0x1f4>
 800086c:	4298      	cmp	r0, r3
 800086e:	d801      	bhi.n	8000874 <__aeabi_fdiv+0x1f8>
 8000870:	1a1b      	subs	r3, r3, r0
 8000872:	4335      	orrs	r5, r6
 8000874:	3a01      	subs	r2, #1
 8000876:	2a00      	cmp	r2, #0
 8000878:	d1f3      	bne.n	8000862 <__aeabi_fdiv+0x1e6>
 800087a:	1e5a      	subs	r2, r3, #1
 800087c:	4193      	sbcs	r3, r2
 800087e:	431d      	orrs	r5, r3
 8000880:	003b      	movs	r3, r7
 8000882:	337f      	adds	r3, #127	; 0x7f
 8000884:	000e      	movs	r6, r1
 8000886:	2b00      	cmp	r3, #0
 8000888:	dd00      	ble.n	800088c <__aeabi_fdiv+0x210>
 800088a:	e741      	b.n	8000710 <__aeabi_fdiv+0x94>
 800088c:	e7aa      	b.n	80007e4 <__aeabi_fdiv+0x168>
 800088e:	221a      	movs	r2, #26
 8000890:	2501      	movs	r5, #1
 8000892:	1a1b      	subs	r3, r3, r0
 8000894:	e7e4      	b.n	8000860 <__aeabi_fdiv+0x1e4>
 8000896:	01ad      	lsls	r5, r5, #6
 8000898:	2000      	movs	r0, #0
 800089a:	0a6d      	lsrs	r5, r5, #9
 800089c:	e74f      	b.n	800073e <__aeabi_fdiv+0xc2>
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	0800924c 	.word	0x0800924c
 80008a4:	f7ffffff 	.word	0xf7ffffff
 80008a8:	0800928c 	.word	0x0800928c

080008ac <__aeabi_i2f>:
 80008ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ae:	2800      	cmp	r0, #0
 80008b0:	d013      	beq.n	80008da <__aeabi_i2f+0x2e>
 80008b2:	17c3      	asrs	r3, r0, #31
 80008b4:	18c6      	adds	r6, r0, r3
 80008b6:	405e      	eors	r6, r3
 80008b8:	0fc4      	lsrs	r4, r0, #31
 80008ba:	0030      	movs	r0, r6
 80008bc:	f001 fe72 	bl	80025a4 <__clzsi2>
 80008c0:	239e      	movs	r3, #158	; 0x9e
 80008c2:	0005      	movs	r5, r0
 80008c4:	1a1b      	subs	r3, r3, r0
 80008c6:	2b96      	cmp	r3, #150	; 0x96
 80008c8:	dc0f      	bgt.n	80008ea <__aeabi_i2f+0x3e>
 80008ca:	2808      	cmp	r0, #8
 80008cc:	dd01      	ble.n	80008d2 <__aeabi_i2f+0x26>
 80008ce:	3d08      	subs	r5, #8
 80008d0:	40ae      	lsls	r6, r5
 80008d2:	0276      	lsls	r6, r6, #9
 80008d4:	0a76      	lsrs	r6, r6, #9
 80008d6:	b2d8      	uxtb	r0, r3
 80008d8:	e002      	b.n	80008e0 <__aeabi_i2f+0x34>
 80008da:	2400      	movs	r4, #0
 80008dc:	2000      	movs	r0, #0
 80008de:	2600      	movs	r6, #0
 80008e0:	05c0      	lsls	r0, r0, #23
 80008e2:	4330      	orrs	r0, r6
 80008e4:	07e4      	lsls	r4, r4, #31
 80008e6:	4320      	orrs	r0, r4
 80008e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008ea:	2b99      	cmp	r3, #153	; 0x99
 80008ec:	dd0c      	ble.n	8000908 <__aeabi_i2f+0x5c>
 80008ee:	2205      	movs	r2, #5
 80008f0:	0031      	movs	r1, r6
 80008f2:	1a12      	subs	r2, r2, r0
 80008f4:	40d1      	lsrs	r1, r2
 80008f6:	000a      	movs	r2, r1
 80008f8:	0001      	movs	r1, r0
 80008fa:	0030      	movs	r0, r6
 80008fc:	311b      	adds	r1, #27
 80008fe:	4088      	lsls	r0, r1
 8000900:	1e41      	subs	r1, r0, #1
 8000902:	4188      	sbcs	r0, r1
 8000904:	4302      	orrs	r2, r0
 8000906:	0016      	movs	r6, r2
 8000908:	2d05      	cmp	r5, #5
 800090a:	dc12      	bgt.n	8000932 <__aeabi_i2f+0x86>
 800090c:	0031      	movs	r1, r6
 800090e:	4f0d      	ldr	r7, [pc, #52]	; (8000944 <__aeabi_i2f+0x98>)
 8000910:	4039      	ands	r1, r7
 8000912:	0772      	lsls	r2, r6, #29
 8000914:	d009      	beq.n	800092a <__aeabi_i2f+0x7e>
 8000916:	200f      	movs	r0, #15
 8000918:	4030      	ands	r0, r6
 800091a:	2804      	cmp	r0, #4
 800091c:	d005      	beq.n	800092a <__aeabi_i2f+0x7e>
 800091e:	3104      	adds	r1, #4
 8000920:	014a      	lsls	r2, r1, #5
 8000922:	d502      	bpl.n	800092a <__aeabi_i2f+0x7e>
 8000924:	239f      	movs	r3, #159	; 0x9f
 8000926:	4039      	ands	r1, r7
 8000928:	1b5b      	subs	r3, r3, r5
 800092a:	0189      	lsls	r1, r1, #6
 800092c:	0a4e      	lsrs	r6, r1, #9
 800092e:	b2d8      	uxtb	r0, r3
 8000930:	e7d6      	b.n	80008e0 <__aeabi_i2f+0x34>
 8000932:	1f6a      	subs	r2, r5, #5
 8000934:	4096      	lsls	r6, r2
 8000936:	0031      	movs	r1, r6
 8000938:	4f02      	ldr	r7, [pc, #8]	; (8000944 <__aeabi_i2f+0x98>)
 800093a:	4039      	ands	r1, r7
 800093c:	0772      	lsls	r2, r6, #29
 800093e:	d0f4      	beq.n	800092a <__aeabi_i2f+0x7e>
 8000940:	e7e9      	b.n	8000916 <__aeabi_i2f+0x6a>
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	fbffffff 	.word	0xfbffffff

08000948 <__aeabi_dadd>:
 8000948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800094a:	464f      	mov	r7, r9
 800094c:	4646      	mov	r6, r8
 800094e:	46d6      	mov	lr, sl
 8000950:	000d      	movs	r5, r1
 8000952:	0004      	movs	r4, r0
 8000954:	b5c0      	push	{r6, r7, lr}
 8000956:	001f      	movs	r7, r3
 8000958:	0011      	movs	r1, r2
 800095a:	0328      	lsls	r0, r5, #12
 800095c:	0f62      	lsrs	r2, r4, #29
 800095e:	0a40      	lsrs	r0, r0, #9
 8000960:	4310      	orrs	r0, r2
 8000962:	007a      	lsls	r2, r7, #1
 8000964:	0d52      	lsrs	r2, r2, #21
 8000966:	00e3      	lsls	r3, r4, #3
 8000968:	033c      	lsls	r4, r7, #12
 800096a:	4691      	mov	r9, r2
 800096c:	0a64      	lsrs	r4, r4, #9
 800096e:	0ffa      	lsrs	r2, r7, #31
 8000970:	0f4f      	lsrs	r7, r1, #29
 8000972:	006e      	lsls	r6, r5, #1
 8000974:	4327      	orrs	r7, r4
 8000976:	4692      	mov	sl, r2
 8000978:	46b8      	mov	r8, r7
 800097a:	0d76      	lsrs	r6, r6, #21
 800097c:	0fed      	lsrs	r5, r5, #31
 800097e:	00c9      	lsls	r1, r1, #3
 8000980:	4295      	cmp	r5, r2
 8000982:	d100      	bne.n	8000986 <__aeabi_dadd+0x3e>
 8000984:	e099      	b.n	8000aba <__aeabi_dadd+0x172>
 8000986:	464c      	mov	r4, r9
 8000988:	1b34      	subs	r4, r6, r4
 800098a:	46a4      	mov	ip, r4
 800098c:	2c00      	cmp	r4, #0
 800098e:	dc00      	bgt.n	8000992 <__aeabi_dadd+0x4a>
 8000990:	e07c      	b.n	8000a8c <__aeabi_dadd+0x144>
 8000992:	464a      	mov	r2, r9
 8000994:	2a00      	cmp	r2, #0
 8000996:	d100      	bne.n	800099a <__aeabi_dadd+0x52>
 8000998:	e0b8      	b.n	8000b0c <__aeabi_dadd+0x1c4>
 800099a:	4ac5      	ldr	r2, [pc, #788]	; (8000cb0 <__aeabi_dadd+0x368>)
 800099c:	4296      	cmp	r6, r2
 800099e:	d100      	bne.n	80009a2 <__aeabi_dadd+0x5a>
 80009a0:	e11c      	b.n	8000bdc <__aeabi_dadd+0x294>
 80009a2:	2280      	movs	r2, #128	; 0x80
 80009a4:	003c      	movs	r4, r7
 80009a6:	0412      	lsls	r2, r2, #16
 80009a8:	4314      	orrs	r4, r2
 80009aa:	46a0      	mov	r8, r4
 80009ac:	4662      	mov	r2, ip
 80009ae:	2a38      	cmp	r2, #56	; 0x38
 80009b0:	dd00      	ble.n	80009b4 <__aeabi_dadd+0x6c>
 80009b2:	e161      	b.n	8000c78 <__aeabi_dadd+0x330>
 80009b4:	2a1f      	cmp	r2, #31
 80009b6:	dd00      	ble.n	80009ba <__aeabi_dadd+0x72>
 80009b8:	e1cc      	b.n	8000d54 <__aeabi_dadd+0x40c>
 80009ba:	4664      	mov	r4, ip
 80009bc:	2220      	movs	r2, #32
 80009be:	1b12      	subs	r2, r2, r4
 80009c0:	4644      	mov	r4, r8
 80009c2:	4094      	lsls	r4, r2
 80009c4:	000f      	movs	r7, r1
 80009c6:	46a1      	mov	r9, r4
 80009c8:	4664      	mov	r4, ip
 80009ca:	4091      	lsls	r1, r2
 80009cc:	40e7      	lsrs	r7, r4
 80009ce:	464c      	mov	r4, r9
 80009d0:	1e4a      	subs	r2, r1, #1
 80009d2:	4191      	sbcs	r1, r2
 80009d4:	433c      	orrs	r4, r7
 80009d6:	4642      	mov	r2, r8
 80009d8:	4321      	orrs	r1, r4
 80009da:	4664      	mov	r4, ip
 80009dc:	40e2      	lsrs	r2, r4
 80009de:	1a80      	subs	r0, r0, r2
 80009e0:	1a5c      	subs	r4, r3, r1
 80009e2:	42a3      	cmp	r3, r4
 80009e4:	419b      	sbcs	r3, r3
 80009e6:	425f      	negs	r7, r3
 80009e8:	1bc7      	subs	r7, r0, r7
 80009ea:	023b      	lsls	r3, r7, #8
 80009ec:	d400      	bmi.n	80009f0 <__aeabi_dadd+0xa8>
 80009ee:	e0d0      	b.n	8000b92 <__aeabi_dadd+0x24a>
 80009f0:	027f      	lsls	r7, r7, #9
 80009f2:	0a7f      	lsrs	r7, r7, #9
 80009f4:	2f00      	cmp	r7, #0
 80009f6:	d100      	bne.n	80009fa <__aeabi_dadd+0xb2>
 80009f8:	e0ff      	b.n	8000bfa <__aeabi_dadd+0x2b2>
 80009fa:	0038      	movs	r0, r7
 80009fc:	f001 fdd2 	bl	80025a4 <__clzsi2>
 8000a00:	0001      	movs	r1, r0
 8000a02:	3908      	subs	r1, #8
 8000a04:	2320      	movs	r3, #32
 8000a06:	0022      	movs	r2, r4
 8000a08:	1a5b      	subs	r3, r3, r1
 8000a0a:	408f      	lsls	r7, r1
 8000a0c:	40da      	lsrs	r2, r3
 8000a0e:	408c      	lsls	r4, r1
 8000a10:	4317      	orrs	r7, r2
 8000a12:	42b1      	cmp	r1, r6
 8000a14:	da00      	bge.n	8000a18 <__aeabi_dadd+0xd0>
 8000a16:	e0ff      	b.n	8000c18 <__aeabi_dadd+0x2d0>
 8000a18:	1b89      	subs	r1, r1, r6
 8000a1a:	1c4b      	adds	r3, r1, #1
 8000a1c:	2b1f      	cmp	r3, #31
 8000a1e:	dd00      	ble.n	8000a22 <__aeabi_dadd+0xda>
 8000a20:	e0a8      	b.n	8000b74 <__aeabi_dadd+0x22c>
 8000a22:	2220      	movs	r2, #32
 8000a24:	0039      	movs	r1, r7
 8000a26:	1ad2      	subs	r2, r2, r3
 8000a28:	0020      	movs	r0, r4
 8000a2a:	4094      	lsls	r4, r2
 8000a2c:	4091      	lsls	r1, r2
 8000a2e:	40d8      	lsrs	r0, r3
 8000a30:	1e62      	subs	r2, r4, #1
 8000a32:	4194      	sbcs	r4, r2
 8000a34:	40df      	lsrs	r7, r3
 8000a36:	2600      	movs	r6, #0
 8000a38:	4301      	orrs	r1, r0
 8000a3a:	430c      	orrs	r4, r1
 8000a3c:	0763      	lsls	r3, r4, #29
 8000a3e:	d009      	beq.n	8000a54 <__aeabi_dadd+0x10c>
 8000a40:	230f      	movs	r3, #15
 8000a42:	4023      	ands	r3, r4
 8000a44:	2b04      	cmp	r3, #4
 8000a46:	d005      	beq.n	8000a54 <__aeabi_dadd+0x10c>
 8000a48:	1d23      	adds	r3, r4, #4
 8000a4a:	42a3      	cmp	r3, r4
 8000a4c:	41a4      	sbcs	r4, r4
 8000a4e:	4264      	negs	r4, r4
 8000a50:	193f      	adds	r7, r7, r4
 8000a52:	001c      	movs	r4, r3
 8000a54:	023b      	lsls	r3, r7, #8
 8000a56:	d400      	bmi.n	8000a5a <__aeabi_dadd+0x112>
 8000a58:	e09e      	b.n	8000b98 <__aeabi_dadd+0x250>
 8000a5a:	4b95      	ldr	r3, [pc, #596]	; (8000cb0 <__aeabi_dadd+0x368>)
 8000a5c:	3601      	adds	r6, #1
 8000a5e:	429e      	cmp	r6, r3
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dadd+0x11c>
 8000a62:	e0b7      	b.n	8000bd4 <__aeabi_dadd+0x28c>
 8000a64:	4a93      	ldr	r2, [pc, #588]	; (8000cb4 <__aeabi_dadd+0x36c>)
 8000a66:	08e4      	lsrs	r4, r4, #3
 8000a68:	4017      	ands	r7, r2
 8000a6a:	077b      	lsls	r3, r7, #29
 8000a6c:	0571      	lsls	r1, r6, #21
 8000a6e:	027f      	lsls	r7, r7, #9
 8000a70:	4323      	orrs	r3, r4
 8000a72:	0b3f      	lsrs	r7, r7, #12
 8000a74:	0d4a      	lsrs	r2, r1, #21
 8000a76:	0512      	lsls	r2, r2, #20
 8000a78:	433a      	orrs	r2, r7
 8000a7a:	07ed      	lsls	r5, r5, #31
 8000a7c:	432a      	orrs	r2, r5
 8000a7e:	0018      	movs	r0, r3
 8000a80:	0011      	movs	r1, r2
 8000a82:	bce0      	pop	{r5, r6, r7}
 8000a84:	46ba      	mov	sl, r7
 8000a86:	46b1      	mov	r9, r6
 8000a88:	46a8      	mov	r8, r5
 8000a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a8c:	2c00      	cmp	r4, #0
 8000a8e:	d04b      	beq.n	8000b28 <__aeabi_dadd+0x1e0>
 8000a90:	464c      	mov	r4, r9
 8000a92:	1ba4      	subs	r4, r4, r6
 8000a94:	46a4      	mov	ip, r4
 8000a96:	2e00      	cmp	r6, #0
 8000a98:	d000      	beq.n	8000a9c <__aeabi_dadd+0x154>
 8000a9a:	e123      	b.n	8000ce4 <__aeabi_dadd+0x39c>
 8000a9c:	0004      	movs	r4, r0
 8000a9e:	431c      	orrs	r4, r3
 8000aa0:	d100      	bne.n	8000aa4 <__aeabi_dadd+0x15c>
 8000aa2:	e1af      	b.n	8000e04 <__aeabi_dadd+0x4bc>
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	1e54      	subs	r4, r2, #1
 8000aa8:	2a01      	cmp	r2, #1
 8000aaa:	d100      	bne.n	8000aae <__aeabi_dadd+0x166>
 8000aac:	e215      	b.n	8000eda <__aeabi_dadd+0x592>
 8000aae:	4d80      	ldr	r5, [pc, #512]	; (8000cb0 <__aeabi_dadd+0x368>)
 8000ab0:	45ac      	cmp	ip, r5
 8000ab2:	d100      	bne.n	8000ab6 <__aeabi_dadd+0x16e>
 8000ab4:	e1c8      	b.n	8000e48 <__aeabi_dadd+0x500>
 8000ab6:	46a4      	mov	ip, r4
 8000ab8:	e11b      	b.n	8000cf2 <__aeabi_dadd+0x3aa>
 8000aba:	464a      	mov	r2, r9
 8000abc:	1ab2      	subs	r2, r6, r2
 8000abe:	4694      	mov	ip, r2
 8000ac0:	2a00      	cmp	r2, #0
 8000ac2:	dc00      	bgt.n	8000ac6 <__aeabi_dadd+0x17e>
 8000ac4:	e0ac      	b.n	8000c20 <__aeabi_dadd+0x2d8>
 8000ac6:	464a      	mov	r2, r9
 8000ac8:	2a00      	cmp	r2, #0
 8000aca:	d043      	beq.n	8000b54 <__aeabi_dadd+0x20c>
 8000acc:	4a78      	ldr	r2, [pc, #480]	; (8000cb0 <__aeabi_dadd+0x368>)
 8000ace:	4296      	cmp	r6, r2
 8000ad0:	d100      	bne.n	8000ad4 <__aeabi_dadd+0x18c>
 8000ad2:	e1af      	b.n	8000e34 <__aeabi_dadd+0x4ec>
 8000ad4:	2280      	movs	r2, #128	; 0x80
 8000ad6:	003c      	movs	r4, r7
 8000ad8:	0412      	lsls	r2, r2, #16
 8000ada:	4314      	orrs	r4, r2
 8000adc:	46a0      	mov	r8, r4
 8000ade:	4662      	mov	r2, ip
 8000ae0:	2a38      	cmp	r2, #56	; 0x38
 8000ae2:	dc67      	bgt.n	8000bb4 <__aeabi_dadd+0x26c>
 8000ae4:	2a1f      	cmp	r2, #31
 8000ae6:	dc00      	bgt.n	8000aea <__aeabi_dadd+0x1a2>
 8000ae8:	e15f      	b.n	8000daa <__aeabi_dadd+0x462>
 8000aea:	4647      	mov	r7, r8
 8000aec:	3a20      	subs	r2, #32
 8000aee:	40d7      	lsrs	r7, r2
 8000af0:	4662      	mov	r2, ip
 8000af2:	2a20      	cmp	r2, #32
 8000af4:	d005      	beq.n	8000b02 <__aeabi_dadd+0x1ba>
 8000af6:	4664      	mov	r4, ip
 8000af8:	2240      	movs	r2, #64	; 0x40
 8000afa:	1b12      	subs	r2, r2, r4
 8000afc:	4644      	mov	r4, r8
 8000afe:	4094      	lsls	r4, r2
 8000b00:	4321      	orrs	r1, r4
 8000b02:	1e4a      	subs	r2, r1, #1
 8000b04:	4191      	sbcs	r1, r2
 8000b06:	000c      	movs	r4, r1
 8000b08:	433c      	orrs	r4, r7
 8000b0a:	e057      	b.n	8000bbc <__aeabi_dadd+0x274>
 8000b0c:	003a      	movs	r2, r7
 8000b0e:	430a      	orrs	r2, r1
 8000b10:	d100      	bne.n	8000b14 <__aeabi_dadd+0x1cc>
 8000b12:	e105      	b.n	8000d20 <__aeabi_dadd+0x3d8>
 8000b14:	0022      	movs	r2, r4
 8000b16:	3a01      	subs	r2, #1
 8000b18:	2c01      	cmp	r4, #1
 8000b1a:	d100      	bne.n	8000b1e <__aeabi_dadd+0x1d6>
 8000b1c:	e182      	b.n	8000e24 <__aeabi_dadd+0x4dc>
 8000b1e:	4c64      	ldr	r4, [pc, #400]	; (8000cb0 <__aeabi_dadd+0x368>)
 8000b20:	45a4      	cmp	ip, r4
 8000b22:	d05b      	beq.n	8000bdc <__aeabi_dadd+0x294>
 8000b24:	4694      	mov	ip, r2
 8000b26:	e741      	b.n	80009ac <__aeabi_dadd+0x64>
 8000b28:	4c63      	ldr	r4, [pc, #396]	; (8000cb8 <__aeabi_dadd+0x370>)
 8000b2a:	1c77      	adds	r7, r6, #1
 8000b2c:	4227      	tst	r7, r4
 8000b2e:	d000      	beq.n	8000b32 <__aeabi_dadd+0x1ea>
 8000b30:	e0c4      	b.n	8000cbc <__aeabi_dadd+0x374>
 8000b32:	0004      	movs	r4, r0
 8000b34:	431c      	orrs	r4, r3
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	d000      	beq.n	8000b3c <__aeabi_dadd+0x1f4>
 8000b3a:	e169      	b.n	8000e10 <__aeabi_dadd+0x4c8>
 8000b3c:	2c00      	cmp	r4, #0
 8000b3e:	d100      	bne.n	8000b42 <__aeabi_dadd+0x1fa>
 8000b40:	e1bf      	b.n	8000ec2 <__aeabi_dadd+0x57a>
 8000b42:	4644      	mov	r4, r8
 8000b44:	430c      	orrs	r4, r1
 8000b46:	d000      	beq.n	8000b4a <__aeabi_dadd+0x202>
 8000b48:	e1d0      	b.n	8000eec <__aeabi_dadd+0x5a4>
 8000b4a:	0742      	lsls	r2, r0, #29
 8000b4c:	08db      	lsrs	r3, r3, #3
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	08c0      	lsrs	r0, r0, #3
 8000b52:	e029      	b.n	8000ba8 <__aeabi_dadd+0x260>
 8000b54:	003a      	movs	r2, r7
 8000b56:	430a      	orrs	r2, r1
 8000b58:	d100      	bne.n	8000b5c <__aeabi_dadd+0x214>
 8000b5a:	e170      	b.n	8000e3e <__aeabi_dadd+0x4f6>
 8000b5c:	4662      	mov	r2, ip
 8000b5e:	4664      	mov	r4, ip
 8000b60:	3a01      	subs	r2, #1
 8000b62:	2c01      	cmp	r4, #1
 8000b64:	d100      	bne.n	8000b68 <__aeabi_dadd+0x220>
 8000b66:	e0e0      	b.n	8000d2a <__aeabi_dadd+0x3e2>
 8000b68:	4c51      	ldr	r4, [pc, #324]	; (8000cb0 <__aeabi_dadd+0x368>)
 8000b6a:	45a4      	cmp	ip, r4
 8000b6c:	d100      	bne.n	8000b70 <__aeabi_dadd+0x228>
 8000b6e:	e161      	b.n	8000e34 <__aeabi_dadd+0x4ec>
 8000b70:	4694      	mov	ip, r2
 8000b72:	e7b4      	b.n	8000ade <__aeabi_dadd+0x196>
 8000b74:	003a      	movs	r2, r7
 8000b76:	391f      	subs	r1, #31
 8000b78:	40ca      	lsrs	r2, r1
 8000b7a:	0011      	movs	r1, r2
 8000b7c:	2b20      	cmp	r3, #32
 8000b7e:	d003      	beq.n	8000b88 <__aeabi_dadd+0x240>
 8000b80:	2240      	movs	r2, #64	; 0x40
 8000b82:	1ad3      	subs	r3, r2, r3
 8000b84:	409f      	lsls	r7, r3
 8000b86:	433c      	orrs	r4, r7
 8000b88:	1e63      	subs	r3, r4, #1
 8000b8a:	419c      	sbcs	r4, r3
 8000b8c:	2700      	movs	r7, #0
 8000b8e:	2600      	movs	r6, #0
 8000b90:	430c      	orrs	r4, r1
 8000b92:	0763      	lsls	r3, r4, #29
 8000b94:	d000      	beq.n	8000b98 <__aeabi_dadd+0x250>
 8000b96:	e753      	b.n	8000a40 <__aeabi_dadd+0xf8>
 8000b98:	46b4      	mov	ip, r6
 8000b9a:	08e4      	lsrs	r4, r4, #3
 8000b9c:	077b      	lsls	r3, r7, #29
 8000b9e:	4323      	orrs	r3, r4
 8000ba0:	08f8      	lsrs	r0, r7, #3
 8000ba2:	4a43      	ldr	r2, [pc, #268]	; (8000cb0 <__aeabi_dadd+0x368>)
 8000ba4:	4594      	cmp	ip, r2
 8000ba6:	d01d      	beq.n	8000be4 <__aeabi_dadd+0x29c>
 8000ba8:	4662      	mov	r2, ip
 8000baa:	0307      	lsls	r7, r0, #12
 8000bac:	0552      	lsls	r2, r2, #21
 8000bae:	0b3f      	lsrs	r7, r7, #12
 8000bb0:	0d52      	lsrs	r2, r2, #21
 8000bb2:	e760      	b.n	8000a76 <__aeabi_dadd+0x12e>
 8000bb4:	4644      	mov	r4, r8
 8000bb6:	430c      	orrs	r4, r1
 8000bb8:	1e62      	subs	r2, r4, #1
 8000bba:	4194      	sbcs	r4, r2
 8000bbc:	18e4      	adds	r4, r4, r3
 8000bbe:	429c      	cmp	r4, r3
 8000bc0:	419b      	sbcs	r3, r3
 8000bc2:	425f      	negs	r7, r3
 8000bc4:	183f      	adds	r7, r7, r0
 8000bc6:	023b      	lsls	r3, r7, #8
 8000bc8:	d5e3      	bpl.n	8000b92 <__aeabi_dadd+0x24a>
 8000bca:	4b39      	ldr	r3, [pc, #228]	; (8000cb0 <__aeabi_dadd+0x368>)
 8000bcc:	3601      	adds	r6, #1
 8000bce:	429e      	cmp	r6, r3
 8000bd0:	d000      	beq.n	8000bd4 <__aeabi_dadd+0x28c>
 8000bd2:	e0b5      	b.n	8000d40 <__aeabi_dadd+0x3f8>
 8000bd4:	0032      	movs	r2, r6
 8000bd6:	2700      	movs	r7, #0
 8000bd8:	2300      	movs	r3, #0
 8000bda:	e74c      	b.n	8000a76 <__aeabi_dadd+0x12e>
 8000bdc:	0742      	lsls	r2, r0, #29
 8000bde:	08db      	lsrs	r3, r3, #3
 8000be0:	4313      	orrs	r3, r2
 8000be2:	08c0      	lsrs	r0, r0, #3
 8000be4:	001a      	movs	r2, r3
 8000be6:	4302      	orrs	r2, r0
 8000be8:	d100      	bne.n	8000bec <__aeabi_dadd+0x2a4>
 8000bea:	e1e1      	b.n	8000fb0 <__aeabi_dadd+0x668>
 8000bec:	2780      	movs	r7, #128	; 0x80
 8000bee:	033f      	lsls	r7, r7, #12
 8000bf0:	4307      	orrs	r7, r0
 8000bf2:	033f      	lsls	r7, r7, #12
 8000bf4:	4a2e      	ldr	r2, [pc, #184]	; (8000cb0 <__aeabi_dadd+0x368>)
 8000bf6:	0b3f      	lsrs	r7, r7, #12
 8000bf8:	e73d      	b.n	8000a76 <__aeabi_dadd+0x12e>
 8000bfa:	0020      	movs	r0, r4
 8000bfc:	f001 fcd2 	bl	80025a4 <__clzsi2>
 8000c00:	0001      	movs	r1, r0
 8000c02:	3118      	adds	r1, #24
 8000c04:	291f      	cmp	r1, #31
 8000c06:	dc00      	bgt.n	8000c0a <__aeabi_dadd+0x2c2>
 8000c08:	e6fc      	b.n	8000a04 <__aeabi_dadd+0xbc>
 8000c0a:	3808      	subs	r0, #8
 8000c0c:	4084      	lsls	r4, r0
 8000c0e:	0027      	movs	r7, r4
 8000c10:	2400      	movs	r4, #0
 8000c12:	42b1      	cmp	r1, r6
 8000c14:	db00      	blt.n	8000c18 <__aeabi_dadd+0x2d0>
 8000c16:	e6ff      	b.n	8000a18 <__aeabi_dadd+0xd0>
 8000c18:	4a26      	ldr	r2, [pc, #152]	; (8000cb4 <__aeabi_dadd+0x36c>)
 8000c1a:	1a76      	subs	r6, r6, r1
 8000c1c:	4017      	ands	r7, r2
 8000c1e:	e70d      	b.n	8000a3c <__aeabi_dadd+0xf4>
 8000c20:	2a00      	cmp	r2, #0
 8000c22:	d02f      	beq.n	8000c84 <__aeabi_dadd+0x33c>
 8000c24:	464a      	mov	r2, r9
 8000c26:	1b92      	subs	r2, r2, r6
 8000c28:	4694      	mov	ip, r2
 8000c2a:	2e00      	cmp	r6, #0
 8000c2c:	d100      	bne.n	8000c30 <__aeabi_dadd+0x2e8>
 8000c2e:	e0ad      	b.n	8000d8c <__aeabi_dadd+0x444>
 8000c30:	4a1f      	ldr	r2, [pc, #124]	; (8000cb0 <__aeabi_dadd+0x368>)
 8000c32:	4591      	cmp	r9, r2
 8000c34:	d100      	bne.n	8000c38 <__aeabi_dadd+0x2f0>
 8000c36:	e10f      	b.n	8000e58 <__aeabi_dadd+0x510>
 8000c38:	2280      	movs	r2, #128	; 0x80
 8000c3a:	0412      	lsls	r2, r2, #16
 8000c3c:	4310      	orrs	r0, r2
 8000c3e:	4662      	mov	r2, ip
 8000c40:	2a38      	cmp	r2, #56	; 0x38
 8000c42:	dd00      	ble.n	8000c46 <__aeabi_dadd+0x2fe>
 8000c44:	e10f      	b.n	8000e66 <__aeabi_dadd+0x51e>
 8000c46:	2a1f      	cmp	r2, #31
 8000c48:	dd00      	ble.n	8000c4c <__aeabi_dadd+0x304>
 8000c4a:	e180      	b.n	8000f4e <__aeabi_dadd+0x606>
 8000c4c:	4664      	mov	r4, ip
 8000c4e:	2220      	movs	r2, #32
 8000c50:	001e      	movs	r6, r3
 8000c52:	1b12      	subs	r2, r2, r4
 8000c54:	4667      	mov	r7, ip
 8000c56:	0004      	movs	r4, r0
 8000c58:	4093      	lsls	r3, r2
 8000c5a:	4094      	lsls	r4, r2
 8000c5c:	40fe      	lsrs	r6, r7
 8000c5e:	1e5a      	subs	r2, r3, #1
 8000c60:	4193      	sbcs	r3, r2
 8000c62:	40f8      	lsrs	r0, r7
 8000c64:	4334      	orrs	r4, r6
 8000c66:	431c      	orrs	r4, r3
 8000c68:	4480      	add	r8, r0
 8000c6a:	1864      	adds	r4, r4, r1
 8000c6c:	428c      	cmp	r4, r1
 8000c6e:	41bf      	sbcs	r7, r7
 8000c70:	427f      	negs	r7, r7
 8000c72:	464e      	mov	r6, r9
 8000c74:	4447      	add	r7, r8
 8000c76:	e7a6      	b.n	8000bc6 <__aeabi_dadd+0x27e>
 8000c78:	4642      	mov	r2, r8
 8000c7a:	430a      	orrs	r2, r1
 8000c7c:	0011      	movs	r1, r2
 8000c7e:	1e4a      	subs	r2, r1, #1
 8000c80:	4191      	sbcs	r1, r2
 8000c82:	e6ad      	b.n	80009e0 <__aeabi_dadd+0x98>
 8000c84:	4c0c      	ldr	r4, [pc, #48]	; (8000cb8 <__aeabi_dadd+0x370>)
 8000c86:	1c72      	adds	r2, r6, #1
 8000c88:	4222      	tst	r2, r4
 8000c8a:	d000      	beq.n	8000c8e <__aeabi_dadd+0x346>
 8000c8c:	e0a1      	b.n	8000dd2 <__aeabi_dadd+0x48a>
 8000c8e:	0002      	movs	r2, r0
 8000c90:	431a      	orrs	r2, r3
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	d000      	beq.n	8000c98 <__aeabi_dadd+0x350>
 8000c96:	e0fa      	b.n	8000e8e <__aeabi_dadd+0x546>
 8000c98:	2a00      	cmp	r2, #0
 8000c9a:	d100      	bne.n	8000c9e <__aeabi_dadd+0x356>
 8000c9c:	e145      	b.n	8000f2a <__aeabi_dadd+0x5e2>
 8000c9e:	003a      	movs	r2, r7
 8000ca0:	430a      	orrs	r2, r1
 8000ca2:	d000      	beq.n	8000ca6 <__aeabi_dadd+0x35e>
 8000ca4:	e146      	b.n	8000f34 <__aeabi_dadd+0x5ec>
 8000ca6:	0742      	lsls	r2, r0, #29
 8000ca8:	08db      	lsrs	r3, r3, #3
 8000caa:	4313      	orrs	r3, r2
 8000cac:	08c0      	lsrs	r0, r0, #3
 8000cae:	e77b      	b.n	8000ba8 <__aeabi_dadd+0x260>
 8000cb0:	000007ff 	.word	0x000007ff
 8000cb4:	ff7fffff 	.word	0xff7fffff
 8000cb8:	000007fe 	.word	0x000007fe
 8000cbc:	4647      	mov	r7, r8
 8000cbe:	1a5c      	subs	r4, r3, r1
 8000cc0:	1bc2      	subs	r2, r0, r7
 8000cc2:	42a3      	cmp	r3, r4
 8000cc4:	41bf      	sbcs	r7, r7
 8000cc6:	427f      	negs	r7, r7
 8000cc8:	46b9      	mov	r9, r7
 8000cca:	0017      	movs	r7, r2
 8000ccc:	464a      	mov	r2, r9
 8000cce:	1abf      	subs	r7, r7, r2
 8000cd0:	023a      	lsls	r2, r7, #8
 8000cd2:	d500      	bpl.n	8000cd6 <__aeabi_dadd+0x38e>
 8000cd4:	e08d      	b.n	8000df2 <__aeabi_dadd+0x4aa>
 8000cd6:	0023      	movs	r3, r4
 8000cd8:	433b      	orrs	r3, r7
 8000cda:	d000      	beq.n	8000cde <__aeabi_dadd+0x396>
 8000cdc:	e68a      	b.n	80009f4 <__aeabi_dadd+0xac>
 8000cde:	2000      	movs	r0, #0
 8000ce0:	2500      	movs	r5, #0
 8000ce2:	e761      	b.n	8000ba8 <__aeabi_dadd+0x260>
 8000ce4:	4cb4      	ldr	r4, [pc, #720]	; (8000fb8 <__aeabi_dadd+0x670>)
 8000ce6:	45a1      	cmp	r9, r4
 8000ce8:	d100      	bne.n	8000cec <__aeabi_dadd+0x3a4>
 8000cea:	e0ad      	b.n	8000e48 <__aeabi_dadd+0x500>
 8000cec:	2480      	movs	r4, #128	; 0x80
 8000cee:	0424      	lsls	r4, r4, #16
 8000cf0:	4320      	orrs	r0, r4
 8000cf2:	4664      	mov	r4, ip
 8000cf4:	2c38      	cmp	r4, #56	; 0x38
 8000cf6:	dc3d      	bgt.n	8000d74 <__aeabi_dadd+0x42c>
 8000cf8:	4662      	mov	r2, ip
 8000cfa:	2c1f      	cmp	r4, #31
 8000cfc:	dd00      	ble.n	8000d00 <__aeabi_dadd+0x3b8>
 8000cfe:	e0b7      	b.n	8000e70 <__aeabi_dadd+0x528>
 8000d00:	2520      	movs	r5, #32
 8000d02:	001e      	movs	r6, r3
 8000d04:	1b2d      	subs	r5, r5, r4
 8000d06:	0004      	movs	r4, r0
 8000d08:	40ab      	lsls	r3, r5
 8000d0a:	40ac      	lsls	r4, r5
 8000d0c:	40d6      	lsrs	r6, r2
 8000d0e:	40d0      	lsrs	r0, r2
 8000d10:	4642      	mov	r2, r8
 8000d12:	1e5d      	subs	r5, r3, #1
 8000d14:	41ab      	sbcs	r3, r5
 8000d16:	4334      	orrs	r4, r6
 8000d18:	1a12      	subs	r2, r2, r0
 8000d1a:	4690      	mov	r8, r2
 8000d1c:	4323      	orrs	r3, r4
 8000d1e:	e02c      	b.n	8000d7a <__aeabi_dadd+0x432>
 8000d20:	0742      	lsls	r2, r0, #29
 8000d22:	08db      	lsrs	r3, r3, #3
 8000d24:	4313      	orrs	r3, r2
 8000d26:	08c0      	lsrs	r0, r0, #3
 8000d28:	e73b      	b.n	8000ba2 <__aeabi_dadd+0x25a>
 8000d2a:	185c      	adds	r4, r3, r1
 8000d2c:	429c      	cmp	r4, r3
 8000d2e:	419b      	sbcs	r3, r3
 8000d30:	4440      	add	r0, r8
 8000d32:	425b      	negs	r3, r3
 8000d34:	18c7      	adds	r7, r0, r3
 8000d36:	2601      	movs	r6, #1
 8000d38:	023b      	lsls	r3, r7, #8
 8000d3a:	d400      	bmi.n	8000d3e <__aeabi_dadd+0x3f6>
 8000d3c:	e729      	b.n	8000b92 <__aeabi_dadd+0x24a>
 8000d3e:	2602      	movs	r6, #2
 8000d40:	4a9e      	ldr	r2, [pc, #632]	; (8000fbc <__aeabi_dadd+0x674>)
 8000d42:	0863      	lsrs	r3, r4, #1
 8000d44:	4017      	ands	r7, r2
 8000d46:	2201      	movs	r2, #1
 8000d48:	4014      	ands	r4, r2
 8000d4a:	431c      	orrs	r4, r3
 8000d4c:	07fb      	lsls	r3, r7, #31
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	087f      	lsrs	r7, r7, #1
 8000d52:	e673      	b.n	8000a3c <__aeabi_dadd+0xf4>
 8000d54:	4644      	mov	r4, r8
 8000d56:	3a20      	subs	r2, #32
 8000d58:	40d4      	lsrs	r4, r2
 8000d5a:	4662      	mov	r2, ip
 8000d5c:	2a20      	cmp	r2, #32
 8000d5e:	d005      	beq.n	8000d6c <__aeabi_dadd+0x424>
 8000d60:	4667      	mov	r7, ip
 8000d62:	2240      	movs	r2, #64	; 0x40
 8000d64:	1bd2      	subs	r2, r2, r7
 8000d66:	4647      	mov	r7, r8
 8000d68:	4097      	lsls	r7, r2
 8000d6a:	4339      	orrs	r1, r7
 8000d6c:	1e4a      	subs	r2, r1, #1
 8000d6e:	4191      	sbcs	r1, r2
 8000d70:	4321      	orrs	r1, r4
 8000d72:	e635      	b.n	80009e0 <__aeabi_dadd+0x98>
 8000d74:	4303      	orrs	r3, r0
 8000d76:	1e58      	subs	r0, r3, #1
 8000d78:	4183      	sbcs	r3, r0
 8000d7a:	1acc      	subs	r4, r1, r3
 8000d7c:	42a1      	cmp	r1, r4
 8000d7e:	41bf      	sbcs	r7, r7
 8000d80:	4643      	mov	r3, r8
 8000d82:	427f      	negs	r7, r7
 8000d84:	4655      	mov	r5, sl
 8000d86:	464e      	mov	r6, r9
 8000d88:	1bdf      	subs	r7, r3, r7
 8000d8a:	e62e      	b.n	80009ea <__aeabi_dadd+0xa2>
 8000d8c:	0002      	movs	r2, r0
 8000d8e:	431a      	orrs	r2, r3
 8000d90:	d100      	bne.n	8000d94 <__aeabi_dadd+0x44c>
 8000d92:	e0bd      	b.n	8000f10 <__aeabi_dadd+0x5c8>
 8000d94:	4662      	mov	r2, ip
 8000d96:	4664      	mov	r4, ip
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	2c01      	cmp	r4, #1
 8000d9c:	d100      	bne.n	8000da0 <__aeabi_dadd+0x458>
 8000d9e:	e0e5      	b.n	8000f6c <__aeabi_dadd+0x624>
 8000da0:	4c85      	ldr	r4, [pc, #532]	; (8000fb8 <__aeabi_dadd+0x670>)
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d058      	beq.n	8000e58 <__aeabi_dadd+0x510>
 8000da6:	4694      	mov	ip, r2
 8000da8:	e749      	b.n	8000c3e <__aeabi_dadd+0x2f6>
 8000daa:	4664      	mov	r4, ip
 8000dac:	2220      	movs	r2, #32
 8000dae:	1b12      	subs	r2, r2, r4
 8000db0:	4644      	mov	r4, r8
 8000db2:	4094      	lsls	r4, r2
 8000db4:	000f      	movs	r7, r1
 8000db6:	46a1      	mov	r9, r4
 8000db8:	4664      	mov	r4, ip
 8000dba:	4091      	lsls	r1, r2
 8000dbc:	40e7      	lsrs	r7, r4
 8000dbe:	464c      	mov	r4, r9
 8000dc0:	1e4a      	subs	r2, r1, #1
 8000dc2:	4191      	sbcs	r1, r2
 8000dc4:	433c      	orrs	r4, r7
 8000dc6:	4642      	mov	r2, r8
 8000dc8:	430c      	orrs	r4, r1
 8000dca:	4661      	mov	r1, ip
 8000dcc:	40ca      	lsrs	r2, r1
 8000dce:	1880      	adds	r0, r0, r2
 8000dd0:	e6f4      	b.n	8000bbc <__aeabi_dadd+0x274>
 8000dd2:	4c79      	ldr	r4, [pc, #484]	; (8000fb8 <__aeabi_dadd+0x670>)
 8000dd4:	42a2      	cmp	r2, r4
 8000dd6:	d100      	bne.n	8000dda <__aeabi_dadd+0x492>
 8000dd8:	e6fd      	b.n	8000bd6 <__aeabi_dadd+0x28e>
 8000dda:	1859      	adds	r1, r3, r1
 8000ddc:	4299      	cmp	r1, r3
 8000dde:	419b      	sbcs	r3, r3
 8000de0:	4440      	add	r0, r8
 8000de2:	425f      	negs	r7, r3
 8000de4:	19c7      	adds	r7, r0, r7
 8000de6:	07fc      	lsls	r4, r7, #31
 8000de8:	0849      	lsrs	r1, r1, #1
 8000dea:	0016      	movs	r6, r2
 8000dec:	430c      	orrs	r4, r1
 8000dee:	087f      	lsrs	r7, r7, #1
 8000df0:	e6cf      	b.n	8000b92 <__aeabi_dadd+0x24a>
 8000df2:	1acc      	subs	r4, r1, r3
 8000df4:	42a1      	cmp	r1, r4
 8000df6:	41bf      	sbcs	r7, r7
 8000df8:	4643      	mov	r3, r8
 8000dfa:	427f      	negs	r7, r7
 8000dfc:	1a18      	subs	r0, r3, r0
 8000dfe:	4655      	mov	r5, sl
 8000e00:	1bc7      	subs	r7, r0, r7
 8000e02:	e5f7      	b.n	80009f4 <__aeabi_dadd+0xac>
 8000e04:	08c9      	lsrs	r1, r1, #3
 8000e06:	077b      	lsls	r3, r7, #29
 8000e08:	4655      	mov	r5, sl
 8000e0a:	430b      	orrs	r3, r1
 8000e0c:	08f8      	lsrs	r0, r7, #3
 8000e0e:	e6c8      	b.n	8000ba2 <__aeabi_dadd+0x25a>
 8000e10:	2c00      	cmp	r4, #0
 8000e12:	d000      	beq.n	8000e16 <__aeabi_dadd+0x4ce>
 8000e14:	e081      	b.n	8000f1a <__aeabi_dadd+0x5d2>
 8000e16:	4643      	mov	r3, r8
 8000e18:	430b      	orrs	r3, r1
 8000e1a:	d115      	bne.n	8000e48 <__aeabi_dadd+0x500>
 8000e1c:	2080      	movs	r0, #128	; 0x80
 8000e1e:	2500      	movs	r5, #0
 8000e20:	0300      	lsls	r0, r0, #12
 8000e22:	e6e3      	b.n	8000bec <__aeabi_dadd+0x2a4>
 8000e24:	1a5c      	subs	r4, r3, r1
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	419b      	sbcs	r3, r3
 8000e2a:	1bc7      	subs	r7, r0, r7
 8000e2c:	425b      	negs	r3, r3
 8000e2e:	2601      	movs	r6, #1
 8000e30:	1aff      	subs	r7, r7, r3
 8000e32:	e5da      	b.n	80009ea <__aeabi_dadd+0xa2>
 8000e34:	0742      	lsls	r2, r0, #29
 8000e36:	08db      	lsrs	r3, r3, #3
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	08c0      	lsrs	r0, r0, #3
 8000e3c:	e6d2      	b.n	8000be4 <__aeabi_dadd+0x29c>
 8000e3e:	0742      	lsls	r2, r0, #29
 8000e40:	08db      	lsrs	r3, r3, #3
 8000e42:	4313      	orrs	r3, r2
 8000e44:	08c0      	lsrs	r0, r0, #3
 8000e46:	e6ac      	b.n	8000ba2 <__aeabi_dadd+0x25a>
 8000e48:	4643      	mov	r3, r8
 8000e4a:	4642      	mov	r2, r8
 8000e4c:	08c9      	lsrs	r1, r1, #3
 8000e4e:	075b      	lsls	r3, r3, #29
 8000e50:	4655      	mov	r5, sl
 8000e52:	430b      	orrs	r3, r1
 8000e54:	08d0      	lsrs	r0, r2, #3
 8000e56:	e6c5      	b.n	8000be4 <__aeabi_dadd+0x29c>
 8000e58:	4643      	mov	r3, r8
 8000e5a:	4642      	mov	r2, r8
 8000e5c:	075b      	lsls	r3, r3, #29
 8000e5e:	08c9      	lsrs	r1, r1, #3
 8000e60:	430b      	orrs	r3, r1
 8000e62:	08d0      	lsrs	r0, r2, #3
 8000e64:	e6be      	b.n	8000be4 <__aeabi_dadd+0x29c>
 8000e66:	4303      	orrs	r3, r0
 8000e68:	001c      	movs	r4, r3
 8000e6a:	1e63      	subs	r3, r4, #1
 8000e6c:	419c      	sbcs	r4, r3
 8000e6e:	e6fc      	b.n	8000c6a <__aeabi_dadd+0x322>
 8000e70:	0002      	movs	r2, r0
 8000e72:	3c20      	subs	r4, #32
 8000e74:	40e2      	lsrs	r2, r4
 8000e76:	0014      	movs	r4, r2
 8000e78:	4662      	mov	r2, ip
 8000e7a:	2a20      	cmp	r2, #32
 8000e7c:	d003      	beq.n	8000e86 <__aeabi_dadd+0x53e>
 8000e7e:	2540      	movs	r5, #64	; 0x40
 8000e80:	1aad      	subs	r5, r5, r2
 8000e82:	40a8      	lsls	r0, r5
 8000e84:	4303      	orrs	r3, r0
 8000e86:	1e58      	subs	r0, r3, #1
 8000e88:	4183      	sbcs	r3, r0
 8000e8a:	4323      	orrs	r3, r4
 8000e8c:	e775      	b.n	8000d7a <__aeabi_dadd+0x432>
 8000e8e:	2a00      	cmp	r2, #0
 8000e90:	d0e2      	beq.n	8000e58 <__aeabi_dadd+0x510>
 8000e92:	003a      	movs	r2, r7
 8000e94:	430a      	orrs	r2, r1
 8000e96:	d0cd      	beq.n	8000e34 <__aeabi_dadd+0x4ec>
 8000e98:	0742      	lsls	r2, r0, #29
 8000e9a:	08db      	lsrs	r3, r3, #3
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	2280      	movs	r2, #128	; 0x80
 8000ea0:	08c0      	lsrs	r0, r0, #3
 8000ea2:	0312      	lsls	r2, r2, #12
 8000ea4:	4210      	tst	r0, r2
 8000ea6:	d006      	beq.n	8000eb6 <__aeabi_dadd+0x56e>
 8000ea8:	08fc      	lsrs	r4, r7, #3
 8000eaa:	4214      	tst	r4, r2
 8000eac:	d103      	bne.n	8000eb6 <__aeabi_dadd+0x56e>
 8000eae:	0020      	movs	r0, r4
 8000eb0:	08cb      	lsrs	r3, r1, #3
 8000eb2:	077a      	lsls	r2, r7, #29
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	0f5a      	lsrs	r2, r3, #29
 8000eb8:	00db      	lsls	r3, r3, #3
 8000eba:	0752      	lsls	r2, r2, #29
 8000ebc:	08db      	lsrs	r3, r3, #3
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	e690      	b.n	8000be4 <__aeabi_dadd+0x29c>
 8000ec2:	4643      	mov	r3, r8
 8000ec4:	430b      	orrs	r3, r1
 8000ec6:	d100      	bne.n	8000eca <__aeabi_dadd+0x582>
 8000ec8:	e709      	b.n	8000cde <__aeabi_dadd+0x396>
 8000eca:	4643      	mov	r3, r8
 8000ecc:	4642      	mov	r2, r8
 8000ece:	08c9      	lsrs	r1, r1, #3
 8000ed0:	075b      	lsls	r3, r3, #29
 8000ed2:	4655      	mov	r5, sl
 8000ed4:	430b      	orrs	r3, r1
 8000ed6:	08d0      	lsrs	r0, r2, #3
 8000ed8:	e666      	b.n	8000ba8 <__aeabi_dadd+0x260>
 8000eda:	1acc      	subs	r4, r1, r3
 8000edc:	42a1      	cmp	r1, r4
 8000ede:	4189      	sbcs	r1, r1
 8000ee0:	1a3f      	subs	r7, r7, r0
 8000ee2:	4249      	negs	r1, r1
 8000ee4:	4655      	mov	r5, sl
 8000ee6:	2601      	movs	r6, #1
 8000ee8:	1a7f      	subs	r7, r7, r1
 8000eea:	e57e      	b.n	80009ea <__aeabi_dadd+0xa2>
 8000eec:	4642      	mov	r2, r8
 8000eee:	1a5c      	subs	r4, r3, r1
 8000ef0:	1a87      	subs	r7, r0, r2
 8000ef2:	42a3      	cmp	r3, r4
 8000ef4:	4192      	sbcs	r2, r2
 8000ef6:	4252      	negs	r2, r2
 8000ef8:	1abf      	subs	r7, r7, r2
 8000efa:	023a      	lsls	r2, r7, #8
 8000efc:	d53d      	bpl.n	8000f7a <__aeabi_dadd+0x632>
 8000efe:	1acc      	subs	r4, r1, r3
 8000f00:	42a1      	cmp	r1, r4
 8000f02:	4189      	sbcs	r1, r1
 8000f04:	4643      	mov	r3, r8
 8000f06:	4249      	negs	r1, r1
 8000f08:	1a1f      	subs	r7, r3, r0
 8000f0a:	4655      	mov	r5, sl
 8000f0c:	1a7f      	subs	r7, r7, r1
 8000f0e:	e595      	b.n	8000a3c <__aeabi_dadd+0xf4>
 8000f10:	077b      	lsls	r3, r7, #29
 8000f12:	08c9      	lsrs	r1, r1, #3
 8000f14:	430b      	orrs	r3, r1
 8000f16:	08f8      	lsrs	r0, r7, #3
 8000f18:	e643      	b.n	8000ba2 <__aeabi_dadd+0x25a>
 8000f1a:	4644      	mov	r4, r8
 8000f1c:	08db      	lsrs	r3, r3, #3
 8000f1e:	430c      	orrs	r4, r1
 8000f20:	d130      	bne.n	8000f84 <__aeabi_dadd+0x63c>
 8000f22:	0742      	lsls	r2, r0, #29
 8000f24:	4313      	orrs	r3, r2
 8000f26:	08c0      	lsrs	r0, r0, #3
 8000f28:	e65c      	b.n	8000be4 <__aeabi_dadd+0x29c>
 8000f2a:	077b      	lsls	r3, r7, #29
 8000f2c:	08c9      	lsrs	r1, r1, #3
 8000f2e:	430b      	orrs	r3, r1
 8000f30:	08f8      	lsrs	r0, r7, #3
 8000f32:	e639      	b.n	8000ba8 <__aeabi_dadd+0x260>
 8000f34:	185c      	adds	r4, r3, r1
 8000f36:	429c      	cmp	r4, r3
 8000f38:	419b      	sbcs	r3, r3
 8000f3a:	4440      	add	r0, r8
 8000f3c:	425b      	negs	r3, r3
 8000f3e:	18c7      	adds	r7, r0, r3
 8000f40:	023b      	lsls	r3, r7, #8
 8000f42:	d400      	bmi.n	8000f46 <__aeabi_dadd+0x5fe>
 8000f44:	e625      	b.n	8000b92 <__aeabi_dadd+0x24a>
 8000f46:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <__aeabi_dadd+0x674>)
 8000f48:	2601      	movs	r6, #1
 8000f4a:	401f      	ands	r7, r3
 8000f4c:	e621      	b.n	8000b92 <__aeabi_dadd+0x24a>
 8000f4e:	0004      	movs	r4, r0
 8000f50:	3a20      	subs	r2, #32
 8000f52:	40d4      	lsrs	r4, r2
 8000f54:	4662      	mov	r2, ip
 8000f56:	2a20      	cmp	r2, #32
 8000f58:	d004      	beq.n	8000f64 <__aeabi_dadd+0x61c>
 8000f5a:	2240      	movs	r2, #64	; 0x40
 8000f5c:	4666      	mov	r6, ip
 8000f5e:	1b92      	subs	r2, r2, r6
 8000f60:	4090      	lsls	r0, r2
 8000f62:	4303      	orrs	r3, r0
 8000f64:	1e5a      	subs	r2, r3, #1
 8000f66:	4193      	sbcs	r3, r2
 8000f68:	431c      	orrs	r4, r3
 8000f6a:	e67e      	b.n	8000c6a <__aeabi_dadd+0x322>
 8000f6c:	185c      	adds	r4, r3, r1
 8000f6e:	428c      	cmp	r4, r1
 8000f70:	4189      	sbcs	r1, r1
 8000f72:	4440      	add	r0, r8
 8000f74:	4249      	negs	r1, r1
 8000f76:	1847      	adds	r7, r0, r1
 8000f78:	e6dd      	b.n	8000d36 <__aeabi_dadd+0x3ee>
 8000f7a:	0023      	movs	r3, r4
 8000f7c:	433b      	orrs	r3, r7
 8000f7e:	d100      	bne.n	8000f82 <__aeabi_dadd+0x63a>
 8000f80:	e6ad      	b.n	8000cde <__aeabi_dadd+0x396>
 8000f82:	e606      	b.n	8000b92 <__aeabi_dadd+0x24a>
 8000f84:	0744      	lsls	r4, r0, #29
 8000f86:	4323      	orrs	r3, r4
 8000f88:	2480      	movs	r4, #128	; 0x80
 8000f8a:	08c0      	lsrs	r0, r0, #3
 8000f8c:	0324      	lsls	r4, r4, #12
 8000f8e:	4220      	tst	r0, r4
 8000f90:	d008      	beq.n	8000fa4 <__aeabi_dadd+0x65c>
 8000f92:	4642      	mov	r2, r8
 8000f94:	08d6      	lsrs	r6, r2, #3
 8000f96:	4226      	tst	r6, r4
 8000f98:	d104      	bne.n	8000fa4 <__aeabi_dadd+0x65c>
 8000f9a:	4655      	mov	r5, sl
 8000f9c:	0030      	movs	r0, r6
 8000f9e:	08cb      	lsrs	r3, r1, #3
 8000fa0:	0751      	lsls	r1, r2, #29
 8000fa2:	430b      	orrs	r3, r1
 8000fa4:	0f5a      	lsrs	r2, r3, #29
 8000fa6:	00db      	lsls	r3, r3, #3
 8000fa8:	08db      	lsrs	r3, r3, #3
 8000faa:	0752      	lsls	r2, r2, #29
 8000fac:	4313      	orrs	r3, r2
 8000fae:	e619      	b.n	8000be4 <__aeabi_dadd+0x29c>
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	4a01      	ldr	r2, [pc, #4]	; (8000fb8 <__aeabi_dadd+0x670>)
 8000fb4:	001f      	movs	r7, r3
 8000fb6:	e55e      	b.n	8000a76 <__aeabi_dadd+0x12e>
 8000fb8:	000007ff 	.word	0x000007ff
 8000fbc:	ff7fffff 	.word	0xff7fffff

08000fc0 <__aeabi_ddiv>:
 8000fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fc2:	4657      	mov	r7, sl
 8000fc4:	464e      	mov	r6, r9
 8000fc6:	4645      	mov	r5, r8
 8000fc8:	46de      	mov	lr, fp
 8000fca:	b5e0      	push	{r5, r6, r7, lr}
 8000fcc:	4681      	mov	r9, r0
 8000fce:	0005      	movs	r5, r0
 8000fd0:	030c      	lsls	r4, r1, #12
 8000fd2:	0048      	lsls	r0, r1, #1
 8000fd4:	4692      	mov	sl, r2
 8000fd6:	001f      	movs	r7, r3
 8000fd8:	b085      	sub	sp, #20
 8000fda:	0b24      	lsrs	r4, r4, #12
 8000fdc:	0d40      	lsrs	r0, r0, #21
 8000fde:	0fce      	lsrs	r6, r1, #31
 8000fe0:	2800      	cmp	r0, #0
 8000fe2:	d100      	bne.n	8000fe6 <__aeabi_ddiv+0x26>
 8000fe4:	e156      	b.n	8001294 <__aeabi_ddiv+0x2d4>
 8000fe6:	4bd4      	ldr	r3, [pc, #848]	; (8001338 <__aeabi_ddiv+0x378>)
 8000fe8:	4298      	cmp	r0, r3
 8000fea:	d100      	bne.n	8000fee <__aeabi_ddiv+0x2e>
 8000fec:	e172      	b.n	80012d4 <__aeabi_ddiv+0x314>
 8000fee:	0f6b      	lsrs	r3, r5, #29
 8000ff0:	00e4      	lsls	r4, r4, #3
 8000ff2:	431c      	orrs	r4, r3
 8000ff4:	2380      	movs	r3, #128	; 0x80
 8000ff6:	041b      	lsls	r3, r3, #16
 8000ff8:	4323      	orrs	r3, r4
 8000ffa:	4698      	mov	r8, r3
 8000ffc:	4bcf      	ldr	r3, [pc, #828]	; (800133c <__aeabi_ddiv+0x37c>)
 8000ffe:	00ed      	lsls	r5, r5, #3
 8001000:	469b      	mov	fp, r3
 8001002:	2300      	movs	r3, #0
 8001004:	4699      	mov	r9, r3
 8001006:	4483      	add	fp, r0
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	033c      	lsls	r4, r7, #12
 800100c:	007b      	lsls	r3, r7, #1
 800100e:	4650      	mov	r0, sl
 8001010:	0b24      	lsrs	r4, r4, #12
 8001012:	0d5b      	lsrs	r3, r3, #21
 8001014:	0fff      	lsrs	r7, r7, #31
 8001016:	2b00      	cmp	r3, #0
 8001018:	d100      	bne.n	800101c <__aeabi_ddiv+0x5c>
 800101a:	e11f      	b.n	800125c <__aeabi_ddiv+0x29c>
 800101c:	4ac6      	ldr	r2, [pc, #792]	; (8001338 <__aeabi_ddiv+0x378>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d100      	bne.n	8001024 <__aeabi_ddiv+0x64>
 8001022:	e162      	b.n	80012ea <__aeabi_ddiv+0x32a>
 8001024:	49c5      	ldr	r1, [pc, #788]	; (800133c <__aeabi_ddiv+0x37c>)
 8001026:	0f42      	lsrs	r2, r0, #29
 8001028:	468c      	mov	ip, r1
 800102a:	00e4      	lsls	r4, r4, #3
 800102c:	4659      	mov	r1, fp
 800102e:	4314      	orrs	r4, r2
 8001030:	2280      	movs	r2, #128	; 0x80
 8001032:	4463      	add	r3, ip
 8001034:	0412      	lsls	r2, r2, #16
 8001036:	1acb      	subs	r3, r1, r3
 8001038:	4314      	orrs	r4, r2
 800103a:	469b      	mov	fp, r3
 800103c:	00c2      	lsls	r2, r0, #3
 800103e:	2000      	movs	r0, #0
 8001040:	0033      	movs	r3, r6
 8001042:	407b      	eors	r3, r7
 8001044:	469a      	mov	sl, r3
 8001046:	464b      	mov	r3, r9
 8001048:	2b0f      	cmp	r3, #15
 800104a:	d827      	bhi.n	800109c <__aeabi_ddiv+0xdc>
 800104c:	49bc      	ldr	r1, [pc, #752]	; (8001340 <__aeabi_ddiv+0x380>)
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	58cb      	ldr	r3, [r1, r3]
 8001052:	469f      	mov	pc, r3
 8001054:	46b2      	mov	sl, r6
 8001056:	9b00      	ldr	r3, [sp, #0]
 8001058:	2b02      	cmp	r3, #2
 800105a:	d016      	beq.n	800108a <__aeabi_ddiv+0xca>
 800105c:	2b03      	cmp	r3, #3
 800105e:	d100      	bne.n	8001062 <__aeabi_ddiv+0xa2>
 8001060:	e28e      	b.n	8001580 <__aeabi_ddiv+0x5c0>
 8001062:	2b01      	cmp	r3, #1
 8001064:	d000      	beq.n	8001068 <__aeabi_ddiv+0xa8>
 8001066:	e0d9      	b.n	800121c <__aeabi_ddiv+0x25c>
 8001068:	2300      	movs	r3, #0
 800106a:	2400      	movs	r4, #0
 800106c:	2500      	movs	r5, #0
 800106e:	4652      	mov	r2, sl
 8001070:	051b      	lsls	r3, r3, #20
 8001072:	4323      	orrs	r3, r4
 8001074:	07d2      	lsls	r2, r2, #31
 8001076:	4313      	orrs	r3, r2
 8001078:	0028      	movs	r0, r5
 800107a:	0019      	movs	r1, r3
 800107c:	b005      	add	sp, #20
 800107e:	bcf0      	pop	{r4, r5, r6, r7}
 8001080:	46bb      	mov	fp, r7
 8001082:	46b2      	mov	sl, r6
 8001084:	46a9      	mov	r9, r5
 8001086:	46a0      	mov	r8, r4
 8001088:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800108a:	2400      	movs	r4, #0
 800108c:	2500      	movs	r5, #0
 800108e:	4baa      	ldr	r3, [pc, #680]	; (8001338 <__aeabi_ddiv+0x378>)
 8001090:	e7ed      	b.n	800106e <__aeabi_ddiv+0xae>
 8001092:	46ba      	mov	sl, r7
 8001094:	46a0      	mov	r8, r4
 8001096:	0015      	movs	r5, r2
 8001098:	9000      	str	r0, [sp, #0]
 800109a:	e7dc      	b.n	8001056 <__aeabi_ddiv+0x96>
 800109c:	4544      	cmp	r4, r8
 800109e:	d200      	bcs.n	80010a2 <__aeabi_ddiv+0xe2>
 80010a0:	e1c7      	b.n	8001432 <__aeabi_ddiv+0x472>
 80010a2:	d100      	bne.n	80010a6 <__aeabi_ddiv+0xe6>
 80010a4:	e1c2      	b.n	800142c <__aeabi_ddiv+0x46c>
 80010a6:	2301      	movs	r3, #1
 80010a8:	425b      	negs	r3, r3
 80010aa:	469c      	mov	ip, r3
 80010ac:	002e      	movs	r6, r5
 80010ae:	4640      	mov	r0, r8
 80010b0:	2500      	movs	r5, #0
 80010b2:	44e3      	add	fp, ip
 80010b4:	0223      	lsls	r3, r4, #8
 80010b6:	0e14      	lsrs	r4, r2, #24
 80010b8:	431c      	orrs	r4, r3
 80010ba:	0c1b      	lsrs	r3, r3, #16
 80010bc:	4699      	mov	r9, r3
 80010be:	0423      	lsls	r3, r4, #16
 80010c0:	0c1f      	lsrs	r7, r3, #16
 80010c2:	0212      	lsls	r2, r2, #8
 80010c4:	4649      	mov	r1, r9
 80010c6:	9200      	str	r2, [sp, #0]
 80010c8:	9701      	str	r7, [sp, #4]
 80010ca:	f7ff f8bd 	bl	8000248 <__aeabi_uidivmod>
 80010ce:	0002      	movs	r2, r0
 80010d0:	437a      	muls	r2, r7
 80010d2:	040b      	lsls	r3, r1, #16
 80010d4:	0c31      	lsrs	r1, r6, #16
 80010d6:	4680      	mov	r8, r0
 80010d8:	4319      	orrs	r1, r3
 80010da:	428a      	cmp	r2, r1
 80010dc:	d907      	bls.n	80010ee <__aeabi_ddiv+0x12e>
 80010de:	2301      	movs	r3, #1
 80010e0:	425b      	negs	r3, r3
 80010e2:	469c      	mov	ip, r3
 80010e4:	1909      	adds	r1, r1, r4
 80010e6:	44e0      	add	r8, ip
 80010e8:	428c      	cmp	r4, r1
 80010ea:	d800      	bhi.n	80010ee <__aeabi_ddiv+0x12e>
 80010ec:	e207      	b.n	80014fe <__aeabi_ddiv+0x53e>
 80010ee:	1a88      	subs	r0, r1, r2
 80010f0:	4649      	mov	r1, r9
 80010f2:	f7ff f8a9 	bl	8000248 <__aeabi_uidivmod>
 80010f6:	0409      	lsls	r1, r1, #16
 80010f8:	468c      	mov	ip, r1
 80010fa:	0431      	lsls	r1, r6, #16
 80010fc:	4666      	mov	r6, ip
 80010fe:	9a01      	ldr	r2, [sp, #4]
 8001100:	0c09      	lsrs	r1, r1, #16
 8001102:	4342      	muls	r2, r0
 8001104:	0003      	movs	r3, r0
 8001106:	4331      	orrs	r1, r6
 8001108:	428a      	cmp	r2, r1
 800110a:	d904      	bls.n	8001116 <__aeabi_ddiv+0x156>
 800110c:	1909      	adds	r1, r1, r4
 800110e:	3b01      	subs	r3, #1
 8001110:	428c      	cmp	r4, r1
 8001112:	d800      	bhi.n	8001116 <__aeabi_ddiv+0x156>
 8001114:	e1ed      	b.n	80014f2 <__aeabi_ddiv+0x532>
 8001116:	1a88      	subs	r0, r1, r2
 8001118:	4642      	mov	r2, r8
 800111a:	0412      	lsls	r2, r2, #16
 800111c:	431a      	orrs	r2, r3
 800111e:	4690      	mov	r8, r2
 8001120:	4641      	mov	r1, r8
 8001122:	9b00      	ldr	r3, [sp, #0]
 8001124:	040e      	lsls	r6, r1, #16
 8001126:	0c1b      	lsrs	r3, r3, #16
 8001128:	001f      	movs	r7, r3
 800112a:	9302      	str	r3, [sp, #8]
 800112c:	9b00      	ldr	r3, [sp, #0]
 800112e:	0c36      	lsrs	r6, r6, #16
 8001130:	041b      	lsls	r3, r3, #16
 8001132:	0c19      	lsrs	r1, r3, #16
 8001134:	000b      	movs	r3, r1
 8001136:	4373      	muls	r3, r6
 8001138:	0c12      	lsrs	r2, r2, #16
 800113a:	437e      	muls	r6, r7
 800113c:	9103      	str	r1, [sp, #12]
 800113e:	4351      	muls	r1, r2
 8001140:	437a      	muls	r2, r7
 8001142:	0c1f      	lsrs	r7, r3, #16
 8001144:	46bc      	mov	ip, r7
 8001146:	1876      	adds	r6, r6, r1
 8001148:	4466      	add	r6, ip
 800114a:	42b1      	cmp	r1, r6
 800114c:	d903      	bls.n	8001156 <__aeabi_ddiv+0x196>
 800114e:	2180      	movs	r1, #128	; 0x80
 8001150:	0249      	lsls	r1, r1, #9
 8001152:	468c      	mov	ip, r1
 8001154:	4462      	add	r2, ip
 8001156:	0c31      	lsrs	r1, r6, #16
 8001158:	188a      	adds	r2, r1, r2
 800115a:	0431      	lsls	r1, r6, #16
 800115c:	041e      	lsls	r6, r3, #16
 800115e:	0c36      	lsrs	r6, r6, #16
 8001160:	198e      	adds	r6, r1, r6
 8001162:	4290      	cmp	r0, r2
 8001164:	d302      	bcc.n	800116c <__aeabi_ddiv+0x1ac>
 8001166:	d112      	bne.n	800118e <__aeabi_ddiv+0x1ce>
 8001168:	42b5      	cmp	r5, r6
 800116a:	d210      	bcs.n	800118e <__aeabi_ddiv+0x1ce>
 800116c:	4643      	mov	r3, r8
 800116e:	1e59      	subs	r1, r3, #1
 8001170:	9b00      	ldr	r3, [sp, #0]
 8001172:	469c      	mov	ip, r3
 8001174:	4465      	add	r5, ip
 8001176:	001f      	movs	r7, r3
 8001178:	429d      	cmp	r5, r3
 800117a:	419b      	sbcs	r3, r3
 800117c:	425b      	negs	r3, r3
 800117e:	191b      	adds	r3, r3, r4
 8001180:	18c0      	adds	r0, r0, r3
 8001182:	4284      	cmp	r4, r0
 8001184:	d200      	bcs.n	8001188 <__aeabi_ddiv+0x1c8>
 8001186:	e1a0      	b.n	80014ca <__aeabi_ddiv+0x50a>
 8001188:	d100      	bne.n	800118c <__aeabi_ddiv+0x1cc>
 800118a:	e19b      	b.n	80014c4 <__aeabi_ddiv+0x504>
 800118c:	4688      	mov	r8, r1
 800118e:	1bae      	subs	r6, r5, r6
 8001190:	42b5      	cmp	r5, r6
 8001192:	41ad      	sbcs	r5, r5
 8001194:	1a80      	subs	r0, r0, r2
 8001196:	426d      	negs	r5, r5
 8001198:	1b40      	subs	r0, r0, r5
 800119a:	4284      	cmp	r4, r0
 800119c:	d100      	bne.n	80011a0 <__aeabi_ddiv+0x1e0>
 800119e:	e1d5      	b.n	800154c <__aeabi_ddiv+0x58c>
 80011a0:	4649      	mov	r1, r9
 80011a2:	f7ff f851 	bl	8000248 <__aeabi_uidivmod>
 80011a6:	9a01      	ldr	r2, [sp, #4]
 80011a8:	040b      	lsls	r3, r1, #16
 80011aa:	4342      	muls	r2, r0
 80011ac:	0c31      	lsrs	r1, r6, #16
 80011ae:	0005      	movs	r5, r0
 80011b0:	4319      	orrs	r1, r3
 80011b2:	428a      	cmp	r2, r1
 80011b4:	d900      	bls.n	80011b8 <__aeabi_ddiv+0x1f8>
 80011b6:	e16c      	b.n	8001492 <__aeabi_ddiv+0x4d2>
 80011b8:	1a88      	subs	r0, r1, r2
 80011ba:	4649      	mov	r1, r9
 80011bc:	f7ff f844 	bl	8000248 <__aeabi_uidivmod>
 80011c0:	9a01      	ldr	r2, [sp, #4]
 80011c2:	0436      	lsls	r6, r6, #16
 80011c4:	4342      	muls	r2, r0
 80011c6:	0409      	lsls	r1, r1, #16
 80011c8:	0c36      	lsrs	r6, r6, #16
 80011ca:	0003      	movs	r3, r0
 80011cc:	430e      	orrs	r6, r1
 80011ce:	42b2      	cmp	r2, r6
 80011d0:	d900      	bls.n	80011d4 <__aeabi_ddiv+0x214>
 80011d2:	e153      	b.n	800147c <__aeabi_ddiv+0x4bc>
 80011d4:	9803      	ldr	r0, [sp, #12]
 80011d6:	1ab6      	subs	r6, r6, r2
 80011d8:	0002      	movs	r2, r0
 80011da:	042d      	lsls	r5, r5, #16
 80011dc:	431d      	orrs	r5, r3
 80011de:	9f02      	ldr	r7, [sp, #8]
 80011e0:	042b      	lsls	r3, r5, #16
 80011e2:	0c1b      	lsrs	r3, r3, #16
 80011e4:	435a      	muls	r2, r3
 80011e6:	437b      	muls	r3, r7
 80011e8:	469c      	mov	ip, r3
 80011ea:	0c29      	lsrs	r1, r5, #16
 80011ec:	4348      	muls	r0, r1
 80011ee:	0c13      	lsrs	r3, r2, #16
 80011f0:	4484      	add	ip, r0
 80011f2:	4463      	add	r3, ip
 80011f4:	4379      	muls	r1, r7
 80011f6:	4298      	cmp	r0, r3
 80011f8:	d903      	bls.n	8001202 <__aeabi_ddiv+0x242>
 80011fa:	2080      	movs	r0, #128	; 0x80
 80011fc:	0240      	lsls	r0, r0, #9
 80011fe:	4684      	mov	ip, r0
 8001200:	4461      	add	r1, ip
 8001202:	0c18      	lsrs	r0, r3, #16
 8001204:	0412      	lsls	r2, r2, #16
 8001206:	041b      	lsls	r3, r3, #16
 8001208:	0c12      	lsrs	r2, r2, #16
 800120a:	1841      	adds	r1, r0, r1
 800120c:	189b      	adds	r3, r3, r2
 800120e:	428e      	cmp	r6, r1
 8001210:	d200      	bcs.n	8001214 <__aeabi_ddiv+0x254>
 8001212:	e0ff      	b.n	8001414 <__aeabi_ddiv+0x454>
 8001214:	d100      	bne.n	8001218 <__aeabi_ddiv+0x258>
 8001216:	e0fa      	b.n	800140e <__aeabi_ddiv+0x44e>
 8001218:	2301      	movs	r3, #1
 800121a:	431d      	orrs	r5, r3
 800121c:	4a49      	ldr	r2, [pc, #292]	; (8001344 <__aeabi_ddiv+0x384>)
 800121e:	445a      	add	r2, fp
 8001220:	2a00      	cmp	r2, #0
 8001222:	dc00      	bgt.n	8001226 <__aeabi_ddiv+0x266>
 8001224:	e0aa      	b.n	800137c <__aeabi_ddiv+0x3bc>
 8001226:	076b      	lsls	r3, r5, #29
 8001228:	d000      	beq.n	800122c <__aeabi_ddiv+0x26c>
 800122a:	e13d      	b.n	80014a8 <__aeabi_ddiv+0x4e8>
 800122c:	08ed      	lsrs	r5, r5, #3
 800122e:	4643      	mov	r3, r8
 8001230:	01db      	lsls	r3, r3, #7
 8001232:	d506      	bpl.n	8001242 <__aeabi_ddiv+0x282>
 8001234:	4642      	mov	r2, r8
 8001236:	4b44      	ldr	r3, [pc, #272]	; (8001348 <__aeabi_ddiv+0x388>)
 8001238:	401a      	ands	r2, r3
 800123a:	4690      	mov	r8, r2
 800123c:	2280      	movs	r2, #128	; 0x80
 800123e:	00d2      	lsls	r2, r2, #3
 8001240:	445a      	add	r2, fp
 8001242:	4b42      	ldr	r3, [pc, #264]	; (800134c <__aeabi_ddiv+0x38c>)
 8001244:	429a      	cmp	r2, r3
 8001246:	dd00      	ble.n	800124a <__aeabi_ddiv+0x28a>
 8001248:	e71f      	b.n	800108a <__aeabi_ddiv+0xca>
 800124a:	4643      	mov	r3, r8
 800124c:	075b      	lsls	r3, r3, #29
 800124e:	431d      	orrs	r5, r3
 8001250:	4643      	mov	r3, r8
 8001252:	0552      	lsls	r2, r2, #21
 8001254:	025c      	lsls	r4, r3, #9
 8001256:	0b24      	lsrs	r4, r4, #12
 8001258:	0d53      	lsrs	r3, r2, #21
 800125a:	e708      	b.n	800106e <__aeabi_ddiv+0xae>
 800125c:	4652      	mov	r2, sl
 800125e:	4322      	orrs	r2, r4
 8001260:	d100      	bne.n	8001264 <__aeabi_ddiv+0x2a4>
 8001262:	e07b      	b.n	800135c <__aeabi_ddiv+0x39c>
 8001264:	2c00      	cmp	r4, #0
 8001266:	d100      	bne.n	800126a <__aeabi_ddiv+0x2aa>
 8001268:	e0fa      	b.n	8001460 <__aeabi_ddiv+0x4a0>
 800126a:	0020      	movs	r0, r4
 800126c:	f001 f99a 	bl	80025a4 <__clzsi2>
 8001270:	0002      	movs	r2, r0
 8001272:	3a0b      	subs	r2, #11
 8001274:	231d      	movs	r3, #29
 8001276:	0001      	movs	r1, r0
 8001278:	1a9b      	subs	r3, r3, r2
 800127a:	4652      	mov	r2, sl
 800127c:	3908      	subs	r1, #8
 800127e:	40da      	lsrs	r2, r3
 8001280:	408c      	lsls	r4, r1
 8001282:	4314      	orrs	r4, r2
 8001284:	4652      	mov	r2, sl
 8001286:	408a      	lsls	r2, r1
 8001288:	4b31      	ldr	r3, [pc, #196]	; (8001350 <__aeabi_ddiv+0x390>)
 800128a:	4458      	add	r0, fp
 800128c:	469b      	mov	fp, r3
 800128e:	4483      	add	fp, r0
 8001290:	2000      	movs	r0, #0
 8001292:	e6d5      	b.n	8001040 <__aeabi_ddiv+0x80>
 8001294:	464b      	mov	r3, r9
 8001296:	4323      	orrs	r3, r4
 8001298:	4698      	mov	r8, r3
 800129a:	d044      	beq.n	8001326 <__aeabi_ddiv+0x366>
 800129c:	2c00      	cmp	r4, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_ddiv+0x2e2>
 80012a0:	e0ce      	b.n	8001440 <__aeabi_ddiv+0x480>
 80012a2:	0020      	movs	r0, r4
 80012a4:	f001 f97e 	bl	80025a4 <__clzsi2>
 80012a8:	0001      	movs	r1, r0
 80012aa:	0002      	movs	r2, r0
 80012ac:	390b      	subs	r1, #11
 80012ae:	231d      	movs	r3, #29
 80012b0:	1a5b      	subs	r3, r3, r1
 80012b2:	4649      	mov	r1, r9
 80012b4:	0010      	movs	r0, r2
 80012b6:	40d9      	lsrs	r1, r3
 80012b8:	3808      	subs	r0, #8
 80012ba:	4084      	lsls	r4, r0
 80012bc:	000b      	movs	r3, r1
 80012be:	464d      	mov	r5, r9
 80012c0:	4323      	orrs	r3, r4
 80012c2:	4698      	mov	r8, r3
 80012c4:	4085      	lsls	r5, r0
 80012c6:	4823      	ldr	r0, [pc, #140]	; (8001354 <__aeabi_ddiv+0x394>)
 80012c8:	1a83      	subs	r3, r0, r2
 80012ca:	469b      	mov	fp, r3
 80012cc:	2300      	movs	r3, #0
 80012ce:	4699      	mov	r9, r3
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	e69a      	b.n	800100a <__aeabi_ddiv+0x4a>
 80012d4:	464b      	mov	r3, r9
 80012d6:	4323      	orrs	r3, r4
 80012d8:	4698      	mov	r8, r3
 80012da:	d11d      	bne.n	8001318 <__aeabi_ddiv+0x358>
 80012dc:	2308      	movs	r3, #8
 80012de:	4699      	mov	r9, r3
 80012e0:	3b06      	subs	r3, #6
 80012e2:	2500      	movs	r5, #0
 80012e4:	4683      	mov	fp, r0
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	e68f      	b.n	800100a <__aeabi_ddiv+0x4a>
 80012ea:	4652      	mov	r2, sl
 80012ec:	4322      	orrs	r2, r4
 80012ee:	d109      	bne.n	8001304 <__aeabi_ddiv+0x344>
 80012f0:	2302      	movs	r3, #2
 80012f2:	4649      	mov	r1, r9
 80012f4:	4319      	orrs	r1, r3
 80012f6:	4b18      	ldr	r3, [pc, #96]	; (8001358 <__aeabi_ddiv+0x398>)
 80012f8:	4689      	mov	r9, r1
 80012fa:	469c      	mov	ip, r3
 80012fc:	2400      	movs	r4, #0
 80012fe:	2002      	movs	r0, #2
 8001300:	44e3      	add	fp, ip
 8001302:	e69d      	b.n	8001040 <__aeabi_ddiv+0x80>
 8001304:	2303      	movs	r3, #3
 8001306:	464a      	mov	r2, r9
 8001308:	431a      	orrs	r2, r3
 800130a:	4b13      	ldr	r3, [pc, #76]	; (8001358 <__aeabi_ddiv+0x398>)
 800130c:	4691      	mov	r9, r2
 800130e:	469c      	mov	ip, r3
 8001310:	4652      	mov	r2, sl
 8001312:	2003      	movs	r0, #3
 8001314:	44e3      	add	fp, ip
 8001316:	e693      	b.n	8001040 <__aeabi_ddiv+0x80>
 8001318:	230c      	movs	r3, #12
 800131a:	4699      	mov	r9, r3
 800131c:	3b09      	subs	r3, #9
 800131e:	46a0      	mov	r8, r4
 8001320:	4683      	mov	fp, r0
 8001322:	9300      	str	r3, [sp, #0]
 8001324:	e671      	b.n	800100a <__aeabi_ddiv+0x4a>
 8001326:	2304      	movs	r3, #4
 8001328:	4699      	mov	r9, r3
 800132a:	2300      	movs	r3, #0
 800132c:	469b      	mov	fp, r3
 800132e:	3301      	adds	r3, #1
 8001330:	2500      	movs	r5, #0
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	e669      	b.n	800100a <__aeabi_ddiv+0x4a>
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	000007ff 	.word	0x000007ff
 800133c:	fffffc01 	.word	0xfffffc01
 8001340:	080092cc 	.word	0x080092cc
 8001344:	000003ff 	.word	0x000003ff
 8001348:	feffffff 	.word	0xfeffffff
 800134c:	000007fe 	.word	0x000007fe
 8001350:	000003f3 	.word	0x000003f3
 8001354:	fffffc0d 	.word	0xfffffc0d
 8001358:	fffff801 	.word	0xfffff801
 800135c:	4649      	mov	r1, r9
 800135e:	2301      	movs	r3, #1
 8001360:	4319      	orrs	r1, r3
 8001362:	4689      	mov	r9, r1
 8001364:	2400      	movs	r4, #0
 8001366:	2001      	movs	r0, #1
 8001368:	e66a      	b.n	8001040 <__aeabi_ddiv+0x80>
 800136a:	2300      	movs	r3, #0
 800136c:	2480      	movs	r4, #128	; 0x80
 800136e:	469a      	mov	sl, r3
 8001370:	2500      	movs	r5, #0
 8001372:	4b8a      	ldr	r3, [pc, #552]	; (800159c <__aeabi_ddiv+0x5dc>)
 8001374:	0324      	lsls	r4, r4, #12
 8001376:	e67a      	b.n	800106e <__aeabi_ddiv+0xae>
 8001378:	2501      	movs	r5, #1
 800137a:	426d      	negs	r5, r5
 800137c:	2301      	movs	r3, #1
 800137e:	1a9b      	subs	r3, r3, r2
 8001380:	2b38      	cmp	r3, #56	; 0x38
 8001382:	dd00      	ble.n	8001386 <__aeabi_ddiv+0x3c6>
 8001384:	e670      	b.n	8001068 <__aeabi_ddiv+0xa8>
 8001386:	2b1f      	cmp	r3, #31
 8001388:	dc00      	bgt.n	800138c <__aeabi_ddiv+0x3cc>
 800138a:	e0bf      	b.n	800150c <__aeabi_ddiv+0x54c>
 800138c:	211f      	movs	r1, #31
 800138e:	4249      	negs	r1, r1
 8001390:	1a8a      	subs	r2, r1, r2
 8001392:	4641      	mov	r1, r8
 8001394:	40d1      	lsrs	r1, r2
 8001396:	000a      	movs	r2, r1
 8001398:	2b20      	cmp	r3, #32
 800139a:	d004      	beq.n	80013a6 <__aeabi_ddiv+0x3e6>
 800139c:	4641      	mov	r1, r8
 800139e:	4b80      	ldr	r3, [pc, #512]	; (80015a0 <__aeabi_ddiv+0x5e0>)
 80013a0:	445b      	add	r3, fp
 80013a2:	4099      	lsls	r1, r3
 80013a4:	430d      	orrs	r5, r1
 80013a6:	1e6b      	subs	r3, r5, #1
 80013a8:	419d      	sbcs	r5, r3
 80013aa:	2307      	movs	r3, #7
 80013ac:	432a      	orrs	r2, r5
 80013ae:	001d      	movs	r5, r3
 80013b0:	2400      	movs	r4, #0
 80013b2:	4015      	ands	r5, r2
 80013b4:	4213      	tst	r3, r2
 80013b6:	d100      	bne.n	80013ba <__aeabi_ddiv+0x3fa>
 80013b8:	e0d4      	b.n	8001564 <__aeabi_ddiv+0x5a4>
 80013ba:	210f      	movs	r1, #15
 80013bc:	2300      	movs	r3, #0
 80013be:	4011      	ands	r1, r2
 80013c0:	2904      	cmp	r1, #4
 80013c2:	d100      	bne.n	80013c6 <__aeabi_ddiv+0x406>
 80013c4:	e0cb      	b.n	800155e <__aeabi_ddiv+0x59e>
 80013c6:	1d11      	adds	r1, r2, #4
 80013c8:	4291      	cmp	r1, r2
 80013ca:	4192      	sbcs	r2, r2
 80013cc:	4252      	negs	r2, r2
 80013ce:	189b      	adds	r3, r3, r2
 80013d0:	000a      	movs	r2, r1
 80013d2:	0219      	lsls	r1, r3, #8
 80013d4:	d400      	bmi.n	80013d8 <__aeabi_ddiv+0x418>
 80013d6:	e0c2      	b.n	800155e <__aeabi_ddiv+0x59e>
 80013d8:	2301      	movs	r3, #1
 80013da:	2400      	movs	r4, #0
 80013dc:	2500      	movs	r5, #0
 80013de:	e646      	b.n	800106e <__aeabi_ddiv+0xae>
 80013e0:	2380      	movs	r3, #128	; 0x80
 80013e2:	4641      	mov	r1, r8
 80013e4:	031b      	lsls	r3, r3, #12
 80013e6:	4219      	tst	r1, r3
 80013e8:	d008      	beq.n	80013fc <__aeabi_ddiv+0x43c>
 80013ea:	421c      	tst	r4, r3
 80013ec:	d106      	bne.n	80013fc <__aeabi_ddiv+0x43c>
 80013ee:	431c      	orrs	r4, r3
 80013f0:	0324      	lsls	r4, r4, #12
 80013f2:	46ba      	mov	sl, r7
 80013f4:	0015      	movs	r5, r2
 80013f6:	4b69      	ldr	r3, [pc, #420]	; (800159c <__aeabi_ddiv+0x5dc>)
 80013f8:	0b24      	lsrs	r4, r4, #12
 80013fa:	e638      	b.n	800106e <__aeabi_ddiv+0xae>
 80013fc:	2480      	movs	r4, #128	; 0x80
 80013fe:	4643      	mov	r3, r8
 8001400:	0324      	lsls	r4, r4, #12
 8001402:	431c      	orrs	r4, r3
 8001404:	0324      	lsls	r4, r4, #12
 8001406:	46b2      	mov	sl, r6
 8001408:	4b64      	ldr	r3, [pc, #400]	; (800159c <__aeabi_ddiv+0x5dc>)
 800140a:	0b24      	lsrs	r4, r4, #12
 800140c:	e62f      	b.n	800106e <__aeabi_ddiv+0xae>
 800140e:	2b00      	cmp	r3, #0
 8001410:	d100      	bne.n	8001414 <__aeabi_ddiv+0x454>
 8001412:	e703      	b.n	800121c <__aeabi_ddiv+0x25c>
 8001414:	19a6      	adds	r6, r4, r6
 8001416:	1e68      	subs	r0, r5, #1
 8001418:	42a6      	cmp	r6, r4
 800141a:	d200      	bcs.n	800141e <__aeabi_ddiv+0x45e>
 800141c:	e08d      	b.n	800153a <__aeabi_ddiv+0x57a>
 800141e:	428e      	cmp	r6, r1
 8001420:	d200      	bcs.n	8001424 <__aeabi_ddiv+0x464>
 8001422:	e0a3      	b.n	800156c <__aeabi_ddiv+0x5ac>
 8001424:	d100      	bne.n	8001428 <__aeabi_ddiv+0x468>
 8001426:	e0b3      	b.n	8001590 <__aeabi_ddiv+0x5d0>
 8001428:	0005      	movs	r5, r0
 800142a:	e6f5      	b.n	8001218 <__aeabi_ddiv+0x258>
 800142c:	42aa      	cmp	r2, r5
 800142e:	d900      	bls.n	8001432 <__aeabi_ddiv+0x472>
 8001430:	e639      	b.n	80010a6 <__aeabi_ddiv+0xe6>
 8001432:	4643      	mov	r3, r8
 8001434:	07de      	lsls	r6, r3, #31
 8001436:	0858      	lsrs	r0, r3, #1
 8001438:	086b      	lsrs	r3, r5, #1
 800143a:	431e      	orrs	r6, r3
 800143c:	07ed      	lsls	r5, r5, #31
 800143e:	e639      	b.n	80010b4 <__aeabi_ddiv+0xf4>
 8001440:	4648      	mov	r0, r9
 8001442:	f001 f8af 	bl	80025a4 <__clzsi2>
 8001446:	0001      	movs	r1, r0
 8001448:	0002      	movs	r2, r0
 800144a:	3115      	adds	r1, #21
 800144c:	3220      	adds	r2, #32
 800144e:	291c      	cmp	r1, #28
 8001450:	dc00      	bgt.n	8001454 <__aeabi_ddiv+0x494>
 8001452:	e72c      	b.n	80012ae <__aeabi_ddiv+0x2ee>
 8001454:	464b      	mov	r3, r9
 8001456:	3808      	subs	r0, #8
 8001458:	4083      	lsls	r3, r0
 800145a:	2500      	movs	r5, #0
 800145c:	4698      	mov	r8, r3
 800145e:	e732      	b.n	80012c6 <__aeabi_ddiv+0x306>
 8001460:	f001 f8a0 	bl	80025a4 <__clzsi2>
 8001464:	0003      	movs	r3, r0
 8001466:	001a      	movs	r2, r3
 8001468:	3215      	adds	r2, #21
 800146a:	3020      	adds	r0, #32
 800146c:	2a1c      	cmp	r2, #28
 800146e:	dc00      	bgt.n	8001472 <__aeabi_ddiv+0x4b2>
 8001470:	e700      	b.n	8001274 <__aeabi_ddiv+0x2b4>
 8001472:	4654      	mov	r4, sl
 8001474:	3b08      	subs	r3, #8
 8001476:	2200      	movs	r2, #0
 8001478:	409c      	lsls	r4, r3
 800147a:	e705      	b.n	8001288 <__aeabi_ddiv+0x2c8>
 800147c:	1936      	adds	r6, r6, r4
 800147e:	3b01      	subs	r3, #1
 8001480:	42b4      	cmp	r4, r6
 8001482:	d900      	bls.n	8001486 <__aeabi_ddiv+0x4c6>
 8001484:	e6a6      	b.n	80011d4 <__aeabi_ddiv+0x214>
 8001486:	42b2      	cmp	r2, r6
 8001488:	d800      	bhi.n	800148c <__aeabi_ddiv+0x4cc>
 800148a:	e6a3      	b.n	80011d4 <__aeabi_ddiv+0x214>
 800148c:	1e83      	subs	r3, r0, #2
 800148e:	1936      	adds	r6, r6, r4
 8001490:	e6a0      	b.n	80011d4 <__aeabi_ddiv+0x214>
 8001492:	1909      	adds	r1, r1, r4
 8001494:	3d01      	subs	r5, #1
 8001496:	428c      	cmp	r4, r1
 8001498:	d900      	bls.n	800149c <__aeabi_ddiv+0x4dc>
 800149a:	e68d      	b.n	80011b8 <__aeabi_ddiv+0x1f8>
 800149c:	428a      	cmp	r2, r1
 800149e:	d800      	bhi.n	80014a2 <__aeabi_ddiv+0x4e2>
 80014a0:	e68a      	b.n	80011b8 <__aeabi_ddiv+0x1f8>
 80014a2:	1e85      	subs	r5, r0, #2
 80014a4:	1909      	adds	r1, r1, r4
 80014a6:	e687      	b.n	80011b8 <__aeabi_ddiv+0x1f8>
 80014a8:	230f      	movs	r3, #15
 80014aa:	402b      	ands	r3, r5
 80014ac:	2b04      	cmp	r3, #4
 80014ae:	d100      	bne.n	80014b2 <__aeabi_ddiv+0x4f2>
 80014b0:	e6bc      	b.n	800122c <__aeabi_ddiv+0x26c>
 80014b2:	2305      	movs	r3, #5
 80014b4:	425b      	negs	r3, r3
 80014b6:	42ab      	cmp	r3, r5
 80014b8:	419b      	sbcs	r3, r3
 80014ba:	3504      	adds	r5, #4
 80014bc:	425b      	negs	r3, r3
 80014be:	08ed      	lsrs	r5, r5, #3
 80014c0:	4498      	add	r8, r3
 80014c2:	e6b4      	b.n	800122e <__aeabi_ddiv+0x26e>
 80014c4:	42af      	cmp	r7, r5
 80014c6:	d900      	bls.n	80014ca <__aeabi_ddiv+0x50a>
 80014c8:	e660      	b.n	800118c <__aeabi_ddiv+0x1cc>
 80014ca:	4282      	cmp	r2, r0
 80014cc:	d804      	bhi.n	80014d8 <__aeabi_ddiv+0x518>
 80014ce:	d000      	beq.n	80014d2 <__aeabi_ddiv+0x512>
 80014d0:	e65c      	b.n	800118c <__aeabi_ddiv+0x1cc>
 80014d2:	42ae      	cmp	r6, r5
 80014d4:	d800      	bhi.n	80014d8 <__aeabi_ddiv+0x518>
 80014d6:	e659      	b.n	800118c <__aeabi_ddiv+0x1cc>
 80014d8:	2302      	movs	r3, #2
 80014da:	425b      	negs	r3, r3
 80014dc:	469c      	mov	ip, r3
 80014de:	9b00      	ldr	r3, [sp, #0]
 80014e0:	44e0      	add	r8, ip
 80014e2:	469c      	mov	ip, r3
 80014e4:	4465      	add	r5, ip
 80014e6:	429d      	cmp	r5, r3
 80014e8:	419b      	sbcs	r3, r3
 80014ea:	425b      	negs	r3, r3
 80014ec:	191b      	adds	r3, r3, r4
 80014ee:	18c0      	adds	r0, r0, r3
 80014f0:	e64d      	b.n	800118e <__aeabi_ddiv+0x1ce>
 80014f2:	428a      	cmp	r2, r1
 80014f4:	d800      	bhi.n	80014f8 <__aeabi_ddiv+0x538>
 80014f6:	e60e      	b.n	8001116 <__aeabi_ddiv+0x156>
 80014f8:	1e83      	subs	r3, r0, #2
 80014fa:	1909      	adds	r1, r1, r4
 80014fc:	e60b      	b.n	8001116 <__aeabi_ddiv+0x156>
 80014fe:	428a      	cmp	r2, r1
 8001500:	d800      	bhi.n	8001504 <__aeabi_ddiv+0x544>
 8001502:	e5f4      	b.n	80010ee <__aeabi_ddiv+0x12e>
 8001504:	1e83      	subs	r3, r0, #2
 8001506:	4698      	mov	r8, r3
 8001508:	1909      	adds	r1, r1, r4
 800150a:	e5f0      	b.n	80010ee <__aeabi_ddiv+0x12e>
 800150c:	4925      	ldr	r1, [pc, #148]	; (80015a4 <__aeabi_ddiv+0x5e4>)
 800150e:	0028      	movs	r0, r5
 8001510:	4459      	add	r1, fp
 8001512:	408d      	lsls	r5, r1
 8001514:	4642      	mov	r2, r8
 8001516:	408a      	lsls	r2, r1
 8001518:	1e69      	subs	r1, r5, #1
 800151a:	418d      	sbcs	r5, r1
 800151c:	4641      	mov	r1, r8
 800151e:	40d8      	lsrs	r0, r3
 8001520:	40d9      	lsrs	r1, r3
 8001522:	4302      	orrs	r2, r0
 8001524:	432a      	orrs	r2, r5
 8001526:	000b      	movs	r3, r1
 8001528:	0751      	lsls	r1, r2, #29
 800152a:	d100      	bne.n	800152e <__aeabi_ddiv+0x56e>
 800152c:	e751      	b.n	80013d2 <__aeabi_ddiv+0x412>
 800152e:	210f      	movs	r1, #15
 8001530:	4011      	ands	r1, r2
 8001532:	2904      	cmp	r1, #4
 8001534:	d000      	beq.n	8001538 <__aeabi_ddiv+0x578>
 8001536:	e746      	b.n	80013c6 <__aeabi_ddiv+0x406>
 8001538:	e74b      	b.n	80013d2 <__aeabi_ddiv+0x412>
 800153a:	0005      	movs	r5, r0
 800153c:	428e      	cmp	r6, r1
 800153e:	d000      	beq.n	8001542 <__aeabi_ddiv+0x582>
 8001540:	e66a      	b.n	8001218 <__aeabi_ddiv+0x258>
 8001542:	9a00      	ldr	r2, [sp, #0]
 8001544:	4293      	cmp	r3, r2
 8001546:	d000      	beq.n	800154a <__aeabi_ddiv+0x58a>
 8001548:	e666      	b.n	8001218 <__aeabi_ddiv+0x258>
 800154a:	e667      	b.n	800121c <__aeabi_ddiv+0x25c>
 800154c:	4a16      	ldr	r2, [pc, #88]	; (80015a8 <__aeabi_ddiv+0x5e8>)
 800154e:	445a      	add	r2, fp
 8001550:	2a00      	cmp	r2, #0
 8001552:	dc00      	bgt.n	8001556 <__aeabi_ddiv+0x596>
 8001554:	e710      	b.n	8001378 <__aeabi_ddiv+0x3b8>
 8001556:	2301      	movs	r3, #1
 8001558:	2500      	movs	r5, #0
 800155a:	4498      	add	r8, r3
 800155c:	e667      	b.n	800122e <__aeabi_ddiv+0x26e>
 800155e:	075d      	lsls	r5, r3, #29
 8001560:	025b      	lsls	r3, r3, #9
 8001562:	0b1c      	lsrs	r4, r3, #12
 8001564:	08d2      	lsrs	r2, r2, #3
 8001566:	2300      	movs	r3, #0
 8001568:	4315      	orrs	r5, r2
 800156a:	e580      	b.n	800106e <__aeabi_ddiv+0xae>
 800156c:	9800      	ldr	r0, [sp, #0]
 800156e:	3d02      	subs	r5, #2
 8001570:	0042      	lsls	r2, r0, #1
 8001572:	4282      	cmp	r2, r0
 8001574:	41bf      	sbcs	r7, r7
 8001576:	427f      	negs	r7, r7
 8001578:	193c      	adds	r4, r7, r4
 800157a:	1936      	adds	r6, r6, r4
 800157c:	9200      	str	r2, [sp, #0]
 800157e:	e7dd      	b.n	800153c <__aeabi_ddiv+0x57c>
 8001580:	2480      	movs	r4, #128	; 0x80
 8001582:	4643      	mov	r3, r8
 8001584:	0324      	lsls	r4, r4, #12
 8001586:	431c      	orrs	r4, r3
 8001588:	0324      	lsls	r4, r4, #12
 800158a:	4b04      	ldr	r3, [pc, #16]	; (800159c <__aeabi_ddiv+0x5dc>)
 800158c:	0b24      	lsrs	r4, r4, #12
 800158e:	e56e      	b.n	800106e <__aeabi_ddiv+0xae>
 8001590:	9a00      	ldr	r2, [sp, #0]
 8001592:	429a      	cmp	r2, r3
 8001594:	d3ea      	bcc.n	800156c <__aeabi_ddiv+0x5ac>
 8001596:	0005      	movs	r5, r0
 8001598:	e7d3      	b.n	8001542 <__aeabi_ddiv+0x582>
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	000007ff 	.word	0x000007ff
 80015a0:	0000043e 	.word	0x0000043e
 80015a4:	0000041e 	.word	0x0000041e
 80015a8:	000003ff 	.word	0x000003ff

080015ac <__eqdf2>:
 80015ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ae:	464e      	mov	r6, r9
 80015b0:	4645      	mov	r5, r8
 80015b2:	46de      	mov	lr, fp
 80015b4:	4657      	mov	r7, sl
 80015b6:	4690      	mov	r8, r2
 80015b8:	b5e0      	push	{r5, r6, r7, lr}
 80015ba:	0017      	movs	r7, r2
 80015bc:	031a      	lsls	r2, r3, #12
 80015be:	0b12      	lsrs	r2, r2, #12
 80015c0:	0005      	movs	r5, r0
 80015c2:	4684      	mov	ip, r0
 80015c4:	4819      	ldr	r0, [pc, #100]	; (800162c <__eqdf2+0x80>)
 80015c6:	030e      	lsls	r6, r1, #12
 80015c8:	004c      	lsls	r4, r1, #1
 80015ca:	4691      	mov	r9, r2
 80015cc:	005a      	lsls	r2, r3, #1
 80015ce:	0fdb      	lsrs	r3, r3, #31
 80015d0:	469b      	mov	fp, r3
 80015d2:	0b36      	lsrs	r6, r6, #12
 80015d4:	0d64      	lsrs	r4, r4, #21
 80015d6:	0fc9      	lsrs	r1, r1, #31
 80015d8:	0d52      	lsrs	r2, r2, #21
 80015da:	4284      	cmp	r4, r0
 80015dc:	d019      	beq.n	8001612 <__eqdf2+0x66>
 80015de:	4282      	cmp	r2, r0
 80015e0:	d010      	beq.n	8001604 <__eqdf2+0x58>
 80015e2:	2001      	movs	r0, #1
 80015e4:	4294      	cmp	r4, r2
 80015e6:	d10e      	bne.n	8001606 <__eqdf2+0x5a>
 80015e8:	454e      	cmp	r6, r9
 80015ea:	d10c      	bne.n	8001606 <__eqdf2+0x5a>
 80015ec:	2001      	movs	r0, #1
 80015ee:	45c4      	cmp	ip, r8
 80015f0:	d109      	bne.n	8001606 <__eqdf2+0x5a>
 80015f2:	4559      	cmp	r1, fp
 80015f4:	d017      	beq.n	8001626 <__eqdf2+0x7a>
 80015f6:	2c00      	cmp	r4, #0
 80015f8:	d105      	bne.n	8001606 <__eqdf2+0x5a>
 80015fa:	0030      	movs	r0, r6
 80015fc:	4328      	orrs	r0, r5
 80015fe:	1e43      	subs	r3, r0, #1
 8001600:	4198      	sbcs	r0, r3
 8001602:	e000      	b.n	8001606 <__eqdf2+0x5a>
 8001604:	2001      	movs	r0, #1
 8001606:	bcf0      	pop	{r4, r5, r6, r7}
 8001608:	46bb      	mov	fp, r7
 800160a:	46b2      	mov	sl, r6
 800160c:	46a9      	mov	r9, r5
 800160e:	46a0      	mov	r8, r4
 8001610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001612:	0033      	movs	r3, r6
 8001614:	2001      	movs	r0, #1
 8001616:	432b      	orrs	r3, r5
 8001618:	d1f5      	bne.n	8001606 <__eqdf2+0x5a>
 800161a:	42a2      	cmp	r2, r4
 800161c:	d1f3      	bne.n	8001606 <__eqdf2+0x5a>
 800161e:	464b      	mov	r3, r9
 8001620:	433b      	orrs	r3, r7
 8001622:	d1f0      	bne.n	8001606 <__eqdf2+0x5a>
 8001624:	e7e2      	b.n	80015ec <__eqdf2+0x40>
 8001626:	2000      	movs	r0, #0
 8001628:	e7ed      	b.n	8001606 <__eqdf2+0x5a>
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	000007ff 	.word	0x000007ff

08001630 <__gedf2>:
 8001630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001632:	4647      	mov	r7, r8
 8001634:	46ce      	mov	lr, r9
 8001636:	0004      	movs	r4, r0
 8001638:	0018      	movs	r0, r3
 800163a:	0016      	movs	r6, r2
 800163c:	031b      	lsls	r3, r3, #12
 800163e:	0b1b      	lsrs	r3, r3, #12
 8001640:	4d2d      	ldr	r5, [pc, #180]	; (80016f8 <__gedf2+0xc8>)
 8001642:	004a      	lsls	r2, r1, #1
 8001644:	4699      	mov	r9, r3
 8001646:	b580      	push	{r7, lr}
 8001648:	0043      	lsls	r3, r0, #1
 800164a:	030f      	lsls	r7, r1, #12
 800164c:	46a4      	mov	ip, r4
 800164e:	46b0      	mov	r8, r6
 8001650:	0b3f      	lsrs	r7, r7, #12
 8001652:	0d52      	lsrs	r2, r2, #21
 8001654:	0fc9      	lsrs	r1, r1, #31
 8001656:	0d5b      	lsrs	r3, r3, #21
 8001658:	0fc0      	lsrs	r0, r0, #31
 800165a:	42aa      	cmp	r2, r5
 800165c:	d021      	beq.n	80016a2 <__gedf2+0x72>
 800165e:	42ab      	cmp	r3, r5
 8001660:	d013      	beq.n	800168a <__gedf2+0x5a>
 8001662:	2a00      	cmp	r2, #0
 8001664:	d122      	bne.n	80016ac <__gedf2+0x7c>
 8001666:	433c      	orrs	r4, r7
 8001668:	2b00      	cmp	r3, #0
 800166a:	d102      	bne.n	8001672 <__gedf2+0x42>
 800166c:	464d      	mov	r5, r9
 800166e:	432e      	orrs	r6, r5
 8001670:	d022      	beq.n	80016b8 <__gedf2+0x88>
 8001672:	2c00      	cmp	r4, #0
 8001674:	d010      	beq.n	8001698 <__gedf2+0x68>
 8001676:	4281      	cmp	r1, r0
 8001678:	d022      	beq.n	80016c0 <__gedf2+0x90>
 800167a:	2002      	movs	r0, #2
 800167c:	3901      	subs	r1, #1
 800167e:	4008      	ands	r0, r1
 8001680:	3801      	subs	r0, #1
 8001682:	bcc0      	pop	{r6, r7}
 8001684:	46b9      	mov	r9, r7
 8001686:	46b0      	mov	r8, r6
 8001688:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800168a:	464d      	mov	r5, r9
 800168c:	432e      	orrs	r6, r5
 800168e:	d129      	bne.n	80016e4 <__gedf2+0xb4>
 8001690:	2a00      	cmp	r2, #0
 8001692:	d1f0      	bne.n	8001676 <__gedf2+0x46>
 8001694:	433c      	orrs	r4, r7
 8001696:	d1ee      	bne.n	8001676 <__gedf2+0x46>
 8001698:	2800      	cmp	r0, #0
 800169a:	d1f2      	bne.n	8001682 <__gedf2+0x52>
 800169c:	2001      	movs	r0, #1
 800169e:	4240      	negs	r0, r0
 80016a0:	e7ef      	b.n	8001682 <__gedf2+0x52>
 80016a2:	003d      	movs	r5, r7
 80016a4:	4325      	orrs	r5, r4
 80016a6:	d11d      	bne.n	80016e4 <__gedf2+0xb4>
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d0ee      	beq.n	800168a <__gedf2+0x5a>
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1e2      	bne.n	8001676 <__gedf2+0x46>
 80016b0:	464c      	mov	r4, r9
 80016b2:	4326      	orrs	r6, r4
 80016b4:	d1df      	bne.n	8001676 <__gedf2+0x46>
 80016b6:	e7e0      	b.n	800167a <__gedf2+0x4a>
 80016b8:	2000      	movs	r0, #0
 80016ba:	2c00      	cmp	r4, #0
 80016bc:	d0e1      	beq.n	8001682 <__gedf2+0x52>
 80016be:	e7dc      	b.n	800167a <__gedf2+0x4a>
 80016c0:	429a      	cmp	r2, r3
 80016c2:	dc0a      	bgt.n	80016da <__gedf2+0xaa>
 80016c4:	dbe8      	blt.n	8001698 <__gedf2+0x68>
 80016c6:	454f      	cmp	r7, r9
 80016c8:	d8d7      	bhi.n	800167a <__gedf2+0x4a>
 80016ca:	d00e      	beq.n	80016ea <__gedf2+0xba>
 80016cc:	2000      	movs	r0, #0
 80016ce:	454f      	cmp	r7, r9
 80016d0:	d2d7      	bcs.n	8001682 <__gedf2+0x52>
 80016d2:	2900      	cmp	r1, #0
 80016d4:	d0e2      	beq.n	800169c <__gedf2+0x6c>
 80016d6:	0008      	movs	r0, r1
 80016d8:	e7d3      	b.n	8001682 <__gedf2+0x52>
 80016da:	4243      	negs	r3, r0
 80016dc:	4158      	adcs	r0, r3
 80016de:	0040      	lsls	r0, r0, #1
 80016e0:	3801      	subs	r0, #1
 80016e2:	e7ce      	b.n	8001682 <__gedf2+0x52>
 80016e4:	2002      	movs	r0, #2
 80016e6:	4240      	negs	r0, r0
 80016e8:	e7cb      	b.n	8001682 <__gedf2+0x52>
 80016ea:	45c4      	cmp	ip, r8
 80016ec:	d8c5      	bhi.n	800167a <__gedf2+0x4a>
 80016ee:	2000      	movs	r0, #0
 80016f0:	45c4      	cmp	ip, r8
 80016f2:	d2c6      	bcs.n	8001682 <__gedf2+0x52>
 80016f4:	e7ed      	b.n	80016d2 <__gedf2+0xa2>
 80016f6:	46c0      	nop			; (mov r8, r8)
 80016f8:	000007ff 	.word	0x000007ff

080016fc <__ledf2>:
 80016fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016fe:	4647      	mov	r7, r8
 8001700:	46ce      	mov	lr, r9
 8001702:	0004      	movs	r4, r0
 8001704:	0018      	movs	r0, r3
 8001706:	0016      	movs	r6, r2
 8001708:	031b      	lsls	r3, r3, #12
 800170a:	0b1b      	lsrs	r3, r3, #12
 800170c:	4d2c      	ldr	r5, [pc, #176]	; (80017c0 <__ledf2+0xc4>)
 800170e:	004a      	lsls	r2, r1, #1
 8001710:	4699      	mov	r9, r3
 8001712:	b580      	push	{r7, lr}
 8001714:	0043      	lsls	r3, r0, #1
 8001716:	030f      	lsls	r7, r1, #12
 8001718:	46a4      	mov	ip, r4
 800171a:	46b0      	mov	r8, r6
 800171c:	0b3f      	lsrs	r7, r7, #12
 800171e:	0d52      	lsrs	r2, r2, #21
 8001720:	0fc9      	lsrs	r1, r1, #31
 8001722:	0d5b      	lsrs	r3, r3, #21
 8001724:	0fc0      	lsrs	r0, r0, #31
 8001726:	42aa      	cmp	r2, r5
 8001728:	d00d      	beq.n	8001746 <__ledf2+0x4a>
 800172a:	42ab      	cmp	r3, r5
 800172c:	d010      	beq.n	8001750 <__ledf2+0x54>
 800172e:	2a00      	cmp	r2, #0
 8001730:	d127      	bne.n	8001782 <__ledf2+0x86>
 8001732:	433c      	orrs	r4, r7
 8001734:	2b00      	cmp	r3, #0
 8001736:	d111      	bne.n	800175c <__ledf2+0x60>
 8001738:	464d      	mov	r5, r9
 800173a:	432e      	orrs	r6, r5
 800173c:	d10e      	bne.n	800175c <__ledf2+0x60>
 800173e:	2000      	movs	r0, #0
 8001740:	2c00      	cmp	r4, #0
 8001742:	d015      	beq.n	8001770 <__ledf2+0x74>
 8001744:	e00e      	b.n	8001764 <__ledf2+0x68>
 8001746:	003d      	movs	r5, r7
 8001748:	4325      	orrs	r5, r4
 800174a:	d110      	bne.n	800176e <__ledf2+0x72>
 800174c:	4293      	cmp	r3, r2
 800174e:	d118      	bne.n	8001782 <__ledf2+0x86>
 8001750:	464d      	mov	r5, r9
 8001752:	432e      	orrs	r6, r5
 8001754:	d10b      	bne.n	800176e <__ledf2+0x72>
 8001756:	2a00      	cmp	r2, #0
 8001758:	d102      	bne.n	8001760 <__ledf2+0x64>
 800175a:	433c      	orrs	r4, r7
 800175c:	2c00      	cmp	r4, #0
 800175e:	d00b      	beq.n	8001778 <__ledf2+0x7c>
 8001760:	4281      	cmp	r1, r0
 8001762:	d014      	beq.n	800178e <__ledf2+0x92>
 8001764:	2002      	movs	r0, #2
 8001766:	3901      	subs	r1, #1
 8001768:	4008      	ands	r0, r1
 800176a:	3801      	subs	r0, #1
 800176c:	e000      	b.n	8001770 <__ledf2+0x74>
 800176e:	2002      	movs	r0, #2
 8001770:	bcc0      	pop	{r6, r7}
 8001772:	46b9      	mov	r9, r7
 8001774:	46b0      	mov	r8, r6
 8001776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001778:	2800      	cmp	r0, #0
 800177a:	d1f9      	bne.n	8001770 <__ledf2+0x74>
 800177c:	2001      	movs	r0, #1
 800177e:	4240      	negs	r0, r0
 8001780:	e7f6      	b.n	8001770 <__ledf2+0x74>
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1ec      	bne.n	8001760 <__ledf2+0x64>
 8001786:	464c      	mov	r4, r9
 8001788:	4326      	orrs	r6, r4
 800178a:	d1e9      	bne.n	8001760 <__ledf2+0x64>
 800178c:	e7ea      	b.n	8001764 <__ledf2+0x68>
 800178e:	429a      	cmp	r2, r3
 8001790:	dd04      	ble.n	800179c <__ledf2+0xa0>
 8001792:	4243      	negs	r3, r0
 8001794:	4158      	adcs	r0, r3
 8001796:	0040      	lsls	r0, r0, #1
 8001798:	3801      	subs	r0, #1
 800179a:	e7e9      	b.n	8001770 <__ledf2+0x74>
 800179c:	429a      	cmp	r2, r3
 800179e:	dbeb      	blt.n	8001778 <__ledf2+0x7c>
 80017a0:	454f      	cmp	r7, r9
 80017a2:	d8df      	bhi.n	8001764 <__ledf2+0x68>
 80017a4:	d006      	beq.n	80017b4 <__ledf2+0xb8>
 80017a6:	2000      	movs	r0, #0
 80017a8:	454f      	cmp	r7, r9
 80017aa:	d2e1      	bcs.n	8001770 <__ledf2+0x74>
 80017ac:	2900      	cmp	r1, #0
 80017ae:	d0e5      	beq.n	800177c <__ledf2+0x80>
 80017b0:	0008      	movs	r0, r1
 80017b2:	e7dd      	b.n	8001770 <__ledf2+0x74>
 80017b4:	45c4      	cmp	ip, r8
 80017b6:	d8d5      	bhi.n	8001764 <__ledf2+0x68>
 80017b8:	2000      	movs	r0, #0
 80017ba:	45c4      	cmp	ip, r8
 80017bc:	d2d8      	bcs.n	8001770 <__ledf2+0x74>
 80017be:	e7f5      	b.n	80017ac <__ledf2+0xb0>
 80017c0:	000007ff 	.word	0x000007ff

080017c4 <__aeabi_dmul>:
 80017c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017c6:	4657      	mov	r7, sl
 80017c8:	464e      	mov	r6, r9
 80017ca:	4645      	mov	r5, r8
 80017cc:	46de      	mov	lr, fp
 80017ce:	b5e0      	push	{r5, r6, r7, lr}
 80017d0:	4698      	mov	r8, r3
 80017d2:	030c      	lsls	r4, r1, #12
 80017d4:	004b      	lsls	r3, r1, #1
 80017d6:	0006      	movs	r6, r0
 80017d8:	4692      	mov	sl, r2
 80017da:	b087      	sub	sp, #28
 80017dc:	0b24      	lsrs	r4, r4, #12
 80017de:	0d5b      	lsrs	r3, r3, #21
 80017e0:	0fcf      	lsrs	r7, r1, #31
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d100      	bne.n	80017e8 <__aeabi_dmul+0x24>
 80017e6:	e15c      	b.n	8001aa2 <__aeabi_dmul+0x2de>
 80017e8:	4ad9      	ldr	r2, [pc, #868]	; (8001b50 <__aeabi_dmul+0x38c>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d100      	bne.n	80017f0 <__aeabi_dmul+0x2c>
 80017ee:	e175      	b.n	8001adc <__aeabi_dmul+0x318>
 80017f0:	0f42      	lsrs	r2, r0, #29
 80017f2:	00e4      	lsls	r4, r4, #3
 80017f4:	4314      	orrs	r4, r2
 80017f6:	2280      	movs	r2, #128	; 0x80
 80017f8:	0412      	lsls	r2, r2, #16
 80017fa:	4314      	orrs	r4, r2
 80017fc:	4ad5      	ldr	r2, [pc, #852]	; (8001b54 <__aeabi_dmul+0x390>)
 80017fe:	00c5      	lsls	r5, r0, #3
 8001800:	4694      	mov	ip, r2
 8001802:	4463      	add	r3, ip
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	2300      	movs	r3, #0
 8001808:	4699      	mov	r9, r3
 800180a:	469b      	mov	fp, r3
 800180c:	4643      	mov	r3, r8
 800180e:	4642      	mov	r2, r8
 8001810:	031e      	lsls	r6, r3, #12
 8001812:	0fd2      	lsrs	r2, r2, #31
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	4650      	mov	r0, sl
 8001818:	4690      	mov	r8, r2
 800181a:	0b36      	lsrs	r6, r6, #12
 800181c:	0d5b      	lsrs	r3, r3, #21
 800181e:	d100      	bne.n	8001822 <__aeabi_dmul+0x5e>
 8001820:	e120      	b.n	8001a64 <__aeabi_dmul+0x2a0>
 8001822:	4acb      	ldr	r2, [pc, #812]	; (8001b50 <__aeabi_dmul+0x38c>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d100      	bne.n	800182a <__aeabi_dmul+0x66>
 8001828:	e162      	b.n	8001af0 <__aeabi_dmul+0x32c>
 800182a:	49ca      	ldr	r1, [pc, #808]	; (8001b54 <__aeabi_dmul+0x390>)
 800182c:	0f42      	lsrs	r2, r0, #29
 800182e:	468c      	mov	ip, r1
 8001830:	9900      	ldr	r1, [sp, #0]
 8001832:	4463      	add	r3, ip
 8001834:	00f6      	lsls	r6, r6, #3
 8001836:	468c      	mov	ip, r1
 8001838:	4316      	orrs	r6, r2
 800183a:	2280      	movs	r2, #128	; 0x80
 800183c:	449c      	add	ip, r3
 800183e:	0412      	lsls	r2, r2, #16
 8001840:	4663      	mov	r3, ip
 8001842:	4316      	orrs	r6, r2
 8001844:	00c2      	lsls	r2, r0, #3
 8001846:	2000      	movs	r0, #0
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	9900      	ldr	r1, [sp, #0]
 800184c:	4643      	mov	r3, r8
 800184e:	3101      	adds	r1, #1
 8001850:	468c      	mov	ip, r1
 8001852:	4649      	mov	r1, r9
 8001854:	407b      	eors	r3, r7
 8001856:	9301      	str	r3, [sp, #4]
 8001858:	290f      	cmp	r1, #15
 800185a:	d826      	bhi.n	80018aa <__aeabi_dmul+0xe6>
 800185c:	4bbe      	ldr	r3, [pc, #760]	; (8001b58 <__aeabi_dmul+0x394>)
 800185e:	0089      	lsls	r1, r1, #2
 8001860:	5859      	ldr	r1, [r3, r1]
 8001862:	468f      	mov	pc, r1
 8001864:	4643      	mov	r3, r8
 8001866:	9301      	str	r3, [sp, #4]
 8001868:	0034      	movs	r4, r6
 800186a:	0015      	movs	r5, r2
 800186c:	4683      	mov	fp, r0
 800186e:	465b      	mov	r3, fp
 8001870:	2b02      	cmp	r3, #2
 8001872:	d016      	beq.n	80018a2 <__aeabi_dmul+0xde>
 8001874:	2b03      	cmp	r3, #3
 8001876:	d100      	bne.n	800187a <__aeabi_dmul+0xb6>
 8001878:	e203      	b.n	8001c82 <__aeabi_dmul+0x4be>
 800187a:	2b01      	cmp	r3, #1
 800187c:	d000      	beq.n	8001880 <__aeabi_dmul+0xbc>
 800187e:	e0cd      	b.n	8001a1c <__aeabi_dmul+0x258>
 8001880:	2200      	movs	r2, #0
 8001882:	2400      	movs	r4, #0
 8001884:	2500      	movs	r5, #0
 8001886:	9b01      	ldr	r3, [sp, #4]
 8001888:	0512      	lsls	r2, r2, #20
 800188a:	4322      	orrs	r2, r4
 800188c:	07db      	lsls	r3, r3, #31
 800188e:	431a      	orrs	r2, r3
 8001890:	0028      	movs	r0, r5
 8001892:	0011      	movs	r1, r2
 8001894:	b007      	add	sp, #28
 8001896:	bcf0      	pop	{r4, r5, r6, r7}
 8001898:	46bb      	mov	fp, r7
 800189a:	46b2      	mov	sl, r6
 800189c:	46a9      	mov	r9, r5
 800189e:	46a0      	mov	r8, r4
 80018a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018a2:	2400      	movs	r4, #0
 80018a4:	2500      	movs	r5, #0
 80018a6:	4aaa      	ldr	r2, [pc, #680]	; (8001b50 <__aeabi_dmul+0x38c>)
 80018a8:	e7ed      	b.n	8001886 <__aeabi_dmul+0xc2>
 80018aa:	0c28      	lsrs	r0, r5, #16
 80018ac:	042d      	lsls	r5, r5, #16
 80018ae:	0c2d      	lsrs	r5, r5, #16
 80018b0:	002b      	movs	r3, r5
 80018b2:	0c11      	lsrs	r1, r2, #16
 80018b4:	0412      	lsls	r2, r2, #16
 80018b6:	0c12      	lsrs	r2, r2, #16
 80018b8:	4353      	muls	r3, r2
 80018ba:	4698      	mov	r8, r3
 80018bc:	0013      	movs	r3, r2
 80018be:	002f      	movs	r7, r5
 80018c0:	4343      	muls	r3, r0
 80018c2:	4699      	mov	r9, r3
 80018c4:	434f      	muls	r7, r1
 80018c6:	444f      	add	r7, r9
 80018c8:	46bb      	mov	fp, r7
 80018ca:	4647      	mov	r7, r8
 80018cc:	000b      	movs	r3, r1
 80018ce:	0c3f      	lsrs	r7, r7, #16
 80018d0:	46ba      	mov	sl, r7
 80018d2:	4343      	muls	r3, r0
 80018d4:	44da      	add	sl, fp
 80018d6:	9302      	str	r3, [sp, #8]
 80018d8:	45d1      	cmp	r9, sl
 80018da:	d904      	bls.n	80018e6 <__aeabi_dmul+0x122>
 80018dc:	2780      	movs	r7, #128	; 0x80
 80018de:	027f      	lsls	r7, r7, #9
 80018e0:	46b9      	mov	r9, r7
 80018e2:	444b      	add	r3, r9
 80018e4:	9302      	str	r3, [sp, #8]
 80018e6:	4653      	mov	r3, sl
 80018e8:	0c1b      	lsrs	r3, r3, #16
 80018ea:	469b      	mov	fp, r3
 80018ec:	4653      	mov	r3, sl
 80018ee:	041f      	lsls	r7, r3, #16
 80018f0:	4643      	mov	r3, r8
 80018f2:	041b      	lsls	r3, r3, #16
 80018f4:	0c1b      	lsrs	r3, r3, #16
 80018f6:	4698      	mov	r8, r3
 80018f8:	003b      	movs	r3, r7
 80018fa:	4443      	add	r3, r8
 80018fc:	9304      	str	r3, [sp, #16]
 80018fe:	0c33      	lsrs	r3, r6, #16
 8001900:	0436      	lsls	r6, r6, #16
 8001902:	0c36      	lsrs	r6, r6, #16
 8001904:	4698      	mov	r8, r3
 8001906:	0033      	movs	r3, r6
 8001908:	4343      	muls	r3, r0
 800190a:	4699      	mov	r9, r3
 800190c:	4643      	mov	r3, r8
 800190e:	4343      	muls	r3, r0
 8001910:	002f      	movs	r7, r5
 8001912:	469a      	mov	sl, r3
 8001914:	4643      	mov	r3, r8
 8001916:	4377      	muls	r7, r6
 8001918:	435d      	muls	r5, r3
 800191a:	0c38      	lsrs	r0, r7, #16
 800191c:	444d      	add	r5, r9
 800191e:	1945      	adds	r5, r0, r5
 8001920:	45a9      	cmp	r9, r5
 8001922:	d903      	bls.n	800192c <__aeabi_dmul+0x168>
 8001924:	2380      	movs	r3, #128	; 0x80
 8001926:	025b      	lsls	r3, r3, #9
 8001928:	4699      	mov	r9, r3
 800192a:	44ca      	add	sl, r9
 800192c:	043f      	lsls	r7, r7, #16
 800192e:	0c28      	lsrs	r0, r5, #16
 8001930:	0c3f      	lsrs	r7, r7, #16
 8001932:	042d      	lsls	r5, r5, #16
 8001934:	19ed      	adds	r5, r5, r7
 8001936:	0c27      	lsrs	r7, r4, #16
 8001938:	0424      	lsls	r4, r4, #16
 800193a:	0c24      	lsrs	r4, r4, #16
 800193c:	0003      	movs	r3, r0
 800193e:	0020      	movs	r0, r4
 8001940:	4350      	muls	r0, r2
 8001942:	437a      	muls	r2, r7
 8001944:	4691      	mov	r9, r2
 8001946:	003a      	movs	r2, r7
 8001948:	4453      	add	r3, sl
 800194a:	9305      	str	r3, [sp, #20]
 800194c:	0c03      	lsrs	r3, r0, #16
 800194e:	469a      	mov	sl, r3
 8001950:	434a      	muls	r2, r1
 8001952:	4361      	muls	r1, r4
 8001954:	4449      	add	r1, r9
 8001956:	4451      	add	r1, sl
 8001958:	44ab      	add	fp, r5
 800195a:	4589      	cmp	r9, r1
 800195c:	d903      	bls.n	8001966 <__aeabi_dmul+0x1a2>
 800195e:	2380      	movs	r3, #128	; 0x80
 8001960:	025b      	lsls	r3, r3, #9
 8001962:	4699      	mov	r9, r3
 8001964:	444a      	add	r2, r9
 8001966:	0400      	lsls	r0, r0, #16
 8001968:	0c0b      	lsrs	r3, r1, #16
 800196a:	0c00      	lsrs	r0, r0, #16
 800196c:	0409      	lsls	r1, r1, #16
 800196e:	1809      	adds	r1, r1, r0
 8001970:	0020      	movs	r0, r4
 8001972:	4699      	mov	r9, r3
 8001974:	4643      	mov	r3, r8
 8001976:	4370      	muls	r0, r6
 8001978:	435c      	muls	r4, r3
 800197a:	437e      	muls	r6, r7
 800197c:	435f      	muls	r7, r3
 800197e:	0c03      	lsrs	r3, r0, #16
 8001980:	4698      	mov	r8, r3
 8001982:	19a4      	adds	r4, r4, r6
 8001984:	4444      	add	r4, r8
 8001986:	444a      	add	r2, r9
 8001988:	9703      	str	r7, [sp, #12]
 800198a:	42a6      	cmp	r6, r4
 800198c:	d904      	bls.n	8001998 <__aeabi_dmul+0x1d4>
 800198e:	2380      	movs	r3, #128	; 0x80
 8001990:	025b      	lsls	r3, r3, #9
 8001992:	4698      	mov	r8, r3
 8001994:	4447      	add	r7, r8
 8001996:	9703      	str	r7, [sp, #12]
 8001998:	0423      	lsls	r3, r4, #16
 800199a:	9e02      	ldr	r6, [sp, #8]
 800199c:	469a      	mov	sl, r3
 800199e:	9b05      	ldr	r3, [sp, #20]
 80019a0:	445e      	add	r6, fp
 80019a2:	4698      	mov	r8, r3
 80019a4:	42ae      	cmp	r6, r5
 80019a6:	41ad      	sbcs	r5, r5
 80019a8:	1876      	adds	r6, r6, r1
 80019aa:	428e      	cmp	r6, r1
 80019ac:	4189      	sbcs	r1, r1
 80019ae:	0400      	lsls	r0, r0, #16
 80019b0:	0c00      	lsrs	r0, r0, #16
 80019b2:	4450      	add	r0, sl
 80019b4:	4440      	add	r0, r8
 80019b6:	426d      	negs	r5, r5
 80019b8:	1947      	adds	r7, r0, r5
 80019ba:	46b8      	mov	r8, r7
 80019bc:	4693      	mov	fp, r2
 80019be:	4249      	negs	r1, r1
 80019c0:	4689      	mov	r9, r1
 80019c2:	44c3      	add	fp, r8
 80019c4:	44d9      	add	r9, fp
 80019c6:	4298      	cmp	r0, r3
 80019c8:	4180      	sbcs	r0, r0
 80019ca:	45a8      	cmp	r8, r5
 80019cc:	41ad      	sbcs	r5, r5
 80019ce:	4593      	cmp	fp, r2
 80019d0:	4192      	sbcs	r2, r2
 80019d2:	4589      	cmp	r9, r1
 80019d4:	4189      	sbcs	r1, r1
 80019d6:	426d      	negs	r5, r5
 80019d8:	4240      	negs	r0, r0
 80019da:	4328      	orrs	r0, r5
 80019dc:	0c24      	lsrs	r4, r4, #16
 80019de:	4252      	negs	r2, r2
 80019e0:	4249      	negs	r1, r1
 80019e2:	430a      	orrs	r2, r1
 80019e4:	9b03      	ldr	r3, [sp, #12]
 80019e6:	1900      	adds	r0, r0, r4
 80019e8:	1880      	adds	r0, r0, r2
 80019ea:	18c7      	adds	r7, r0, r3
 80019ec:	464b      	mov	r3, r9
 80019ee:	0ddc      	lsrs	r4, r3, #23
 80019f0:	9b04      	ldr	r3, [sp, #16]
 80019f2:	0275      	lsls	r5, r6, #9
 80019f4:	431d      	orrs	r5, r3
 80019f6:	1e6a      	subs	r2, r5, #1
 80019f8:	4195      	sbcs	r5, r2
 80019fa:	464b      	mov	r3, r9
 80019fc:	0df6      	lsrs	r6, r6, #23
 80019fe:	027f      	lsls	r7, r7, #9
 8001a00:	4335      	orrs	r5, r6
 8001a02:	025a      	lsls	r2, r3, #9
 8001a04:	433c      	orrs	r4, r7
 8001a06:	4315      	orrs	r5, r2
 8001a08:	01fb      	lsls	r3, r7, #7
 8001a0a:	d400      	bmi.n	8001a0e <__aeabi_dmul+0x24a>
 8001a0c:	e11c      	b.n	8001c48 <__aeabi_dmul+0x484>
 8001a0e:	2101      	movs	r1, #1
 8001a10:	086a      	lsrs	r2, r5, #1
 8001a12:	400d      	ands	r5, r1
 8001a14:	4315      	orrs	r5, r2
 8001a16:	07e2      	lsls	r2, r4, #31
 8001a18:	4315      	orrs	r5, r2
 8001a1a:	0864      	lsrs	r4, r4, #1
 8001a1c:	494f      	ldr	r1, [pc, #316]	; (8001b5c <__aeabi_dmul+0x398>)
 8001a1e:	4461      	add	r1, ip
 8001a20:	2900      	cmp	r1, #0
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_dmul+0x262>
 8001a24:	e0b0      	b.n	8001b88 <__aeabi_dmul+0x3c4>
 8001a26:	076b      	lsls	r3, r5, #29
 8001a28:	d009      	beq.n	8001a3e <__aeabi_dmul+0x27a>
 8001a2a:	220f      	movs	r2, #15
 8001a2c:	402a      	ands	r2, r5
 8001a2e:	2a04      	cmp	r2, #4
 8001a30:	d005      	beq.n	8001a3e <__aeabi_dmul+0x27a>
 8001a32:	1d2a      	adds	r2, r5, #4
 8001a34:	42aa      	cmp	r2, r5
 8001a36:	41ad      	sbcs	r5, r5
 8001a38:	426d      	negs	r5, r5
 8001a3a:	1964      	adds	r4, r4, r5
 8001a3c:	0015      	movs	r5, r2
 8001a3e:	01e3      	lsls	r3, r4, #7
 8001a40:	d504      	bpl.n	8001a4c <__aeabi_dmul+0x288>
 8001a42:	2180      	movs	r1, #128	; 0x80
 8001a44:	4a46      	ldr	r2, [pc, #280]	; (8001b60 <__aeabi_dmul+0x39c>)
 8001a46:	00c9      	lsls	r1, r1, #3
 8001a48:	4014      	ands	r4, r2
 8001a4a:	4461      	add	r1, ip
 8001a4c:	4a45      	ldr	r2, [pc, #276]	; (8001b64 <__aeabi_dmul+0x3a0>)
 8001a4e:	4291      	cmp	r1, r2
 8001a50:	dd00      	ble.n	8001a54 <__aeabi_dmul+0x290>
 8001a52:	e726      	b.n	80018a2 <__aeabi_dmul+0xde>
 8001a54:	0762      	lsls	r2, r4, #29
 8001a56:	08ed      	lsrs	r5, r5, #3
 8001a58:	0264      	lsls	r4, r4, #9
 8001a5a:	0549      	lsls	r1, r1, #21
 8001a5c:	4315      	orrs	r5, r2
 8001a5e:	0b24      	lsrs	r4, r4, #12
 8001a60:	0d4a      	lsrs	r2, r1, #21
 8001a62:	e710      	b.n	8001886 <__aeabi_dmul+0xc2>
 8001a64:	4652      	mov	r2, sl
 8001a66:	4332      	orrs	r2, r6
 8001a68:	d100      	bne.n	8001a6c <__aeabi_dmul+0x2a8>
 8001a6a:	e07f      	b.n	8001b6c <__aeabi_dmul+0x3a8>
 8001a6c:	2e00      	cmp	r6, #0
 8001a6e:	d100      	bne.n	8001a72 <__aeabi_dmul+0x2ae>
 8001a70:	e0dc      	b.n	8001c2c <__aeabi_dmul+0x468>
 8001a72:	0030      	movs	r0, r6
 8001a74:	f000 fd96 	bl	80025a4 <__clzsi2>
 8001a78:	0002      	movs	r2, r0
 8001a7a:	3a0b      	subs	r2, #11
 8001a7c:	231d      	movs	r3, #29
 8001a7e:	0001      	movs	r1, r0
 8001a80:	1a9b      	subs	r3, r3, r2
 8001a82:	4652      	mov	r2, sl
 8001a84:	3908      	subs	r1, #8
 8001a86:	40da      	lsrs	r2, r3
 8001a88:	408e      	lsls	r6, r1
 8001a8a:	4316      	orrs	r6, r2
 8001a8c:	4652      	mov	r2, sl
 8001a8e:	408a      	lsls	r2, r1
 8001a90:	9b00      	ldr	r3, [sp, #0]
 8001a92:	4935      	ldr	r1, [pc, #212]	; (8001b68 <__aeabi_dmul+0x3a4>)
 8001a94:	1a18      	subs	r0, r3, r0
 8001a96:	0003      	movs	r3, r0
 8001a98:	468c      	mov	ip, r1
 8001a9a:	4463      	add	r3, ip
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	e6d3      	b.n	800184a <__aeabi_dmul+0x86>
 8001aa2:	0025      	movs	r5, r4
 8001aa4:	4305      	orrs	r5, r0
 8001aa6:	d04a      	beq.n	8001b3e <__aeabi_dmul+0x37a>
 8001aa8:	2c00      	cmp	r4, #0
 8001aaa:	d100      	bne.n	8001aae <__aeabi_dmul+0x2ea>
 8001aac:	e0b0      	b.n	8001c10 <__aeabi_dmul+0x44c>
 8001aae:	0020      	movs	r0, r4
 8001ab0:	f000 fd78 	bl	80025a4 <__clzsi2>
 8001ab4:	0001      	movs	r1, r0
 8001ab6:	0002      	movs	r2, r0
 8001ab8:	390b      	subs	r1, #11
 8001aba:	231d      	movs	r3, #29
 8001abc:	0010      	movs	r0, r2
 8001abe:	1a5b      	subs	r3, r3, r1
 8001ac0:	0031      	movs	r1, r6
 8001ac2:	0035      	movs	r5, r6
 8001ac4:	3808      	subs	r0, #8
 8001ac6:	4084      	lsls	r4, r0
 8001ac8:	40d9      	lsrs	r1, r3
 8001aca:	4085      	lsls	r5, r0
 8001acc:	430c      	orrs	r4, r1
 8001ace:	4826      	ldr	r0, [pc, #152]	; (8001b68 <__aeabi_dmul+0x3a4>)
 8001ad0:	1a83      	subs	r3, r0, r2
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	4699      	mov	r9, r3
 8001ad8:	469b      	mov	fp, r3
 8001ada:	e697      	b.n	800180c <__aeabi_dmul+0x48>
 8001adc:	0005      	movs	r5, r0
 8001ade:	4325      	orrs	r5, r4
 8001ae0:	d126      	bne.n	8001b30 <__aeabi_dmul+0x36c>
 8001ae2:	2208      	movs	r2, #8
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	2400      	movs	r4, #0
 8001aea:	4691      	mov	r9, r2
 8001aec:	469b      	mov	fp, r3
 8001aee:	e68d      	b.n	800180c <__aeabi_dmul+0x48>
 8001af0:	4652      	mov	r2, sl
 8001af2:	9b00      	ldr	r3, [sp, #0]
 8001af4:	4332      	orrs	r2, r6
 8001af6:	d110      	bne.n	8001b1a <__aeabi_dmul+0x356>
 8001af8:	4915      	ldr	r1, [pc, #84]	; (8001b50 <__aeabi_dmul+0x38c>)
 8001afa:	2600      	movs	r6, #0
 8001afc:	468c      	mov	ip, r1
 8001afe:	4463      	add	r3, ip
 8001b00:	4649      	mov	r1, r9
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	2302      	movs	r3, #2
 8001b06:	4319      	orrs	r1, r3
 8001b08:	4689      	mov	r9, r1
 8001b0a:	2002      	movs	r0, #2
 8001b0c:	e69d      	b.n	800184a <__aeabi_dmul+0x86>
 8001b0e:	465b      	mov	r3, fp
 8001b10:	9701      	str	r7, [sp, #4]
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d000      	beq.n	8001b18 <__aeabi_dmul+0x354>
 8001b16:	e6ad      	b.n	8001874 <__aeabi_dmul+0xb0>
 8001b18:	e6c3      	b.n	80018a2 <__aeabi_dmul+0xde>
 8001b1a:	4a0d      	ldr	r2, [pc, #52]	; (8001b50 <__aeabi_dmul+0x38c>)
 8001b1c:	2003      	movs	r0, #3
 8001b1e:	4694      	mov	ip, r2
 8001b20:	4463      	add	r3, ip
 8001b22:	464a      	mov	r2, r9
 8001b24:	9300      	str	r3, [sp, #0]
 8001b26:	2303      	movs	r3, #3
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	4691      	mov	r9, r2
 8001b2c:	4652      	mov	r2, sl
 8001b2e:	e68c      	b.n	800184a <__aeabi_dmul+0x86>
 8001b30:	220c      	movs	r2, #12
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	2303      	movs	r3, #3
 8001b36:	0005      	movs	r5, r0
 8001b38:	4691      	mov	r9, r2
 8001b3a:	469b      	mov	fp, r3
 8001b3c:	e666      	b.n	800180c <__aeabi_dmul+0x48>
 8001b3e:	2304      	movs	r3, #4
 8001b40:	4699      	mov	r9, r3
 8001b42:	2300      	movs	r3, #0
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	3301      	adds	r3, #1
 8001b48:	2400      	movs	r4, #0
 8001b4a:	469b      	mov	fp, r3
 8001b4c:	e65e      	b.n	800180c <__aeabi_dmul+0x48>
 8001b4e:	46c0      	nop			; (mov r8, r8)
 8001b50:	000007ff 	.word	0x000007ff
 8001b54:	fffffc01 	.word	0xfffffc01
 8001b58:	0800930c 	.word	0x0800930c
 8001b5c:	000003ff 	.word	0x000003ff
 8001b60:	feffffff 	.word	0xfeffffff
 8001b64:	000007fe 	.word	0x000007fe
 8001b68:	fffffc0d 	.word	0xfffffc0d
 8001b6c:	4649      	mov	r1, r9
 8001b6e:	2301      	movs	r3, #1
 8001b70:	4319      	orrs	r1, r3
 8001b72:	4689      	mov	r9, r1
 8001b74:	2600      	movs	r6, #0
 8001b76:	2001      	movs	r0, #1
 8001b78:	e667      	b.n	800184a <__aeabi_dmul+0x86>
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	2480      	movs	r4, #128	; 0x80
 8001b7e:	2500      	movs	r5, #0
 8001b80:	4a43      	ldr	r2, [pc, #268]	; (8001c90 <__aeabi_dmul+0x4cc>)
 8001b82:	9301      	str	r3, [sp, #4]
 8001b84:	0324      	lsls	r4, r4, #12
 8001b86:	e67e      	b.n	8001886 <__aeabi_dmul+0xc2>
 8001b88:	2001      	movs	r0, #1
 8001b8a:	1a40      	subs	r0, r0, r1
 8001b8c:	2838      	cmp	r0, #56	; 0x38
 8001b8e:	dd00      	ble.n	8001b92 <__aeabi_dmul+0x3ce>
 8001b90:	e676      	b.n	8001880 <__aeabi_dmul+0xbc>
 8001b92:	281f      	cmp	r0, #31
 8001b94:	dd5b      	ble.n	8001c4e <__aeabi_dmul+0x48a>
 8001b96:	221f      	movs	r2, #31
 8001b98:	0023      	movs	r3, r4
 8001b9a:	4252      	negs	r2, r2
 8001b9c:	1a51      	subs	r1, r2, r1
 8001b9e:	40cb      	lsrs	r3, r1
 8001ba0:	0019      	movs	r1, r3
 8001ba2:	2820      	cmp	r0, #32
 8001ba4:	d003      	beq.n	8001bae <__aeabi_dmul+0x3ea>
 8001ba6:	4a3b      	ldr	r2, [pc, #236]	; (8001c94 <__aeabi_dmul+0x4d0>)
 8001ba8:	4462      	add	r2, ip
 8001baa:	4094      	lsls	r4, r2
 8001bac:	4325      	orrs	r5, r4
 8001bae:	1e6a      	subs	r2, r5, #1
 8001bb0:	4195      	sbcs	r5, r2
 8001bb2:	002a      	movs	r2, r5
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	2107      	movs	r1, #7
 8001bb8:	000d      	movs	r5, r1
 8001bba:	2400      	movs	r4, #0
 8001bbc:	4015      	ands	r5, r2
 8001bbe:	4211      	tst	r1, r2
 8001bc0:	d05b      	beq.n	8001c7a <__aeabi_dmul+0x4b6>
 8001bc2:	210f      	movs	r1, #15
 8001bc4:	2400      	movs	r4, #0
 8001bc6:	4011      	ands	r1, r2
 8001bc8:	2904      	cmp	r1, #4
 8001bca:	d053      	beq.n	8001c74 <__aeabi_dmul+0x4b0>
 8001bcc:	1d11      	adds	r1, r2, #4
 8001bce:	4291      	cmp	r1, r2
 8001bd0:	4192      	sbcs	r2, r2
 8001bd2:	4252      	negs	r2, r2
 8001bd4:	18a4      	adds	r4, r4, r2
 8001bd6:	000a      	movs	r2, r1
 8001bd8:	0223      	lsls	r3, r4, #8
 8001bda:	d54b      	bpl.n	8001c74 <__aeabi_dmul+0x4b0>
 8001bdc:	2201      	movs	r2, #1
 8001bde:	2400      	movs	r4, #0
 8001be0:	2500      	movs	r5, #0
 8001be2:	e650      	b.n	8001886 <__aeabi_dmul+0xc2>
 8001be4:	2380      	movs	r3, #128	; 0x80
 8001be6:	031b      	lsls	r3, r3, #12
 8001be8:	421c      	tst	r4, r3
 8001bea:	d009      	beq.n	8001c00 <__aeabi_dmul+0x43c>
 8001bec:	421e      	tst	r6, r3
 8001bee:	d107      	bne.n	8001c00 <__aeabi_dmul+0x43c>
 8001bf0:	4333      	orrs	r3, r6
 8001bf2:	031c      	lsls	r4, r3, #12
 8001bf4:	4643      	mov	r3, r8
 8001bf6:	0015      	movs	r5, r2
 8001bf8:	0b24      	lsrs	r4, r4, #12
 8001bfa:	4a25      	ldr	r2, [pc, #148]	; (8001c90 <__aeabi_dmul+0x4cc>)
 8001bfc:	9301      	str	r3, [sp, #4]
 8001bfe:	e642      	b.n	8001886 <__aeabi_dmul+0xc2>
 8001c00:	2280      	movs	r2, #128	; 0x80
 8001c02:	0312      	lsls	r2, r2, #12
 8001c04:	4314      	orrs	r4, r2
 8001c06:	0324      	lsls	r4, r4, #12
 8001c08:	4a21      	ldr	r2, [pc, #132]	; (8001c90 <__aeabi_dmul+0x4cc>)
 8001c0a:	0b24      	lsrs	r4, r4, #12
 8001c0c:	9701      	str	r7, [sp, #4]
 8001c0e:	e63a      	b.n	8001886 <__aeabi_dmul+0xc2>
 8001c10:	f000 fcc8 	bl	80025a4 <__clzsi2>
 8001c14:	0001      	movs	r1, r0
 8001c16:	0002      	movs	r2, r0
 8001c18:	3115      	adds	r1, #21
 8001c1a:	3220      	adds	r2, #32
 8001c1c:	291c      	cmp	r1, #28
 8001c1e:	dc00      	bgt.n	8001c22 <__aeabi_dmul+0x45e>
 8001c20:	e74b      	b.n	8001aba <__aeabi_dmul+0x2f6>
 8001c22:	0034      	movs	r4, r6
 8001c24:	3808      	subs	r0, #8
 8001c26:	2500      	movs	r5, #0
 8001c28:	4084      	lsls	r4, r0
 8001c2a:	e750      	b.n	8001ace <__aeabi_dmul+0x30a>
 8001c2c:	f000 fcba 	bl	80025a4 <__clzsi2>
 8001c30:	0003      	movs	r3, r0
 8001c32:	001a      	movs	r2, r3
 8001c34:	3215      	adds	r2, #21
 8001c36:	3020      	adds	r0, #32
 8001c38:	2a1c      	cmp	r2, #28
 8001c3a:	dc00      	bgt.n	8001c3e <__aeabi_dmul+0x47a>
 8001c3c:	e71e      	b.n	8001a7c <__aeabi_dmul+0x2b8>
 8001c3e:	4656      	mov	r6, sl
 8001c40:	3b08      	subs	r3, #8
 8001c42:	2200      	movs	r2, #0
 8001c44:	409e      	lsls	r6, r3
 8001c46:	e723      	b.n	8001a90 <__aeabi_dmul+0x2cc>
 8001c48:	9b00      	ldr	r3, [sp, #0]
 8001c4a:	469c      	mov	ip, r3
 8001c4c:	e6e6      	b.n	8001a1c <__aeabi_dmul+0x258>
 8001c4e:	4912      	ldr	r1, [pc, #72]	; (8001c98 <__aeabi_dmul+0x4d4>)
 8001c50:	0022      	movs	r2, r4
 8001c52:	4461      	add	r1, ip
 8001c54:	002e      	movs	r6, r5
 8001c56:	408d      	lsls	r5, r1
 8001c58:	408a      	lsls	r2, r1
 8001c5a:	40c6      	lsrs	r6, r0
 8001c5c:	1e69      	subs	r1, r5, #1
 8001c5e:	418d      	sbcs	r5, r1
 8001c60:	4332      	orrs	r2, r6
 8001c62:	432a      	orrs	r2, r5
 8001c64:	40c4      	lsrs	r4, r0
 8001c66:	0753      	lsls	r3, r2, #29
 8001c68:	d0b6      	beq.n	8001bd8 <__aeabi_dmul+0x414>
 8001c6a:	210f      	movs	r1, #15
 8001c6c:	4011      	ands	r1, r2
 8001c6e:	2904      	cmp	r1, #4
 8001c70:	d1ac      	bne.n	8001bcc <__aeabi_dmul+0x408>
 8001c72:	e7b1      	b.n	8001bd8 <__aeabi_dmul+0x414>
 8001c74:	0765      	lsls	r5, r4, #29
 8001c76:	0264      	lsls	r4, r4, #9
 8001c78:	0b24      	lsrs	r4, r4, #12
 8001c7a:	08d2      	lsrs	r2, r2, #3
 8001c7c:	4315      	orrs	r5, r2
 8001c7e:	2200      	movs	r2, #0
 8001c80:	e601      	b.n	8001886 <__aeabi_dmul+0xc2>
 8001c82:	2280      	movs	r2, #128	; 0x80
 8001c84:	0312      	lsls	r2, r2, #12
 8001c86:	4314      	orrs	r4, r2
 8001c88:	0324      	lsls	r4, r4, #12
 8001c8a:	4a01      	ldr	r2, [pc, #4]	; (8001c90 <__aeabi_dmul+0x4cc>)
 8001c8c:	0b24      	lsrs	r4, r4, #12
 8001c8e:	e5fa      	b.n	8001886 <__aeabi_dmul+0xc2>
 8001c90:	000007ff 	.word	0x000007ff
 8001c94:	0000043e 	.word	0x0000043e
 8001c98:	0000041e 	.word	0x0000041e

08001c9c <__aeabi_dsub>:
 8001c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c9e:	4657      	mov	r7, sl
 8001ca0:	464e      	mov	r6, r9
 8001ca2:	4645      	mov	r5, r8
 8001ca4:	46de      	mov	lr, fp
 8001ca6:	b5e0      	push	{r5, r6, r7, lr}
 8001ca8:	001e      	movs	r6, r3
 8001caa:	0017      	movs	r7, r2
 8001cac:	004a      	lsls	r2, r1, #1
 8001cae:	030b      	lsls	r3, r1, #12
 8001cb0:	0d52      	lsrs	r2, r2, #21
 8001cb2:	0a5b      	lsrs	r3, r3, #9
 8001cb4:	4690      	mov	r8, r2
 8001cb6:	0f42      	lsrs	r2, r0, #29
 8001cb8:	431a      	orrs	r2, r3
 8001cba:	0fcd      	lsrs	r5, r1, #31
 8001cbc:	4ccd      	ldr	r4, [pc, #820]	; (8001ff4 <__aeabi_dsub+0x358>)
 8001cbe:	0331      	lsls	r1, r6, #12
 8001cc0:	00c3      	lsls	r3, r0, #3
 8001cc2:	4694      	mov	ip, r2
 8001cc4:	0070      	lsls	r0, r6, #1
 8001cc6:	0f7a      	lsrs	r2, r7, #29
 8001cc8:	0a49      	lsrs	r1, r1, #9
 8001cca:	00ff      	lsls	r7, r7, #3
 8001ccc:	469a      	mov	sl, r3
 8001cce:	46b9      	mov	r9, r7
 8001cd0:	0d40      	lsrs	r0, r0, #21
 8001cd2:	0ff6      	lsrs	r6, r6, #31
 8001cd4:	4311      	orrs	r1, r2
 8001cd6:	42a0      	cmp	r0, r4
 8001cd8:	d100      	bne.n	8001cdc <__aeabi_dsub+0x40>
 8001cda:	e0b1      	b.n	8001e40 <__aeabi_dsub+0x1a4>
 8001cdc:	2201      	movs	r2, #1
 8001cde:	4056      	eors	r6, r2
 8001ce0:	46b3      	mov	fp, r6
 8001ce2:	42b5      	cmp	r5, r6
 8001ce4:	d100      	bne.n	8001ce8 <__aeabi_dsub+0x4c>
 8001ce6:	e088      	b.n	8001dfa <__aeabi_dsub+0x15e>
 8001ce8:	4642      	mov	r2, r8
 8001cea:	1a12      	subs	r2, r2, r0
 8001cec:	2a00      	cmp	r2, #0
 8001cee:	dc00      	bgt.n	8001cf2 <__aeabi_dsub+0x56>
 8001cf0:	e0ae      	b.n	8001e50 <__aeabi_dsub+0x1b4>
 8001cf2:	2800      	cmp	r0, #0
 8001cf4:	d100      	bne.n	8001cf8 <__aeabi_dsub+0x5c>
 8001cf6:	e0c1      	b.n	8001e7c <__aeabi_dsub+0x1e0>
 8001cf8:	48be      	ldr	r0, [pc, #760]	; (8001ff4 <__aeabi_dsub+0x358>)
 8001cfa:	4580      	cmp	r8, r0
 8001cfc:	d100      	bne.n	8001d00 <__aeabi_dsub+0x64>
 8001cfe:	e151      	b.n	8001fa4 <__aeabi_dsub+0x308>
 8001d00:	2080      	movs	r0, #128	; 0x80
 8001d02:	0400      	lsls	r0, r0, #16
 8001d04:	4301      	orrs	r1, r0
 8001d06:	2a38      	cmp	r2, #56	; 0x38
 8001d08:	dd00      	ble.n	8001d0c <__aeabi_dsub+0x70>
 8001d0a:	e17b      	b.n	8002004 <__aeabi_dsub+0x368>
 8001d0c:	2a1f      	cmp	r2, #31
 8001d0e:	dd00      	ble.n	8001d12 <__aeabi_dsub+0x76>
 8001d10:	e1ee      	b.n	80020f0 <__aeabi_dsub+0x454>
 8001d12:	2020      	movs	r0, #32
 8001d14:	003e      	movs	r6, r7
 8001d16:	1a80      	subs	r0, r0, r2
 8001d18:	000c      	movs	r4, r1
 8001d1a:	40d6      	lsrs	r6, r2
 8001d1c:	40d1      	lsrs	r1, r2
 8001d1e:	4087      	lsls	r7, r0
 8001d20:	4662      	mov	r2, ip
 8001d22:	4084      	lsls	r4, r0
 8001d24:	1a52      	subs	r2, r2, r1
 8001d26:	1e78      	subs	r0, r7, #1
 8001d28:	4187      	sbcs	r7, r0
 8001d2a:	4694      	mov	ip, r2
 8001d2c:	4334      	orrs	r4, r6
 8001d2e:	4327      	orrs	r7, r4
 8001d30:	1bdc      	subs	r4, r3, r7
 8001d32:	42a3      	cmp	r3, r4
 8001d34:	419b      	sbcs	r3, r3
 8001d36:	4662      	mov	r2, ip
 8001d38:	425b      	negs	r3, r3
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	4699      	mov	r9, r3
 8001d3e:	464b      	mov	r3, r9
 8001d40:	021b      	lsls	r3, r3, #8
 8001d42:	d400      	bmi.n	8001d46 <__aeabi_dsub+0xaa>
 8001d44:	e118      	b.n	8001f78 <__aeabi_dsub+0x2dc>
 8001d46:	464b      	mov	r3, r9
 8001d48:	0258      	lsls	r0, r3, #9
 8001d4a:	0a43      	lsrs	r3, r0, #9
 8001d4c:	4699      	mov	r9, r3
 8001d4e:	464b      	mov	r3, r9
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d100      	bne.n	8001d56 <__aeabi_dsub+0xba>
 8001d54:	e137      	b.n	8001fc6 <__aeabi_dsub+0x32a>
 8001d56:	4648      	mov	r0, r9
 8001d58:	f000 fc24 	bl	80025a4 <__clzsi2>
 8001d5c:	0001      	movs	r1, r0
 8001d5e:	3908      	subs	r1, #8
 8001d60:	2320      	movs	r3, #32
 8001d62:	0022      	movs	r2, r4
 8001d64:	4648      	mov	r0, r9
 8001d66:	1a5b      	subs	r3, r3, r1
 8001d68:	40da      	lsrs	r2, r3
 8001d6a:	4088      	lsls	r0, r1
 8001d6c:	408c      	lsls	r4, r1
 8001d6e:	4643      	mov	r3, r8
 8001d70:	4310      	orrs	r0, r2
 8001d72:	4588      	cmp	r8, r1
 8001d74:	dd00      	ble.n	8001d78 <__aeabi_dsub+0xdc>
 8001d76:	e136      	b.n	8001fe6 <__aeabi_dsub+0x34a>
 8001d78:	1ac9      	subs	r1, r1, r3
 8001d7a:	1c4b      	adds	r3, r1, #1
 8001d7c:	2b1f      	cmp	r3, #31
 8001d7e:	dd00      	ble.n	8001d82 <__aeabi_dsub+0xe6>
 8001d80:	e0ea      	b.n	8001f58 <__aeabi_dsub+0x2bc>
 8001d82:	2220      	movs	r2, #32
 8001d84:	0026      	movs	r6, r4
 8001d86:	1ad2      	subs	r2, r2, r3
 8001d88:	0001      	movs	r1, r0
 8001d8a:	4094      	lsls	r4, r2
 8001d8c:	40de      	lsrs	r6, r3
 8001d8e:	40d8      	lsrs	r0, r3
 8001d90:	2300      	movs	r3, #0
 8001d92:	4091      	lsls	r1, r2
 8001d94:	1e62      	subs	r2, r4, #1
 8001d96:	4194      	sbcs	r4, r2
 8001d98:	4681      	mov	r9, r0
 8001d9a:	4698      	mov	r8, r3
 8001d9c:	4331      	orrs	r1, r6
 8001d9e:	430c      	orrs	r4, r1
 8001da0:	0763      	lsls	r3, r4, #29
 8001da2:	d009      	beq.n	8001db8 <__aeabi_dsub+0x11c>
 8001da4:	230f      	movs	r3, #15
 8001da6:	4023      	ands	r3, r4
 8001da8:	2b04      	cmp	r3, #4
 8001daa:	d005      	beq.n	8001db8 <__aeabi_dsub+0x11c>
 8001dac:	1d23      	adds	r3, r4, #4
 8001dae:	42a3      	cmp	r3, r4
 8001db0:	41a4      	sbcs	r4, r4
 8001db2:	4264      	negs	r4, r4
 8001db4:	44a1      	add	r9, r4
 8001db6:	001c      	movs	r4, r3
 8001db8:	464b      	mov	r3, r9
 8001dba:	021b      	lsls	r3, r3, #8
 8001dbc:	d400      	bmi.n	8001dc0 <__aeabi_dsub+0x124>
 8001dbe:	e0de      	b.n	8001f7e <__aeabi_dsub+0x2e2>
 8001dc0:	4641      	mov	r1, r8
 8001dc2:	4b8c      	ldr	r3, [pc, #560]	; (8001ff4 <__aeabi_dsub+0x358>)
 8001dc4:	3101      	adds	r1, #1
 8001dc6:	4299      	cmp	r1, r3
 8001dc8:	d100      	bne.n	8001dcc <__aeabi_dsub+0x130>
 8001dca:	e0e7      	b.n	8001f9c <__aeabi_dsub+0x300>
 8001dcc:	464b      	mov	r3, r9
 8001dce:	488a      	ldr	r0, [pc, #552]	; (8001ff8 <__aeabi_dsub+0x35c>)
 8001dd0:	08e4      	lsrs	r4, r4, #3
 8001dd2:	4003      	ands	r3, r0
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	0549      	lsls	r1, r1, #21
 8001dd8:	075b      	lsls	r3, r3, #29
 8001dda:	0240      	lsls	r0, r0, #9
 8001ddc:	4323      	orrs	r3, r4
 8001dde:	0d4a      	lsrs	r2, r1, #21
 8001de0:	0b04      	lsrs	r4, r0, #12
 8001de2:	0512      	lsls	r2, r2, #20
 8001de4:	07ed      	lsls	r5, r5, #31
 8001de6:	4322      	orrs	r2, r4
 8001de8:	432a      	orrs	r2, r5
 8001dea:	0018      	movs	r0, r3
 8001dec:	0011      	movs	r1, r2
 8001dee:	bcf0      	pop	{r4, r5, r6, r7}
 8001df0:	46bb      	mov	fp, r7
 8001df2:	46b2      	mov	sl, r6
 8001df4:	46a9      	mov	r9, r5
 8001df6:	46a0      	mov	r8, r4
 8001df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001dfa:	4642      	mov	r2, r8
 8001dfc:	1a12      	subs	r2, r2, r0
 8001dfe:	2a00      	cmp	r2, #0
 8001e00:	dd52      	ble.n	8001ea8 <__aeabi_dsub+0x20c>
 8001e02:	2800      	cmp	r0, #0
 8001e04:	d100      	bne.n	8001e08 <__aeabi_dsub+0x16c>
 8001e06:	e09c      	b.n	8001f42 <__aeabi_dsub+0x2a6>
 8001e08:	45a0      	cmp	r8, r4
 8001e0a:	d100      	bne.n	8001e0e <__aeabi_dsub+0x172>
 8001e0c:	e0ca      	b.n	8001fa4 <__aeabi_dsub+0x308>
 8001e0e:	2080      	movs	r0, #128	; 0x80
 8001e10:	0400      	lsls	r0, r0, #16
 8001e12:	4301      	orrs	r1, r0
 8001e14:	2a38      	cmp	r2, #56	; 0x38
 8001e16:	dd00      	ble.n	8001e1a <__aeabi_dsub+0x17e>
 8001e18:	e149      	b.n	80020ae <__aeabi_dsub+0x412>
 8001e1a:	2a1f      	cmp	r2, #31
 8001e1c:	dc00      	bgt.n	8001e20 <__aeabi_dsub+0x184>
 8001e1e:	e197      	b.n	8002150 <__aeabi_dsub+0x4b4>
 8001e20:	0010      	movs	r0, r2
 8001e22:	000e      	movs	r6, r1
 8001e24:	3820      	subs	r0, #32
 8001e26:	40c6      	lsrs	r6, r0
 8001e28:	2a20      	cmp	r2, #32
 8001e2a:	d004      	beq.n	8001e36 <__aeabi_dsub+0x19a>
 8001e2c:	2040      	movs	r0, #64	; 0x40
 8001e2e:	1a82      	subs	r2, r0, r2
 8001e30:	4091      	lsls	r1, r2
 8001e32:	430f      	orrs	r7, r1
 8001e34:	46b9      	mov	r9, r7
 8001e36:	464c      	mov	r4, r9
 8001e38:	1e62      	subs	r2, r4, #1
 8001e3a:	4194      	sbcs	r4, r2
 8001e3c:	4334      	orrs	r4, r6
 8001e3e:	e13a      	b.n	80020b6 <__aeabi_dsub+0x41a>
 8001e40:	000a      	movs	r2, r1
 8001e42:	433a      	orrs	r2, r7
 8001e44:	d028      	beq.n	8001e98 <__aeabi_dsub+0x1fc>
 8001e46:	46b3      	mov	fp, r6
 8001e48:	42b5      	cmp	r5, r6
 8001e4a:	d02b      	beq.n	8001ea4 <__aeabi_dsub+0x208>
 8001e4c:	4a6b      	ldr	r2, [pc, #428]	; (8001ffc <__aeabi_dsub+0x360>)
 8001e4e:	4442      	add	r2, r8
 8001e50:	2a00      	cmp	r2, #0
 8001e52:	d05d      	beq.n	8001f10 <__aeabi_dsub+0x274>
 8001e54:	4642      	mov	r2, r8
 8001e56:	4644      	mov	r4, r8
 8001e58:	1a82      	subs	r2, r0, r2
 8001e5a:	2c00      	cmp	r4, #0
 8001e5c:	d000      	beq.n	8001e60 <__aeabi_dsub+0x1c4>
 8001e5e:	e0f5      	b.n	800204c <__aeabi_dsub+0x3b0>
 8001e60:	4665      	mov	r5, ip
 8001e62:	431d      	orrs	r5, r3
 8001e64:	d100      	bne.n	8001e68 <__aeabi_dsub+0x1cc>
 8001e66:	e19c      	b.n	80021a2 <__aeabi_dsub+0x506>
 8001e68:	1e55      	subs	r5, r2, #1
 8001e6a:	2a01      	cmp	r2, #1
 8001e6c:	d100      	bne.n	8001e70 <__aeabi_dsub+0x1d4>
 8001e6e:	e1fb      	b.n	8002268 <__aeabi_dsub+0x5cc>
 8001e70:	4c60      	ldr	r4, [pc, #384]	; (8001ff4 <__aeabi_dsub+0x358>)
 8001e72:	42a2      	cmp	r2, r4
 8001e74:	d100      	bne.n	8001e78 <__aeabi_dsub+0x1dc>
 8001e76:	e1bd      	b.n	80021f4 <__aeabi_dsub+0x558>
 8001e78:	002a      	movs	r2, r5
 8001e7a:	e0f0      	b.n	800205e <__aeabi_dsub+0x3c2>
 8001e7c:	0008      	movs	r0, r1
 8001e7e:	4338      	orrs	r0, r7
 8001e80:	d100      	bne.n	8001e84 <__aeabi_dsub+0x1e8>
 8001e82:	e0c3      	b.n	800200c <__aeabi_dsub+0x370>
 8001e84:	1e50      	subs	r0, r2, #1
 8001e86:	2a01      	cmp	r2, #1
 8001e88:	d100      	bne.n	8001e8c <__aeabi_dsub+0x1f0>
 8001e8a:	e1a8      	b.n	80021de <__aeabi_dsub+0x542>
 8001e8c:	4c59      	ldr	r4, [pc, #356]	; (8001ff4 <__aeabi_dsub+0x358>)
 8001e8e:	42a2      	cmp	r2, r4
 8001e90:	d100      	bne.n	8001e94 <__aeabi_dsub+0x1f8>
 8001e92:	e087      	b.n	8001fa4 <__aeabi_dsub+0x308>
 8001e94:	0002      	movs	r2, r0
 8001e96:	e736      	b.n	8001d06 <__aeabi_dsub+0x6a>
 8001e98:	2201      	movs	r2, #1
 8001e9a:	4056      	eors	r6, r2
 8001e9c:	46b3      	mov	fp, r6
 8001e9e:	42b5      	cmp	r5, r6
 8001ea0:	d000      	beq.n	8001ea4 <__aeabi_dsub+0x208>
 8001ea2:	e721      	b.n	8001ce8 <__aeabi_dsub+0x4c>
 8001ea4:	4a55      	ldr	r2, [pc, #340]	; (8001ffc <__aeabi_dsub+0x360>)
 8001ea6:	4442      	add	r2, r8
 8001ea8:	2a00      	cmp	r2, #0
 8001eaa:	d100      	bne.n	8001eae <__aeabi_dsub+0x212>
 8001eac:	e0b5      	b.n	800201a <__aeabi_dsub+0x37e>
 8001eae:	4642      	mov	r2, r8
 8001eb0:	4644      	mov	r4, r8
 8001eb2:	1a82      	subs	r2, r0, r2
 8001eb4:	2c00      	cmp	r4, #0
 8001eb6:	d100      	bne.n	8001eba <__aeabi_dsub+0x21e>
 8001eb8:	e138      	b.n	800212c <__aeabi_dsub+0x490>
 8001eba:	4e4e      	ldr	r6, [pc, #312]	; (8001ff4 <__aeabi_dsub+0x358>)
 8001ebc:	42b0      	cmp	r0, r6
 8001ebe:	d100      	bne.n	8001ec2 <__aeabi_dsub+0x226>
 8001ec0:	e1de      	b.n	8002280 <__aeabi_dsub+0x5e4>
 8001ec2:	2680      	movs	r6, #128	; 0x80
 8001ec4:	4664      	mov	r4, ip
 8001ec6:	0436      	lsls	r6, r6, #16
 8001ec8:	4334      	orrs	r4, r6
 8001eca:	46a4      	mov	ip, r4
 8001ecc:	2a38      	cmp	r2, #56	; 0x38
 8001ece:	dd00      	ble.n	8001ed2 <__aeabi_dsub+0x236>
 8001ed0:	e196      	b.n	8002200 <__aeabi_dsub+0x564>
 8001ed2:	2a1f      	cmp	r2, #31
 8001ed4:	dd00      	ble.n	8001ed8 <__aeabi_dsub+0x23c>
 8001ed6:	e224      	b.n	8002322 <__aeabi_dsub+0x686>
 8001ed8:	2620      	movs	r6, #32
 8001eda:	1ab4      	subs	r4, r6, r2
 8001edc:	46a2      	mov	sl, r4
 8001ede:	4664      	mov	r4, ip
 8001ee0:	4656      	mov	r6, sl
 8001ee2:	40b4      	lsls	r4, r6
 8001ee4:	46a1      	mov	r9, r4
 8001ee6:	001c      	movs	r4, r3
 8001ee8:	464e      	mov	r6, r9
 8001eea:	40d4      	lsrs	r4, r2
 8001eec:	4326      	orrs	r6, r4
 8001eee:	0034      	movs	r4, r6
 8001ef0:	4656      	mov	r6, sl
 8001ef2:	40b3      	lsls	r3, r6
 8001ef4:	1e5e      	subs	r6, r3, #1
 8001ef6:	41b3      	sbcs	r3, r6
 8001ef8:	431c      	orrs	r4, r3
 8001efa:	4663      	mov	r3, ip
 8001efc:	40d3      	lsrs	r3, r2
 8001efe:	18c9      	adds	r1, r1, r3
 8001f00:	19e4      	adds	r4, r4, r7
 8001f02:	42bc      	cmp	r4, r7
 8001f04:	41bf      	sbcs	r7, r7
 8001f06:	427f      	negs	r7, r7
 8001f08:	46b9      	mov	r9, r7
 8001f0a:	4680      	mov	r8, r0
 8001f0c:	4489      	add	r9, r1
 8001f0e:	e0d8      	b.n	80020c2 <__aeabi_dsub+0x426>
 8001f10:	4640      	mov	r0, r8
 8001f12:	4c3b      	ldr	r4, [pc, #236]	; (8002000 <__aeabi_dsub+0x364>)
 8001f14:	3001      	adds	r0, #1
 8001f16:	4220      	tst	r0, r4
 8001f18:	d000      	beq.n	8001f1c <__aeabi_dsub+0x280>
 8001f1a:	e0b4      	b.n	8002086 <__aeabi_dsub+0x3ea>
 8001f1c:	4640      	mov	r0, r8
 8001f1e:	2800      	cmp	r0, #0
 8001f20:	d000      	beq.n	8001f24 <__aeabi_dsub+0x288>
 8001f22:	e144      	b.n	80021ae <__aeabi_dsub+0x512>
 8001f24:	4660      	mov	r0, ip
 8001f26:	4318      	orrs	r0, r3
 8001f28:	d100      	bne.n	8001f2c <__aeabi_dsub+0x290>
 8001f2a:	e190      	b.n	800224e <__aeabi_dsub+0x5b2>
 8001f2c:	0008      	movs	r0, r1
 8001f2e:	4338      	orrs	r0, r7
 8001f30:	d000      	beq.n	8001f34 <__aeabi_dsub+0x298>
 8001f32:	e1aa      	b.n	800228a <__aeabi_dsub+0x5ee>
 8001f34:	4661      	mov	r1, ip
 8001f36:	08db      	lsrs	r3, r3, #3
 8001f38:	0749      	lsls	r1, r1, #29
 8001f3a:	430b      	orrs	r3, r1
 8001f3c:	4661      	mov	r1, ip
 8001f3e:	08cc      	lsrs	r4, r1, #3
 8001f40:	e027      	b.n	8001f92 <__aeabi_dsub+0x2f6>
 8001f42:	0008      	movs	r0, r1
 8001f44:	4338      	orrs	r0, r7
 8001f46:	d061      	beq.n	800200c <__aeabi_dsub+0x370>
 8001f48:	1e50      	subs	r0, r2, #1
 8001f4a:	2a01      	cmp	r2, #1
 8001f4c:	d100      	bne.n	8001f50 <__aeabi_dsub+0x2b4>
 8001f4e:	e139      	b.n	80021c4 <__aeabi_dsub+0x528>
 8001f50:	42a2      	cmp	r2, r4
 8001f52:	d027      	beq.n	8001fa4 <__aeabi_dsub+0x308>
 8001f54:	0002      	movs	r2, r0
 8001f56:	e75d      	b.n	8001e14 <__aeabi_dsub+0x178>
 8001f58:	0002      	movs	r2, r0
 8001f5a:	391f      	subs	r1, #31
 8001f5c:	40ca      	lsrs	r2, r1
 8001f5e:	0011      	movs	r1, r2
 8001f60:	2b20      	cmp	r3, #32
 8001f62:	d003      	beq.n	8001f6c <__aeabi_dsub+0x2d0>
 8001f64:	2240      	movs	r2, #64	; 0x40
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	4098      	lsls	r0, r3
 8001f6a:	4304      	orrs	r4, r0
 8001f6c:	1e63      	subs	r3, r4, #1
 8001f6e:	419c      	sbcs	r4, r3
 8001f70:	2300      	movs	r3, #0
 8001f72:	4699      	mov	r9, r3
 8001f74:	4698      	mov	r8, r3
 8001f76:	430c      	orrs	r4, r1
 8001f78:	0763      	lsls	r3, r4, #29
 8001f7a:	d000      	beq.n	8001f7e <__aeabi_dsub+0x2e2>
 8001f7c:	e712      	b.n	8001da4 <__aeabi_dsub+0x108>
 8001f7e:	464b      	mov	r3, r9
 8001f80:	464a      	mov	r2, r9
 8001f82:	08e4      	lsrs	r4, r4, #3
 8001f84:	075b      	lsls	r3, r3, #29
 8001f86:	4323      	orrs	r3, r4
 8001f88:	08d4      	lsrs	r4, r2, #3
 8001f8a:	4642      	mov	r2, r8
 8001f8c:	4919      	ldr	r1, [pc, #100]	; (8001ff4 <__aeabi_dsub+0x358>)
 8001f8e:	428a      	cmp	r2, r1
 8001f90:	d00e      	beq.n	8001fb0 <__aeabi_dsub+0x314>
 8001f92:	0324      	lsls	r4, r4, #12
 8001f94:	0552      	lsls	r2, r2, #21
 8001f96:	0b24      	lsrs	r4, r4, #12
 8001f98:	0d52      	lsrs	r2, r2, #21
 8001f9a:	e722      	b.n	8001de2 <__aeabi_dsub+0x146>
 8001f9c:	000a      	movs	r2, r1
 8001f9e:	2400      	movs	r4, #0
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	e71e      	b.n	8001de2 <__aeabi_dsub+0x146>
 8001fa4:	08db      	lsrs	r3, r3, #3
 8001fa6:	4662      	mov	r2, ip
 8001fa8:	0752      	lsls	r2, r2, #29
 8001faa:	4313      	orrs	r3, r2
 8001fac:	4662      	mov	r2, ip
 8001fae:	08d4      	lsrs	r4, r2, #3
 8001fb0:	001a      	movs	r2, r3
 8001fb2:	4322      	orrs	r2, r4
 8001fb4:	d100      	bne.n	8001fb8 <__aeabi_dsub+0x31c>
 8001fb6:	e1fc      	b.n	80023b2 <__aeabi_dsub+0x716>
 8001fb8:	2280      	movs	r2, #128	; 0x80
 8001fba:	0312      	lsls	r2, r2, #12
 8001fbc:	4314      	orrs	r4, r2
 8001fbe:	0324      	lsls	r4, r4, #12
 8001fc0:	4a0c      	ldr	r2, [pc, #48]	; (8001ff4 <__aeabi_dsub+0x358>)
 8001fc2:	0b24      	lsrs	r4, r4, #12
 8001fc4:	e70d      	b.n	8001de2 <__aeabi_dsub+0x146>
 8001fc6:	0020      	movs	r0, r4
 8001fc8:	f000 faec 	bl	80025a4 <__clzsi2>
 8001fcc:	0001      	movs	r1, r0
 8001fce:	3118      	adds	r1, #24
 8001fd0:	291f      	cmp	r1, #31
 8001fd2:	dc00      	bgt.n	8001fd6 <__aeabi_dsub+0x33a>
 8001fd4:	e6c4      	b.n	8001d60 <__aeabi_dsub+0xc4>
 8001fd6:	3808      	subs	r0, #8
 8001fd8:	4084      	lsls	r4, r0
 8001fda:	4643      	mov	r3, r8
 8001fdc:	0020      	movs	r0, r4
 8001fde:	2400      	movs	r4, #0
 8001fe0:	4588      	cmp	r8, r1
 8001fe2:	dc00      	bgt.n	8001fe6 <__aeabi_dsub+0x34a>
 8001fe4:	e6c8      	b.n	8001d78 <__aeabi_dsub+0xdc>
 8001fe6:	4a04      	ldr	r2, [pc, #16]	; (8001ff8 <__aeabi_dsub+0x35c>)
 8001fe8:	1a5b      	subs	r3, r3, r1
 8001fea:	4010      	ands	r0, r2
 8001fec:	4698      	mov	r8, r3
 8001fee:	4681      	mov	r9, r0
 8001ff0:	e6d6      	b.n	8001da0 <__aeabi_dsub+0x104>
 8001ff2:	46c0      	nop			; (mov r8, r8)
 8001ff4:	000007ff 	.word	0x000007ff
 8001ff8:	ff7fffff 	.word	0xff7fffff
 8001ffc:	fffff801 	.word	0xfffff801
 8002000:	000007fe 	.word	0x000007fe
 8002004:	430f      	orrs	r7, r1
 8002006:	1e7a      	subs	r2, r7, #1
 8002008:	4197      	sbcs	r7, r2
 800200a:	e691      	b.n	8001d30 <__aeabi_dsub+0x94>
 800200c:	4661      	mov	r1, ip
 800200e:	08db      	lsrs	r3, r3, #3
 8002010:	0749      	lsls	r1, r1, #29
 8002012:	430b      	orrs	r3, r1
 8002014:	4661      	mov	r1, ip
 8002016:	08cc      	lsrs	r4, r1, #3
 8002018:	e7b8      	b.n	8001f8c <__aeabi_dsub+0x2f0>
 800201a:	4640      	mov	r0, r8
 800201c:	4cd3      	ldr	r4, [pc, #844]	; (800236c <__aeabi_dsub+0x6d0>)
 800201e:	3001      	adds	r0, #1
 8002020:	4220      	tst	r0, r4
 8002022:	d000      	beq.n	8002026 <__aeabi_dsub+0x38a>
 8002024:	e0a2      	b.n	800216c <__aeabi_dsub+0x4d0>
 8002026:	4640      	mov	r0, r8
 8002028:	2800      	cmp	r0, #0
 800202a:	d000      	beq.n	800202e <__aeabi_dsub+0x392>
 800202c:	e101      	b.n	8002232 <__aeabi_dsub+0x596>
 800202e:	4660      	mov	r0, ip
 8002030:	4318      	orrs	r0, r3
 8002032:	d100      	bne.n	8002036 <__aeabi_dsub+0x39a>
 8002034:	e15e      	b.n	80022f4 <__aeabi_dsub+0x658>
 8002036:	0008      	movs	r0, r1
 8002038:	4338      	orrs	r0, r7
 800203a:	d000      	beq.n	800203e <__aeabi_dsub+0x3a2>
 800203c:	e15f      	b.n	80022fe <__aeabi_dsub+0x662>
 800203e:	4661      	mov	r1, ip
 8002040:	08db      	lsrs	r3, r3, #3
 8002042:	0749      	lsls	r1, r1, #29
 8002044:	430b      	orrs	r3, r1
 8002046:	4661      	mov	r1, ip
 8002048:	08cc      	lsrs	r4, r1, #3
 800204a:	e7a2      	b.n	8001f92 <__aeabi_dsub+0x2f6>
 800204c:	4dc8      	ldr	r5, [pc, #800]	; (8002370 <__aeabi_dsub+0x6d4>)
 800204e:	42a8      	cmp	r0, r5
 8002050:	d100      	bne.n	8002054 <__aeabi_dsub+0x3b8>
 8002052:	e0cf      	b.n	80021f4 <__aeabi_dsub+0x558>
 8002054:	2580      	movs	r5, #128	; 0x80
 8002056:	4664      	mov	r4, ip
 8002058:	042d      	lsls	r5, r5, #16
 800205a:	432c      	orrs	r4, r5
 800205c:	46a4      	mov	ip, r4
 800205e:	2a38      	cmp	r2, #56	; 0x38
 8002060:	dc56      	bgt.n	8002110 <__aeabi_dsub+0x474>
 8002062:	2a1f      	cmp	r2, #31
 8002064:	dd00      	ble.n	8002068 <__aeabi_dsub+0x3cc>
 8002066:	e0d1      	b.n	800220c <__aeabi_dsub+0x570>
 8002068:	2520      	movs	r5, #32
 800206a:	001e      	movs	r6, r3
 800206c:	1aad      	subs	r5, r5, r2
 800206e:	4664      	mov	r4, ip
 8002070:	40ab      	lsls	r3, r5
 8002072:	40ac      	lsls	r4, r5
 8002074:	40d6      	lsrs	r6, r2
 8002076:	1e5d      	subs	r5, r3, #1
 8002078:	41ab      	sbcs	r3, r5
 800207a:	4334      	orrs	r4, r6
 800207c:	4323      	orrs	r3, r4
 800207e:	4664      	mov	r4, ip
 8002080:	40d4      	lsrs	r4, r2
 8002082:	1b09      	subs	r1, r1, r4
 8002084:	e049      	b.n	800211a <__aeabi_dsub+0x47e>
 8002086:	4660      	mov	r0, ip
 8002088:	1bdc      	subs	r4, r3, r7
 800208a:	1a46      	subs	r6, r0, r1
 800208c:	42a3      	cmp	r3, r4
 800208e:	4180      	sbcs	r0, r0
 8002090:	4240      	negs	r0, r0
 8002092:	4681      	mov	r9, r0
 8002094:	0030      	movs	r0, r6
 8002096:	464e      	mov	r6, r9
 8002098:	1b80      	subs	r0, r0, r6
 800209a:	4681      	mov	r9, r0
 800209c:	0200      	lsls	r0, r0, #8
 800209e:	d476      	bmi.n	800218e <__aeabi_dsub+0x4f2>
 80020a0:	464b      	mov	r3, r9
 80020a2:	4323      	orrs	r3, r4
 80020a4:	d000      	beq.n	80020a8 <__aeabi_dsub+0x40c>
 80020a6:	e652      	b.n	8001d4e <__aeabi_dsub+0xb2>
 80020a8:	2400      	movs	r4, #0
 80020aa:	2500      	movs	r5, #0
 80020ac:	e771      	b.n	8001f92 <__aeabi_dsub+0x2f6>
 80020ae:	4339      	orrs	r1, r7
 80020b0:	000c      	movs	r4, r1
 80020b2:	1e62      	subs	r2, r4, #1
 80020b4:	4194      	sbcs	r4, r2
 80020b6:	18e4      	adds	r4, r4, r3
 80020b8:	429c      	cmp	r4, r3
 80020ba:	419b      	sbcs	r3, r3
 80020bc:	425b      	negs	r3, r3
 80020be:	4463      	add	r3, ip
 80020c0:	4699      	mov	r9, r3
 80020c2:	464b      	mov	r3, r9
 80020c4:	021b      	lsls	r3, r3, #8
 80020c6:	d400      	bmi.n	80020ca <__aeabi_dsub+0x42e>
 80020c8:	e756      	b.n	8001f78 <__aeabi_dsub+0x2dc>
 80020ca:	2301      	movs	r3, #1
 80020cc:	469c      	mov	ip, r3
 80020ce:	4ba8      	ldr	r3, [pc, #672]	; (8002370 <__aeabi_dsub+0x6d4>)
 80020d0:	44e0      	add	r8, ip
 80020d2:	4598      	cmp	r8, r3
 80020d4:	d038      	beq.n	8002148 <__aeabi_dsub+0x4ac>
 80020d6:	464b      	mov	r3, r9
 80020d8:	48a6      	ldr	r0, [pc, #664]	; (8002374 <__aeabi_dsub+0x6d8>)
 80020da:	2201      	movs	r2, #1
 80020dc:	4003      	ands	r3, r0
 80020de:	0018      	movs	r0, r3
 80020e0:	0863      	lsrs	r3, r4, #1
 80020e2:	4014      	ands	r4, r2
 80020e4:	431c      	orrs	r4, r3
 80020e6:	07c3      	lsls	r3, r0, #31
 80020e8:	431c      	orrs	r4, r3
 80020ea:	0843      	lsrs	r3, r0, #1
 80020ec:	4699      	mov	r9, r3
 80020ee:	e657      	b.n	8001da0 <__aeabi_dsub+0x104>
 80020f0:	0010      	movs	r0, r2
 80020f2:	000e      	movs	r6, r1
 80020f4:	3820      	subs	r0, #32
 80020f6:	40c6      	lsrs	r6, r0
 80020f8:	2a20      	cmp	r2, #32
 80020fa:	d004      	beq.n	8002106 <__aeabi_dsub+0x46a>
 80020fc:	2040      	movs	r0, #64	; 0x40
 80020fe:	1a82      	subs	r2, r0, r2
 8002100:	4091      	lsls	r1, r2
 8002102:	430f      	orrs	r7, r1
 8002104:	46b9      	mov	r9, r7
 8002106:	464f      	mov	r7, r9
 8002108:	1e7a      	subs	r2, r7, #1
 800210a:	4197      	sbcs	r7, r2
 800210c:	4337      	orrs	r7, r6
 800210e:	e60f      	b.n	8001d30 <__aeabi_dsub+0x94>
 8002110:	4662      	mov	r2, ip
 8002112:	431a      	orrs	r2, r3
 8002114:	0013      	movs	r3, r2
 8002116:	1e5a      	subs	r2, r3, #1
 8002118:	4193      	sbcs	r3, r2
 800211a:	1afc      	subs	r4, r7, r3
 800211c:	42a7      	cmp	r7, r4
 800211e:	41bf      	sbcs	r7, r7
 8002120:	427f      	negs	r7, r7
 8002122:	1bcb      	subs	r3, r1, r7
 8002124:	4699      	mov	r9, r3
 8002126:	465d      	mov	r5, fp
 8002128:	4680      	mov	r8, r0
 800212a:	e608      	b.n	8001d3e <__aeabi_dsub+0xa2>
 800212c:	4666      	mov	r6, ip
 800212e:	431e      	orrs	r6, r3
 8002130:	d100      	bne.n	8002134 <__aeabi_dsub+0x498>
 8002132:	e0be      	b.n	80022b2 <__aeabi_dsub+0x616>
 8002134:	1e56      	subs	r6, r2, #1
 8002136:	2a01      	cmp	r2, #1
 8002138:	d100      	bne.n	800213c <__aeabi_dsub+0x4a0>
 800213a:	e109      	b.n	8002350 <__aeabi_dsub+0x6b4>
 800213c:	4c8c      	ldr	r4, [pc, #560]	; (8002370 <__aeabi_dsub+0x6d4>)
 800213e:	42a2      	cmp	r2, r4
 8002140:	d100      	bne.n	8002144 <__aeabi_dsub+0x4a8>
 8002142:	e119      	b.n	8002378 <__aeabi_dsub+0x6dc>
 8002144:	0032      	movs	r2, r6
 8002146:	e6c1      	b.n	8001ecc <__aeabi_dsub+0x230>
 8002148:	4642      	mov	r2, r8
 800214a:	2400      	movs	r4, #0
 800214c:	2300      	movs	r3, #0
 800214e:	e648      	b.n	8001de2 <__aeabi_dsub+0x146>
 8002150:	2020      	movs	r0, #32
 8002152:	000c      	movs	r4, r1
 8002154:	1a80      	subs	r0, r0, r2
 8002156:	003e      	movs	r6, r7
 8002158:	4087      	lsls	r7, r0
 800215a:	4084      	lsls	r4, r0
 800215c:	40d6      	lsrs	r6, r2
 800215e:	1e78      	subs	r0, r7, #1
 8002160:	4187      	sbcs	r7, r0
 8002162:	40d1      	lsrs	r1, r2
 8002164:	4334      	orrs	r4, r6
 8002166:	433c      	orrs	r4, r7
 8002168:	448c      	add	ip, r1
 800216a:	e7a4      	b.n	80020b6 <__aeabi_dsub+0x41a>
 800216c:	4a80      	ldr	r2, [pc, #512]	; (8002370 <__aeabi_dsub+0x6d4>)
 800216e:	4290      	cmp	r0, r2
 8002170:	d100      	bne.n	8002174 <__aeabi_dsub+0x4d8>
 8002172:	e0e9      	b.n	8002348 <__aeabi_dsub+0x6ac>
 8002174:	19df      	adds	r7, r3, r7
 8002176:	429f      	cmp	r7, r3
 8002178:	419b      	sbcs	r3, r3
 800217a:	4461      	add	r1, ip
 800217c:	425b      	negs	r3, r3
 800217e:	18c9      	adds	r1, r1, r3
 8002180:	07cc      	lsls	r4, r1, #31
 8002182:	087f      	lsrs	r7, r7, #1
 8002184:	084b      	lsrs	r3, r1, #1
 8002186:	4699      	mov	r9, r3
 8002188:	4680      	mov	r8, r0
 800218a:	433c      	orrs	r4, r7
 800218c:	e6f4      	b.n	8001f78 <__aeabi_dsub+0x2dc>
 800218e:	1afc      	subs	r4, r7, r3
 8002190:	42a7      	cmp	r7, r4
 8002192:	41bf      	sbcs	r7, r7
 8002194:	4663      	mov	r3, ip
 8002196:	427f      	negs	r7, r7
 8002198:	1ac9      	subs	r1, r1, r3
 800219a:	1bcb      	subs	r3, r1, r7
 800219c:	4699      	mov	r9, r3
 800219e:	465d      	mov	r5, fp
 80021a0:	e5d5      	b.n	8001d4e <__aeabi_dsub+0xb2>
 80021a2:	08ff      	lsrs	r7, r7, #3
 80021a4:	074b      	lsls	r3, r1, #29
 80021a6:	465d      	mov	r5, fp
 80021a8:	433b      	orrs	r3, r7
 80021aa:	08cc      	lsrs	r4, r1, #3
 80021ac:	e6ee      	b.n	8001f8c <__aeabi_dsub+0x2f0>
 80021ae:	4662      	mov	r2, ip
 80021b0:	431a      	orrs	r2, r3
 80021b2:	d000      	beq.n	80021b6 <__aeabi_dsub+0x51a>
 80021b4:	e082      	b.n	80022bc <__aeabi_dsub+0x620>
 80021b6:	000b      	movs	r3, r1
 80021b8:	433b      	orrs	r3, r7
 80021ba:	d11b      	bne.n	80021f4 <__aeabi_dsub+0x558>
 80021bc:	2480      	movs	r4, #128	; 0x80
 80021be:	2500      	movs	r5, #0
 80021c0:	0324      	lsls	r4, r4, #12
 80021c2:	e6f9      	b.n	8001fb8 <__aeabi_dsub+0x31c>
 80021c4:	19dc      	adds	r4, r3, r7
 80021c6:	429c      	cmp	r4, r3
 80021c8:	419b      	sbcs	r3, r3
 80021ca:	4461      	add	r1, ip
 80021cc:	4689      	mov	r9, r1
 80021ce:	425b      	negs	r3, r3
 80021d0:	4499      	add	r9, r3
 80021d2:	464b      	mov	r3, r9
 80021d4:	021b      	lsls	r3, r3, #8
 80021d6:	d444      	bmi.n	8002262 <__aeabi_dsub+0x5c6>
 80021d8:	2301      	movs	r3, #1
 80021da:	4698      	mov	r8, r3
 80021dc:	e6cc      	b.n	8001f78 <__aeabi_dsub+0x2dc>
 80021de:	1bdc      	subs	r4, r3, r7
 80021e0:	4662      	mov	r2, ip
 80021e2:	42a3      	cmp	r3, r4
 80021e4:	419b      	sbcs	r3, r3
 80021e6:	1a51      	subs	r1, r2, r1
 80021e8:	425b      	negs	r3, r3
 80021ea:	1acb      	subs	r3, r1, r3
 80021ec:	4699      	mov	r9, r3
 80021ee:	2301      	movs	r3, #1
 80021f0:	4698      	mov	r8, r3
 80021f2:	e5a4      	b.n	8001d3e <__aeabi_dsub+0xa2>
 80021f4:	08ff      	lsrs	r7, r7, #3
 80021f6:	074b      	lsls	r3, r1, #29
 80021f8:	465d      	mov	r5, fp
 80021fa:	433b      	orrs	r3, r7
 80021fc:	08cc      	lsrs	r4, r1, #3
 80021fe:	e6d7      	b.n	8001fb0 <__aeabi_dsub+0x314>
 8002200:	4662      	mov	r2, ip
 8002202:	431a      	orrs	r2, r3
 8002204:	0014      	movs	r4, r2
 8002206:	1e63      	subs	r3, r4, #1
 8002208:	419c      	sbcs	r4, r3
 800220a:	e679      	b.n	8001f00 <__aeabi_dsub+0x264>
 800220c:	0015      	movs	r5, r2
 800220e:	4664      	mov	r4, ip
 8002210:	3d20      	subs	r5, #32
 8002212:	40ec      	lsrs	r4, r5
 8002214:	46a0      	mov	r8, r4
 8002216:	2a20      	cmp	r2, #32
 8002218:	d005      	beq.n	8002226 <__aeabi_dsub+0x58a>
 800221a:	2540      	movs	r5, #64	; 0x40
 800221c:	4664      	mov	r4, ip
 800221e:	1aaa      	subs	r2, r5, r2
 8002220:	4094      	lsls	r4, r2
 8002222:	4323      	orrs	r3, r4
 8002224:	469a      	mov	sl, r3
 8002226:	4654      	mov	r4, sl
 8002228:	1e63      	subs	r3, r4, #1
 800222a:	419c      	sbcs	r4, r3
 800222c:	4643      	mov	r3, r8
 800222e:	4323      	orrs	r3, r4
 8002230:	e773      	b.n	800211a <__aeabi_dsub+0x47e>
 8002232:	4662      	mov	r2, ip
 8002234:	431a      	orrs	r2, r3
 8002236:	d023      	beq.n	8002280 <__aeabi_dsub+0x5e4>
 8002238:	000a      	movs	r2, r1
 800223a:	433a      	orrs	r2, r7
 800223c:	d000      	beq.n	8002240 <__aeabi_dsub+0x5a4>
 800223e:	e0a0      	b.n	8002382 <__aeabi_dsub+0x6e6>
 8002240:	4662      	mov	r2, ip
 8002242:	08db      	lsrs	r3, r3, #3
 8002244:	0752      	lsls	r2, r2, #29
 8002246:	4313      	orrs	r3, r2
 8002248:	4662      	mov	r2, ip
 800224a:	08d4      	lsrs	r4, r2, #3
 800224c:	e6b0      	b.n	8001fb0 <__aeabi_dsub+0x314>
 800224e:	000b      	movs	r3, r1
 8002250:	433b      	orrs	r3, r7
 8002252:	d100      	bne.n	8002256 <__aeabi_dsub+0x5ba>
 8002254:	e728      	b.n	80020a8 <__aeabi_dsub+0x40c>
 8002256:	08ff      	lsrs	r7, r7, #3
 8002258:	074b      	lsls	r3, r1, #29
 800225a:	465d      	mov	r5, fp
 800225c:	433b      	orrs	r3, r7
 800225e:	08cc      	lsrs	r4, r1, #3
 8002260:	e697      	b.n	8001f92 <__aeabi_dsub+0x2f6>
 8002262:	2302      	movs	r3, #2
 8002264:	4698      	mov	r8, r3
 8002266:	e736      	b.n	80020d6 <__aeabi_dsub+0x43a>
 8002268:	1afc      	subs	r4, r7, r3
 800226a:	42a7      	cmp	r7, r4
 800226c:	41bf      	sbcs	r7, r7
 800226e:	4663      	mov	r3, ip
 8002270:	427f      	negs	r7, r7
 8002272:	1ac9      	subs	r1, r1, r3
 8002274:	1bcb      	subs	r3, r1, r7
 8002276:	4699      	mov	r9, r3
 8002278:	2301      	movs	r3, #1
 800227a:	465d      	mov	r5, fp
 800227c:	4698      	mov	r8, r3
 800227e:	e55e      	b.n	8001d3e <__aeabi_dsub+0xa2>
 8002280:	074b      	lsls	r3, r1, #29
 8002282:	08ff      	lsrs	r7, r7, #3
 8002284:	433b      	orrs	r3, r7
 8002286:	08cc      	lsrs	r4, r1, #3
 8002288:	e692      	b.n	8001fb0 <__aeabi_dsub+0x314>
 800228a:	1bdc      	subs	r4, r3, r7
 800228c:	4660      	mov	r0, ip
 800228e:	42a3      	cmp	r3, r4
 8002290:	41b6      	sbcs	r6, r6
 8002292:	1a40      	subs	r0, r0, r1
 8002294:	4276      	negs	r6, r6
 8002296:	1b80      	subs	r0, r0, r6
 8002298:	4681      	mov	r9, r0
 800229a:	0200      	lsls	r0, r0, #8
 800229c:	d560      	bpl.n	8002360 <__aeabi_dsub+0x6c4>
 800229e:	1afc      	subs	r4, r7, r3
 80022a0:	42a7      	cmp	r7, r4
 80022a2:	41bf      	sbcs	r7, r7
 80022a4:	4663      	mov	r3, ip
 80022a6:	427f      	negs	r7, r7
 80022a8:	1ac9      	subs	r1, r1, r3
 80022aa:	1bcb      	subs	r3, r1, r7
 80022ac:	4699      	mov	r9, r3
 80022ae:	465d      	mov	r5, fp
 80022b0:	e576      	b.n	8001da0 <__aeabi_dsub+0x104>
 80022b2:	08ff      	lsrs	r7, r7, #3
 80022b4:	074b      	lsls	r3, r1, #29
 80022b6:	433b      	orrs	r3, r7
 80022b8:	08cc      	lsrs	r4, r1, #3
 80022ba:	e667      	b.n	8001f8c <__aeabi_dsub+0x2f0>
 80022bc:	000a      	movs	r2, r1
 80022be:	08db      	lsrs	r3, r3, #3
 80022c0:	433a      	orrs	r2, r7
 80022c2:	d100      	bne.n	80022c6 <__aeabi_dsub+0x62a>
 80022c4:	e66f      	b.n	8001fa6 <__aeabi_dsub+0x30a>
 80022c6:	4662      	mov	r2, ip
 80022c8:	0752      	lsls	r2, r2, #29
 80022ca:	4313      	orrs	r3, r2
 80022cc:	4662      	mov	r2, ip
 80022ce:	08d4      	lsrs	r4, r2, #3
 80022d0:	2280      	movs	r2, #128	; 0x80
 80022d2:	0312      	lsls	r2, r2, #12
 80022d4:	4214      	tst	r4, r2
 80022d6:	d007      	beq.n	80022e8 <__aeabi_dsub+0x64c>
 80022d8:	08c8      	lsrs	r0, r1, #3
 80022da:	4210      	tst	r0, r2
 80022dc:	d104      	bne.n	80022e8 <__aeabi_dsub+0x64c>
 80022de:	465d      	mov	r5, fp
 80022e0:	0004      	movs	r4, r0
 80022e2:	08fb      	lsrs	r3, r7, #3
 80022e4:	0749      	lsls	r1, r1, #29
 80022e6:	430b      	orrs	r3, r1
 80022e8:	0f5a      	lsrs	r2, r3, #29
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	08db      	lsrs	r3, r3, #3
 80022ee:	0752      	lsls	r2, r2, #29
 80022f0:	4313      	orrs	r3, r2
 80022f2:	e65d      	b.n	8001fb0 <__aeabi_dsub+0x314>
 80022f4:	074b      	lsls	r3, r1, #29
 80022f6:	08ff      	lsrs	r7, r7, #3
 80022f8:	433b      	orrs	r3, r7
 80022fa:	08cc      	lsrs	r4, r1, #3
 80022fc:	e649      	b.n	8001f92 <__aeabi_dsub+0x2f6>
 80022fe:	19dc      	adds	r4, r3, r7
 8002300:	429c      	cmp	r4, r3
 8002302:	419b      	sbcs	r3, r3
 8002304:	4461      	add	r1, ip
 8002306:	4689      	mov	r9, r1
 8002308:	425b      	negs	r3, r3
 800230a:	4499      	add	r9, r3
 800230c:	464b      	mov	r3, r9
 800230e:	021b      	lsls	r3, r3, #8
 8002310:	d400      	bmi.n	8002314 <__aeabi_dsub+0x678>
 8002312:	e631      	b.n	8001f78 <__aeabi_dsub+0x2dc>
 8002314:	464a      	mov	r2, r9
 8002316:	4b17      	ldr	r3, [pc, #92]	; (8002374 <__aeabi_dsub+0x6d8>)
 8002318:	401a      	ands	r2, r3
 800231a:	2301      	movs	r3, #1
 800231c:	4691      	mov	r9, r2
 800231e:	4698      	mov	r8, r3
 8002320:	e62a      	b.n	8001f78 <__aeabi_dsub+0x2dc>
 8002322:	0016      	movs	r6, r2
 8002324:	4664      	mov	r4, ip
 8002326:	3e20      	subs	r6, #32
 8002328:	40f4      	lsrs	r4, r6
 800232a:	46a0      	mov	r8, r4
 800232c:	2a20      	cmp	r2, #32
 800232e:	d005      	beq.n	800233c <__aeabi_dsub+0x6a0>
 8002330:	2640      	movs	r6, #64	; 0x40
 8002332:	4664      	mov	r4, ip
 8002334:	1ab2      	subs	r2, r6, r2
 8002336:	4094      	lsls	r4, r2
 8002338:	4323      	orrs	r3, r4
 800233a:	469a      	mov	sl, r3
 800233c:	4654      	mov	r4, sl
 800233e:	1e63      	subs	r3, r4, #1
 8002340:	419c      	sbcs	r4, r3
 8002342:	4643      	mov	r3, r8
 8002344:	431c      	orrs	r4, r3
 8002346:	e5db      	b.n	8001f00 <__aeabi_dsub+0x264>
 8002348:	0002      	movs	r2, r0
 800234a:	2400      	movs	r4, #0
 800234c:	2300      	movs	r3, #0
 800234e:	e548      	b.n	8001de2 <__aeabi_dsub+0x146>
 8002350:	19dc      	adds	r4, r3, r7
 8002352:	42bc      	cmp	r4, r7
 8002354:	41bf      	sbcs	r7, r7
 8002356:	4461      	add	r1, ip
 8002358:	4689      	mov	r9, r1
 800235a:	427f      	negs	r7, r7
 800235c:	44b9      	add	r9, r7
 800235e:	e738      	b.n	80021d2 <__aeabi_dsub+0x536>
 8002360:	464b      	mov	r3, r9
 8002362:	4323      	orrs	r3, r4
 8002364:	d100      	bne.n	8002368 <__aeabi_dsub+0x6cc>
 8002366:	e69f      	b.n	80020a8 <__aeabi_dsub+0x40c>
 8002368:	e606      	b.n	8001f78 <__aeabi_dsub+0x2dc>
 800236a:	46c0      	nop			; (mov r8, r8)
 800236c:	000007fe 	.word	0x000007fe
 8002370:	000007ff 	.word	0x000007ff
 8002374:	ff7fffff 	.word	0xff7fffff
 8002378:	08ff      	lsrs	r7, r7, #3
 800237a:	074b      	lsls	r3, r1, #29
 800237c:	433b      	orrs	r3, r7
 800237e:	08cc      	lsrs	r4, r1, #3
 8002380:	e616      	b.n	8001fb0 <__aeabi_dsub+0x314>
 8002382:	4662      	mov	r2, ip
 8002384:	08db      	lsrs	r3, r3, #3
 8002386:	0752      	lsls	r2, r2, #29
 8002388:	4313      	orrs	r3, r2
 800238a:	4662      	mov	r2, ip
 800238c:	08d4      	lsrs	r4, r2, #3
 800238e:	2280      	movs	r2, #128	; 0x80
 8002390:	0312      	lsls	r2, r2, #12
 8002392:	4214      	tst	r4, r2
 8002394:	d007      	beq.n	80023a6 <__aeabi_dsub+0x70a>
 8002396:	08c8      	lsrs	r0, r1, #3
 8002398:	4210      	tst	r0, r2
 800239a:	d104      	bne.n	80023a6 <__aeabi_dsub+0x70a>
 800239c:	465d      	mov	r5, fp
 800239e:	0004      	movs	r4, r0
 80023a0:	08fb      	lsrs	r3, r7, #3
 80023a2:	0749      	lsls	r1, r1, #29
 80023a4:	430b      	orrs	r3, r1
 80023a6:	0f5a      	lsrs	r2, r3, #29
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	0752      	lsls	r2, r2, #29
 80023ac:	08db      	lsrs	r3, r3, #3
 80023ae:	4313      	orrs	r3, r2
 80023b0:	e5fe      	b.n	8001fb0 <__aeabi_dsub+0x314>
 80023b2:	2300      	movs	r3, #0
 80023b4:	4a01      	ldr	r2, [pc, #4]	; (80023bc <__aeabi_dsub+0x720>)
 80023b6:	001c      	movs	r4, r3
 80023b8:	e513      	b.n	8001de2 <__aeabi_dsub+0x146>
 80023ba:	46c0      	nop			; (mov r8, r8)
 80023bc:	000007ff 	.word	0x000007ff

080023c0 <__aeabi_dcmpun>:
 80023c0:	b570      	push	{r4, r5, r6, lr}
 80023c2:	0005      	movs	r5, r0
 80023c4:	480c      	ldr	r0, [pc, #48]	; (80023f8 <__aeabi_dcmpun+0x38>)
 80023c6:	031c      	lsls	r4, r3, #12
 80023c8:	0016      	movs	r6, r2
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	030a      	lsls	r2, r1, #12
 80023ce:	0049      	lsls	r1, r1, #1
 80023d0:	0b12      	lsrs	r2, r2, #12
 80023d2:	0d49      	lsrs	r1, r1, #21
 80023d4:	0b24      	lsrs	r4, r4, #12
 80023d6:	0d5b      	lsrs	r3, r3, #21
 80023d8:	4281      	cmp	r1, r0
 80023da:	d008      	beq.n	80023ee <__aeabi_dcmpun+0x2e>
 80023dc:	4a06      	ldr	r2, [pc, #24]	; (80023f8 <__aeabi_dcmpun+0x38>)
 80023de:	2000      	movs	r0, #0
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d103      	bne.n	80023ec <__aeabi_dcmpun+0x2c>
 80023e4:	0020      	movs	r0, r4
 80023e6:	4330      	orrs	r0, r6
 80023e8:	1e43      	subs	r3, r0, #1
 80023ea:	4198      	sbcs	r0, r3
 80023ec:	bd70      	pop	{r4, r5, r6, pc}
 80023ee:	2001      	movs	r0, #1
 80023f0:	432a      	orrs	r2, r5
 80023f2:	d1fb      	bne.n	80023ec <__aeabi_dcmpun+0x2c>
 80023f4:	e7f2      	b.n	80023dc <__aeabi_dcmpun+0x1c>
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	000007ff 	.word	0x000007ff

080023fc <__aeabi_d2iz>:
 80023fc:	000a      	movs	r2, r1
 80023fe:	b530      	push	{r4, r5, lr}
 8002400:	4c13      	ldr	r4, [pc, #76]	; (8002450 <__aeabi_d2iz+0x54>)
 8002402:	0053      	lsls	r3, r2, #1
 8002404:	0309      	lsls	r1, r1, #12
 8002406:	0005      	movs	r5, r0
 8002408:	0b09      	lsrs	r1, r1, #12
 800240a:	2000      	movs	r0, #0
 800240c:	0d5b      	lsrs	r3, r3, #21
 800240e:	0fd2      	lsrs	r2, r2, #31
 8002410:	42a3      	cmp	r3, r4
 8002412:	dd04      	ble.n	800241e <__aeabi_d2iz+0x22>
 8002414:	480f      	ldr	r0, [pc, #60]	; (8002454 <__aeabi_d2iz+0x58>)
 8002416:	4283      	cmp	r3, r0
 8002418:	dd02      	ble.n	8002420 <__aeabi_d2iz+0x24>
 800241a:	4b0f      	ldr	r3, [pc, #60]	; (8002458 <__aeabi_d2iz+0x5c>)
 800241c:	18d0      	adds	r0, r2, r3
 800241e:	bd30      	pop	{r4, r5, pc}
 8002420:	2080      	movs	r0, #128	; 0x80
 8002422:	0340      	lsls	r0, r0, #13
 8002424:	4301      	orrs	r1, r0
 8002426:	480d      	ldr	r0, [pc, #52]	; (800245c <__aeabi_d2iz+0x60>)
 8002428:	1ac0      	subs	r0, r0, r3
 800242a:	281f      	cmp	r0, #31
 800242c:	dd08      	ble.n	8002440 <__aeabi_d2iz+0x44>
 800242e:	480c      	ldr	r0, [pc, #48]	; (8002460 <__aeabi_d2iz+0x64>)
 8002430:	1ac3      	subs	r3, r0, r3
 8002432:	40d9      	lsrs	r1, r3
 8002434:	000b      	movs	r3, r1
 8002436:	4258      	negs	r0, r3
 8002438:	2a00      	cmp	r2, #0
 800243a:	d1f0      	bne.n	800241e <__aeabi_d2iz+0x22>
 800243c:	0018      	movs	r0, r3
 800243e:	e7ee      	b.n	800241e <__aeabi_d2iz+0x22>
 8002440:	4c08      	ldr	r4, [pc, #32]	; (8002464 <__aeabi_d2iz+0x68>)
 8002442:	40c5      	lsrs	r5, r0
 8002444:	46a4      	mov	ip, r4
 8002446:	4463      	add	r3, ip
 8002448:	4099      	lsls	r1, r3
 800244a:	000b      	movs	r3, r1
 800244c:	432b      	orrs	r3, r5
 800244e:	e7f2      	b.n	8002436 <__aeabi_d2iz+0x3a>
 8002450:	000003fe 	.word	0x000003fe
 8002454:	0000041d 	.word	0x0000041d
 8002458:	7fffffff 	.word	0x7fffffff
 800245c:	00000433 	.word	0x00000433
 8002460:	00000413 	.word	0x00000413
 8002464:	fffffbed 	.word	0xfffffbed

08002468 <__aeabi_i2d>:
 8002468:	b570      	push	{r4, r5, r6, lr}
 800246a:	2800      	cmp	r0, #0
 800246c:	d016      	beq.n	800249c <__aeabi_i2d+0x34>
 800246e:	17c3      	asrs	r3, r0, #31
 8002470:	18c5      	adds	r5, r0, r3
 8002472:	405d      	eors	r5, r3
 8002474:	0fc4      	lsrs	r4, r0, #31
 8002476:	0028      	movs	r0, r5
 8002478:	f000 f894 	bl	80025a4 <__clzsi2>
 800247c:	4a11      	ldr	r2, [pc, #68]	; (80024c4 <__aeabi_i2d+0x5c>)
 800247e:	1a12      	subs	r2, r2, r0
 8002480:	280a      	cmp	r0, #10
 8002482:	dc16      	bgt.n	80024b2 <__aeabi_i2d+0x4a>
 8002484:	0003      	movs	r3, r0
 8002486:	002e      	movs	r6, r5
 8002488:	3315      	adds	r3, #21
 800248a:	409e      	lsls	r6, r3
 800248c:	230b      	movs	r3, #11
 800248e:	1a18      	subs	r0, r3, r0
 8002490:	40c5      	lsrs	r5, r0
 8002492:	0552      	lsls	r2, r2, #21
 8002494:	032d      	lsls	r5, r5, #12
 8002496:	0b2d      	lsrs	r5, r5, #12
 8002498:	0d53      	lsrs	r3, r2, #21
 800249a:	e003      	b.n	80024a4 <__aeabi_i2d+0x3c>
 800249c:	2400      	movs	r4, #0
 800249e:	2300      	movs	r3, #0
 80024a0:	2500      	movs	r5, #0
 80024a2:	2600      	movs	r6, #0
 80024a4:	051b      	lsls	r3, r3, #20
 80024a6:	432b      	orrs	r3, r5
 80024a8:	07e4      	lsls	r4, r4, #31
 80024aa:	4323      	orrs	r3, r4
 80024ac:	0030      	movs	r0, r6
 80024ae:	0019      	movs	r1, r3
 80024b0:	bd70      	pop	{r4, r5, r6, pc}
 80024b2:	380b      	subs	r0, #11
 80024b4:	4085      	lsls	r5, r0
 80024b6:	0552      	lsls	r2, r2, #21
 80024b8:	032d      	lsls	r5, r5, #12
 80024ba:	2600      	movs	r6, #0
 80024bc:	0b2d      	lsrs	r5, r5, #12
 80024be:	0d53      	lsrs	r3, r2, #21
 80024c0:	e7f0      	b.n	80024a4 <__aeabi_i2d+0x3c>
 80024c2:	46c0      	nop			; (mov r8, r8)
 80024c4:	0000041e 	.word	0x0000041e

080024c8 <__aeabi_ui2d>:
 80024c8:	b510      	push	{r4, lr}
 80024ca:	1e04      	subs	r4, r0, #0
 80024cc:	d010      	beq.n	80024f0 <__aeabi_ui2d+0x28>
 80024ce:	f000 f869 	bl	80025a4 <__clzsi2>
 80024d2:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <__aeabi_ui2d+0x48>)
 80024d4:	1a1b      	subs	r3, r3, r0
 80024d6:	280a      	cmp	r0, #10
 80024d8:	dc11      	bgt.n	80024fe <__aeabi_ui2d+0x36>
 80024da:	220b      	movs	r2, #11
 80024dc:	0021      	movs	r1, r4
 80024de:	1a12      	subs	r2, r2, r0
 80024e0:	40d1      	lsrs	r1, r2
 80024e2:	3015      	adds	r0, #21
 80024e4:	030a      	lsls	r2, r1, #12
 80024e6:	055b      	lsls	r3, r3, #21
 80024e8:	4084      	lsls	r4, r0
 80024ea:	0b12      	lsrs	r2, r2, #12
 80024ec:	0d5b      	lsrs	r3, r3, #21
 80024ee:	e001      	b.n	80024f4 <__aeabi_ui2d+0x2c>
 80024f0:	2300      	movs	r3, #0
 80024f2:	2200      	movs	r2, #0
 80024f4:	051b      	lsls	r3, r3, #20
 80024f6:	4313      	orrs	r3, r2
 80024f8:	0020      	movs	r0, r4
 80024fa:	0019      	movs	r1, r3
 80024fc:	bd10      	pop	{r4, pc}
 80024fe:	0022      	movs	r2, r4
 8002500:	380b      	subs	r0, #11
 8002502:	4082      	lsls	r2, r0
 8002504:	055b      	lsls	r3, r3, #21
 8002506:	0312      	lsls	r2, r2, #12
 8002508:	2400      	movs	r4, #0
 800250a:	0b12      	lsrs	r2, r2, #12
 800250c:	0d5b      	lsrs	r3, r3, #21
 800250e:	e7f1      	b.n	80024f4 <__aeabi_ui2d+0x2c>
 8002510:	0000041e 	.word	0x0000041e

08002514 <__aeabi_f2d>:
 8002514:	b570      	push	{r4, r5, r6, lr}
 8002516:	0043      	lsls	r3, r0, #1
 8002518:	0246      	lsls	r6, r0, #9
 800251a:	0fc4      	lsrs	r4, r0, #31
 800251c:	20fe      	movs	r0, #254	; 0xfe
 800251e:	0e1b      	lsrs	r3, r3, #24
 8002520:	1c59      	adds	r1, r3, #1
 8002522:	0a75      	lsrs	r5, r6, #9
 8002524:	4208      	tst	r0, r1
 8002526:	d00c      	beq.n	8002542 <__aeabi_f2d+0x2e>
 8002528:	22e0      	movs	r2, #224	; 0xe0
 800252a:	0092      	lsls	r2, r2, #2
 800252c:	4694      	mov	ip, r2
 800252e:	076d      	lsls	r5, r5, #29
 8002530:	0b36      	lsrs	r6, r6, #12
 8002532:	4463      	add	r3, ip
 8002534:	051b      	lsls	r3, r3, #20
 8002536:	4333      	orrs	r3, r6
 8002538:	07e4      	lsls	r4, r4, #31
 800253a:	4323      	orrs	r3, r4
 800253c:	0028      	movs	r0, r5
 800253e:	0019      	movs	r1, r3
 8002540:	bd70      	pop	{r4, r5, r6, pc}
 8002542:	2b00      	cmp	r3, #0
 8002544:	d114      	bne.n	8002570 <__aeabi_f2d+0x5c>
 8002546:	2d00      	cmp	r5, #0
 8002548:	d01b      	beq.n	8002582 <__aeabi_f2d+0x6e>
 800254a:	0028      	movs	r0, r5
 800254c:	f000 f82a 	bl	80025a4 <__clzsi2>
 8002550:	280a      	cmp	r0, #10
 8002552:	dc1c      	bgt.n	800258e <__aeabi_f2d+0x7a>
 8002554:	230b      	movs	r3, #11
 8002556:	002e      	movs	r6, r5
 8002558:	1a1b      	subs	r3, r3, r0
 800255a:	40de      	lsrs	r6, r3
 800255c:	0003      	movs	r3, r0
 800255e:	3315      	adds	r3, #21
 8002560:	409d      	lsls	r5, r3
 8002562:	4a0e      	ldr	r2, [pc, #56]	; (800259c <__aeabi_f2d+0x88>)
 8002564:	0336      	lsls	r6, r6, #12
 8002566:	1a12      	subs	r2, r2, r0
 8002568:	0552      	lsls	r2, r2, #21
 800256a:	0b36      	lsrs	r6, r6, #12
 800256c:	0d53      	lsrs	r3, r2, #21
 800256e:	e7e1      	b.n	8002534 <__aeabi_f2d+0x20>
 8002570:	2d00      	cmp	r5, #0
 8002572:	d009      	beq.n	8002588 <__aeabi_f2d+0x74>
 8002574:	2280      	movs	r2, #128	; 0x80
 8002576:	0b36      	lsrs	r6, r6, #12
 8002578:	0312      	lsls	r2, r2, #12
 800257a:	4b09      	ldr	r3, [pc, #36]	; (80025a0 <__aeabi_f2d+0x8c>)
 800257c:	076d      	lsls	r5, r5, #29
 800257e:	4316      	orrs	r6, r2
 8002580:	e7d8      	b.n	8002534 <__aeabi_f2d+0x20>
 8002582:	2300      	movs	r3, #0
 8002584:	2600      	movs	r6, #0
 8002586:	e7d5      	b.n	8002534 <__aeabi_f2d+0x20>
 8002588:	2600      	movs	r6, #0
 800258a:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <__aeabi_f2d+0x8c>)
 800258c:	e7d2      	b.n	8002534 <__aeabi_f2d+0x20>
 800258e:	0003      	movs	r3, r0
 8002590:	3b0b      	subs	r3, #11
 8002592:	409d      	lsls	r5, r3
 8002594:	002e      	movs	r6, r5
 8002596:	2500      	movs	r5, #0
 8002598:	e7e3      	b.n	8002562 <__aeabi_f2d+0x4e>
 800259a:	46c0      	nop			; (mov r8, r8)
 800259c:	00000389 	.word	0x00000389
 80025a0:	000007ff 	.word	0x000007ff

080025a4 <__clzsi2>:
 80025a4:	211c      	movs	r1, #28
 80025a6:	2301      	movs	r3, #1
 80025a8:	041b      	lsls	r3, r3, #16
 80025aa:	4298      	cmp	r0, r3
 80025ac:	d301      	bcc.n	80025b2 <__clzsi2+0xe>
 80025ae:	0c00      	lsrs	r0, r0, #16
 80025b0:	3910      	subs	r1, #16
 80025b2:	0a1b      	lsrs	r3, r3, #8
 80025b4:	4298      	cmp	r0, r3
 80025b6:	d301      	bcc.n	80025bc <__clzsi2+0x18>
 80025b8:	0a00      	lsrs	r0, r0, #8
 80025ba:	3908      	subs	r1, #8
 80025bc:	091b      	lsrs	r3, r3, #4
 80025be:	4298      	cmp	r0, r3
 80025c0:	d301      	bcc.n	80025c6 <__clzsi2+0x22>
 80025c2:	0900      	lsrs	r0, r0, #4
 80025c4:	3904      	subs	r1, #4
 80025c6:	a202      	add	r2, pc, #8	; (adr r2, 80025d0 <__clzsi2+0x2c>)
 80025c8:	5c10      	ldrb	r0, [r2, r0]
 80025ca:	1840      	adds	r0, r0, r1
 80025cc:	4770      	bx	lr
 80025ce:	46c0      	nop			; (mov r8, r8)
 80025d0:	02020304 	.word	0x02020304
 80025d4:	01010101 	.word	0x01010101
	...

080025e0 <__clzdi2>:
 80025e0:	b510      	push	{r4, lr}
 80025e2:	2900      	cmp	r1, #0
 80025e4:	d103      	bne.n	80025ee <__clzdi2+0xe>
 80025e6:	f7ff ffdd 	bl	80025a4 <__clzsi2>
 80025ea:	3020      	adds	r0, #32
 80025ec:	e002      	b.n	80025f4 <__clzdi2+0x14>
 80025ee:	0008      	movs	r0, r1
 80025f0:	f7ff ffd8 	bl	80025a4 <__clzsi2>
 80025f4:	bd10      	pop	{r4, pc}
 80025f6:	46c0      	nop			; (mov r8, r8)

080025f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80025f8:	b590      	push	{r4, r7, lr}
 80025fa:	b08b      	sub	sp, #44	; 0x2c
 80025fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025fe:	2414      	movs	r4, #20
 8002600:	193b      	adds	r3, r7, r4
 8002602:	0018      	movs	r0, r3
 8002604:	2314      	movs	r3, #20
 8002606:	001a      	movs	r2, r3
 8002608:	2100      	movs	r1, #0
 800260a:	f003 fe4b 	bl	80062a4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800260e:	4b33      	ldr	r3, [pc, #204]	; (80026dc <MX_GPIO_Init+0xe4>)
 8002610:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002612:	4b32      	ldr	r3, [pc, #200]	; (80026dc <MX_GPIO_Init+0xe4>)
 8002614:	2104      	movs	r1, #4
 8002616:	430a      	orrs	r2, r1
 8002618:	635a      	str	r2, [r3, #52]	; 0x34
 800261a:	4b30      	ldr	r3, [pc, #192]	; (80026dc <MX_GPIO_Init+0xe4>)
 800261c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800261e:	2204      	movs	r2, #4
 8002620:	4013      	ands	r3, r2
 8002622:	613b      	str	r3, [r7, #16]
 8002624:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002626:	4b2d      	ldr	r3, [pc, #180]	; (80026dc <MX_GPIO_Init+0xe4>)
 8002628:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800262a:	4b2c      	ldr	r3, [pc, #176]	; (80026dc <MX_GPIO_Init+0xe4>)
 800262c:	2120      	movs	r1, #32
 800262e:	430a      	orrs	r2, r1
 8002630:	635a      	str	r2, [r3, #52]	; 0x34
 8002632:	4b2a      	ldr	r3, [pc, #168]	; (80026dc <MX_GPIO_Init+0xe4>)
 8002634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002636:	2220      	movs	r2, #32
 8002638:	4013      	ands	r3, r2
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800263e:	4b27      	ldr	r3, [pc, #156]	; (80026dc <MX_GPIO_Init+0xe4>)
 8002640:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002642:	4b26      	ldr	r3, [pc, #152]	; (80026dc <MX_GPIO_Init+0xe4>)
 8002644:	2101      	movs	r1, #1
 8002646:	430a      	orrs	r2, r1
 8002648:	635a      	str	r2, [r3, #52]	; 0x34
 800264a:	4b24      	ldr	r3, [pc, #144]	; (80026dc <MX_GPIO_Init+0xe4>)
 800264c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800264e:	2201      	movs	r2, #1
 8002650:	4013      	ands	r3, r2
 8002652:	60bb      	str	r3, [r7, #8]
 8002654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002656:	4b21      	ldr	r3, [pc, #132]	; (80026dc <MX_GPIO_Init+0xe4>)
 8002658:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800265a:	4b20      	ldr	r3, [pc, #128]	; (80026dc <MX_GPIO_Init+0xe4>)
 800265c:	2102      	movs	r1, #2
 800265e:	430a      	orrs	r2, r1
 8002660:	635a      	str	r2, [r3, #52]	; 0x34
 8002662:	4b1e      	ldr	r3, [pc, #120]	; (80026dc <MX_GPIO_Init+0xe4>)
 8002664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002666:	2202      	movs	r2, #2
 8002668:	4013      	ands	r3, r2
 800266a:	607b      	str	r3, [r7, #4]
 800266c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800266e:	23a0      	movs	r3, #160	; 0xa0
 8002670:	05db      	lsls	r3, r3, #23
 8002672:	2200      	movs	r2, #0
 8002674:	2120      	movs	r1, #32
 8002676:	0018      	movs	r0, r3
 8002678:	f001 f96e 	bl	8003958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800267c:	4b18      	ldr	r3, [pc, #96]	; (80026e0 <MX_GPIO_Init+0xe8>)
 800267e:	2201      	movs	r2, #1
 8002680:	2101      	movs	r1, #1
 8002682:	0018      	movs	r0, r3
 8002684:	f001 f968 	bl	8003958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8002688:	193b      	adds	r3, r7, r4
 800268a:	2220      	movs	r2, #32
 800268c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800268e:	193b      	adds	r3, r7, r4
 8002690:	2201      	movs	r2, #1
 8002692:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002694:	193b      	adds	r3, r7, r4
 8002696:	2200      	movs	r2, #0
 8002698:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800269a:	193b      	adds	r3, r7, r4
 800269c:	2202      	movs	r2, #2
 800269e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80026a0:	193a      	adds	r2, r7, r4
 80026a2:	23a0      	movs	r3, #160	; 0xa0
 80026a4:	05db      	lsls	r3, r3, #23
 80026a6:	0011      	movs	r1, r2
 80026a8:	0018      	movs	r0, r3
 80026aa:	f000 fff1 	bl	8003690 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80026ae:	0021      	movs	r1, r4
 80026b0:	187b      	adds	r3, r7, r1
 80026b2:	2201      	movs	r2, #1
 80026b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026b6:	187b      	adds	r3, r7, r1
 80026b8:	2201      	movs	r2, #1
 80026ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026bc:	187b      	adds	r3, r7, r1
 80026be:	2200      	movs	r2, #0
 80026c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c2:	187b      	adds	r3, r7, r1
 80026c4:	2203      	movs	r2, #3
 80026c6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80026c8:	187b      	adds	r3, r7, r1
 80026ca:	4a05      	ldr	r2, [pc, #20]	; (80026e0 <MX_GPIO_Init+0xe8>)
 80026cc:	0019      	movs	r1, r3
 80026ce:	0010      	movs	r0, r2
 80026d0:	f000 ffde 	bl	8003690 <HAL_GPIO_Init>

}
 80026d4:	46c0      	nop			; (mov r8, r8)
 80026d6:	46bd      	mov	sp, r7
 80026d8:	b00b      	add	sp, #44	; 0x2c
 80026da:	bd90      	pop	{r4, r7, pc}
 80026dc:	40021000 	.word	0x40021000
 80026e0:	50000400 	.word	0x50000400

080026e4 <lis3dh_read_fifo>:
static void tx_com(uint8_t *tx_buffer, uint16_t len);
static void platform_init(void);

/* Main Example --------------------------------------------------------------*/
void lis3dh_read_fifo(void)
{
 80026e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026e6:	b08d      	sub	sp, #52	; 0x34
 80026e8:	af04      	add	r7, sp, #16
  /* Initialize mems driver interface */
  stmdev_ctx_t dev_ctx;
  dev_ctx.write_reg = platform_write;
 80026ea:	2408      	movs	r4, #8
 80026ec:	2508      	movs	r5, #8
 80026ee:	1963      	adds	r3, r4, r5
 80026f0:	19db      	adds	r3, r3, r7
 80026f2:	4a65      	ldr	r2, [pc, #404]	; (8002888 <lis3dh_read_fifo+0x1a4>)
 80026f4:	601a      	str	r2, [r3, #0]
  dev_ctx.read_reg = platform_read;
 80026f6:	1963      	adds	r3, r4, r5
 80026f8:	19db      	adds	r3, r3, r7
 80026fa:	4a64      	ldr	r2, [pc, #400]	; (800288c <lis3dh_read_fifo+0x1a8>)
 80026fc:	605a      	str	r2, [r3, #4]
  dev_ctx.handle = &SENSOR_BUS;
 80026fe:	1963      	adds	r3, r4, r5
 8002700:	19db      	adds	r3, r3, r7
 8002702:	4a63      	ldr	r2, [pc, #396]	; (8002890 <lis3dh_read_fifo+0x1ac>)
 8002704:	60da      	str	r2, [r3, #12]
  /* Initialize platform specific hardware */
  platform_init();
 8002706:	f000 f953 	bl	80029b0 <platform_init>
  /* Check device ID */
  lis3dh_device_id_get(&dev_ctx, &whoamI);
 800270a:	4a62      	ldr	r2, [pc, #392]	; (8002894 <lis3dh_read_fifo+0x1b0>)
 800270c:	1963      	adds	r3, r4, r5
 800270e:	19db      	adds	r3, r3, r7
 8002710:	0011      	movs	r1, r2
 8002712:	0018      	movs	r0, r3
 8002714:	f000 faf2 	bl	8002cfc <lis3dh_device_id_get>

  if (whoamI != LIS3DH_ID) {
 8002718:	4b5e      	ldr	r3, [pc, #376]	; (8002894 <lis3dh_read_fifo+0x1b0>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	2b33      	cmp	r3, #51	; 0x33
 800271e:	d013      	beq.n	8002748 <lis3dh_read_fifo+0x64>
    sprintf((char *)tx_buffer, "ERROR! Accelerometer not found %d\n", whoamI);
 8002720:	4b5c      	ldr	r3, [pc, #368]	; (8002894 <lis3dh_read_fifo+0x1b0>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	001a      	movs	r2, r3
 8002726:	495c      	ldr	r1, [pc, #368]	; (8002898 <lis3dh_read_fifo+0x1b4>)
 8002728:	4b5c      	ldr	r3, [pc, #368]	; (800289c <lis3dh_read_fifo+0x1b8>)
 800272a:	0018      	movs	r0, r3
 800272c:	f004 fa30 	bl	8006b90 <siprintf>
    tx_com(tx_buffer, strlen((char const *)tx_buffer));
 8002730:	4b5a      	ldr	r3, [pc, #360]	; (800289c <lis3dh_read_fifo+0x1b8>)
 8002732:	0018      	movs	r0, r3
 8002734:	f7fd fce6 	bl	8000104 <strlen>
 8002738:	0003      	movs	r3, r0
 800273a:	b29a      	uxth	r2, r3
 800273c:	4b57      	ldr	r3, [pc, #348]	; (800289c <lis3dh_read_fifo+0x1b8>)
 800273e:	0011      	movs	r1, r2
 8002740:	0018      	movs	r0, r3
 8002742:	f000 f91f 	bl	8002984 <tx_com>
    while (1)
 8002746:	e7fe      	b.n	8002746 <lis3dh_read_fifo+0x62>
      /* manage here device not found */
    }
  }

  /*  Enable Block Data Update */
  lis3dh_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 8002748:	2408      	movs	r4, #8
 800274a:	2508      	movs	r5, #8
 800274c:	1963      	adds	r3, r4, r5
 800274e:	19db      	adds	r3, r3, r7
 8002750:	2101      	movs	r1, #1
 8002752:	0018      	movs	r0, r3
 8002754:	f000 fa51 	bl	8002bfa <lis3dh_block_data_update_set>
  /* Set Output Data Rate to 10 hz */
  lis3dh_data_rate_set(&dev_ctx, LIS3DH_ODR_10Hz);
 8002758:	1963      	adds	r3, r4, r5
 800275a:	19db      	adds	r3, r3, r7
 800275c:	2102      	movs	r1, #2
 800275e:	0018      	movs	r0, r3
 8002760:	f000 f9ed 	bl	8002b3e <lis3dh_data_rate_set>
  /* Set full scale to 2 g */
  lis3dh_full_scale_set(&dev_ctx, LIS3DH_2g);
 8002764:	1963      	adds	r3, r4, r5
 8002766:	19db      	adds	r3, r3, r7
 8002768:	2100      	movs	r1, #0
 800276a:	0018      	movs	r0, r3
 800276c:	f000 fa15 	bl	8002b9a <lis3dh_full_scale_set>
  /* Set operating mode to high resolution */
  lis3dh_operating_mode_set(&dev_ctx, LIS3DH_HR_12bit);
 8002770:	1963      	adds	r3, r4, r5
 8002772:	19db      	adds	r3, r3, r7
 8002774:	2100      	movs	r1, #0
 8002776:	0018      	movs	r0, r3
 8002778:	f000 f978 	bl	8002a6c <lis3dh_operating_mode_set>
  /* Set FIFO watermark to 25 samples */
  lis3dh_fifo_watermark_set(&dev_ctx, 25);
 800277c:	1963      	adds	r3, r4, r5
 800277e:	19db      	adds	r3, r3, r7
 8002780:	2119      	movs	r1, #25
 8002782:	0018      	movs	r0, r3
 8002784:	f000 fafc 	bl	8002d80 <lis3dh_fifo_watermark_set>
  /* Set FIFO mode to Stream mode: Accumulate samples and
   * override old data */
  lis3dh_fifo_mode_set(&dev_ctx, LIS3DH_DYNAMIC_STREAM_MODE);
 8002788:	1963      	adds	r3, r4, r5
 800278a:	19db      	adds	r3, r3, r7
 800278c:	2102      	movs	r1, #2
 800278e:	0018      	movs	r0, r3
 8002790:	f000 fb26 	bl	8002de0 <lis3dh_fifo_mode_set>
  /* Enable FIFO */
  lis3dh_fifo_set(&dev_ctx, PROPERTY_ENABLE);
 8002794:	1963      	adds	r3, r4, r5
 8002796:	19db      	adds	r3, r3, r7
 8002798:	2101      	movs	r1, #1
 800279a:	0018      	movs	r0, r3
 800279c:	f000 fac0 	bl	8002d20 <lis3dh_fifo_set>

  while (1) {
    uint8_t flags;
    uint8_t num = 0;
 80027a0:	230e      	movs	r3, #14
 80027a2:	18fb      	adds	r3, r7, r3
 80027a4:	2200      	movs	r2, #0
 80027a6:	701a      	strb	r2, [r3, #0]
    /* Check if FIFO level over threshold */
    lis3dh_fifo_fth_flag_get(&dev_ctx, &flags);
 80027a8:	260f      	movs	r6, #15
 80027aa:	19ba      	adds	r2, r7, r6
 80027ac:	2408      	movs	r4, #8
 80027ae:	2508      	movs	r5, #8
 80027b0:	1961      	adds	r1, r4, r5
 80027b2:	19cb      	adds	r3, r1, r7
 80027b4:	0011      	movs	r1, r2
 80027b6:	0018      	movs	r0, r3
 80027b8:	f000 fb5b 	bl	8002e72 <lis3dh_fifo_fth_flag_get>

    if (flags) {
 80027bc:	19bb      	adds	r3, r7, r6
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0ed      	beq.n	80027a0 <lis3dh_read_fifo+0xbc>
      /* Read number of sample in FIFO */
      lis3dh_fifo_data_level_get(&dev_ctx, &num);
 80027c4:	230e      	movs	r3, #14
 80027c6:	18fa      	adds	r2, r7, r3
 80027c8:	1963      	adds	r3, r4, r5
 80027ca:	19db      	adds	r3, r3, r7
 80027cc:	0011      	movs	r1, r2
 80027ce:	0018      	movs	r0, r3
 80027d0:	f000 fb34 	bl	8002e3c <lis3dh_fifo_data_level_get>

      while (num-- > 0) {
 80027d4:	e04d      	b.n	8002872 <lis3dh_read_fifo+0x18e>
        /* Read XL samples */
        lis3dh_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 80027d6:	4a32      	ldr	r2, [pc, #200]	; (80028a0 <lis3dh_read_fifo+0x1bc>)
 80027d8:	2308      	movs	r3, #8
 80027da:	2108      	movs	r1, #8
 80027dc:	185b      	adds	r3, r3, r1
 80027de:	19db      	adds	r3, r3, r7
 80027e0:	0011      	movs	r1, r2
 80027e2:	0018      	movs	r0, r3
 80027e4:	f000 fa37 	bl	8002c56 <lis3dh_acceleration_raw_get>
        acceleration_mg[0] =
          lis3dh_from_fs2_hr_to_mg(data_raw_acceleration[0]);
 80027e8:	4b2d      	ldr	r3, [pc, #180]	; (80028a0 <lis3dh_read_fifo+0x1bc>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	5e9b      	ldrsh	r3, [r3, r2]
 80027ee:	0018      	movs	r0, r3
 80027f0:	f000 f925 	bl	8002a3e <lis3dh_from_fs2_hr_to_mg>
 80027f4:	1c02      	adds	r2, r0, #0
        acceleration_mg[0] =
 80027f6:	4b2b      	ldr	r3, [pc, #172]	; (80028a4 <lis3dh_read_fifo+0x1c0>)
 80027f8:	601a      	str	r2, [r3, #0]
        acceleration_mg[1] =
          lis3dh_from_fs2_hr_to_mg(data_raw_acceleration[1]);
 80027fa:	4b29      	ldr	r3, [pc, #164]	; (80028a0 <lis3dh_read_fifo+0x1bc>)
 80027fc:	2202      	movs	r2, #2
 80027fe:	5e9b      	ldrsh	r3, [r3, r2]
 8002800:	0018      	movs	r0, r3
 8002802:	f000 f91c 	bl	8002a3e <lis3dh_from_fs2_hr_to_mg>
 8002806:	1c02      	adds	r2, r0, #0
        acceleration_mg[1] =
 8002808:	4b26      	ldr	r3, [pc, #152]	; (80028a4 <lis3dh_read_fifo+0x1c0>)
 800280a:	605a      	str	r2, [r3, #4]
        acceleration_mg[2] =
          lis3dh_from_fs2_hr_to_mg(data_raw_acceleration[2]);
 800280c:	4b24      	ldr	r3, [pc, #144]	; (80028a0 <lis3dh_read_fifo+0x1bc>)
 800280e:	2204      	movs	r2, #4
 8002810:	5e9b      	ldrsh	r3, [r3, r2]
 8002812:	0018      	movs	r0, r3
 8002814:	f000 f913 	bl	8002a3e <lis3dh_from_fs2_hr_to_mg>
 8002818:	1c02      	adds	r2, r0, #0
        acceleration_mg[2] =
 800281a:	4b22      	ldr	r3, [pc, #136]	; (80028a4 <lis3dh_read_fifo+0x1c0>)
 800281c:	609a      	str	r2, [r3, #8]
        sprintf((char *)tx_buffer,
                "Acceleration [mg]:%5.0f\t%5.0f\t%5.0f\r\n",
                acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 800281e:	4b21      	ldr	r3, [pc, #132]	; (80028a4 <lis3dh_read_fifo+0x1c0>)
 8002820:	681b      	ldr	r3, [r3, #0]
        sprintf((char *)tx_buffer,
 8002822:	1c18      	adds	r0, r3, #0
 8002824:	f7ff fe76 	bl	8002514 <__aeabi_f2d>
 8002828:	6038      	str	r0, [r7, #0]
 800282a:	6079      	str	r1, [r7, #4]
                acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 800282c:	4b1d      	ldr	r3, [pc, #116]	; (80028a4 <lis3dh_read_fifo+0x1c0>)
 800282e:	685b      	ldr	r3, [r3, #4]
        sprintf((char *)tx_buffer,
 8002830:	1c18      	adds	r0, r3, #0
 8002832:	f7ff fe6f 	bl	8002514 <__aeabi_f2d>
 8002836:	0004      	movs	r4, r0
 8002838:	000d      	movs	r5, r1
                acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 800283a:	4b1a      	ldr	r3, [pc, #104]	; (80028a4 <lis3dh_read_fifo+0x1c0>)
 800283c:	689b      	ldr	r3, [r3, #8]
        sprintf((char *)tx_buffer,
 800283e:	1c18      	adds	r0, r3, #0
 8002840:	f7ff fe68 	bl	8002514 <__aeabi_f2d>
 8002844:	0002      	movs	r2, r0
 8002846:	000b      	movs	r3, r1
 8002848:	4917      	ldr	r1, [pc, #92]	; (80028a8 <lis3dh_read_fifo+0x1c4>)
 800284a:	4814      	ldr	r0, [pc, #80]	; (800289c <lis3dh_read_fifo+0x1b8>)
 800284c:	9202      	str	r2, [sp, #8]
 800284e:	9303      	str	r3, [sp, #12]
 8002850:	9400      	str	r4, [sp, #0]
 8002852:	9501      	str	r5, [sp, #4]
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f004 f99a 	bl	8006b90 <siprintf>
        tx_com(tx_buffer, strlen((char const *)tx_buffer));
 800285c:	4b0f      	ldr	r3, [pc, #60]	; (800289c <lis3dh_read_fifo+0x1b8>)
 800285e:	0018      	movs	r0, r3
 8002860:	f7fd fc50 	bl	8000104 <strlen>
 8002864:	0003      	movs	r3, r0
 8002866:	b29a      	uxth	r2, r3
 8002868:	4b0c      	ldr	r3, [pc, #48]	; (800289c <lis3dh_read_fifo+0x1b8>)
 800286a:	0011      	movs	r1, r2
 800286c:	0018      	movs	r0, r3
 800286e:	f000 f889 	bl	8002984 <tx_com>
      while (num-- > 0) {
 8002872:	200e      	movs	r0, #14
 8002874:	183b      	adds	r3, r7, r0
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	1e5a      	subs	r2, r3, #1
 800287a:	b2d1      	uxtb	r1, r2
 800287c:	183a      	adds	r2, r7, r0
 800287e:	7011      	strb	r1, [r2, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1a8      	bne.n	80027d6 <lis3dh_read_fifo+0xf2>
  while (1) {
 8002884:	e78c      	b.n	80027a0 <lis3dh_read_fifo+0xbc>
 8002886:	46c0      	nop			; (mov r8, r8)
 8002888:	080028ad 	.word	0x080028ad
 800288c:	08002911 	.word	0x08002911
 8002890:	200005f8 	.word	0x200005f8
 8002894:	2000020c 	.word	0x2000020c
 8002898:	08009200 	.word	0x08009200
 800289c:	20000210 	.word	0x20000210
 80028a0:	200001f8 	.word	0x200001f8
 80028a4:	20000200 	.word	0x20000200
 80028a8:	08009224 	.word	0x08009224

080028ac <platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp,
                              uint16_t len)
{
 80028ac:	b5b0      	push	{r4, r5, r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	0008      	movs	r0, r1
 80028b6:	607a      	str	r2, [r7, #4]
 80028b8:	0019      	movs	r1, r3
 80028ba:	240b      	movs	r4, #11
 80028bc:	193b      	adds	r3, r7, r4
 80028be:	1c02      	adds	r2, r0, #0
 80028c0:	701a      	strb	r2, [r3, #0]
 80028c2:	2508      	movs	r5, #8
 80028c4:	197b      	adds	r3, r7, r5
 80028c6:	1c0a      	adds	r2, r1, #0
 80028c8:	801a      	strh	r2, [r3, #0]
  HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_RESET);
  HAL_SPI_Transmit(handle, &reg, 1, 1000);
  HAL_SPI_Transmit(handle, (uint8_t*) bufp, len, 1000);
  HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_SET);
#elif defined(NUCLEO_G071RB)
  HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_RESET);
 80028ca:	4b10      	ldr	r3, [pc, #64]	; (800290c <platform_write+0x60>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	2101      	movs	r1, #1
 80028d0:	0018      	movs	r0, r3
 80028d2:	f001 f841 	bl	8003958 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(handle, &reg, 1, 1000);
 80028d6:	23fa      	movs	r3, #250	; 0xfa
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	1939      	adds	r1, r7, r4
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	2201      	movs	r2, #1
 80028e0:	f001 ffd8 	bl	8004894 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(handle, bufp, len, 1000);
 80028e4:	23fa      	movs	r3, #250	; 0xfa
 80028e6:	009c      	lsls	r4, r3, #2
 80028e8:	197b      	adds	r3, r7, r5
 80028ea:	881a      	ldrh	r2, [r3, #0]
 80028ec:	6879      	ldr	r1, [r7, #4]
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	0023      	movs	r3, r4
 80028f2:	f001 ffcf 	bl	8004894 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_SET);
 80028f6:	4b05      	ldr	r3, [pc, #20]	; (800290c <platform_write+0x60>)
 80028f8:	2201      	movs	r2, #1
 80028fa:	2101      	movs	r1, #1
 80028fc:	0018      	movs	r0, r3
 80028fe:	f001 f82b 	bl	8003958 <HAL_GPIO_WritePin>
#elif defined(SPC584B_DIS)
  /* Write multiple command */
  reg |= 0x80;
  i2c_lld_write(handle,  LIS3DH_I2C_ADD_L & 0xFE, reg, (uint8_t*) bufp, len);
#endif
  return 0;
 8002902:	2300      	movs	r3, #0
}
 8002904:	0018      	movs	r0, r3
 8002906:	46bd      	mov	sp, r7
 8002908:	b004      	add	sp, #16
 800290a:	bdb0      	pop	{r4, r5, r7, pc}
 800290c:	50000400 	.word	0x50000400

08002910 <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8002910:	b5b0      	push	{r4, r5, r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	0008      	movs	r0, r1
 800291a:	607a      	str	r2, [r7, #4]
 800291c:	0019      	movs	r1, r3
 800291e:	240b      	movs	r4, #11
 8002920:	193b      	adds	r3, r7, r4
 8002922:	1c02      	adds	r2, r0, #0
 8002924:	701a      	strb	r2, [r3, #0]
 8002926:	2508      	movs	r5, #8
 8002928:	197b      	adds	r3, r7, r5
 800292a:	1c0a      	adds	r2, r1, #0
 800292c:	801a      	strh	r2, [r3, #0]
  HAL_SPI_Transmit(handle, &reg, 1, 1000);
  HAL_SPI_Receive(handle, bufp, len, 1000);
  HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_SET);
#elif defined(NUCLEO_G071RB)
  /* Read multiple command */
  reg |= 0xC0;
 800292e:	193b      	adds	r3, r7, r4
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2240      	movs	r2, #64	; 0x40
 8002934:	4252      	negs	r2, r2
 8002936:	4313      	orrs	r3, r2
 8002938:	b2da      	uxtb	r2, r3
 800293a:	193b      	adds	r3, r7, r4
 800293c:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_RESET);
 800293e:	4b10      	ldr	r3, [pc, #64]	; (8002980 <platform_read+0x70>)
 8002940:	2200      	movs	r2, #0
 8002942:	2101      	movs	r1, #1
 8002944:	0018      	movs	r0, r3
 8002946:	f001 f807 	bl	8003958 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(handle, &reg, 1, 1000);
 800294a:	23fa      	movs	r3, #250	; 0xfa
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	1939      	adds	r1, r7, r4
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	2201      	movs	r2, #1
 8002954:	f001 ff9e 	bl	8004894 <HAL_SPI_Transmit>
  HAL_SPI_Receive(handle, bufp, len, 1000);
 8002958:	23fa      	movs	r3, #250	; 0xfa
 800295a:	009c      	lsls	r4, r3, #2
 800295c:	197b      	adds	r3, r7, r5
 800295e:	881a      	ldrh	r2, [r3, #0]
 8002960:	6879      	ldr	r1, [r7, #4]
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	0023      	movs	r3, r4
 8002966:	f002 f8ed 	bl	8004b44 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_SET);
 800296a:	4b05      	ldr	r3, [pc, #20]	; (8002980 <platform_read+0x70>)
 800296c:	2201      	movs	r2, #1
 800296e:	2101      	movs	r1, #1
 8002970:	0018      	movs	r0, r3
 8002972:	f000 fff1 	bl	8003958 <HAL_GPIO_WritePin>
#elif defined(SPC584B_DIS)
  /* Read multiple command */
  reg |= 0x80;
  i2c_lld_read(handle, LIS3DH_I2C_ADD_L & 0xFE, reg, bufp, len);
#endif
  return 0;
 8002976:	2300      	movs	r3, #0
}
 8002978:	0018      	movs	r0, r3
 800297a:	46bd      	mov	sp, r7
 800297c:	b004      	add	sp, #16
 800297e:	bdb0      	pop	{r4, r5, r7, pc}
 8002980:	50000400 	.word	0x50000400

08002984 <tx_com>:
 * @param  tx_buffer     buffer to transmit
 * @param  len           number of byte to send
 *
 */
static void tx_com(uint8_t *tx_buffer, uint16_t len)
{
 8002984:	b590      	push	{r4, r7, lr}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	000a      	movs	r2, r1
 800298e:	1cbb      	adds	r3, r7, #2
 8002990:	801a      	strh	r2, [r3, #0]
#if defined(NUCLEO_F411RE) | defined (NUCLEO_G071RB)
  HAL_UART_Transmit(&huart2, tx_buffer, len, 1000);
 8002992:	23fa      	movs	r3, #250	; 0xfa
 8002994:	009c      	lsls	r4, r3, #2
 8002996:	1cbb      	adds	r3, r7, #2
 8002998:	881a      	ldrh	r2, [r3, #0]
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	4803      	ldr	r0, [pc, #12]	; (80029ac <tx_com+0x28>)
 800299e:	0023      	movs	r3, r4
 80029a0:	f002 fe18 	bl	80055d4 <HAL_UART_Transmit>
#elif defined(STEVAL_MKI109V3)
  CDC_Transmit_FS(tx_buffer, len);
#elif defined(SPC584B_DIS)
  sd_lld_write(&SD2, tx_buffer, len);
#endif
}
 80029a4:	46c0      	nop			; (mov r8, r8)
 80029a6:	46bd      	mov	sp, r7
 80029a8:	b003      	add	sp, #12
 80029aa:	bd90      	pop	{r4, r7, pc}
 80029ac:	20000660 	.word	0x20000660

080029b0 <platform_init>:

/*
 * @brief  platform specific initialization (platform dependent)
 */
static void platform_init(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  TIM3->CCR2 = PWM_3V3;
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
  platform_delay(1000);
#endif
}
 80029b4:	46c0      	nop			; (mov r8, r8)
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <lis3dh_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lis3dh_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 80029ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029bc:	b087      	sub	sp, #28
 80029be:	af00      	add	r7, sp, #0
 80029c0:	60f8      	str	r0, [r7, #12]
 80029c2:	0008      	movs	r0, r1
 80029c4:	607a      	str	r2, [r7, #4]
 80029c6:	0019      	movs	r1, r3
 80029c8:	260b      	movs	r6, #11
 80029ca:	19bb      	adds	r3, r7, r6
 80029cc:	1c02      	adds	r2, r0, #0
 80029ce:	701a      	strb	r2, [r3, #0]
 80029d0:	2508      	movs	r5, #8
 80029d2:	197b      	adds	r3, r7, r5
 80029d4:	1c0a      	adds	r2, r1, #0
 80029d6:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	685c      	ldr	r4, [r3, #4]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	68d8      	ldr	r0, [r3, #12]
 80029e0:	197b      	adds	r3, r7, r5
 80029e2:	881d      	ldrh	r5, [r3, #0]
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	19bb      	adds	r3, r7, r6
 80029e8:	7819      	ldrb	r1, [r3, #0]
 80029ea:	002b      	movs	r3, r5
 80029ec:	47a0      	blx	r4
 80029ee:	0003      	movs	r3, r0
 80029f0:	617b      	str	r3, [r7, #20]

  return ret;
 80029f2:	697b      	ldr	r3, [r7, #20]
}
 80029f4:	0018      	movs	r0, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	b007      	add	sp, #28
 80029fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029fc <lis3dh_write_reg>:
  *
  */
int32_t __weak lis3dh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80029fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029fe:	b087      	sub	sp, #28
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	0008      	movs	r0, r1
 8002a06:	607a      	str	r2, [r7, #4]
 8002a08:	0019      	movs	r1, r3
 8002a0a:	260b      	movs	r6, #11
 8002a0c:	19bb      	adds	r3, r7, r6
 8002a0e:	1c02      	adds	r2, r0, #0
 8002a10:	701a      	strb	r2, [r3, #0]
 8002a12:	2508      	movs	r5, #8
 8002a14:	197b      	adds	r3, r7, r5
 8002a16:	1c0a      	adds	r2, r1, #0
 8002a18:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681c      	ldr	r4, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	68d8      	ldr	r0, [r3, #12]
 8002a22:	197b      	adds	r3, r7, r5
 8002a24:	881d      	ldrh	r5, [r3, #0]
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	19bb      	adds	r3, r7, r6
 8002a2a:	7819      	ldrb	r1, [r3, #0]
 8002a2c:	002b      	movs	r3, r5
 8002a2e:	47a0      	blx	r4
 8002a30:	0003      	movs	r3, r0
 8002a32:	617b      	str	r3, [r7, #20]

  return ret;
 8002a34:	697b      	ldr	r3, [r7, #20]
}
 8002a36:	0018      	movs	r0, r3
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	b007      	add	sp, #28
 8002a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a3e <lis3dh_from_fs2_hr_to_mg>:
  * @{
  *
  */

float_t lis3dh_from_fs2_hr_to_mg(int16_t lsb)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b082      	sub	sp, #8
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	0002      	movs	r2, r0
 8002a46:	1dbb      	adds	r3, r7, #6
 8002a48:	801a      	strh	r2, [r3, #0]
  return ((float_t)lsb / 16.0f) * 1.0f;
 8002a4a:	1dbb      	adds	r3, r7, #6
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	5e9b      	ldrsh	r3, [r3, r2]
 8002a50:	0018      	movs	r0, r3
 8002a52:	f7fd ff2b 	bl	80008ac <__aeabi_i2f>
 8002a56:	1c03      	adds	r3, r0, #0
 8002a58:	2183      	movs	r1, #131	; 0x83
 8002a5a:	05c9      	lsls	r1, r1, #23
 8002a5c:	1c18      	adds	r0, r3, #0
 8002a5e:	f7fd fe0d 	bl	800067c <__aeabi_fdiv>
 8002a62:	1c03      	adds	r3, r0, #0
}
 8002a64:	1c18      	adds	r0, r3, #0
 8002a66:	46bd      	mov	sp, r7
 8002a68:	b002      	add	sp, #8
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <lis3dh_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_operating_mode_set(stmdev_ctx_t *ctx,
                                  lis3dh_op_md_t val)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	000a      	movs	r2, r1
 8002a76:	1cfb      	adds	r3, r7, #3
 8002a78:	701a      	strb	r2, [r3, #0]
  lis3dh_ctrl_reg1_t ctrl_reg1;
  lis3dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG1,
 8002a7a:	2310      	movs	r3, #16
 8002a7c:	18fa      	adds	r2, r7, r3
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	2301      	movs	r3, #1
 8002a82:	2120      	movs	r1, #32
 8002a84:	f7ff ff99 	bl	80029ba <lis3dh_read_reg>
 8002a88:	0003      	movs	r3, r0
 8002a8a:	617b      	str	r3, [r7, #20]
                        (uint8_t *)&ctrl_reg1, 1);

  if (ret == 0)
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d108      	bne.n	8002aa4 <lis3dh_operating_mode_set+0x38>
  {
    ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG4,
 8002a92:	230c      	movs	r3, #12
 8002a94:	18fa      	adds	r2, r7, r3
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	2301      	movs	r3, #1
 8002a9a:	2123      	movs	r1, #35	; 0x23
 8002a9c:	f7ff ff8d 	bl	80029ba <lis3dh_read_reg>
 8002aa0:	0003      	movs	r3, r0
 8002aa2:	617b      	str	r3, [r7, #20]
                          (uint8_t *)&ctrl_reg4, 1);
  }

  if (ret == 0)
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d138      	bne.n	8002b1c <lis3dh_operating_mode_set+0xb0>
  {
    if (val == LIS3DH_HR_12bit)
 8002aaa:	1cfb      	adds	r3, r7, #3
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10b      	bne.n	8002aca <lis3dh_operating_mode_set+0x5e>
    {
      ctrl_reg1.lpen = 0;
 8002ab2:	2310      	movs	r3, #16
 8002ab4:	18fb      	adds	r3, r7, r3
 8002ab6:	781a      	ldrb	r2, [r3, #0]
 8002ab8:	2108      	movs	r1, #8
 8002aba:	438a      	bics	r2, r1
 8002abc:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 1;
 8002abe:	230c      	movs	r3, #12
 8002ac0:	18fb      	adds	r3, r7, r3
 8002ac2:	781a      	ldrb	r2, [r3, #0]
 8002ac4:	2108      	movs	r1, #8
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	701a      	strb	r2, [r3, #0]
    }

    if (val == LIS3DH_NM_10bit)
 8002aca:	1cfb      	adds	r3, r7, #3
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d10b      	bne.n	8002aea <lis3dh_operating_mode_set+0x7e>
    {
      ctrl_reg1.lpen = 0;
 8002ad2:	2310      	movs	r3, #16
 8002ad4:	18fb      	adds	r3, r7, r3
 8002ad6:	781a      	ldrb	r2, [r3, #0]
 8002ad8:	2108      	movs	r1, #8
 8002ada:	438a      	bics	r2, r1
 8002adc:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 0;
 8002ade:	230c      	movs	r3, #12
 8002ae0:	18fb      	adds	r3, r7, r3
 8002ae2:	781a      	ldrb	r2, [r3, #0]
 8002ae4:	2108      	movs	r1, #8
 8002ae6:	438a      	bics	r2, r1
 8002ae8:	701a      	strb	r2, [r3, #0]
    }

    if (val == LIS3DH_LP_8bit)
 8002aea:	1cfb      	adds	r3, r7, #3
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d10b      	bne.n	8002b0a <lis3dh_operating_mode_set+0x9e>
    {
      ctrl_reg1.lpen = 1;
 8002af2:	2310      	movs	r3, #16
 8002af4:	18fb      	adds	r3, r7, r3
 8002af6:	781a      	ldrb	r2, [r3, #0]
 8002af8:	2108      	movs	r1, #8
 8002afa:	430a      	orrs	r2, r1
 8002afc:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 0;
 8002afe:	230c      	movs	r3, #12
 8002b00:	18fb      	adds	r3, r7, r3
 8002b02:	781a      	ldrb	r2, [r3, #0]
 8002b04:	2108      	movs	r1, #8
 8002b06:	438a      	bics	r2, r1
 8002b08:	701a      	strb	r2, [r3, #0]
    }

    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8002b0a:	2310      	movs	r3, #16
 8002b0c:	18fa      	adds	r2, r7, r3
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	2301      	movs	r3, #1
 8002b12:	2120      	movs	r1, #32
 8002b14:	f7ff ff72 	bl	80029fc <lis3dh_write_reg>
 8002b18:	0003      	movs	r3, r0
 8002b1a:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d108      	bne.n	8002b34 <lis3dh_operating_mode_set+0xc8>
  {
    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8002b22:	230c      	movs	r3, #12
 8002b24:	18fa      	adds	r2, r7, r3
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	2301      	movs	r3, #1
 8002b2a:	2123      	movs	r1, #35	; 0x23
 8002b2c:	f7ff ff66 	bl	80029fc <lis3dh_write_reg>
 8002b30:	0003      	movs	r3, r0
 8002b32:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8002b34:	697b      	ldr	r3, [r7, #20]
}
 8002b36:	0018      	movs	r0, r3
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	b006      	add	sp, #24
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <lis3dh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_data_rate_set(stmdev_ctx_t *ctx, lis3dh_odr_t val)
{
 8002b3e:	b590      	push	{r4, r7, lr}
 8002b40:	b085      	sub	sp, #20
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
 8002b46:	000a      	movs	r2, r1
 8002b48:	1cfb      	adds	r3, r7, #3
 8002b4a:	701a      	strb	r2, [r3, #0]
  lis3dh_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8002b4c:	2408      	movs	r4, #8
 8002b4e:	193a      	adds	r2, r7, r4
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	2301      	movs	r3, #1
 8002b54:	2120      	movs	r1, #32
 8002b56:	f7ff ff30 	bl	80029ba <lis3dh_read_reg>
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d115      	bne.n	8002b90 <lis3dh_data_rate_set+0x52>
  {
    ctrl_reg1.odr = (uint8_t)val;
 8002b64:	1cfb      	adds	r3, r7, #3
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	220f      	movs	r2, #15
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	193b      	adds	r3, r7, r4
 8002b70:	0110      	lsls	r0, r2, #4
 8002b72:	781a      	ldrb	r2, [r3, #0]
 8002b74:	210f      	movs	r1, #15
 8002b76:	400a      	ands	r2, r1
 8002b78:	1c11      	adds	r1, r2, #0
 8002b7a:	1c02      	adds	r2, r0, #0
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	701a      	strb	r2, [r3, #0]
    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8002b80:	193a      	adds	r2, r7, r4
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	2301      	movs	r3, #1
 8002b86:	2120      	movs	r1, #32
 8002b88:	f7ff ff38 	bl	80029fc <lis3dh_write_reg>
 8002b8c:	0003      	movs	r3, r0
 8002b8e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002b90:	68fb      	ldr	r3, [r7, #12]
}
 8002b92:	0018      	movs	r0, r3
 8002b94:	46bd      	mov	sp, r7
 8002b96:	b005      	add	sp, #20
 8002b98:	bd90      	pop	{r4, r7, pc}

08002b9a <lis3dh_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_full_scale_set(stmdev_ctx_t *ctx, lis3dh_fs_t val)
{
 8002b9a:	b590      	push	{r4, r7, lr}
 8002b9c:	b085      	sub	sp, #20
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
 8002ba2:	000a      	movs	r2, r1
 8002ba4:	1cfb      	adds	r3, r7, #3
 8002ba6:	701a      	strb	r2, [r3, #0]
  lis3dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8002ba8:	2408      	movs	r4, #8
 8002baa:	193a      	adds	r2, r7, r4
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	2301      	movs	r3, #1
 8002bb0:	2123      	movs	r1, #35	; 0x23
 8002bb2:	f7ff ff02 	bl	80029ba <lis3dh_read_reg>
 8002bb6:	0003      	movs	r3, r0
 8002bb8:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d117      	bne.n	8002bf0 <lis3dh_full_scale_set+0x56>
  {
    ctrl_reg4.fs = (uint8_t)val;
 8002bc0:	1cfb      	adds	r3, r7, #3
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	2203      	movs	r2, #3
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	193b      	adds	r3, r7, r4
 8002bcc:	2103      	movs	r1, #3
 8002bce:	400a      	ands	r2, r1
 8002bd0:	0110      	lsls	r0, r2, #4
 8002bd2:	781a      	ldrb	r2, [r3, #0]
 8002bd4:	2130      	movs	r1, #48	; 0x30
 8002bd6:	438a      	bics	r2, r1
 8002bd8:	1c11      	adds	r1, r2, #0
 8002bda:	1c02      	adds	r2, r0, #0
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	701a      	strb	r2, [r3, #0]
    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8002be0:	193a      	adds	r2, r7, r4
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	2301      	movs	r3, #1
 8002be6:	2123      	movs	r1, #35	; 0x23
 8002be8:	f7ff ff08 	bl	80029fc <lis3dh_write_reg>
 8002bec:	0003      	movs	r3, r0
 8002bee:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
}
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	b005      	add	sp, #20
 8002bf8:	bd90      	pop	{r4, r7, pc}

08002bfa <lis3dh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002bfa:	b590      	push	{r4, r7, lr}
 8002bfc:	b085      	sub	sp, #20
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
 8002c02:	000a      	movs	r2, r1
 8002c04:	1cfb      	adds	r3, r7, #3
 8002c06:	701a      	strb	r2, [r3, #0]
  lis3dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8002c08:	2408      	movs	r4, #8
 8002c0a:	193a      	adds	r2, r7, r4
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	2301      	movs	r3, #1
 8002c10:	2123      	movs	r1, #35	; 0x23
 8002c12:	f7ff fed2 	bl	80029ba <lis3dh_read_reg>
 8002c16:	0003      	movs	r3, r0
 8002c18:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d115      	bne.n	8002c4c <lis3dh_block_data_update_set+0x52>
  {
    ctrl_reg4.bdu = val;
 8002c20:	1cfb      	adds	r3, r7, #3
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2201      	movs	r2, #1
 8002c26:	4013      	ands	r3, r2
 8002c28:	b2da      	uxtb	r2, r3
 8002c2a:	193b      	adds	r3, r7, r4
 8002c2c:	01d0      	lsls	r0, r2, #7
 8002c2e:	781a      	ldrb	r2, [r3, #0]
 8002c30:	217f      	movs	r1, #127	; 0x7f
 8002c32:	400a      	ands	r2, r1
 8002c34:	1c11      	adds	r1, r2, #0
 8002c36:	1c02      	adds	r2, r0, #0
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	701a      	strb	r2, [r3, #0]
    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8002c3c:	193a      	adds	r2, r7, r4
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	2301      	movs	r3, #1
 8002c42:	2123      	movs	r1, #35	; 0x23
 8002c44:	f7ff feda 	bl	80029fc <lis3dh_write_reg>
 8002c48:	0003      	movs	r3, r0
 8002c4a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
}
 8002c4e:	0018      	movs	r0, r3
 8002c50:	46bd      	mov	sp, r7
 8002c52:	b005      	add	sp, #20
 8002c54:	bd90      	pop	{r4, r7, pc}

08002c56 <lis3dh_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002c56:	b590      	push	{r4, r7, lr}
 8002c58:	b087      	sub	sp, #28
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
 8002c5e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_OUT_X_L, buff, 6);
 8002c60:	240c      	movs	r4, #12
 8002c62:	193a      	adds	r2, r7, r4
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	2306      	movs	r3, #6
 8002c68:	2128      	movs	r1, #40	; 0x28
 8002c6a:	f7ff fea6 	bl	80029ba <lis3dh_read_reg>
 8002c6e:	0003      	movs	r3, r0
 8002c70:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002c72:	0021      	movs	r1, r4
 8002c74:	187b      	adds	r3, r7, r1
 8002c76:	785b      	ldrb	r3, [r3, #1]
 8002c78:	b21a      	sxth	r2, r3
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	2200      	movs	r2, #0
 8002c82:	5e9b      	ldrsh	r3, [r3, r2]
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	021b      	lsls	r3, r3, #8
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	187b      	adds	r3, r7, r1
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	18d3      	adds	r3, r2, r3
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	b21a      	sxth	r2, r3
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002c9a:	187b      	adds	r3, r7, r1
 8002c9c:	78da      	ldrb	r2, [r3, #3]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	3302      	adds	r3, #2
 8002ca2:	b212      	sxth	r2, r2
 8002ca4:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	3302      	adds	r3, #2
 8002caa:	2200      	movs	r2, #0
 8002cac:	5e9b      	ldrsh	r3, [r3, r2]
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	021b      	lsls	r3, r3, #8
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	187b      	adds	r3, r7, r1
 8002cb6:	789b      	ldrb	r3, [r3, #2]
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	18d3      	adds	r3, r2, r3
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	3302      	adds	r3, #2
 8002cc2:	b212      	sxth	r2, r2
 8002cc4:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002cc6:	187b      	adds	r3, r7, r1
 8002cc8:	795a      	ldrb	r2, [r3, #5]
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	3304      	adds	r3, #4
 8002cce:	b212      	sxth	r2, r2
 8002cd0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	3304      	adds	r3, #4
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	5e9b      	ldrsh	r3, [r3, r2]
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	021b      	lsls	r3, r3, #8
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	187b      	adds	r3, r7, r1
 8002ce2:	791b      	ldrb	r3, [r3, #4]
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	18d3      	adds	r3, r2, r3
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	3304      	adds	r3, #4
 8002cee:	b212      	sxth	r2, r2
 8002cf0:	801a      	strh	r2, [r3, #0]

  return ret;
 8002cf2:	697b      	ldr	r3, [r7, #20]
}
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	b007      	add	sp, #28
 8002cfa:	bd90      	pop	{r4, r7, pc}

08002cfc <lis3dh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_WHO_AM_I, buff, 1);
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	210f      	movs	r1, #15
 8002d0e:	f7ff fe54 	bl	80029ba <lis3dh_read_reg>
 8002d12:	0003      	movs	r3, r0
 8002d14:	60fb      	str	r3, [r7, #12]

  return ret;
 8002d16:	68fb      	ldr	r3, [r7, #12]
}
 8002d18:	0018      	movs	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	b004      	add	sp, #16
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <lis3dh_fifo_set>:
  * @param  val      change the values of fifo_en in reg CTRL_REG5
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_fifo_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002d20:	b590      	push	{r4, r7, lr}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	000a      	movs	r2, r1
 8002d2a:	1cfb      	adds	r3, r7, #3
 8002d2c:	701a      	strb	r2, [r3, #0]
  lis3dh_ctrl_reg5_t ctrl_reg5;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG5, (uint8_t *)&ctrl_reg5, 1);
 8002d2e:	2408      	movs	r4, #8
 8002d30:	193a      	adds	r2, r7, r4
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	2301      	movs	r3, #1
 8002d36:	2124      	movs	r1, #36	; 0x24
 8002d38:	f7ff fe3f 	bl	80029ba <lis3dh_read_reg>
 8002d3c:	0003      	movs	r3, r0
 8002d3e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d117      	bne.n	8002d76 <lis3dh_fifo_set+0x56>
  {
    ctrl_reg5.fifo_en = val;
 8002d46:	1cfb      	adds	r3, r7, #3
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	193b      	adds	r3, r7, r4
 8002d52:	2101      	movs	r1, #1
 8002d54:	400a      	ands	r2, r1
 8002d56:	0190      	lsls	r0, r2, #6
 8002d58:	781a      	ldrb	r2, [r3, #0]
 8002d5a:	2140      	movs	r1, #64	; 0x40
 8002d5c:	438a      	bics	r2, r1
 8002d5e:	1c11      	adds	r1, r2, #0
 8002d60:	1c02      	adds	r2, r0, #0
 8002d62:	430a      	orrs	r2, r1
 8002d64:	701a      	strb	r2, [r3, #0]
    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG5, (uint8_t *)&ctrl_reg5, 1);
 8002d66:	193a      	adds	r2, r7, r4
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	2124      	movs	r1, #36	; 0x24
 8002d6e:	f7ff fe45 	bl	80029fc <lis3dh_write_reg>
 8002d72:	0003      	movs	r3, r0
 8002d74:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002d76:	68fb      	ldr	r3, [r7, #12]
}
 8002d78:	0018      	movs	r0, r3
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	b005      	add	sp, #20
 8002d7e:	bd90      	pop	{r4, r7, pc}

08002d80 <lis3dh_fifo_watermark_set>:
  * @param  val      change the values of fth in reg FIFO_CTRL_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_fifo_watermark_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002d80:	b590      	push	{r4, r7, lr}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	000a      	movs	r2, r1
 8002d8a:	1cfb      	adds	r3, r7, #3
 8002d8c:	701a      	strb	r2, [r3, #0]
  lis3dh_fifo_ctrl_reg_t fifo_ctrl_reg;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_FIFO_CTRL_REG,
 8002d8e:	2408      	movs	r4, #8
 8002d90:	193a      	adds	r2, r7, r4
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	2301      	movs	r3, #1
 8002d96:	212e      	movs	r1, #46	; 0x2e
 8002d98:	f7ff fe0f 	bl	80029ba <lis3dh_read_reg>
 8002d9c:	0003      	movs	r3, r0
 8002d9e:	60fb      	str	r3, [r7, #12]
                        (uint8_t *)&fifo_ctrl_reg, 1);

  if (ret == 0)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d117      	bne.n	8002dd6 <lis3dh_fifo_watermark_set+0x56>
  {
    fifo_ctrl_reg.fth = val;
 8002da6:	1cfb      	adds	r3, r7, #3
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	221f      	movs	r2, #31
 8002dac:	4013      	ands	r3, r2
 8002dae:	b2da      	uxtb	r2, r3
 8002db0:	193b      	adds	r3, r7, r4
 8002db2:	211f      	movs	r1, #31
 8002db4:	400a      	ands	r2, r1
 8002db6:	0010      	movs	r0, r2
 8002db8:	781a      	ldrb	r2, [r3, #0]
 8002dba:	211f      	movs	r1, #31
 8002dbc:	438a      	bics	r2, r1
 8002dbe:	1c11      	adds	r1, r2, #0
 8002dc0:	1c02      	adds	r2, r0, #0
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	701a      	strb	r2, [r3, #0]
    ret = lis3dh_write_reg(ctx, LIS3DH_FIFO_CTRL_REG,
 8002dc6:	193a      	adds	r2, r7, r4
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	2301      	movs	r3, #1
 8002dcc:	212e      	movs	r1, #46	; 0x2e
 8002dce:	f7ff fe15 	bl	80029fc <lis3dh_write_reg>
 8002dd2:	0003      	movs	r3, r0
 8002dd4:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg, 1);
  }

  return ret;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
}
 8002dd8:	0018      	movs	r0, r3
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	b005      	add	sp, #20
 8002dde:	bd90      	pop	{r4, r7, pc}

08002de0 <lis3dh_fifo_mode_set>:
  * @param  val      change the values of fm in reg FIFO_CTRL_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_fifo_mode_set(stmdev_ctx_t *ctx, lis3dh_fm_t val)
{
 8002de0:	b590      	push	{r4, r7, lr}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	000a      	movs	r2, r1
 8002dea:	1cfb      	adds	r3, r7, #3
 8002dec:	701a      	strb	r2, [r3, #0]
  lis3dh_fifo_ctrl_reg_t fifo_ctrl_reg;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_FIFO_CTRL_REG,
 8002dee:	2408      	movs	r4, #8
 8002df0:	193a      	adds	r2, r7, r4
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	2301      	movs	r3, #1
 8002df6:	212e      	movs	r1, #46	; 0x2e
 8002df8:	f7ff fddf 	bl	80029ba <lis3dh_read_reg>
 8002dfc:	0003      	movs	r3, r0
 8002dfe:	60fb      	str	r3, [r7, #12]
                        (uint8_t *)&fifo_ctrl_reg, 1);

  if (ret == 0)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d115      	bne.n	8002e32 <lis3dh_fifo_mode_set+0x52>
  {
    fifo_ctrl_reg.fm = (uint8_t)val;
 8002e06:	1cfb      	adds	r3, r7, #3
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	2203      	movs	r2, #3
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	b2da      	uxtb	r2, r3
 8002e10:	193b      	adds	r3, r7, r4
 8002e12:	0190      	lsls	r0, r2, #6
 8002e14:	781a      	ldrb	r2, [r3, #0]
 8002e16:	213f      	movs	r1, #63	; 0x3f
 8002e18:	400a      	ands	r2, r1
 8002e1a:	1c11      	adds	r1, r2, #0
 8002e1c:	1c02      	adds	r2, r0, #0
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	701a      	strb	r2, [r3, #0]
    ret = lis3dh_write_reg(ctx, LIS3DH_FIFO_CTRL_REG,
 8002e22:	193a      	adds	r2, r7, r4
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	2301      	movs	r3, #1
 8002e28:	212e      	movs	r1, #46	; 0x2e
 8002e2a:	f7ff fde7 	bl	80029fc <lis3dh_write_reg>
 8002e2e:	0003      	movs	r3, r0
 8002e30:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg, 1);
  }

  return ret;
 8002e32:	68fb      	ldr	r3, [r7, #12]
}
 8002e34:	0018      	movs	r0, r3
 8002e36:	46bd      	mov	sp, r7
 8002e38:	b005      	add	sp, #20
 8002e3a:	bd90      	pop	{r4, r7, pc}

08002e3c <lis3dh_fifo_data_level_get>:
  * @param  val      change the values of fss in reg FIFO_SRC_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_fifo_data_level_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8002e3c:	b590      	push	{r4, r7, lr}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  lis3dh_fifo_src_reg_t fifo_src_reg;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_FIFO_SRC_REG,
 8002e46:	2408      	movs	r4, #8
 8002e48:	193a      	adds	r2, r7, r4
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	212f      	movs	r1, #47	; 0x2f
 8002e50:	f7ff fdb3 	bl	80029ba <lis3dh_read_reg>
 8002e54:	0003      	movs	r3, r0
 8002e56:	60fb      	str	r3, [r7, #12]
                        (uint8_t *)&fifo_src_reg, 1);
  *val = (uint8_t)fifo_src_reg.fss;
 8002e58:	193b      	adds	r3, r7, r4
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	06db      	lsls	r3, r3, #27
 8002e5e:	0edb      	lsrs	r3, r3, #27
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	001a      	movs	r2, r3
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	701a      	strb	r2, [r3, #0]

  return ret;
 8002e68:	68fb      	ldr	r3, [r7, #12]
}
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	b005      	add	sp, #20
 8002e70:	bd90      	pop	{r4, r7, pc}

08002e72 <lis3dh_fifo_fth_flag_get>:
  * @param  val      change the values of wtm in reg FIFO_SRC_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_fifo_fth_flag_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8002e72:	b590      	push	{r4, r7, lr}
 8002e74:	b085      	sub	sp, #20
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
 8002e7a:	6039      	str	r1, [r7, #0]
  lis3dh_fifo_src_reg_t fifo_src_reg;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_FIFO_SRC_REG,
 8002e7c:	2408      	movs	r4, #8
 8002e7e:	193a      	adds	r2, r7, r4
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	2301      	movs	r3, #1
 8002e84:	212f      	movs	r1, #47	; 0x2f
 8002e86:	f7ff fd98 	bl	80029ba <lis3dh_read_reg>
 8002e8a:	0003      	movs	r3, r0
 8002e8c:	60fb      	str	r3, [r7, #12]
                        (uint8_t *)&fifo_src_reg, 1);
  *val = (uint8_t)fifo_src_reg.wtm;
 8002e8e:	193b      	adds	r3, r7, r4
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	061b      	lsls	r3, r3, #24
 8002e94:	0fdb      	lsrs	r3, r3, #31
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	001a      	movs	r2, r3
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	701a      	strb	r2, [r3, #0]

  return ret;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
}
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	b005      	add	sp, #20
 8002ea6:	bd90      	pop	{r4, r7, pc}

08002ea8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002eac:	f000 fab6 	bl	800341c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002eb0:	f000 f809 	bl	8002ec6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002eb4:	f7ff fba0 	bl	80025f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002eb8:	f000 f9d8 	bl	800326c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8002ebc:	f000 f850 	bl	8002f60 <MX_SPI1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    lis3dh_read_fifo();
 8002ec0:	f7ff fc10 	bl	80026e4 <lis3dh_read_fifo>
 8002ec4:	e7fc      	b.n	8002ec0 <main+0x18>

08002ec6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ec6:	b590      	push	{r4, r7, lr}
 8002ec8:	b093      	sub	sp, #76	; 0x4c
 8002eca:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ecc:	2410      	movs	r4, #16
 8002ece:	193b      	adds	r3, r7, r4
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	2338      	movs	r3, #56	; 0x38
 8002ed4:	001a      	movs	r2, r3
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	f003 f9e4 	bl	80062a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002edc:	003b      	movs	r3, r7
 8002ede:	0018      	movs	r0, r3
 8002ee0:	2310      	movs	r3, #16
 8002ee2:	001a      	movs	r2, r3
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	f003 f9dd 	bl	80062a4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002eea:	2380      	movs	r3, #128	; 0x80
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	0018      	movs	r0, r3
 8002ef0:	f000 fd50 	bl	8003994 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ef4:	193b      	adds	r3, r7, r4
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002efa:	193b      	adds	r3, r7, r4
 8002efc:	2280      	movs	r2, #128	; 0x80
 8002efe:	0052      	lsls	r2, r2, #1
 8002f00:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002f02:	193b      	adds	r3, r7, r4
 8002f04:	2200      	movs	r2, #0
 8002f06:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f08:	193b      	adds	r3, r7, r4
 8002f0a:	2240      	movs	r2, #64	; 0x40
 8002f0c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002f0e:	193b      	adds	r3, r7, r4
 8002f10:	2200      	movs	r2, #0
 8002f12:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f14:	193b      	adds	r3, r7, r4
 8002f16:	0018      	movs	r0, r3
 8002f18:	f000 fd88 	bl	8003a2c <HAL_RCC_OscConfig>
 8002f1c:	1e03      	subs	r3, r0, #0
 8002f1e:	d001      	beq.n	8002f24 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002f20:	f000 f819 	bl	8002f56 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f24:	003b      	movs	r3, r7
 8002f26:	2207      	movs	r2, #7
 8002f28:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002f2a:	003b      	movs	r3, r7
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f30:	003b      	movs	r3, r7
 8002f32:	2200      	movs	r2, #0
 8002f34:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f36:	003b      	movs	r3, r7
 8002f38:	2200      	movs	r2, #0
 8002f3a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002f3c:	003b      	movs	r3, r7
 8002f3e:	2100      	movs	r1, #0
 8002f40:	0018      	movs	r0, r3
 8002f42:	f001 f88d 	bl	8004060 <HAL_RCC_ClockConfig>
 8002f46:	1e03      	subs	r3, r0, #0
 8002f48:	d001      	beq.n	8002f4e <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002f4a:	f000 f804 	bl	8002f56 <Error_Handler>
  }
}
 8002f4e:	46c0      	nop			; (mov r8, r8)
 8002f50:	46bd      	mov	sp, r7
 8002f52:	b013      	add	sp, #76	; 0x4c
 8002f54:	bd90      	pop	{r4, r7, pc}

08002f56 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f5a:	b672      	cpsid	i
}
 8002f5c:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f5e:	e7fe      	b.n	8002f5e <Error_Handler+0x8>

08002f60 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002f64:	4b1b      	ldr	r3, [pc, #108]	; (8002fd4 <MX_SPI1_Init+0x74>)
 8002f66:	4a1c      	ldr	r2, [pc, #112]	; (8002fd8 <MX_SPI1_Init+0x78>)
 8002f68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002f6a:	4b1a      	ldr	r3, [pc, #104]	; (8002fd4 <MX_SPI1_Init+0x74>)
 8002f6c:	2282      	movs	r2, #130	; 0x82
 8002f6e:	0052      	lsls	r2, r2, #1
 8002f70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002f72:	4b18      	ldr	r3, [pc, #96]	; (8002fd4 <MX_SPI1_Init+0x74>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f78:	4b16      	ldr	r3, [pc, #88]	; (8002fd4 <MX_SPI1_Init+0x74>)
 8002f7a:	22e0      	movs	r2, #224	; 0xe0
 8002f7c:	00d2      	lsls	r2, r2, #3
 8002f7e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002f80:	4b14      	ldr	r3, [pc, #80]	; (8002fd4 <MX_SPI1_Init+0x74>)
 8002f82:	2202      	movs	r2, #2
 8002f84:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002f86:	4b13      	ldr	r3, [pc, #76]	; (8002fd4 <MX_SPI1_Init+0x74>)
 8002f88:	2201      	movs	r2, #1
 8002f8a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002f8c:	4b11      	ldr	r3, [pc, #68]	; (8002fd4 <MX_SPI1_Init+0x74>)
 8002f8e:	2280      	movs	r2, #128	; 0x80
 8002f90:	0092      	lsls	r2, r2, #2
 8002f92:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f94:	4b0f      	ldr	r3, [pc, #60]	; (8002fd4 <MX_SPI1_Init+0x74>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f9a:	4b0e      	ldr	r3, [pc, #56]	; (8002fd4 <MX_SPI1_Init+0x74>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002fa0:	4b0c      	ldr	r3, [pc, #48]	; (8002fd4 <MX_SPI1_Init+0x74>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fa6:	4b0b      	ldr	r3, [pc, #44]	; (8002fd4 <MX_SPI1_Init+0x74>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002fac:	4b09      	ldr	r3, [pc, #36]	; (8002fd4 <MX_SPI1_Init+0x74>)
 8002fae:	2207      	movs	r2, #7
 8002fb0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002fb2:	4b08      	ldr	r3, [pc, #32]	; (8002fd4 <MX_SPI1_Init+0x74>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002fb8:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <MX_SPI1_Init+0x74>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002fbe:	4b05      	ldr	r3, [pc, #20]	; (8002fd4 <MX_SPI1_Init+0x74>)
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	f001 fbaf 	bl	8004724 <HAL_SPI_Init>
 8002fc6:	1e03      	subs	r3, r0, #0
 8002fc8:	d001      	beq.n	8002fce <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002fca:	f7ff ffc4 	bl	8002f56 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002fce:	46c0      	nop			; (mov r8, r8)
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	200005f8 	.word	0x200005f8
 8002fd8:	40013000 	.word	0x40013000

08002fdc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002fdc:	b590      	push	{r4, r7, lr}
 8002fde:	b08b      	sub	sp, #44	; 0x2c
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe4:	2414      	movs	r4, #20
 8002fe6:	193b      	adds	r3, r7, r4
 8002fe8:	0018      	movs	r0, r3
 8002fea:	2314      	movs	r3, #20
 8002fec:	001a      	movs	r2, r3
 8002fee:	2100      	movs	r1, #0
 8002ff0:	f003 f958 	bl	80062a4 <memset>
  if(spiHandle->Instance==SPI1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a1b      	ldr	r2, [pc, #108]	; (8003068 <HAL_SPI_MspInit+0x8c>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d130      	bne.n	8003060 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ffe:	4b1b      	ldr	r3, [pc, #108]	; (800306c <HAL_SPI_MspInit+0x90>)
 8003000:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003002:	4b1a      	ldr	r3, [pc, #104]	; (800306c <HAL_SPI_MspInit+0x90>)
 8003004:	2180      	movs	r1, #128	; 0x80
 8003006:	0149      	lsls	r1, r1, #5
 8003008:	430a      	orrs	r2, r1
 800300a:	641a      	str	r2, [r3, #64]	; 0x40
 800300c:	4b17      	ldr	r3, [pc, #92]	; (800306c <HAL_SPI_MspInit+0x90>)
 800300e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003010:	2380      	movs	r3, #128	; 0x80
 8003012:	015b      	lsls	r3, r3, #5
 8003014:	4013      	ands	r3, r2
 8003016:	613b      	str	r3, [r7, #16]
 8003018:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800301a:	4b14      	ldr	r3, [pc, #80]	; (800306c <HAL_SPI_MspInit+0x90>)
 800301c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800301e:	4b13      	ldr	r3, [pc, #76]	; (800306c <HAL_SPI_MspInit+0x90>)
 8003020:	2101      	movs	r1, #1
 8003022:	430a      	orrs	r2, r1
 8003024:	635a      	str	r2, [r3, #52]	; 0x34
 8003026:	4b11      	ldr	r3, [pc, #68]	; (800306c <HAL_SPI_MspInit+0x90>)
 8003028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800302a:	2201      	movs	r2, #1
 800302c:	4013      	ands	r3, r2
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8003032:	0021      	movs	r1, r4
 8003034:	187b      	adds	r3, r7, r1
 8003036:	22c2      	movs	r2, #194	; 0xc2
 8003038:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800303a:	187b      	adds	r3, r7, r1
 800303c:	2202      	movs	r2, #2
 800303e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003040:	187b      	adds	r3, r7, r1
 8003042:	2200      	movs	r2, #0
 8003044:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003046:	187b      	adds	r3, r7, r1
 8003048:	2200      	movs	r2, #0
 800304a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800304c:	187b      	adds	r3, r7, r1
 800304e:	2200      	movs	r2, #0
 8003050:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003052:	187a      	adds	r2, r7, r1
 8003054:	23a0      	movs	r3, #160	; 0xa0
 8003056:	05db      	lsls	r3, r3, #23
 8003058:	0011      	movs	r1, r2
 800305a:	0018      	movs	r0, r3
 800305c:	f000 fb18 	bl	8003690 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003060:	46c0      	nop			; (mov r8, r8)
 8003062:	46bd      	mov	sp, r7
 8003064:	b00b      	add	sp, #44	; 0x2c
 8003066:	bd90      	pop	{r4, r7, pc}
 8003068:	40013000 	.word	0x40013000
 800306c:	40021000 	.word	0x40021000

08003070 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003076:	4b0f      	ldr	r3, [pc, #60]	; (80030b4 <HAL_MspInit+0x44>)
 8003078:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800307a:	4b0e      	ldr	r3, [pc, #56]	; (80030b4 <HAL_MspInit+0x44>)
 800307c:	2101      	movs	r1, #1
 800307e:	430a      	orrs	r2, r1
 8003080:	641a      	str	r2, [r3, #64]	; 0x40
 8003082:	4b0c      	ldr	r3, [pc, #48]	; (80030b4 <HAL_MspInit+0x44>)
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	2201      	movs	r2, #1
 8003088:	4013      	ands	r3, r2
 800308a:	607b      	str	r3, [r7, #4]
 800308c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800308e:	4b09      	ldr	r3, [pc, #36]	; (80030b4 <HAL_MspInit+0x44>)
 8003090:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003092:	4b08      	ldr	r3, [pc, #32]	; (80030b4 <HAL_MspInit+0x44>)
 8003094:	2180      	movs	r1, #128	; 0x80
 8003096:	0549      	lsls	r1, r1, #21
 8003098:	430a      	orrs	r2, r1
 800309a:	63da      	str	r2, [r3, #60]	; 0x3c
 800309c:	4b05      	ldr	r3, [pc, #20]	; (80030b4 <HAL_MspInit+0x44>)
 800309e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030a0:	2380      	movs	r3, #128	; 0x80
 80030a2:	055b      	lsls	r3, r3, #21
 80030a4:	4013      	ands	r3, r2
 80030a6:	603b      	str	r3, [r7, #0]
 80030a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030aa:	46c0      	nop			; (mov r8, r8)
 80030ac:	46bd      	mov	sp, r7
 80030ae:	b002      	add	sp, #8
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	46c0      	nop			; (mov r8, r8)
 80030b4:	40021000 	.word	0x40021000

080030b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030bc:	e7fe      	b.n	80030bc <NMI_Handler+0x4>

080030be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030c2:	e7fe      	b.n	80030c2 <HardFault_Handler+0x4>

080030c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80030c8:	46c0      	nop			; (mov r8, r8)
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030d2:	46c0      	nop			; (mov r8, r8)
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030dc:	f000 fa08 	bl	80034f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030e0:	46c0      	nop			; (mov r8, r8)
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	af00      	add	r7, sp, #0
  return 1;
 80030ea:	2301      	movs	r3, #1
}
 80030ec:	0018      	movs	r0, r3
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <_kill>:

int _kill(int pid, int sig)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b082      	sub	sp, #8
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
 80030fa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80030fc:	f003 f8a8 	bl	8006250 <__errno>
 8003100:	0003      	movs	r3, r0
 8003102:	2216      	movs	r2, #22
 8003104:	601a      	str	r2, [r3, #0]
  return -1;
 8003106:	2301      	movs	r3, #1
 8003108:	425b      	negs	r3, r3
}
 800310a:	0018      	movs	r0, r3
 800310c:	46bd      	mov	sp, r7
 800310e:	b002      	add	sp, #8
 8003110:	bd80      	pop	{r7, pc}

08003112 <_exit>:

void _exit (int status)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b082      	sub	sp, #8
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800311a:	2301      	movs	r3, #1
 800311c:	425a      	negs	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	0011      	movs	r1, r2
 8003122:	0018      	movs	r0, r3
 8003124:	f7ff ffe5 	bl	80030f2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003128:	e7fe      	b.n	8003128 <_exit+0x16>

0800312a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b086      	sub	sp, #24
 800312e:	af00      	add	r7, sp, #0
 8003130:	60f8      	str	r0, [r7, #12]
 8003132:	60b9      	str	r1, [r7, #8]
 8003134:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003136:	2300      	movs	r3, #0
 8003138:	617b      	str	r3, [r7, #20]
 800313a:	e00a      	b.n	8003152 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800313c:	e000      	b.n	8003140 <_read+0x16>
 800313e:	bf00      	nop
 8003140:	0001      	movs	r1, r0
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	1c5a      	adds	r2, r3, #1
 8003146:	60ba      	str	r2, [r7, #8]
 8003148:	b2ca      	uxtb	r2, r1
 800314a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	3301      	adds	r3, #1
 8003150:	617b      	str	r3, [r7, #20]
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	429a      	cmp	r2, r3
 8003158:	dbf0      	blt.n	800313c <_read+0x12>
  }

  return len;
 800315a:	687b      	ldr	r3, [r7, #4]
}
 800315c:	0018      	movs	r0, r3
 800315e:	46bd      	mov	sp, r7
 8003160:	b006      	add	sp, #24
 8003162:	bd80      	pop	{r7, pc}

08003164 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003170:	2300      	movs	r3, #0
 8003172:	617b      	str	r3, [r7, #20]
 8003174:	e009      	b.n	800318a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	1c5a      	adds	r2, r3, #1
 800317a:	60ba      	str	r2, [r7, #8]
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	0018      	movs	r0, r3
 8003180:	e000      	b.n	8003184 <_write+0x20>
 8003182:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	3301      	adds	r3, #1
 8003188:	617b      	str	r3, [r7, #20]
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	429a      	cmp	r2, r3
 8003190:	dbf1      	blt.n	8003176 <_write+0x12>
  }
  return len;
 8003192:	687b      	ldr	r3, [r7, #4]
}
 8003194:	0018      	movs	r0, r3
 8003196:	46bd      	mov	sp, r7
 8003198:	b006      	add	sp, #24
 800319a:	bd80      	pop	{r7, pc}

0800319c <_close>:

int _close(int file)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80031a4:	2301      	movs	r3, #1
 80031a6:	425b      	negs	r3, r3
}
 80031a8:	0018      	movs	r0, r3
 80031aa:	46bd      	mov	sp, r7
 80031ac:	b002      	add	sp, #8
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	2280      	movs	r2, #128	; 0x80
 80031be:	0192      	lsls	r2, r2, #6
 80031c0:	605a      	str	r2, [r3, #4]
  return 0;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	0018      	movs	r0, r3
 80031c6:	46bd      	mov	sp, r7
 80031c8:	b002      	add	sp, #8
 80031ca:	bd80      	pop	{r7, pc}

080031cc <_isatty>:

int _isatty(int file)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80031d4:	2301      	movs	r3, #1
}
 80031d6:	0018      	movs	r0, r3
 80031d8:	46bd      	mov	sp, r7
 80031da:	b002      	add	sp, #8
 80031dc:	bd80      	pop	{r7, pc}

080031de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b084      	sub	sp, #16
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	60f8      	str	r0, [r7, #12]
 80031e6:	60b9      	str	r1, [r7, #8]
 80031e8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	0018      	movs	r0, r3
 80031ee:	46bd      	mov	sp, r7
 80031f0:	b004      	add	sp, #16
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031fc:	4a14      	ldr	r2, [pc, #80]	; (8003250 <_sbrk+0x5c>)
 80031fe:	4b15      	ldr	r3, [pc, #84]	; (8003254 <_sbrk+0x60>)
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003208:	4b13      	ldr	r3, [pc, #76]	; (8003258 <_sbrk+0x64>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d102      	bne.n	8003216 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003210:	4b11      	ldr	r3, [pc, #68]	; (8003258 <_sbrk+0x64>)
 8003212:	4a12      	ldr	r2, [pc, #72]	; (800325c <_sbrk+0x68>)
 8003214:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003216:	4b10      	ldr	r3, [pc, #64]	; (8003258 <_sbrk+0x64>)
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	18d3      	adds	r3, r2, r3
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	429a      	cmp	r2, r3
 8003222:	d207      	bcs.n	8003234 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003224:	f003 f814 	bl	8006250 <__errno>
 8003228:	0003      	movs	r3, r0
 800322a:	220c      	movs	r2, #12
 800322c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800322e:	2301      	movs	r3, #1
 8003230:	425b      	negs	r3, r3
 8003232:	e009      	b.n	8003248 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003234:	4b08      	ldr	r3, [pc, #32]	; (8003258 <_sbrk+0x64>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800323a:	4b07      	ldr	r3, [pc, #28]	; (8003258 <_sbrk+0x64>)
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	18d2      	adds	r2, r2, r3
 8003242:	4b05      	ldr	r3, [pc, #20]	; (8003258 <_sbrk+0x64>)
 8003244:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003246:	68fb      	ldr	r3, [r7, #12]
}
 8003248:	0018      	movs	r0, r3
 800324a:	46bd      	mov	sp, r7
 800324c:	b006      	add	sp, #24
 800324e:	bd80      	pop	{r7, pc}
 8003250:	20009000 	.word	0x20009000
 8003254:	00000400 	.word	0x00000400
 8003258:	2000065c 	.word	0x2000065c
 800325c:	20000708 	.word	0x20000708

08003260 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003264:	46c0      	nop			; (mov r8, r8)
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
	...

0800326c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003270:	4b23      	ldr	r3, [pc, #140]	; (8003300 <MX_USART2_UART_Init+0x94>)
 8003272:	4a24      	ldr	r2, [pc, #144]	; (8003304 <MX_USART2_UART_Init+0x98>)
 8003274:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003276:	4b22      	ldr	r3, [pc, #136]	; (8003300 <MX_USART2_UART_Init+0x94>)
 8003278:	22e1      	movs	r2, #225	; 0xe1
 800327a:	0252      	lsls	r2, r2, #9
 800327c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800327e:	4b20      	ldr	r3, [pc, #128]	; (8003300 <MX_USART2_UART_Init+0x94>)
 8003280:	2200      	movs	r2, #0
 8003282:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003284:	4b1e      	ldr	r3, [pc, #120]	; (8003300 <MX_USART2_UART_Init+0x94>)
 8003286:	2200      	movs	r2, #0
 8003288:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800328a:	4b1d      	ldr	r3, [pc, #116]	; (8003300 <MX_USART2_UART_Init+0x94>)
 800328c:	2200      	movs	r2, #0
 800328e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003290:	4b1b      	ldr	r3, [pc, #108]	; (8003300 <MX_USART2_UART_Init+0x94>)
 8003292:	220c      	movs	r2, #12
 8003294:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003296:	4b1a      	ldr	r3, [pc, #104]	; (8003300 <MX_USART2_UART_Init+0x94>)
 8003298:	2200      	movs	r2, #0
 800329a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800329c:	4b18      	ldr	r3, [pc, #96]	; (8003300 <MX_USART2_UART_Init+0x94>)
 800329e:	2200      	movs	r2, #0
 80032a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80032a2:	4b17      	ldr	r3, [pc, #92]	; (8003300 <MX_USART2_UART_Init+0x94>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80032a8:	4b15      	ldr	r3, [pc, #84]	; (8003300 <MX_USART2_UART_Init+0x94>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80032ae:	4b14      	ldr	r3, [pc, #80]	; (8003300 <MX_USART2_UART_Init+0x94>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80032b4:	4b12      	ldr	r3, [pc, #72]	; (8003300 <MX_USART2_UART_Init+0x94>)
 80032b6:	0018      	movs	r0, r3
 80032b8:	f002 f936 	bl	8005528 <HAL_UART_Init>
 80032bc:	1e03      	subs	r3, r0, #0
 80032be:	d001      	beq.n	80032c4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80032c0:	f7ff fe49 	bl	8002f56 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032c4:	4b0e      	ldr	r3, [pc, #56]	; (8003300 <MX_USART2_UART_Init+0x94>)
 80032c6:	2100      	movs	r1, #0
 80032c8:	0018      	movs	r0, r3
 80032ca:	f002 fee1 	bl	8006090 <HAL_UARTEx_SetTxFifoThreshold>
 80032ce:	1e03      	subs	r3, r0, #0
 80032d0:	d001      	beq.n	80032d6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80032d2:	f7ff fe40 	bl	8002f56 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032d6:	4b0a      	ldr	r3, [pc, #40]	; (8003300 <MX_USART2_UART_Init+0x94>)
 80032d8:	2100      	movs	r1, #0
 80032da:	0018      	movs	r0, r3
 80032dc:	f002 ff18 	bl	8006110 <HAL_UARTEx_SetRxFifoThreshold>
 80032e0:	1e03      	subs	r3, r0, #0
 80032e2:	d001      	beq.n	80032e8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80032e4:	f7ff fe37 	bl	8002f56 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80032e8:	4b05      	ldr	r3, [pc, #20]	; (8003300 <MX_USART2_UART_Init+0x94>)
 80032ea:	0018      	movs	r0, r3
 80032ec:	f002 fe96 	bl	800601c <HAL_UARTEx_DisableFifoMode>
 80032f0:	1e03      	subs	r3, r0, #0
 80032f2:	d001      	beq.n	80032f8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80032f4:	f7ff fe2f 	bl	8002f56 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80032f8:	46c0      	nop			; (mov r8, r8)
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	46c0      	nop			; (mov r8, r8)
 8003300:	20000660 	.word	0x20000660
 8003304:	40004400 	.word	0x40004400

08003308 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003308:	b590      	push	{r4, r7, lr}
 800330a:	b097      	sub	sp, #92	; 0x5c
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003310:	2344      	movs	r3, #68	; 0x44
 8003312:	18fb      	adds	r3, r7, r3
 8003314:	0018      	movs	r0, r3
 8003316:	2314      	movs	r3, #20
 8003318:	001a      	movs	r2, r3
 800331a:	2100      	movs	r1, #0
 800331c:	f002 ffc2 	bl	80062a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003320:	2410      	movs	r4, #16
 8003322:	193b      	adds	r3, r7, r4
 8003324:	0018      	movs	r0, r3
 8003326:	2334      	movs	r3, #52	; 0x34
 8003328:	001a      	movs	r2, r3
 800332a:	2100      	movs	r1, #0
 800332c:	f002 ffba 	bl	80062a4 <memset>
  if(uartHandle->Instance==USART2)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a22      	ldr	r2, [pc, #136]	; (80033c0 <HAL_UART_MspInit+0xb8>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d13e      	bne.n	80033b8 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800333a:	193b      	adds	r3, r7, r4
 800333c:	2202      	movs	r2, #2
 800333e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003340:	193b      	adds	r3, r7, r4
 8003342:	2200      	movs	r2, #0
 8003344:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003346:	193b      	adds	r3, r7, r4
 8003348:	0018      	movs	r0, r3
 800334a:	f001 f833 	bl	80043b4 <HAL_RCCEx_PeriphCLKConfig>
 800334e:	1e03      	subs	r3, r0, #0
 8003350:	d001      	beq.n	8003356 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003352:	f7ff fe00 	bl	8002f56 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003356:	4b1b      	ldr	r3, [pc, #108]	; (80033c4 <HAL_UART_MspInit+0xbc>)
 8003358:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800335a:	4b1a      	ldr	r3, [pc, #104]	; (80033c4 <HAL_UART_MspInit+0xbc>)
 800335c:	2180      	movs	r1, #128	; 0x80
 800335e:	0289      	lsls	r1, r1, #10
 8003360:	430a      	orrs	r2, r1
 8003362:	63da      	str	r2, [r3, #60]	; 0x3c
 8003364:	4b17      	ldr	r3, [pc, #92]	; (80033c4 <HAL_UART_MspInit+0xbc>)
 8003366:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003368:	2380      	movs	r3, #128	; 0x80
 800336a:	029b      	lsls	r3, r3, #10
 800336c:	4013      	ands	r3, r2
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003372:	4b14      	ldr	r3, [pc, #80]	; (80033c4 <HAL_UART_MspInit+0xbc>)
 8003374:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003376:	4b13      	ldr	r3, [pc, #76]	; (80033c4 <HAL_UART_MspInit+0xbc>)
 8003378:	2101      	movs	r1, #1
 800337a:	430a      	orrs	r2, r1
 800337c:	635a      	str	r2, [r3, #52]	; 0x34
 800337e:	4b11      	ldr	r3, [pc, #68]	; (80033c4 <HAL_UART_MspInit+0xbc>)
 8003380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003382:	2201      	movs	r2, #1
 8003384:	4013      	ands	r3, r2
 8003386:	60bb      	str	r3, [r7, #8]
 8003388:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800338a:	2144      	movs	r1, #68	; 0x44
 800338c:	187b      	adds	r3, r7, r1
 800338e:	220c      	movs	r2, #12
 8003390:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003392:	187b      	adds	r3, r7, r1
 8003394:	2202      	movs	r2, #2
 8003396:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003398:	187b      	adds	r3, r7, r1
 800339a:	2201      	movs	r2, #1
 800339c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800339e:	187b      	adds	r3, r7, r1
 80033a0:	2200      	movs	r2, #0
 80033a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80033a4:	187b      	adds	r3, r7, r1
 80033a6:	2201      	movs	r2, #1
 80033a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033aa:	187a      	adds	r2, r7, r1
 80033ac:	23a0      	movs	r3, #160	; 0xa0
 80033ae:	05db      	lsls	r3, r3, #23
 80033b0:	0011      	movs	r1, r2
 80033b2:	0018      	movs	r0, r3
 80033b4:	f000 f96c 	bl	8003690 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80033b8:	46c0      	nop			; (mov r8, r8)
 80033ba:	46bd      	mov	sp, r7
 80033bc:	b017      	add	sp, #92	; 0x5c
 80033be:	bd90      	pop	{r4, r7, pc}
 80033c0:	40004400 	.word	0x40004400
 80033c4:	40021000 	.word	0x40021000

080033c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80033c8:	480d      	ldr	r0, [pc, #52]	; (8003400 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80033ca:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80033cc:	f7ff ff48 	bl	8003260 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033d0:	480c      	ldr	r0, [pc, #48]	; (8003404 <LoopForever+0x6>)
  ldr r1, =_edata
 80033d2:	490d      	ldr	r1, [pc, #52]	; (8003408 <LoopForever+0xa>)
  ldr r2, =_sidata
 80033d4:	4a0d      	ldr	r2, [pc, #52]	; (800340c <LoopForever+0xe>)
  movs r3, #0
 80033d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033d8:	e002      	b.n	80033e0 <LoopCopyDataInit>

080033da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033de:	3304      	adds	r3, #4

080033e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033e4:	d3f9      	bcc.n	80033da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033e6:	4a0a      	ldr	r2, [pc, #40]	; (8003410 <LoopForever+0x12>)
  ldr r4, =_ebss
 80033e8:	4c0a      	ldr	r4, [pc, #40]	; (8003414 <LoopForever+0x16>)
  movs r3, #0
 80033ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033ec:	e001      	b.n	80033f2 <LoopFillZerobss>

080033ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033f0:	3204      	adds	r2, #4

080033f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033f4:	d3fb      	bcc.n	80033ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80033f6:	f002 ff31 	bl	800625c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80033fa:	f7ff fd55 	bl	8002ea8 <main>

080033fe <LoopForever>:

LoopForever:
  b LoopForever
 80033fe:	e7fe      	b.n	80033fe <LoopForever>
  ldr   r0, =_estack
 8003400:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8003404:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003408:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800340c:	080097bc 	.word	0x080097bc
  ldr r2, =_sbss
 8003410:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8003414:	20000708 	.word	0x20000708

08003418 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003418:	e7fe      	b.n	8003418 <ADC1_COMP_IRQHandler>
	...

0800341c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003422:	1dfb      	adds	r3, r7, #7
 8003424:	2200      	movs	r2, #0
 8003426:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003428:	4b0b      	ldr	r3, [pc, #44]	; (8003458 <HAL_Init+0x3c>)
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	4b0a      	ldr	r3, [pc, #40]	; (8003458 <HAL_Init+0x3c>)
 800342e:	2180      	movs	r1, #128	; 0x80
 8003430:	0049      	lsls	r1, r1, #1
 8003432:	430a      	orrs	r2, r1
 8003434:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003436:	2000      	movs	r0, #0
 8003438:	f000 f810 	bl	800345c <HAL_InitTick>
 800343c:	1e03      	subs	r3, r0, #0
 800343e:	d003      	beq.n	8003448 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003440:	1dfb      	adds	r3, r7, #7
 8003442:	2201      	movs	r2, #1
 8003444:	701a      	strb	r2, [r3, #0]
 8003446:	e001      	b.n	800344c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003448:	f7ff fe12 	bl	8003070 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800344c:	1dfb      	adds	r3, r7, #7
 800344e:	781b      	ldrb	r3, [r3, #0]
}
 8003450:	0018      	movs	r0, r3
 8003452:	46bd      	mov	sp, r7
 8003454:	b002      	add	sp, #8
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40022000 	.word	0x40022000

0800345c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800345c:	b590      	push	{r4, r7, lr}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003464:	230f      	movs	r3, #15
 8003466:	18fb      	adds	r3, r7, r3
 8003468:	2200      	movs	r2, #0
 800346a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800346c:	4b1d      	ldr	r3, [pc, #116]	; (80034e4 <HAL_InitTick+0x88>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d02b      	beq.n	80034cc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003474:	4b1c      	ldr	r3, [pc, #112]	; (80034e8 <HAL_InitTick+0x8c>)
 8003476:	681c      	ldr	r4, [r3, #0]
 8003478:	4b1a      	ldr	r3, [pc, #104]	; (80034e4 <HAL_InitTick+0x88>)
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	0019      	movs	r1, r3
 800347e:	23fa      	movs	r3, #250	; 0xfa
 8003480:	0098      	lsls	r0, r3, #2
 8003482:	f7fc fe5b 	bl	800013c <__udivsi3>
 8003486:	0003      	movs	r3, r0
 8003488:	0019      	movs	r1, r3
 800348a:	0020      	movs	r0, r4
 800348c:	f7fc fe56 	bl	800013c <__udivsi3>
 8003490:	0003      	movs	r3, r0
 8003492:	0018      	movs	r0, r3
 8003494:	f000 f8ef 	bl	8003676 <HAL_SYSTICK_Config>
 8003498:	1e03      	subs	r3, r0, #0
 800349a:	d112      	bne.n	80034c2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b03      	cmp	r3, #3
 80034a0:	d80a      	bhi.n	80034b8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	2301      	movs	r3, #1
 80034a6:	425b      	negs	r3, r3
 80034a8:	2200      	movs	r2, #0
 80034aa:	0018      	movs	r0, r3
 80034ac:	f000 f8ce 	bl	800364c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80034b0:	4b0e      	ldr	r3, [pc, #56]	; (80034ec <HAL_InitTick+0x90>)
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	601a      	str	r2, [r3, #0]
 80034b6:	e00d      	b.n	80034d4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80034b8:	230f      	movs	r3, #15
 80034ba:	18fb      	adds	r3, r7, r3
 80034bc:	2201      	movs	r2, #1
 80034be:	701a      	strb	r2, [r3, #0]
 80034c0:	e008      	b.n	80034d4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80034c2:	230f      	movs	r3, #15
 80034c4:	18fb      	adds	r3, r7, r3
 80034c6:	2201      	movs	r2, #1
 80034c8:	701a      	strb	r2, [r3, #0]
 80034ca:	e003      	b.n	80034d4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80034cc:	230f      	movs	r3, #15
 80034ce:	18fb      	adds	r3, r7, r3
 80034d0:	2201      	movs	r2, #1
 80034d2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80034d4:	230f      	movs	r3, #15
 80034d6:	18fb      	adds	r3, r7, r3
 80034d8:	781b      	ldrb	r3, [r3, #0]
}
 80034da:	0018      	movs	r0, r3
 80034dc:	46bd      	mov	sp, r7
 80034de:	b005      	add	sp, #20
 80034e0:	bd90      	pop	{r4, r7, pc}
 80034e2:	46c0      	nop			; (mov r8, r8)
 80034e4:	20000008 	.word	0x20000008
 80034e8:	20000000 	.word	0x20000000
 80034ec:	20000004 	.word	0x20000004

080034f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80034f4:	4b05      	ldr	r3, [pc, #20]	; (800350c <HAL_IncTick+0x1c>)
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	001a      	movs	r2, r3
 80034fa:	4b05      	ldr	r3, [pc, #20]	; (8003510 <HAL_IncTick+0x20>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	18d2      	adds	r2, r2, r3
 8003500:	4b03      	ldr	r3, [pc, #12]	; (8003510 <HAL_IncTick+0x20>)
 8003502:	601a      	str	r2, [r3, #0]
}
 8003504:	46c0      	nop			; (mov r8, r8)
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	46c0      	nop			; (mov r8, r8)
 800350c:	20000008 	.word	0x20000008
 8003510:	200006f4 	.word	0x200006f4

08003514 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
  return uwTick;
 8003518:	4b02      	ldr	r3, [pc, #8]	; (8003524 <HAL_GetTick+0x10>)
 800351a:	681b      	ldr	r3, [r3, #0]
}
 800351c:	0018      	movs	r0, r3
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	46c0      	nop			; (mov r8, r8)
 8003524:	200006f4 	.word	0x200006f4

08003528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003528:	b590      	push	{r4, r7, lr}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	0002      	movs	r2, r0
 8003530:	6039      	str	r1, [r7, #0]
 8003532:	1dfb      	adds	r3, r7, #7
 8003534:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003536:	1dfb      	adds	r3, r7, #7
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	2b7f      	cmp	r3, #127	; 0x7f
 800353c:	d828      	bhi.n	8003590 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800353e:	4a2f      	ldr	r2, [pc, #188]	; (80035fc <__NVIC_SetPriority+0xd4>)
 8003540:	1dfb      	adds	r3, r7, #7
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	b25b      	sxtb	r3, r3
 8003546:	089b      	lsrs	r3, r3, #2
 8003548:	33c0      	adds	r3, #192	; 0xc0
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	589b      	ldr	r3, [r3, r2]
 800354e:	1dfa      	adds	r2, r7, #7
 8003550:	7812      	ldrb	r2, [r2, #0]
 8003552:	0011      	movs	r1, r2
 8003554:	2203      	movs	r2, #3
 8003556:	400a      	ands	r2, r1
 8003558:	00d2      	lsls	r2, r2, #3
 800355a:	21ff      	movs	r1, #255	; 0xff
 800355c:	4091      	lsls	r1, r2
 800355e:	000a      	movs	r2, r1
 8003560:	43d2      	mvns	r2, r2
 8003562:	401a      	ands	r2, r3
 8003564:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	019b      	lsls	r3, r3, #6
 800356a:	22ff      	movs	r2, #255	; 0xff
 800356c:	401a      	ands	r2, r3
 800356e:	1dfb      	adds	r3, r7, #7
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	0018      	movs	r0, r3
 8003574:	2303      	movs	r3, #3
 8003576:	4003      	ands	r3, r0
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800357c:	481f      	ldr	r0, [pc, #124]	; (80035fc <__NVIC_SetPriority+0xd4>)
 800357e:	1dfb      	adds	r3, r7, #7
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	b25b      	sxtb	r3, r3
 8003584:	089b      	lsrs	r3, r3, #2
 8003586:	430a      	orrs	r2, r1
 8003588:	33c0      	adds	r3, #192	; 0xc0
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800358e:	e031      	b.n	80035f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003590:	4a1b      	ldr	r2, [pc, #108]	; (8003600 <__NVIC_SetPriority+0xd8>)
 8003592:	1dfb      	adds	r3, r7, #7
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	0019      	movs	r1, r3
 8003598:	230f      	movs	r3, #15
 800359a:	400b      	ands	r3, r1
 800359c:	3b08      	subs	r3, #8
 800359e:	089b      	lsrs	r3, r3, #2
 80035a0:	3306      	adds	r3, #6
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	18d3      	adds	r3, r2, r3
 80035a6:	3304      	adds	r3, #4
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	1dfa      	adds	r2, r7, #7
 80035ac:	7812      	ldrb	r2, [r2, #0]
 80035ae:	0011      	movs	r1, r2
 80035b0:	2203      	movs	r2, #3
 80035b2:	400a      	ands	r2, r1
 80035b4:	00d2      	lsls	r2, r2, #3
 80035b6:	21ff      	movs	r1, #255	; 0xff
 80035b8:	4091      	lsls	r1, r2
 80035ba:	000a      	movs	r2, r1
 80035bc:	43d2      	mvns	r2, r2
 80035be:	401a      	ands	r2, r3
 80035c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	019b      	lsls	r3, r3, #6
 80035c6:	22ff      	movs	r2, #255	; 0xff
 80035c8:	401a      	ands	r2, r3
 80035ca:	1dfb      	adds	r3, r7, #7
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	0018      	movs	r0, r3
 80035d0:	2303      	movs	r3, #3
 80035d2:	4003      	ands	r3, r0
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80035d8:	4809      	ldr	r0, [pc, #36]	; (8003600 <__NVIC_SetPriority+0xd8>)
 80035da:	1dfb      	adds	r3, r7, #7
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	001c      	movs	r4, r3
 80035e0:	230f      	movs	r3, #15
 80035e2:	4023      	ands	r3, r4
 80035e4:	3b08      	subs	r3, #8
 80035e6:	089b      	lsrs	r3, r3, #2
 80035e8:	430a      	orrs	r2, r1
 80035ea:	3306      	adds	r3, #6
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	18c3      	adds	r3, r0, r3
 80035f0:	3304      	adds	r3, #4
 80035f2:	601a      	str	r2, [r3, #0]
}
 80035f4:	46c0      	nop			; (mov r8, r8)
 80035f6:	46bd      	mov	sp, r7
 80035f8:	b003      	add	sp, #12
 80035fa:	bd90      	pop	{r4, r7, pc}
 80035fc:	e000e100 	.word	0xe000e100
 8003600:	e000ed00 	.word	0xe000ed00

08003604 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	1e5a      	subs	r2, r3, #1
 8003610:	2380      	movs	r3, #128	; 0x80
 8003612:	045b      	lsls	r3, r3, #17
 8003614:	429a      	cmp	r2, r3
 8003616:	d301      	bcc.n	800361c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003618:	2301      	movs	r3, #1
 800361a:	e010      	b.n	800363e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800361c:	4b0a      	ldr	r3, [pc, #40]	; (8003648 <SysTick_Config+0x44>)
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	3a01      	subs	r2, #1
 8003622:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003624:	2301      	movs	r3, #1
 8003626:	425b      	negs	r3, r3
 8003628:	2103      	movs	r1, #3
 800362a:	0018      	movs	r0, r3
 800362c:	f7ff ff7c 	bl	8003528 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003630:	4b05      	ldr	r3, [pc, #20]	; (8003648 <SysTick_Config+0x44>)
 8003632:	2200      	movs	r2, #0
 8003634:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003636:	4b04      	ldr	r3, [pc, #16]	; (8003648 <SysTick_Config+0x44>)
 8003638:	2207      	movs	r2, #7
 800363a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800363c:	2300      	movs	r3, #0
}
 800363e:	0018      	movs	r0, r3
 8003640:	46bd      	mov	sp, r7
 8003642:	b002      	add	sp, #8
 8003644:	bd80      	pop	{r7, pc}
 8003646:	46c0      	nop			; (mov r8, r8)
 8003648:	e000e010 	.word	0xe000e010

0800364c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	60b9      	str	r1, [r7, #8]
 8003654:	607a      	str	r2, [r7, #4]
 8003656:	210f      	movs	r1, #15
 8003658:	187b      	adds	r3, r7, r1
 800365a:	1c02      	adds	r2, r0, #0
 800365c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	187b      	adds	r3, r7, r1
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	b25b      	sxtb	r3, r3
 8003666:	0011      	movs	r1, r2
 8003668:	0018      	movs	r0, r3
 800366a:	f7ff ff5d 	bl	8003528 <__NVIC_SetPriority>
}
 800366e:	46c0      	nop			; (mov r8, r8)
 8003670:	46bd      	mov	sp, r7
 8003672:	b004      	add	sp, #16
 8003674:	bd80      	pop	{r7, pc}

08003676 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b082      	sub	sp, #8
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	0018      	movs	r0, r3
 8003682:	f7ff ffbf 	bl	8003604 <SysTick_Config>
 8003686:	0003      	movs	r3, r0
}
 8003688:	0018      	movs	r0, r3
 800368a:	46bd      	mov	sp, r7
 800368c:	b002      	add	sp, #8
 800368e:	bd80      	pop	{r7, pc}

08003690 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800369a:	2300      	movs	r3, #0
 800369c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800369e:	e147      	b.n	8003930 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2101      	movs	r1, #1
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	4091      	lsls	r1, r2
 80036aa:	000a      	movs	r2, r1
 80036ac:	4013      	ands	r3, r2
 80036ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d100      	bne.n	80036b8 <HAL_GPIO_Init+0x28>
 80036b6:	e138      	b.n	800392a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	2203      	movs	r2, #3
 80036be:	4013      	ands	r3, r2
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d005      	beq.n	80036d0 <HAL_GPIO_Init+0x40>
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	2203      	movs	r2, #3
 80036ca:	4013      	ands	r3, r2
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d130      	bne.n	8003732 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	2203      	movs	r2, #3
 80036dc:	409a      	lsls	r2, r3
 80036de:	0013      	movs	r3, r2
 80036e0:	43da      	mvns	r2, r3
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	4013      	ands	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	68da      	ldr	r2, [r3, #12]
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	409a      	lsls	r2, r3
 80036f2:	0013      	movs	r3, r2
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003706:	2201      	movs	r2, #1
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	409a      	lsls	r2, r3
 800370c:	0013      	movs	r3, r2
 800370e:	43da      	mvns	r2, r3
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	4013      	ands	r3, r2
 8003714:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	091b      	lsrs	r3, r3, #4
 800371c:	2201      	movs	r2, #1
 800371e:	401a      	ands	r2, r3
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	409a      	lsls	r2, r3
 8003724:	0013      	movs	r3, r2
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	4313      	orrs	r3, r2
 800372a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2203      	movs	r2, #3
 8003738:	4013      	ands	r3, r2
 800373a:	2b03      	cmp	r3, #3
 800373c:	d017      	beq.n	800376e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	2203      	movs	r2, #3
 800374a:	409a      	lsls	r2, r3
 800374c:	0013      	movs	r3, r2
 800374e:	43da      	mvns	r2, r3
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	4013      	ands	r3, r2
 8003754:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	689a      	ldr	r2, [r3, #8]
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	409a      	lsls	r2, r3
 8003760:	0013      	movs	r3, r2
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	4313      	orrs	r3, r2
 8003766:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2203      	movs	r2, #3
 8003774:	4013      	ands	r3, r2
 8003776:	2b02      	cmp	r3, #2
 8003778:	d123      	bne.n	80037c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	08da      	lsrs	r2, r3, #3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	3208      	adds	r2, #8
 8003782:	0092      	lsls	r2, r2, #2
 8003784:	58d3      	ldr	r3, [r2, r3]
 8003786:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	2207      	movs	r2, #7
 800378c:	4013      	ands	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	220f      	movs	r2, #15
 8003792:	409a      	lsls	r2, r3
 8003794:	0013      	movs	r3, r2
 8003796:	43da      	mvns	r2, r3
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	4013      	ands	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	691a      	ldr	r2, [r3, #16]
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	2107      	movs	r1, #7
 80037a6:	400b      	ands	r3, r1
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	409a      	lsls	r2, r3
 80037ac:	0013      	movs	r3, r2
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	08da      	lsrs	r2, r3, #3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3208      	adds	r2, #8
 80037bc:	0092      	lsls	r2, r2, #2
 80037be:	6939      	ldr	r1, [r7, #16]
 80037c0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	2203      	movs	r2, #3
 80037ce:	409a      	lsls	r2, r3
 80037d0:	0013      	movs	r3, r2
 80037d2:	43da      	mvns	r2, r3
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	4013      	ands	r3, r2
 80037d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	2203      	movs	r2, #3
 80037e0:	401a      	ands	r2, r3
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	409a      	lsls	r2, r3
 80037e8:	0013      	movs	r3, r2
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	23c0      	movs	r3, #192	; 0xc0
 80037fc:	029b      	lsls	r3, r3, #10
 80037fe:	4013      	ands	r3, r2
 8003800:	d100      	bne.n	8003804 <HAL_GPIO_Init+0x174>
 8003802:	e092      	b.n	800392a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003804:	4a50      	ldr	r2, [pc, #320]	; (8003948 <HAL_GPIO_Init+0x2b8>)
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	089b      	lsrs	r3, r3, #2
 800380a:	3318      	adds	r3, #24
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	589b      	ldr	r3, [r3, r2]
 8003810:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	2203      	movs	r2, #3
 8003816:	4013      	ands	r3, r2
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	220f      	movs	r2, #15
 800381c:	409a      	lsls	r2, r3
 800381e:	0013      	movs	r3, r2
 8003820:	43da      	mvns	r2, r3
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	4013      	ands	r3, r2
 8003826:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	23a0      	movs	r3, #160	; 0xa0
 800382c:	05db      	lsls	r3, r3, #23
 800382e:	429a      	cmp	r2, r3
 8003830:	d013      	beq.n	800385a <HAL_GPIO_Init+0x1ca>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a45      	ldr	r2, [pc, #276]	; (800394c <HAL_GPIO_Init+0x2bc>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d00d      	beq.n	8003856 <HAL_GPIO_Init+0x1c6>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a44      	ldr	r2, [pc, #272]	; (8003950 <HAL_GPIO_Init+0x2c0>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d007      	beq.n	8003852 <HAL_GPIO_Init+0x1c2>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a43      	ldr	r2, [pc, #268]	; (8003954 <HAL_GPIO_Init+0x2c4>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d101      	bne.n	800384e <HAL_GPIO_Init+0x1be>
 800384a:	2303      	movs	r3, #3
 800384c:	e006      	b.n	800385c <HAL_GPIO_Init+0x1cc>
 800384e:	2305      	movs	r3, #5
 8003850:	e004      	b.n	800385c <HAL_GPIO_Init+0x1cc>
 8003852:	2302      	movs	r3, #2
 8003854:	e002      	b.n	800385c <HAL_GPIO_Init+0x1cc>
 8003856:	2301      	movs	r3, #1
 8003858:	e000      	b.n	800385c <HAL_GPIO_Init+0x1cc>
 800385a:	2300      	movs	r3, #0
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	2103      	movs	r1, #3
 8003860:	400a      	ands	r2, r1
 8003862:	00d2      	lsls	r2, r2, #3
 8003864:	4093      	lsls	r3, r2
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	4313      	orrs	r3, r2
 800386a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800386c:	4936      	ldr	r1, [pc, #216]	; (8003948 <HAL_GPIO_Init+0x2b8>)
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	089b      	lsrs	r3, r3, #2
 8003872:	3318      	adds	r3, #24
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800387a:	4b33      	ldr	r3, [pc, #204]	; (8003948 <HAL_GPIO_Init+0x2b8>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	43da      	mvns	r2, r3
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	4013      	ands	r3, r2
 8003888:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	2380      	movs	r3, #128	; 0x80
 8003890:	035b      	lsls	r3, r3, #13
 8003892:	4013      	ands	r3, r2
 8003894:	d003      	beq.n	800389e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4313      	orrs	r3, r2
 800389c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800389e:	4b2a      	ldr	r3, [pc, #168]	; (8003948 <HAL_GPIO_Init+0x2b8>)
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80038a4:	4b28      	ldr	r3, [pc, #160]	; (8003948 <HAL_GPIO_Init+0x2b8>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	43da      	mvns	r2, r3
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	4013      	ands	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	2380      	movs	r3, #128	; 0x80
 80038ba:	039b      	lsls	r3, r3, #14
 80038bc:	4013      	ands	r3, r2
 80038be:	d003      	beq.n	80038c8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80038c8:	4b1f      	ldr	r3, [pc, #124]	; (8003948 <HAL_GPIO_Init+0x2b8>)
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80038ce:	4a1e      	ldr	r2, [pc, #120]	; (8003948 <HAL_GPIO_Init+0x2b8>)
 80038d0:	2384      	movs	r3, #132	; 0x84
 80038d2:	58d3      	ldr	r3, [r2, r3]
 80038d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	43da      	mvns	r2, r3
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	4013      	ands	r3, r2
 80038de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685a      	ldr	r2, [r3, #4]
 80038e4:	2380      	movs	r3, #128	; 0x80
 80038e6:	029b      	lsls	r3, r3, #10
 80038e8:	4013      	ands	r3, r2
 80038ea:	d003      	beq.n	80038f4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80038f4:	4914      	ldr	r1, [pc, #80]	; (8003948 <HAL_GPIO_Init+0x2b8>)
 80038f6:	2284      	movs	r2, #132	; 0x84
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80038fc:	4a12      	ldr	r2, [pc, #72]	; (8003948 <HAL_GPIO_Init+0x2b8>)
 80038fe:	2380      	movs	r3, #128	; 0x80
 8003900:	58d3      	ldr	r3, [r2, r3]
 8003902:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	43da      	mvns	r2, r3
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	4013      	ands	r3, r2
 800390c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	2380      	movs	r3, #128	; 0x80
 8003914:	025b      	lsls	r3, r3, #9
 8003916:	4013      	ands	r3, r2
 8003918:	d003      	beq.n	8003922 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	4313      	orrs	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003922:	4909      	ldr	r1, [pc, #36]	; (8003948 <HAL_GPIO_Init+0x2b8>)
 8003924:	2280      	movs	r2, #128	; 0x80
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	3301      	adds	r3, #1
 800392e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	40da      	lsrs	r2, r3
 8003938:	1e13      	subs	r3, r2, #0
 800393a:	d000      	beq.n	800393e <HAL_GPIO_Init+0x2ae>
 800393c:	e6b0      	b.n	80036a0 <HAL_GPIO_Init+0x10>
  }
}
 800393e:	46c0      	nop			; (mov r8, r8)
 8003940:	46c0      	nop			; (mov r8, r8)
 8003942:	46bd      	mov	sp, r7
 8003944:	b006      	add	sp, #24
 8003946:	bd80      	pop	{r7, pc}
 8003948:	40021800 	.word	0x40021800
 800394c:	50000400 	.word	0x50000400
 8003950:	50000800 	.word	0x50000800
 8003954:	50000c00 	.word	0x50000c00

08003958 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	0008      	movs	r0, r1
 8003962:	0011      	movs	r1, r2
 8003964:	1cbb      	adds	r3, r7, #2
 8003966:	1c02      	adds	r2, r0, #0
 8003968:	801a      	strh	r2, [r3, #0]
 800396a:	1c7b      	adds	r3, r7, #1
 800396c:	1c0a      	adds	r2, r1, #0
 800396e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003970:	1c7b      	adds	r3, r7, #1
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d004      	beq.n	8003982 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003978:	1cbb      	adds	r3, r7, #2
 800397a:	881a      	ldrh	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003980:	e003      	b.n	800398a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003982:	1cbb      	adds	r3, r7, #2
 8003984:	881a      	ldrh	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	629a      	str	r2, [r3, #40]	; 0x28
}
 800398a:	46c0      	nop			; (mov r8, r8)
 800398c:	46bd      	mov	sp, r7
 800398e:	b002      	add	sp, #8
 8003990:	bd80      	pop	{r7, pc}
	...

08003994 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800399c:	4b19      	ldr	r3, [pc, #100]	; (8003a04 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a19      	ldr	r2, [pc, #100]	; (8003a08 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80039a2:	4013      	ands	r3, r2
 80039a4:	0019      	movs	r1, r3
 80039a6:	4b17      	ldr	r3, [pc, #92]	; (8003a04 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	2380      	movs	r3, #128	; 0x80
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d11f      	bne.n	80039f8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80039b8:	4b14      	ldr	r3, [pc, #80]	; (8003a0c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	0013      	movs	r3, r2
 80039be:	005b      	lsls	r3, r3, #1
 80039c0:	189b      	adds	r3, r3, r2
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	4912      	ldr	r1, [pc, #72]	; (8003a10 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80039c6:	0018      	movs	r0, r3
 80039c8:	f7fc fbb8 	bl	800013c <__udivsi3>
 80039cc:	0003      	movs	r3, r0
 80039ce:	3301      	adds	r3, #1
 80039d0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039d2:	e008      	b.n	80039e6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	3b01      	subs	r3, #1
 80039de:	60fb      	str	r3, [r7, #12]
 80039e0:	e001      	b.n	80039e6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e009      	b.n	80039fa <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039e6:	4b07      	ldr	r3, [pc, #28]	; (8003a04 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80039e8:	695a      	ldr	r2, [r3, #20]
 80039ea:	2380      	movs	r3, #128	; 0x80
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	401a      	ands	r2, r3
 80039f0:	2380      	movs	r3, #128	; 0x80
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d0ed      	beq.n	80039d4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	0018      	movs	r0, r3
 80039fc:	46bd      	mov	sp, r7
 80039fe:	b004      	add	sp, #16
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	46c0      	nop			; (mov r8, r8)
 8003a04:	40007000 	.word	0x40007000
 8003a08:	fffff9ff 	.word	0xfffff9ff
 8003a0c:	20000000 	.word	0x20000000
 8003a10:	000f4240 	.word	0x000f4240

08003a14 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003a18:	4b03      	ldr	r3, [pc, #12]	; (8003a28 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	23e0      	movs	r3, #224	; 0xe0
 8003a1e:	01db      	lsls	r3, r3, #7
 8003a20:	4013      	ands	r3, r2
}
 8003a22:	0018      	movs	r0, r3
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40021000 	.word	0x40021000

08003a2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b088      	sub	sp, #32
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e2fe      	b.n	800403c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2201      	movs	r2, #1
 8003a44:	4013      	ands	r3, r2
 8003a46:	d100      	bne.n	8003a4a <HAL_RCC_OscConfig+0x1e>
 8003a48:	e07c      	b.n	8003b44 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a4a:	4bc3      	ldr	r3, [pc, #780]	; (8003d58 <HAL_RCC_OscConfig+0x32c>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	2238      	movs	r2, #56	; 0x38
 8003a50:	4013      	ands	r3, r2
 8003a52:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a54:	4bc0      	ldr	r3, [pc, #768]	; (8003d58 <HAL_RCC_OscConfig+0x32c>)
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	2203      	movs	r2, #3
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	2b10      	cmp	r3, #16
 8003a62:	d102      	bne.n	8003a6a <HAL_RCC_OscConfig+0x3e>
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	2b03      	cmp	r3, #3
 8003a68:	d002      	beq.n	8003a70 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	d10b      	bne.n	8003a88 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a70:	4bb9      	ldr	r3, [pc, #740]	; (8003d58 <HAL_RCC_OscConfig+0x32c>)
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	2380      	movs	r3, #128	; 0x80
 8003a76:	029b      	lsls	r3, r3, #10
 8003a78:	4013      	ands	r3, r2
 8003a7a:	d062      	beq.n	8003b42 <HAL_RCC_OscConfig+0x116>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d15e      	bne.n	8003b42 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e2d9      	b.n	800403c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	2380      	movs	r3, #128	; 0x80
 8003a8e:	025b      	lsls	r3, r3, #9
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d107      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x78>
 8003a94:	4bb0      	ldr	r3, [pc, #704]	; (8003d58 <HAL_RCC_OscConfig+0x32c>)
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	4baf      	ldr	r3, [pc, #700]	; (8003d58 <HAL_RCC_OscConfig+0x32c>)
 8003a9a:	2180      	movs	r1, #128	; 0x80
 8003a9c:	0249      	lsls	r1, r1, #9
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	601a      	str	r2, [r3, #0]
 8003aa2:	e020      	b.n	8003ae6 <HAL_RCC_OscConfig+0xba>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	23a0      	movs	r3, #160	; 0xa0
 8003aaa:	02db      	lsls	r3, r3, #11
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d10e      	bne.n	8003ace <HAL_RCC_OscConfig+0xa2>
 8003ab0:	4ba9      	ldr	r3, [pc, #676]	; (8003d58 <HAL_RCC_OscConfig+0x32c>)
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	4ba8      	ldr	r3, [pc, #672]	; (8003d58 <HAL_RCC_OscConfig+0x32c>)
 8003ab6:	2180      	movs	r1, #128	; 0x80
 8003ab8:	02c9      	lsls	r1, r1, #11
 8003aba:	430a      	orrs	r2, r1
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	4ba6      	ldr	r3, [pc, #664]	; (8003d58 <HAL_RCC_OscConfig+0x32c>)
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	4ba5      	ldr	r3, [pc, #660]	; (8003d58 <HAL_RCC_OscConfig+0x32c>)
 8003ac4:	2180      	movs	r1, #128	; 0x80
 8003ac6:	0249      	lsls	r1, r1, #9
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	601a      	str	r2, [r3, #0]
 8003acc:	e00b      	b.n	8003ae6 <HAL_RCC_OscConfig+0xba>
 8003ace:	4ba2      	ldr	r3, [pc, #648]	; (8003d58 <HAL_RCC_OscConfig+0x32c>)
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	4ba1      	ldr	r3, [pc, #644]	; (8003d58 <HAL_RCC_OscConfig+0x32c>)
 8003ad4:	49a1      	ldr	r1, [pc, #644]	; (8003d5c <HAL_RCC_OscConfig+0x330>)
 8003ad6:	400a      	ands	r2, r1
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	4b9f      	ldr	r3, [pc, #636]	; (8003d58 <HAL_RCC_OscConfig+0x32c>)
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	4b9e      	ldr	r3, [pc, #632]	; (8003d58 <HAL_RCC_OscConfig+0x32c>)
 8003ae0:	499f      	ldr	r1, [pc, #636]	; (8003d60 <HAL_RCC_OscConfig+0x334>)
 8003ae2:	400a      	ands	r2, r1
 8003ae4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d014      	beq.n	8003b18 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aee:	f7ff fd11 	bl	8003514 <HAL_GetTick>
 8003af2:	0003      	movs	r3, r0
 8003af4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003af8:	f7ff fd0c 	bl	8003514 <HAL_GetTick>
 8003afc:	0002      	movs	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b64      	cmp	r3, #100	; 0x64
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e298      	b.n	800403c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b0a:	4b93      	ldr	r3, [pc, #588]	; (8003d58 <HAL_RCC_OscConfig+0x32c>)
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	2380      	movs	r3, #128	; 0x80
 8003b10:	029b      	lsls	r3, r3, #10
 8003b12:	4013      	ands	r3, r2
 8003b14:	d0f0      	beq.n	8003af8 <HAL_RCC_OscConfig+0xcc>
 8003b16:	e015      	b.n	8003b44 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b18:	f7ff fcfc 	bl	8003514 <HAL_GetTick>
 8003b1c:	0003      	movs	r3, r0
 8003b1e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b20:	e008      	b.n	8003b34 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b22:	f7ff fcf7 	bl	8003514 <HAL_GetTick>
 8003b26:	0002      	movs	r2, r0
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b64      	cmp	r3, #100	; 0x64
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e283      	b.n	800403c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b34:	4b88      	ldr	r3, [pc, #544]	; (8003d58 <HAL_RCC_OscConfig+0x32c>)
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	2380      	movs	r3, #128	; 0x80
 8003b3a:	029b      	lsls	r3, r3, #10
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	d1f0      	bne.n	8003b22 <HAL_RCC_OscConfig+0xf6>
 8003b40:	e000      	b.n	8003b44 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b42:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2202      	movs	r2, #2
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	d100      	bne.n	8003b50 <HAL_RCC_OscConfig+0x124>
 8003b4e:	e099      	b.n	8003c84 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b50:	4b81      	ldr	r3, [pc, #516]	; (8003d58 <HAL_RCC_OscConfig+0x32c>)
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	2238      	movs	r2, #56	; 0x38
 8003b56:	4013      	ands	r3, r2
 8003b58:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b5a:	4b7f      	ldr	r3, [pc, #508]	; (8003d58 <HAL_RCC_OscConfig+0x32c>)
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	2203      	movs	r2, #3
 8003b60:	4013      	ands	r3, r2
 8003b62:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	2b10      	cmp	r3, #16
 8003b68:	d102      	bne.n	8003b70 <HAL_RCC_OscConfig+0x144>
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d002      	beq.n	8003b76 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d135      	bne.n	8003be2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b76:	4b78      	ldr	r3, [pc, #480]	; (8003d58 <HAL_RCC_OscConfig+0x32c>)
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	2380      	movs	r3, #128	; 0x80
 8003b7c:	00db      	lsls	r3, r3, #3
 8003b7e:	4013      	ands	r3, r2
 8003b80:	d005      	beq.n	8003b8e <HAL_RCC_OscConfig+0x162>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e256      	b.n	800403c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b8e:	4b72      	ldr	r3, [pc, #456]	; (8003d58 <HAL_RCC_OscConfig+0x32c>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	4a74      	ldr	r2, [pc, #464]	; (8003d64 <HAL_RCC_OscConfig+0x338>)
 8003b94:	4013      	ands	r3, r2
 8003b96:	0019      	movs	r1, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	021a      	lsls	r2, r3, #8
 8003b9e:	4b6e      	ldr	r3, [pc, #440]	; (8003d58 <HAL_RCC_OscConfig+0x32c>)
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d112      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003baa:	4b6b      	ldr	r3, [pc, #428]	; (8003d58 <HAL_RCC_OscConfig+0x32c>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a6e      	ldr	r2, [pc, #440]	; (8003d68 <HAL_RCC_OscConfig+0x33c>)
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	0019      	movs	r1, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	691a      	ldr	r2, [r3, #16]
 8003bb8:	4b67      	ldr	r3, [pc, #412]	; (8003d58 <HAL_RCC_OscConfig+0x32c>)
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003bbe:	4b66      	ldr	r3, [pc, #408]	; (8003d58 <HAL_RCC_OscConfig+0x32c>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	0adb      	lsrs	r3, r3, #11
 8003bc4:	2207      	movs	r2, #7
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	4a68      	ldr	r2, [pc, #416]	; (8003d6c <HAL_RCC_OscConfig+0x340>)
 8003bca:	40da      	lsrs	r2, r3
 8003bcc:	4b68      	ldr	r3, [pc, #416]	; (8003d70 <HAL_RCC_OscConfig+0x344>)
 8003bce:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003bd0:	4b68      	ldr	r3, [pc, #416]	; (8003d74 <HAL_RCC_OscConfig+0x348>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	f7ff fc41 	bl	800345c <HAL_InitTick>
 8003bda:	1e03      	subs	r3, r0, #0
 8003bdc:	d051      	beq.n	8003c82 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e22c      	b.n	800403c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d030      	beq.n	8003c4c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003bea:	4b5b      	ldr	r3, [pc, #364]	; (8003d58 <HAL_RCC_OscConfig+0x32c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a5e      	ldr	r2, [pc, #376]	; (8003d68 <HAL_RCC_OscConfig+0x33c>)
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	0019      	movs	r1, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	691a      	ldr	r2, [r3, #16]
 8003bf8:	4b57      	ldr	r3, [pc, #348]	; (8003d58 <HAL_RCC_OscConfig+0x32c>)
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003bfe:	4b56      	ldr	r3, [pc, #344]	; (8003d58 <HAL_RCC_OscConfig+0x32c>)
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	4b55      	ldr	r3, [pc, #340]	; (8003d58 <HAL_RCC_OscConfig+0x32c>)
 8003c04:	2180      	movs	r1, #128	; 0x80
 8003c06:	0049      	lsls	r1, r1, #1
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0c:	f7ff fc82 	bl	8003514 <HAL_GetTick>
 8003c10:	0003      	movs	r3, r0
 8003c12:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c14:	e008      	b.n	8003c28 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c16:	f7ff fc7d 	bl	8003514 <HAL_GetTick>
 8003c1a:	0002      	movs	r2, r0
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e209      	b.n	800403c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c28:	4b4b      	ldr	r3, [pc, #300]	; (8003d58 <HAL_RCC_OscConfig+0x32c>)
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	2380      	movs	r3, #128	; 0x80
 8003c2e:	00db      	lsls	r3, r3, #3
 8003c30:	4013      	ands	r3, r2
 8003c32:	d0f0      	beq.n	8003c16 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c34:	4b48      	ldr	r3, [pc, #288]	; (8003d58 <HAL_RCC_OscConfig+0x32c>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	4a4a      	ldr	r2, [pc, #296]	; (8003d64 <HAL_RCC_OscConfig+0x338>)
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	0019      	movs	r1, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	021a      	lsls	r2, r3, #8
 8003c44:	4b44      	ldr	r3, [pc, #272]	; (8003d58 <HAL_RCC_OscConfig+0x32c>)
 8003c46:	430a      	orrs	r2, r1
 8003c48:	605a      	str	r2, [r3, #4]
 8003c4a:	e01b      	b.n	8003c84 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003c4c:	4b42      	ldr	r3, [pc, #264]	; (8003d58 <HAL_RCC_OscConfig+0x32c>)
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	4b41      	ldr	r3, [pc, #260]	; (8003d58 <HAL_RCC_OscConfig+0x32c>)
 8003c52:	4949      	ldr	r1, [pc, #292]	; (8003d78 <HAL_RCC_OscConfig+0x34c>)
 8003c54:	400a      	ands	r2, r1
 8003c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c58:	f7ff fc5c 	bl	8003514 <HAL_GetTick>
 8003c5c:	0003      	movs	r3, r0
 8003c5e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c60:	e008      	b.n	8003c74 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c62:	f7ff fc57 	bl	8003514 <HAL_GetTick>
 8003c66:	0002      	movs	r2, r0
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e1e3      	b.n	800403c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c74:	4b38      	ldr	r3, [pc, #224]	; (8003d58 <HAL_RCC_OscConfig+0x32c>)
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	2380      	movs	r3, #128	; 0x80
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	d1f0      	bne.n	8003c62 <HAL_RCC_OscConfig+0x236>
 8003c80:	e000      	b.n	8003c84 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c82:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2208      	movs	r2, #8
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	d047      	beq.n	8003d1e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003c8e:	4b32      	ldr	r3, [pc, #200]	; (8003d58 <HAL_RCC_OscConfig+0x32c>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	2238      	movs	r2, #56	; 0x38
 8003c94:	4013      	ands	r3, r2
 8003c96:	2b18      	cmp	r3, #24
 8003c98:	d10a      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003c9a:	4b2f      	ldr	r3, [pc, #188]	; (8003d58 <HAL_RCC_OscConfig+0x32c>)
 8003c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	d03c      	beq.n	8003d1e <HAL_RCC_OscConfig+0x2f2>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d138      	bne.n	8003d1e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e1c5      	b.n	800403c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d019      	beq.n	8003cec <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003cb8:	4b27      	ldr	r3, [pc, #156]	; (8003d58 <HAL_RCC_OscConfig+0x32c>)
 8003cba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003cbc:	4b26      	ldr	r3, [pc, #152]	; (8003d58 <HAL_RCC_OscConfig+0x32c>)
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc4:	f7ff fc26 	bl	8003514 <HAL_GetTick>
 8003cc8:	0003      	movs	r3, r0
 8003cca:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ccc:	e008      	b.n	8003ce0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cce:	f7ff fc21 	bl	8003514 <HAL_GetTick>
 8003cd2:	0002      	movs	r2, r0
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d901      	bls.n	8003ce0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e1ad      	b.n	800403c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ce0:	4b1d      	ldr	r3, [pc, #116]	; (8003d58 <HAL_RCC_OscConfig+0x32c>)
 8003ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ce4:	2202      	movs	r2, #2
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	d0f1      	beq.n	8003cce <HAL_RCC_OscConfig+0x2a2>
 8003cea:	e018      	b.n	8003d1e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003cec:	4b1a      	ldr	r3, [pc, #104]	; (8003d58 <HAL_RCC_OscConfig+0x32c>)
 8003cee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003cf0:	4b19      	ldr	r3, [pc, #100]	; (8003d58 <HAL_RCC_OscConfig+0x32c>)
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	438a      	bics	r2, r1
 8003cf6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf8:	f7ff fc0c 	bl	8003514 <HAL_GetTick>
 8003cfc:	0003      	movs	r3, r0
 8003cfe:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d00:	e008      	b.n	8003d14 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d02:	f7ff fc07 	bl	8003514 <HAL_GetTick>
 8003d06:	0002      	movs	r2, r0
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e193      	b.n	800403c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d14:	4b10      	ldr	r3, [pc, #64]	; (8003d58 <HAL_RCC_OscConfig+0x32c>)
 8003d16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d18:	2202      	movs	r2, #2
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	d1f1      	bne.n	8003d02 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2204      	movs	r2, #4
 8003d24:	4013      	ands	r3, r2
 8003d26:	d100      	bne.n	8003d2a <HAL_RCC_OscConfig+0x2fe>
 8003d28:	e0c6      	b.n	8003eb8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d2a:	231f      	movs	r3, #31
 8003d2c:	18fb      	adds	r3, r7, r3
 8003d2e:	2200      	movs	r2, #0
 8003d30:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003d32:	4b09      	ldr	r3, [pc, #36]	; (8003d58 <HAL_RCC_OscConfig+0x32c>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	2238      	movs	r2, #56	; 0x38
 8003d38:	4013      	ands	r3, r2
 8003d3a:	2b20      	cmp	r3, #32
 8003d3c:	d11e      	bne.n	8003d7c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003d3e:	4b06      	ldr	r3, [pc, #24]	; (8003d58 <HAL_RCC_OscConfig+0x32c>)
 8003d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d42:	2202      	movs	r2, #2
 8003d44:	4013      	ands	r3, r2
 8003d46:	d100      	bne.n	8003d4a <HAL_RCC_OscConfig+0x31e>
 8003d48:	e0b6      	b.n	8003eb8 <HAL_RCC_OscConfig+0x48c>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d000      	beq.n	8003d54 <HAL_RCC_OscConfig+0x328>
 8003d52:	e0b1      	b.n	8003eb8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e171      	b.n	800403c <HAL_RCC_OscConfig+0x610>
 8003d58:	40021000 	.word	0x40021000
 8003d5c:	fffeffff 	.word	0xfffeffff
 8003d60:	fffbffff 	.word	0xfffbffff
 8003d64:	ffff80ff 	.word	0xffff80ff
 8003d68:	ffffc7ff 	.word	0xffffc7ff
 8003d6c:	00f42400 	.word	0x00f42400
 8003d70:	20000000 	.word	0x20000000
 8003d74:	20000004 	.word	0x20000004
 8003d78:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d7c:	4bb1      	ldr	r3, [pc, #708]	; (8004044 <HAL_RCC_OscConfig+0x618>)
 8003d7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d80:	2380      	movs	r3, #128	; 0x80
 8003d82:	055b      	lsls	r3, r3, #21
 8003d84:	4013      	ands	r3, r2
 8003d86:	d101      	bne.n	8003d8c <HAL_RCC_OscConfig+0x360>
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e000      	b.n	8003d8e <HAL_RCC_OscConfig+0x362>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d011      	beq.n	8003db6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003d92:	4bac      	ldr	r3, [pc, #688]	; (8004044 <HAL_RCC_OscConfig+0x618>)
 8003d94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d96:	4bab      	ldr	r3, [pc, #684]	; (8004044 <HAL_RCC_OscConfig+0x618>)
 8003d98:	2180      	movs	r1, #128	; 0x80
 8003d9a:	0549      	lsls	r1, r1, #21
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003da0:	4ba8      	ldr	r3, [pc, #672]	; (8004044 <HAL_RCC_OscConfig+0x618>)
 8003da2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003da4:	2380      	movs	r3, #128	; 0x80
 8003da6:	055b      	lsls	r3, r3, #21
 8003da8:	4013      	ands	r3, r2
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003dae:	231f      	movs	r3, #31
 8003db0:	18fb      	adds	r3, r7, r3
 8003db2:	2201      	movs	r2, #1
 8003db4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003db6:	4ba4      	ldr	r3, [pc, #656]	; (8004048 <HAL_RCC_OscConfig+0x61c>)
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	2380      	movs	r3, #128	; 0x80
 8003dbc:	005b      	lsls	r3, r3, #1
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	d11a      	bne.n	8003df8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dc2:	4ba1      	ldr	r3, [pc, #644]	; (8004048 <HAL_RCC_OscConfig+0x61c>)
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	4ba0      	ldr	r3, [pc, #640]	; (8004048 <HAL_RCC_OscConfig+0x61c>)
 8003dc8:	2180      	movs	r1, #128	; 0x80
 8003dca:	0049      	lsls	r1, r1, #1
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003dd0:	f7ff fba0 	bl	8003514 <HAL_GetTick>
 8003dd4:	0003      	movs	r3, r0
 8003dd6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dd8:	e008      	b.n	8003dec <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dda:	f7ff fb9b 	bl	8003514 <HAL_GetTick>
 8003dde:	0002      	movs	r2, r0
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e127      	b.n	800403c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dec:	4b96      	ldr	r3, [pc, #600]	; (8004048 <HAL_RCC_OscConfig+0x61c>)
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	2380      	movs	r3, #128	; 0x80
 8003df2:	005b      	lsls	r3, r3, #1
 8003df4:	4013      	ands	r3, r2
 8003df6:	d0f0      	beq.n	8003dda <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d106      	bne.n	8003e0e <HAL_RCC_OscConfig+0x3e2>
 8003e00:	4b90      	ldr	r3, [pc, #576]	; (8004044 <HAL_RCC_OscConfig+0x618>)
 8003e02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e04:	4b8f      	ldr	r3, [pc, #572]	; (8004044 <HAL_RCC_OscConfig+0x618>)
 8003e06:	2101      	movs	r1, #1
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003e0c:	e01c      	b.n	8003e48 <HAL_RCC_OscConfig+0x41c>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	2b05      	cmp	r3, #5
 8003e14:	d10c      	bne.n	8003e30 <HAL_RCC_OscConfig+0x404>
 8003e16:	4b8b      	ldr	r3, [pc, #556]	; (8004044 <HAL_RCC_OscConfig+0x618>)
 8003e18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e1a:	4b8a      	ldr	r3, [pc, #552]	; (8004044 <HAL_RCC_OscConfig+0x618>)
 8003e1c:	2104      	movs	r1, #4
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	65da      	str	r2, [r3, #92]	; 0x5c
 8003e22:	4b88      	ldr	r3, [pc, #544]	; (8004044 <HAL_RCC_OscConfig+0x618>)
 8003e24:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e26:	4b87      	ldr	r3, [pc, #540]	; (8004044 <HAL_RCC_OscConfig+0x618>)
 8003e28:	2101      	movs	r1, #1
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	65da      	str	r2, [r3, #92]	; 0x5c
 8003e2e:	e00b      	b.n	8003e48 <HAL_RCC_OscConfig+0x41c>
 8003e30:	4b84      	ldr	r3, [pc, #528]	; (8004044 <HAL_RCC_OscConfig+0x618>)
 8003e32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e34:	4b83      	ldr	r3, [pc, #524]	; (8004044 <HAL_RCC_OscConfig+0x618>)
 8003e36:	2101      	movs	r1, #1
 8003e38:	438a      	bics	r2, r1
 8003e3a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003e3c:	4b81      	ldr	r3, [pc, #516]	; (8004044 <HAL_RCC_OscConfig+0x618>)
 8003e3e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e40:	4b80      	ldr	r3, [pc, #512]	; (8004044 <HAL_RCC_OscConfig+0x618>)
 8003e42:	2104      	movs	r1, #4
 8003e44:	438a      	bics	r2, r1
 8003e46:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d014      	beq.n	8003e7a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e50:	f7ff fb60 	bl	8003514 <HAL_GetTick>
 8003e54:	0003      	movs	r3, r0
 8003e56:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e58:	e009      	b.n	8003e6e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e5a:	f7ff fb5b 	bl	8003514 <HAL_GetTick>
 8003e5e:	0002      	movs	r2, r0
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	4a79      	ldr	r2, [pc, #484]	; (800404c <HAL_RCC_OscConfig+0x620>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e0e6      	b.n	800403c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e6e:	4b75      	ldr	r3, [pc, #468]	; (8004044 <HAL_RCC_OscConfig+0x618>)
 8003e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e72:	2202      	movs	r2, #2
 8003e74:	4013      	ands	r3, r2
 8003e76:	d0f0      	beq.n	8003e5a <HAL_RCC_OscConfig+0x42e>
 8003e78:	e013      	b.n	8003ea2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7a:	f7ff fb4b 	bl	8003514 <HAL_GetTick>
 8003e7e:	0003      	movs	r3, r0
 8003e80:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e82:	e009      	b.n	8003e98 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e84:	f7ff fb46 	bl	8003514 <HAL_GetTick>
 8003e88:	0002      	movs	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	4a6f      	ldr	r2, [pc, #444]	; (800404c <HAL_RCC_OscConfig+0x620>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e0d1      	b.n	800403c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e98:	4b6a      	ldr	r3, [pc, #424]	; (8004044 <HAL_RCC_OscConfig+0x618>)
 8003e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e9c:	2202      	movs	r2, #2
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	d1f0      	bne.n	8003e84 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003ea2:	231f      	movs	r3, #31
 8003ea4:	18fb      	adds	r3, r7, r3
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d105      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003eac:	4b65      	ldr	r3, [pc, #404]	; (8004044 <HAL_RCC_OscConfig+0x618>)
 8003eae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003eb0:	4b64      	ldr	r3, [pc, #400]	; (8004044 <HAL_RCC_OscConfig+0x618>)
 8003eb2:	4967      	ldr	r1, [pc, #412]	; (8004050 <HAL_RCC_OscConfig+0x624>)
 8003eb4:	400a      	ands	r2, r1
 8003eb6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	69db      	ldr	r3, [r3, #28]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d100      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x496>
 8003ec0:	e0bb      	b.n	800403a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ec2:	4b60      	ldr	r3, [pc, #384]	; (8004044 <HAL_RCC_OscConfig+0x618>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	2238      	movs	r2, #56	; 0x38
 8003ec8:	4013      	ands	r3, r2
 8003eca:	2b10      	cmp	r3, #16
 8003ecc:	d100      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x4a4>
 8003ece:	e07b      	b.n	8003fc8 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	69db      	ldr	r3, [r3, #28]
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d156      	bne.n	8003f86 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ed8:	4b5a      	ldr	r3, [pc, #360]	; (8004044 <HAL_RCC_OscConfig+0x618>)
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	4b59      	ldr	r3, [pc, #356]	; (8004044 <HAL_RCC_OscConfig+0x618>)
 8003ede:	495d      	ldr	r1, [pc, #372]	; (8004054 <HAL_RCC_OscConfig+0x628>)
 8003ee0:	400a      	ands	r2, r1
 8003ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee4:	f7ff fb16 	bl	8003514 <HAL_GetTick>
 8003ee8:	0003      	movs	r3, r0
 8003eea:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eec:	e008      	b.n	8003f00 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eee:	f7ff fb11 	bl	8003514 <HAL_GetTick>
 8003ef2:	0002      	movs	r2, r0
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d901      	bls.n	8003f00 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e09d      	b.n	800403c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f00:	4b50      	ldr	r3, [pc, #320]	; (8004044 <HAL_RCC_OscConfig+0x618>)
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	2380      	movs	r3, #128	; 0x80
 8003f06:	049b      	lsls	r3, r3, #18
 8003f08:	4013      	ands	r3, r2
 8003f0a:	d1f0      	bne.n	8003eee <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f0c:	4b4d      	ldr	r3, [pc, #308]	; (8004044 <HAL_RCC_OscConfig+0x618>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	4a51      	ldr	r2, [pc, #324]	; (8004058 <HAL_RCC_OscConfig+0x62c>)
 8003f12:	4013      	ands	r3, r2
 8003f14:	0019      	movs	r1, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a1a      	ldr	r2, [r3, #32]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f24:	021b      	lsls	r3, r3, #8
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f32:	431a      	orrs	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	4b42      	ldr	r3, [pc, #264]	; (8004044 <HAL_RCC_OscConfig+0x618>)
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f40:	4b40      	ldr	r3, [pc, #256]	; (8004044 <HAL_RCC_OscConfig+0x618>)
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	4b3f      	ldr	r3, [pc, #252]	; (8004044 <HAL_RCC_OscConfig+0x618>)
 8003f46:	2180      	movs	r1, #128	; 0x80
 8003f48:	0449      	lsls	r1, r1, #17
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003f4e:	4b3d      	ldr	r3, [pc, #244]	; (8004044 <HAL_RCC_OscConfig+0x618>)
 8003f50:	68da      	ldr	r2, [r3, #12]
 8003f52:	4b3c      	ldr	r3, [pc, #240]	; (8004044 <HAL_RCC_OscConfig+0x618>)
 8003f54:	2180      	movs	r1, #128	; 0x80
 8003f56:	0549      	lsls	r1, r1, #21
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5c:	f7ff fada 	bl	8003514 <HAL_GetTick>
 8003f60:	0003      	movs	r3, r0
 8003f62:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f64:	e008      	b.n	8003f78 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f66:	f7ff fad5 	bl	8003514 <HAL_GetTick>
 8003f6a:	0002      	movs	r2, r0
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d901      	bls.n	8003f78 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e061      	b.n	800403c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f78:	4b32      	ldr	r3, [pc, #200]	; (8004044 <HAL_RCC_OscConfig+0x618>)
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	2380      	movs	r3, #128	; 0x80
 8003f7e:	049b      	lsls	r3, r3, #18
 8003f80:	4013      	ands	r3, r2
 8003f82:	d0f0      	beq.n	8003f66 <HAL_RCC_OscConfig+0x53a>
 8003f84:	e059      	b.n	800403a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f86:	4b2f      	ldr	r3, [pc, #188]	; (8004044 <HAL_RCC_OscConfig+0x618>)
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	4b2e      	ldr	r3, [pc, #184]	; (8004044 <HAL_RCC_OscConfig+0x618>)
 8003f8c:	4931      	ldr	r1, [pc, #196]	; (8004054 <HAL_RCC_OscConfig+0x628>)
 8003f8e:	400a      	ands	r2, r1
 8003f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f92:	f7ff fabf 	bl	8003514 <HAL_GetTick>
 8003f96:	0003      	movs	r3, r0
 8003f98:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f9c:	f7ff faba 	bl	8003514 <HAL_GetTick>
 8003fa0:	0002      	movs	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e046      	b.n	800403c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fae:	4b25      	ldr	r3, [pc, #148]	; (8004044 <HAL_RCC_OscConfig+0x618>)
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	2380      	movs	r3, #128	; 0x80
 8003fb4:	049b      	lsls	r3, r3, #18
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	d1f0      	bne.n	8003f9c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003fba:	4b22      	ldr	r3, [pc, #136]	; (8004044 <HAL_RCC_OscConfig+0x618>)
 8003fbc:	68da      	ldr	r2, [r3, #12]
 8003fbe:	4b21      	ldr	r3, [pc, #132]	; (8004044 <HAL_RCC_OscConfig+0x618>)
 8003fc0:	4926      	ldr	r1, [pc, #152]	; (800405c <HAL_RCC_OscConfig+0x630>)
 8003fc2:	400a      	ands	r2, r1
 8003fc4:	60da      	str	r2, [r3, #12]
 8003fc6:	e038      	b.n	800403a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	69db      	ldr	r3, [r3, #28]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d101      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e033      	b.n	800403c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003fd4:	4b1b      	ldr	r3, [pc, #108]	; (8004044 <HAL_RCC_OscConfig+0x618>)
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	2203      	movs	r2, #3
 8003fde:	401a      	ands	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d126      	bne.n	8004036 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	2270      	movs	r2, #112	; 0x70
 8003fec:	401a      	ands	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d11f      	bne.n	8004036 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	23fe      	movs	r3, #254	; 0xfe
 8003ffa:	01db      	lsls	r3, r3, #7
 8003ffc:	401a      	ands	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004002:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004004:	429a      	cmp	r2, r3
 8004006:	d116      	bne.n	8004036 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	23f8      	movs	r3, #248	; 0xf8
 800400c:	039b      	lsls	r3, r3, #14
 800400e:	401a      	ands	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004014:	429a      	cmp	r2, r3
 8004016:	d10e      	bne.n	8004036 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	23e0      	movs	r3, #224	; 0xe0
 800401c:	051b      	lsls	r3, r3, #20
 800401e:	401a      	ands	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004024:	429a      	cmp	r2, r3
 8004026:	d106      	bne.n	8004036 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	0f5b      	lsrs	r3, r3, #29
 800402c:	075a      	lsls	r2, r3, #29
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004032:	429a      	cmp	r2, r3
 8004034:	d001      	beq.n	800403a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e000      	b.n	800403c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	0018      	movs	r0, r3
 800403e:	46bd      	mov	sp, r7
 8004040:	b008      	add	sp, #32
 8004042:	bd80      	pop	{r7, pc}
 8004044:	40021000 	.word	0x40021000
 8004048:	40007000 	.word	0x40007000
 800404c:	00001388 	.word	0x00001388
 8004050:	efffffff 	.word	0xefffffff
 8004054:	feffffff 	.word	0xfeffffff
 8004058:	11c1808c 	.word	0x11c1808c
 800405c:	eefefffc 	.word	0xeefefffc

08004060 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e0e9      	b.n	8004248 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004074:	4b76      	ldr	r3, [pc, #472]	; (8004250 <HAL_RCC_ClockConfig+0x1f0>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2207      	movs	r2, #7
 800407a:	4013      	ands	r3, r2
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	429a      	cmp	r2, r3
 8004080:	d91e      	bls.n	80040c0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004082:	4b73      	ldr	r3, [pc, #460]	; (8004250 <HAL_RCC_ClockConfig+0x1f0>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2207      	movs	r2, #7
 8004088:	4393      	bics	r3, r2
 800408a:	0019      	movs	r1, r3
 800408c:	4b70      	ldr	r3, [pc, #448]	; (8004250 <HAL_RCC_ClockConfig+0x1f0>)
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	430a      	orrs	r2, r1
 8004092:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004094:	f7ff fa3e 	bl	8003514 <HAL_GetTick>
 8004098:	0003      	movs	r3, r0
 800409a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800409c:	e009      	b.n	80040b2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800409e:	f7ff fa39 	bl	8003514 <HAL_GetTick>
 80040a2:	0002      	movs	r2, r0
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	4a6a      	ldr	r2, [pc, #424]	; (8004254 <HAL_RCC_ClockConfig+0x1f4>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e0ca      	b.n	8004248 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80040b2:	4b67      	ldr	r3, [pc, #412]	; (8004250 <HAL_RCC_ClockConfig+0x1f0>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2207      	movs	r2, #7
 80040b8:	4013      	ands	r3, r2
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d1ee      	bne.n	800409e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2202      	movs	r2, #2
 80040c6:	4013      	ands	r3, r2
 80040c8:	d015      	beq.n	80040f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2204      	movs	r2, #4
 80040d0:	4013      	ands	r3, r2
 80040d2:	d006      	beq.n	80040e2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80040d4:	4b60      	ldr	r3, [pc, #384]	; (8004258 <HAL_RCC_ClockConfig+0x1f8>)
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	4b5f      	ldr	r3, [pc, #380]	; (8004258 <HAL_RCC_ClockConfig+0x1f8>)
 80040da:	21e0      	movs	r1, #224	; 0xe0
 80040dc:	01c9      	lsls	r1, r1, #7
 80040de:	430a      	orrs	r2, r1
 80040e0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040e2:	4b5d      	ldr	r3, [pc, #372]	; (8004258 <HAL_RCC_ClockConfig+0x1f8>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	4a5d      	ldr	r2, [pc, #372]	; (800425c <HAL_RCC_ClockConfig+0x1fc>)
 80040e8:	4013      	ands	r3, r2
 80040ea:	0019      	movs	r1, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689a      	ldr	r2, [r3, #8]
 80040f0:	4b59      	ldr	r3, [pc, #356]	; (8004258 <HAL_RCC_ClockConfig+0x1f8>)
 80040f2:	430a      	orrs	r2, r1
 80040f4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2201      	movs	r2, #1
 80040fc:	4013      	ands	r3, r2
 80040fe:	d057      	beq.n	80041b0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d107      	bne.n	8004118 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004108:	4b53      	ldr	r3, [pc, #332]	; (8004258 <HAL_RCC_ClockConfig+0x1f8>)
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	2380      	movs	r3, #128	; 0x80
 800410e:	029b      	lsls	r3, r3, #10
 8004110:	4013      	ands	r3, r2
 8004112:	d12b      	bne.n	800416c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e097      	b.n	8004248 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	2b02      	cmp	r3, #2
 800411e:	d107      	bne.n	8004130 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004120:	4b4d      	ldr	r3, [pc, #308]	; (8004258 <HAL_RCC_ClockConfig+0x1f8>)
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	2380      	movs	r3, #128	; 0x80
 8004126:	049b      	lsls	r3, r3, #18
 8004128:	4013      	ands	r3, r2
 800412a:	d11f      	bne.n	800416c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e08b      	b.n	8004248 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d107      	bne.n	8004148 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004138:	4b47      	ldr	r3, [pc, #284]	; (8004258 <HAL_RCC_ClockConfig+0x1f8>)
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	2380      	movs	r3, #128	; 0x80
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	4013      	ands	r3, r2
 8004142:	d113      	bne.n	800416c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e07f      	b.n	8004248 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	2b03      	cmp	r3, #3
 800414e:	d106      	bne.n	800415e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004150:	4b41      	ldr	r3, [pc, #260]	; (8004258 <HAL_RCC_ClockConfig+0x1f8>)
 8004152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004154:	2202      	movs	r2, #2
 8004156:	4013      	ands	r3, r2
 8004158:	d108      	bne.n	800416c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e074      	b.n	8004248 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800415e:	4b3e      	ldr	r3, [pc, #248]	; (8004258 <HAL_RCC_ClockConfig+0x1f8>)
 8004160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004162:	2202      	movs	r2, #2
 8004164:	4013      	ands	r3, r2
 8004166:	d101      	bne.n	800416c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e06d      	b.n	8004248 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800416c:	4b3a      	ldr	r3, [pc, #232]	; (8004258 <HAL_RCC_ClockConfig+0x1f8>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	2207      	movs	r2, #7
 8004172:	4393      	bics	r3, r2
 8004174:	0019      	movs	r1, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	4b37      	ldr	r3, [pc, #220]	; (8004258 <HAL_RCC_ClockConfig+0x1f8>)
 800417c:	430a      	orrs	r2, r1
 800417e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004180:	f7ff f9c8 	bl	8003514 <HAL_GetTick>
 8004184:	0003      	movs	r3, r0
 8004186:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004188:	e009      	b.n	800419e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800418a:	f7ff f9c3 	bl	8003514 <HAL_GetTick>
 800418e:	0002      	movs	r2, r0
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	4a2f      	ldr	r2, [pc, #188]	; (8004254 <HAL_RCC_ClockConfig+0x1f4>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d901      	bls.n	800419e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e054      	b.n	8004248 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800419e:	4b2e      	ldr	r3, [pc, #184]	; (8004258 <HAL_RCC_ClockConfig+0x1f8>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	2238      	movs	r2, #56	; 0x38
 80041a4:	401a      	ands	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d1ec      	bne.n	800418a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041b0:	4b27      	ldr	r3, [pc, #156]	; (8004250 <HAL_RCC_ClockConfig+0x1f0>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2207      	movs	r2, #7
 80041b6:	4013      	ands	r3, r2
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d21e      	bcs.n	80041fc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041be:	4b24      	ldr	r3, [pc, #144]	; (8004250 <HAL_RCC_ClockConfig+0x1f0>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2207      	movs	r2, #7
 80041c4:	4393      	bics	r3, r2
 80041c6:	0019      	movs	r1, r3
 80041c8:	4b21      	ldr	r3, [pc, #132]	; (8004250 <HAL_RCC_ClockConfig+0x1f0>)
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	430a      	orrs	r2, r1
 80041ce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80041d0:	f7ff f9a0 	bl	8003514 <HAL_GetTick>
 80041d4:	0003      	movs	r3, r0
 80041d6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80041d8:	e009      	b.n	80041ee <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041da:	f7ff f99b 	bl	8003514 <HAL_GetTick>
 80041de:	0002      	movs	r2, r0
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	4a1b      	ldr	r2, [pc, #108]	; (8004254 <HAL_RCC_ClockConfig+0x1f4>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e02c      	b.n	8004248 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80041ee:	4b18      	ldr	r3, [pc, #96]	; (8004250 <HAL_RCC_ClockConfig+0x1f0>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2207      	movs	r2, #7
 80041f4:	4013      	ands	r3, r2
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d1ee      	bne.n	80041da <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2204      	movs	r2, #4
 8004202:	4013      	ands	r3, r2
 8004204:	d009      	beq.n	800421a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004206:	4b14      	ldr	r3, [pc, #80]	; (8004258 <HAL_RCC_ClockConfig+0x1f8>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	4a15      	ldr	r2, [pc, #84]	; (8004260 <HAL_RCC_ClockConfig+0x200>)
 800420c:	4013      	ands	r3, r2
 800420e:	0019      	movs	r1, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	68da      	ldr	r2, [r3, #12]
 8004214:	4b10      	ldr	r3, [pc, #64]	; (8004258 <HAL_RCC_ClockConfig+0x1f8>)
 8004216:	430a      	orrs	r2, r1
 8004218:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800421a:	f000 f829 	bl	8004270 <HAL_RCC_GetSysClockFreq>
 800421e:	0001      	movs	r1, r0
 8004220:	4b0d      	ldr	r3, [pc, #52]	; (8004258 <HAL_RCC_ClockConfig+0x1f8>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	0a1b      	lsrs	r3, r3, #8
 8004226:	220f      	movs	r2, #15
 8004228:	401a      	ands	r2, r3
 800422a:	4b0e      	ldr	r3, [pc, #56]	; (8004264 <HAL_RCC_ClockConfig+0x204>)
 800422c:	0092      	lsls	r2, r2, #2
 800422e:	58d3      	ldr	r3, [r2, r3]
 8004230:	221f      	movs	r2, #31
 8004232:	4013      	ands	r3, r2
 8004234:	000a      	movs	r2, r1
 8004236:	40da      	lsrs	r2, r3
 8004238:	4b0b      	ldr	r3, [pc, #44]	; (8004268 <HAL_RCC_ClockConfig+0x208>)
 800423a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800423c:	4b0b      	ldr	r3, [pc, #44]	; (800426c <HAL_RCC_ClockConfig+0x20c>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	0018      	movs	r0, r3
 8004242:	f7ff f90b 	bl	800345c <HAL_InitTick>
 8004246:	0003      	movs	r3, r0
}
 8004248:	0018      	movs	r0, r3
 800424a:	46bd      	mov	sp, r7
 800424c:	b004      	add	sp, #16
 800424e:	bd80      	pop	{r7, pc}
 8004250:	40022000 	.word	0x40022000
 8004254:	00001388 	.word	0x00001388
 8004258:	40021000 	.word	0x40021000
 800425c:	fffff0ff 	.word	0xfffff0ff
 8004260:	ffff8fff 	.word	0xffff8fff
 8004264:	0800934c 	.word	0x0800934c
 8004268:	20000000 	.word	0x20000000
 800426c:	20000004 	.word	0x20000004

08004270 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004276:	4b3c      	ldr	r3, [pc, #240]	; (8004368 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	2238      	movs	r2, #56	; 0x38
 800427c:	4013      	ands	r3, r2
 800427e:	d10f      	bne.n	80042a0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004280:	4b39      	ldr	r3, [pc, #228]	; (8004368 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	0adb      	lsrs	r3, r3, #11
 8004286:	2207      	movs	r2, #7
 8004288:	4013      	ands	r3, r2
 800428a:	2201      	movs	r2, #1
 800428c:	409a      	lsls	r2, r3
 800428e:	0013      	movs	r3, r2
 8004290:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004292:	6839      	ldr	r1, [r7, #0]
 8004294:	4835      	ldr	r0, [pc, #212]	; (800436c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004296:	f7fb ff51 	bl	800013c <__udivsi3>
 800429a:	0003      	movs	r3, r0
 800429c:	613b      	str	r3, [r7, #16]
 800429e:	e05d      	b.n	800435c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042a0:	4b31      	ldr	r3, [pc, #196]	; (8004368 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	2238      	movs	r2, #56	; 0x38
 80042a6:	4013      	ands	r3, r2
 80042a8:	2b08      	cmp	r3, #8
 80042aa:	d102      	bne.n	80042b2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80042ac:	4b30      	ldr	r3, [pc, #192]	; (8004370 <HAL_RCC_GetSysClockFreq+0x100>)
 80042ae:	613b      	str	r3, [r7, #16]
 80042b0:	e054      	b.n	800435c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042b2:	4b2d      	ldr	r3, [pc, #180]	; (8004368 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	2238      	movs	r2, #56	; 0x38
 80042b8:	4013      	ands	r3, r2
 80042ba:	2b10      	cmp	r3, #16
 80042bc:	d138      	bne.n	8004330 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80042be:	4b2a      	ldr	r3, [pc, #168]	; (8004368 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	2203      	movs	r2, #3
 80042c4:	4013      	ands	r3, r2
 80042c6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042c8:	4b27      	ldr	r3, [pc, #156]	; (8004368 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	091b      	lsrs	r3, r3, #4
 80042ce:	2207      	movs	r2, #7
 80042d0:	4013      	ands	r3, r2
 80042d2:	3301      	adds	r3, #1
 80042d4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2b03      	cmp	r3, #3
 80042da:	d10d      	bne.n	80042f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042dc:	68b9      	ldr	r1, [r7, #8]
 80042de:	4824      	ldr	r0, [pc, #144]	; (8004370 <HAL_RCC_GetSysClockFreq+0x100>)
 80042e0:	f7fb ff2c 	bl	800013c <__udivsi3>
 80042e4:	0003      	movs	r3, r0
 80042e6:	0019      	movs	r1, r3
 80042e8:	4b1f      	ldr	r3, [pc, #124]	; (8004368 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	0a1b      	lsrs	r3, r3, #8
 80042ee:	227f      	movs	r2, #127	; 0x7f
 80042f0:	4013      	ands	r3, r2
 80042f2:	434b      	muls	r3, r1
 80042f4:	617b      	str	r3, [r7, #20]
        break;
 80042f6:	e00d      	b.n	8004314 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80042f8:	68b9      	ldr	r1, [r7, #8]
 80042fa:	481c      	ldr	r0, [pc, #112]	; (800436c <HAL_RCC_GetSysClockFreq+0xfc>)
 80042fc:	f7fb ff1e 	bl	800013c <__udivsi3>
 8004300:	0003      	movs	r3, r0
 8004302:	0019      	movs	r1, r3
 8004304:	4b18      	ldr	r3, [pc, #96]	; (8004368 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	0a1b      	lsrs	r3, r3, #8
 800430a:	227f      	movs	r2, #127	; 0x7f
 800430c:	4013      	ands	r3, r2
 800430e:	434b      	muls	r3, r1
 8004310:	617b      	str	r3, [r7, #20]
        break;
 8004312:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004314:	4b14      	ldr	r3, [pc, #80]	; (8004368 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	0f5b      	lsrs	r3, r3, #29
 800431a:	2207      	movs	r2, #7
 800431c:	4013      	ands	r3, r2
 800431e:	3301      	adds	r3, #1
 8004320:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004322:	6879      	ldr	r1, [r7, #4]
 8004324:	6978      	ldr	r0, [r7, #20]
 8004326:	f7fb ff09 	bl	800013c <__udivsi3>
 800432a:	0003      	movs	r3, r0
 800432c:	613b      	str	r3, [r7, #16]
 800432e:	e015      	b.n	800435c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004330:	4b0d      	ldr	r3, [pc, #52]	; (8004368 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	2238      	movs	r2, #56	; 0x38
 8004336:	4013      	ands	r3, r2
 8004338:	2b20      	cmp	r3, #32
 800433a:	d103      	bne.n	8004344 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800433c:	2380      	movs	r3, #128	; 0x80
 800433e:	021b      	lsls	r3, r3, #8
 8004340:	613b      	str	r3, [r7, #16]
 8004342:	e00b      	b.n	800435c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004344:	4b08      	ldr	r3, [pc, #32]	; (8004368 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	2238      	movs	r2, #56	; 0x38
 800434a:	4013      	ands	r3, r2
 800434c:	2b18      	cmp	r3, #24
 800434e:	d103      	bne.n	8004358 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004350:	23fa      	movs	r3, #250	; 0xfa
 8004352:	01db      	lsls	r3, r3, #7
 8004354:	613b      	str	r3, [r7, #16]
 8004356:	e001      	b.n	800435c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004358:	2300      	movs	r3, #0
 800435a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800435c:	693b      	ldr	r3, [r7, #16]
}
 800435e:	0018      	movs	r0, r3
 8004360:	46bd      	mov	sp, r7
 8004362:	b006      	add	sp, #24
 8004364:	bd80      	pop	{r7, pc}
 8004366:	46c0      	nop			; (mov r8, r8)
 8004368:	40021000 	.word	0x40021000
 800436c:	00f42400 	.word	0x00f42400
 8004370:	007a1200 	.word	0x007a1200

08004374 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004378:	4b02      	ldr	r3, [pc, #8]	; (8004384 <HAL_RCC_GetHCLKFreq+0x10>)
 800437a:	681b      	ldr	r3, [r3, #0]
}
 800437c:	0018      	movs	r0, r3
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	46c0      	nop			; (mov r8, r8)
 8004384:	20000000 	.word	0x20000000

08004388 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004388:	b5b0      	push	{r4, r5, r7, lr}
 800438a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800438c:	f7ff fff2 	bl	8004374 <HAL_RCC_GetHCLKFreq>
 8004390:	0004      	movs	r4, r0
 8004392:	f7ff fb3f 	bl	8003a14 <LL_RCC_GetAPB1Prescaler>
 8004396:	0003      	movs	r3, r0
 8004398:	0b1a      	lsrs	r2, r3, #12
 800439a:	4b05      	ldr	r3, [pc, #20]	; (80043b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800439c:	0092      	lsls	r2, r2, #2
 800439e:	58d3      	ldr	r3, [r2, r3]
 80043a0:	221f      	movs	r2, #31
 80043a2:	4013      	ands	r3, r2
 80043a4:	40dc      	lsrs	r4, r3
 80043a6:	0023      	movs	r3, r4
}
 80043a8:	0018      	movs	r0, r3
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bdb0      	pop	{r4, r5, r7, pc}
 80043ae:	46c0      	nop			; (mov r8, r8)
 80043b0:	0800938c 	.word	0x0800938c

080043b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80043bc:	2313      	movs	r3, #19
 80043be:	18fb      	adds	r3, r7, r3
 80043c0:	2200      	movs	r2, #0
 80043c2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043c4:	2312      	movs	r3, #18
 80043c6:	18fb      	adds	r3, r7, r3
 80043c8:	2200      	movs	r2, #0
 80043ca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	2380      	movs	r3, #128	; 0x80
 80043d2:	029b      	lsls	r3, r3, #10
 80043d4:	4013      	ands	r3, r2
 80043d6:	d100      	bne.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x26>
 80043d8:	e0a3      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043da:	2011      	movs	r0, #17
 80043dc:	183b      	adds	r3, r7, r0
 80043de:	2200      	movs	r2, #0
 80043e0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043e2:	4bc3      	ldr	r3, [pc, #780]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80043e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043e6:	2380      	movs	r3, #128	; 0x80
 80043e8:	055b      	lsls	r3, r3, #21
 80043ea:	4013      	ands	r3, r2
 80043ec:	d110      	bne.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043ee:	4bc0      	ldr	r3, [pc, #768]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80043f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043f2:	4bbf      	ldr	r3, [pc, #764]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80043f4:	2180      	movs	r1, #128	; 0x80
 80043f6:	0549      	lsls	r1, r1, #21
 80043f8:	430a      	orrs	r2, r1
 80043fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80043fc:	4bbc      	ldr	r3, [pc, #752]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80043fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004400:	2380      	movs	r3, #128	; 0x80
 8004402:	055b      	lsls	r3, r3, #21
 8004404:	4013      	ands	r3, r2
 8004406:	60bb      	str	r3, [r7, #8]
 8004408:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800440a:	183b      	adds	r3, r7, r0
 800440c:	2201      	movs	r2, #1
 800440e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004410:	4bb8      	ldr	r3, [pc, #736]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	4bb7      	ldr	r3, [pc, #732]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004416:	2180      	movs	r1, #128	; 0x80
 8004418:	0049      	lsls	r1, r1, #1
 800441a:	430a      	orrs	r2, r1
 800441c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800441e:	f7ff f879 	bl	8003514 <HAL_GetTick>
 8004422:	0003      	movs	r3, r0
 8004424:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004426:	e00b      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004428:	f7ff f874 	bl	8003514 <HAL_GetTick>
 800442c:	0002      	movs	r2, r0
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d904      	bls.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004436:	2313      	movs	r3, #19
 8004438:	18fb      	adds	r3, r7, r3
 800443a:	2203      	movs	r2, #3
 800443c:	701a      	strb	r2, [r3, #0]
        break;
 800443e:	e005      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004440:	4bac      	ldr	r3, [pc, #688]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	2380      	movs	r3, #128	; 0x80
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	4013      	ands	r3, r2
 800444a:	d0ed      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800444c:	2313      	movs	r3, #19
 800444e:	18fb      	adds	r3, r7, r3
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d154      	bne.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004456:	4ba6      	ldr	r3, [pc, #664]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004458:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800445a:	23c0      	movs	r3, #192	; 0xc0
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4013      	ands	r3, r2
 8004460:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d019      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	429a      	cmp	r2, r3
 8004470:	d014      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004472:	4b9f      	ldr	r3, [pc, #636]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004476:	4aa0      	ldr	r2, [pc, #640]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004478:	4013      	ands	r3, r2
 800447a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800447c:	4b9c      	ldr	r3, [pc, #624]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800447e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004480:	4b9b      	ldr	r3, [pc, #620]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004482:	2180      	movs	r1, #128	; 0x80
 8004484:	0249      	lsls	r1, r1, #9
 8004486:	430a      	orrs	r2, r1
 8004488:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800448a:	4b99      	ldr	r3, [pc, #612]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800448c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800448e:	4b98      	ldr	r3, [pc, #608]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004490:	499a      	ldr	r1, [pc, #616]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004492:	400a      	ands	r2, r1
 8004494:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004496:	4b96      	ldr	r3, [pc, #600]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	2201      	movs	r2, #1
 80044a0:	4013      	ands	r3, r2
 80044a2:	d016      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a4:	f7ff f836 	bl	8003514 <HAL_GetTick>
 80044a8:	0003      	movs	r3, r0
 80044aa:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044ac:	e00c      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ae:	f7ff f831 	bl	8003514 <HAL_GetTick>
 80044b2:	0002      	movs	r2, r0
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	4a91      	ldr	r2, [pc, #580]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d904      	bls.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80044be:	2313      	movs	r3, #19
 80044c0:	18fb      	adds	r3, r7, r3
 80044c2:	2203      	movs	r2, #3
 80044c4:	701a      	strb	r2, [r3, #0]
            break;
 80044c6:	e004      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044c8:	4b89      	ldr	r3, [pc, #548]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80044ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044cc:	2202      	movs	r2, #2
 80044ce:	4013      	ands	r3, r2
 80044d0:	d0ed      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80044d2:	2313      	movs	r3, #19
 80044d4:	18fb      	adds	r3, r7, r3
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d10a      	bne.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044dc:	4b84      	ldr	r3, [pc, #528]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80044de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044e0:	4a85      	ldr	r2, [pc, #532]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80044e2:	4013      	ands	r3, r2
 80044e4:	0019      	movs	r1, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044ea:	4b81      	ldr	r3, [pc, #516]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80044ec:	430a      	orrs	r2, r1
 80044ee:	65da      	str	r2, [r3, #92]	; 0x5c
 80044f0:	e00c      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044f2:	2312      	movs	r3, #18
 80044f4:	18fb      	adds	r3, r7, r3
 80044f6:	2213      	movs	r2, #19
 80044f8:	18ba      	adds	r2, r7, r2
 80044fa:	7812      	ldrb	r2, [r2, #0]
 80044fc:	701a      	strb	r2, [r3, #0]
 80044fe:	e005      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004500:	2312      	movs	r3, #18
 8004502:	18fb      	adds	r3, r7, r3
 8004504:	2213      	movs	r2, #19
 8004506:	18ba      	adds	r2, r7, r2
 8004508:	7812      	ldrb	r2, [r2, #0]
 800450a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800450c:	2311      	movs	r3, #17
 800450e:	18fb      	adds	r3, r7, r3
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d105      	bne.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004516:	4b76      	ldr	r3, [pc, #472]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004518:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800451a:	4b75      	ldr	r3, [pc, #468]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800451c:	4979      	ldr	r1, [pc, #484]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800451e:	400a      	ands	r2, r1
 8004520:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2201      	movs	r2, #1
 8004528:	4013      	ands	r3, r2
 800452a:	d009      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800452c:	4b70      	ldr	r3, [pc, #448]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800452e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004530:	2203      	movs	r2, #3
 8004532:	4393      	bics	r3, r2
 8004534:	0019      	movs	r1, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	4b6d      	ldr	r3, [pc, #436]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800453c:	430a      	orrs	r2, r1
 800453e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2202      	movs	r2, #2
 8004546:	4013      	ands	r3, r2
 8004548:	d009      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800454a:	4b69      	ldr	r3, [pc, #420]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800454c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800454e:	220c      	movs	r2, #12
 8004550:	4393      	bics	r3, r2
 8004552:	0019      	movs	r1, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689a      	ldr	r2, [r3, #8]
 8004558:	4b65      	ldr	r3, [pc, #404]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800455a:	430a      	orrs	r2, r1
 800455c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2210      	movs	r2, #16
 8004564:	4013      	ands	r3, r2
 8004566:	d009      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004568:	4b61      	ldr	r3, [pc, #388]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800456a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800456c:	4a66      	ldr	r2, [pc, #408]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800456e:	4013      	ands	r3, r2
 8004570:	0019      	movs	r1, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68da      	ldr	r2, [r3, #12]
 8004576:	4b5e      	ldr	r3, [pc, #376]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004578:	430a      	orrs	r2, r1
 800457a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	2380      	movs	r3, #128	; 0x80
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	4013      	ands	r3, r2
 8004586:	d009      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004588:	4b59      	ldr	r3, [pc, #356]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800458a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800458c:	4a5f      	ldr	r2, [pc, #380]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800458e:	4013      	ands	r3, r2
 8004590:	0019      	movs	r1, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	699a      	ldr	r2, [r3, #24]
 8004596:	4b56      	ldr	r3, [pc, #344]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004598:	430a      	orrs	r2, r1
 800459a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	2380      	movs	r3, #128	; 0x80
 80045a2:	00db      	lsls	r3, r3, #3
 80045a4:	4013      	ands	r3, r2
 80045a6:	d009      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80045a8:	4b51      	ldr	r3, [pc, #324]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ac:	4a58      	ldr	r2, [pc, #352]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045ae:	4013      	ands	r3, r2
 80045b0:	0019      	movs	r1, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	69da      	ldr	r2, [r3, #28]
 80045b6:	4b4e      	ldr	r3, [pc, #312]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045b8:	430a      	orrs	r2, r1
 80045ba:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2220      	movs	r2, #32
 80045c2:	4013      	ands	r3, r2
 80045c4:	d009      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045c6:	4b4a      	ldr	r3, [pc, #296]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ca:	4a52      	ldr	r2, [pc, #328]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80045cc:	4013      	ands	r3, r2
 80045ce:	0019      	movs	r1, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	691a      	ldr	r2, [r3, #16]
 80045d4:	4b46      	ldr	r3, [pc, #280]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045d6:	430a      	orrs	r2, r1
 80045d8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	2380      	movs	r3, #128	; 0x80
 80045e0:	01db      	lsls	r3, r3, #7
 80045e2:	4013      	ands	r3, r2
 80045e4:	d015      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045e6:	4b42      	ldr	r3, [pc, #264]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	0899      	lsrs	r1, r3, #2
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a1a      	ldr	r2, [r3, #32]
 80045f2:	4b3f      	ldr	r3, [pc, #252]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045f4:	430a      	orrs	r2, r1
 80045f6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a1a      	ldr	r2, [r3, #32]
 80045fc:	2380      	movs	r3, #128	; 0x80
 80045fe:	05db      	lsls	r3, r3, #23
 8004600:	429a      	cmp	r2, r3
 8004602:	d106      	bne.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004604:	4b3a      	ldr	r3, [pc, #232]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004606:	68da      	ldr	r2, [r3, #12]
 8004608:	4b39      	ldr	r3, [pc, #228]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800460a:	2180      	movs	r1, #128	; 0x80
 800460c:	0249      	lsls	r1, r1, #9
 800460e:	430a      	orrs	r2, r1
 8004610:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	2380      	movs	r3, #128	; 0x80
 8004618:	031b      	lsls	r3, r3, #12
 800461a:	4013      	ands	r3, r2
 800461c:	d009      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800461e:	4b34      	ldr	r3, [pc, #208]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004622:	2240      	movs	r2, #64	; 0x40
 8004624:	4393      	bics	r3, r2
 8004626:	0019      	movs	r1, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800462c:	4b30      	ldr	r3, [pc, #192]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800462e:	430a      	orrs	r2, r1
 8004630:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	2380      	movs	r3, #128	; 0x80
 8004638:	039b      	lsls	r3, r3, #14
 800463a:	4013      	ands	r3, r2
 800463c:	d016      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800463e:	4b2c      	ldr	r3, [pc, #176]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004642:	4a35      	ldr	r2, [pc, #212]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004644:	4013      	ands	r3, r2
 8004646:	0019      	movs	r1, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800464c:	4b28      	ldr	r3, [pc, #160]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800464e:	430a      	orrs	r2, r1
 8004650:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004656:	2380      	movs	r3, #128	; 0x80
 8004658:	03db      	lsls	r3, r3, #15
 800465a:	429a      	cmp	r2, r3
 800465c:	d106      	bne.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800465e:	4b24      	ldr	r3, [pc, #144]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004660:	68da      	ldr	r2, [r3, #12]
 8004662:	4b23      	ldr	r3, [pc, #140]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004664:	2180      	movs	r1, #128	; 0x80
 8004666:	0449      	lsls	r1, r1, #17
 8004668:	430a      	orrs	r2, r1
 800466a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	2380      	movs	r3, #128	; 0x80
 8004672:	03db      	lsls	r3, r3, #15
 8004674:	4013      	ands	r3, r2
 8004676:	d016      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004678:	4b1d      	ldr	r3, [pc, #116]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800467a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467c:	4a27      	ldr	r2, [pc, #156]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800467e:	4013      	ands	r3, r2
 8004680:	0019      	movs	r1, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004686:	4b1a      	ldr	r3, [pc, #104]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004688:	430a      	orrs	r2, r1
 800468a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004690:	2380      	movs	r3, #128	; 0x80
 8004692:	045b      	lsls	r3, r3, #17
 8004694:	429a      	cmp	r2, r3
 8004696:	d106      	bne.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004698:	4b15      	ldr	r3, [pc, #84]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800469a:	68da      	ldr	r2, [r3, #12]
 800469c:	4b14      	ldr	r3, [pc, #80]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800469e:	2180      	movs	r1, #128	; 0x80
 80046a0:	0449      	lsls	r1, r1, #17
 80046a2:	430a      	orrs	r2, r1
 80046a4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	2380      	movs	r3, #128	; 0x80
 80046ac:	011b      	lsls	r3, r3, #4
 80046ae:	4013      	ands	r3, r2
 80046b0:	d016      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80046b2:	4b0f      	ldr	r3, [pc, #60]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80046b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b6:	4a1a      	ldr	r2, [pc, #104]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80046b8:	4013      	ands	r3, r2
 80046ba:	0019      	movs	r1, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	695a      	ldr	r2, [r3, #20]
 80046c0:	4b0b      	ldr	r3, [pc, #44]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80046c2:	430a      	orrs	r2, r1
 80046c4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	695a      	ldr	r2, [r3, #20]
 80046ca:	2380      	movs	r3, #128	; 0x80
 80046cc:	01db      	lsls	r3, r3, #7
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d106      	bne.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80046d2:	4b07      	ldr	r3, [pc, #28]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80046d4:	68da      	ldr	r2, [r3, #12]
 80046d6:	4b06      	ldr	r3, [pc, #24]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80046d8:	2180      	movs	r1, #128	; 0x80
 80046da:	0249      	lsls	r1, r1, #9
 80046dc:	430a      	orrs	r2, r1
 80046de:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80046e0:	2312      	movs	r3, #18
 80046e2:	18fb      	adds	r3, r7, r3
 80046e4:	781b      	ldrb	r3, [r3, #0]
}
 80046e6:	0018      	movs	r0, r3
 80046e8:	46bd      	mov	sp, r7
 80046ea:	b006      	add	sp, #24
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	46c0      	nop			; (mov r8, r8)
 80046f0:	40021000 	.word	0x40021000
 80046f4:	40007000 	.word	0x40007000
 80046f8:	fffffcff 	.word	0xfffffcff
 80046fc:	fffeffff 	.word	0xfffeffff
 8004700:	00001388 	.word	0x00001388
 8004704:	efffffff 	.word	0xefffffff
 8004708:	fffff3ff 	.word	0xfffff3ff
 800470c:	fff3ffff 	.word	0xfff3ffff
 8004710:	ffcfffff 	.word	0xffcfffff
 8004714:	ffffcfff 	.word	0xffffcfff
 8004718:	ffbfffff 	.word	0xffbfffff
 800471c:	feffffff 	.word	0xfeffffff
 8004720:	ffff3fff 	.word	0xffff3fff

08004724 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e0a8      	b.n	8004888 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473a:	2b00      	cmp	r3, #0
 800473c:	d109      	bne.n	8004752 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685a      	ldr	r2, [r3, #4]
 8004742:	2382      	movs	r3, #130	; 0x82
 8004744:	005b      	lsls	r3, r3, #1
 8004746:	429a      	cmp	r2, r3
 8004748:	d009      	beq.n	800475e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	61da      	str	r2, [r3, #28]
 8004750:	e005      	b.n	800475e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	225d      	movs	r2, #93	; 0x5d
 8004768:	5c9b      	ldrb	r3, [r3, r2]
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b00      	cmp	r3, #0
 800476e:	d107      	bne.n	8004780 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	225c      	movs	r2, #92	; 0x5c
 8004774:	2100      	movs	r1, #0
 8004776:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	0018      	movs	r0, r3
 800477c:	f7fe fc2e 	bl	8002fdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	225d      	movs	r2, #93	; 0x5d
 8004784:	2102      	movs	r1, #2
 8004786:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2140      	movs	r1, #64	; 0x40
 8004794:	438a      	bics	r2, r1
 8004796:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68da      	ldr	r2, [r3, #12]
 800479c:	23e0      	movs	r3, #224	; 0xe0
 800479e:	00db      	lsls	r3, r3, #3
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d902      	bls.n	80047aa <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80047a4:	2300      	movs	r3, #0
 80047a6:	60fb      	str	r3, [r7, #12]
 80047a8:	e002      	b.n	80047b0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80047aa:	2380      	movs	r3, #128	; 0x80
 80047ac:	015b      	lsls	r3, r3, #5
 80047ae:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68da      	ldr	r2, [r3, #12]
 80047b4:	23f0      	movs	r3, #240	; 0xf0
 80047b6:	011b      	lsls	r3, r3, #4
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d008      	beq.n	80047ce <HAL_SPI_Init+0xaa>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	68da      	ldr	r2, [r3, #12]
 80047c0:	23e0      	movs	r3, #224	; 0xe0
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d002      	beq.n	80047ce <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685a      	ldr	r2, [r3, #4]
 80047d2:	2382      	movs	r3, #130	; 0x82
 80047d4:	005b      	lsls	r3, r3, #1
 80047d6:	401a      	ands	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6899      	ldr	r1, [r3, #8]
 80047dc:	2384      	movs	r3, #132	; 0x84
 80047de:	021b      	lsls	r3, r3, #8
 80047e0:	400b      	ands	r3, r1
 80047e2:	431a      	orrs	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	2102      	movs	r1, #2
 80047ea:	400b      	ands	r3, r1
 80047ec:	431a      	orrs	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	2101      	movs	r1, #1
 80047f4:	400b      	ands	r3, r1
 80047f6:	431a      	orrs	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6999      	ldr	r1, [r3, #24]
 80047fc:	2380      	movs	r3, #128	; 0x80
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	400b      	ands	r3, r1
 8004802:	431a      	orrs	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	2138      	movs	r1, #56	; 0x38
 800480a:	400b      	ands	r3, r1
 800480c:	431a      	orrs	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	2180      	movs	r1, #128	; 0x80
 8004814:	400b      	ands	r3, r1
 8004816:	431a      	orrs	r2, r3
 8004818:	0011      	movs	r1, r2
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800481e:	2380      	movs	r3, #128	; 0x80
 8004820:	019b      	lsls	r3, r3, #6
 8004822:	401a      	ands	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	0c1b      	lsrs	r3, r3, #16
 8004832:	2204      	movs	r2, #4
 8004834:	401a      	ands	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483a:	2110      	movs	r1, #16
 800483c:	400b      	ands	r3, r1
 800483e:	431a      	orrs	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004844:	2108      	movs	r1, #8
 8004846:	400b      	ands	r3, r1
 8004848:	431a      	orrs	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	68d9      	ldr	r1, [r3, #12]
 800484e:	23f0      	movs	r3, #240	; 0xf0
 8004850:	011b      	lsls	r3, r3, #4
 8004852:	400b      	ands	r3, r1
 8004854:	431a      	orrs	r2, r3
 8004856:	0011      	movs	r1, r2
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	2380      	movs	r3, #128	; 0x80
 800485c:	015b      	lsls	r3, r3, #5
 800485e:	401a      	ands	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	430a      	orrs	r2, r1
 8004866:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	69da      	ldr	r2, [r3, #28]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4907      	ldr	r1, [pc, #28]	; (8004890 <HAL_SPI_Init+0x16c>)
 8004874:	400a      	ands	r2, r1
 8004876:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	225d      	movs	r2, #93	; 0x5d
 8004882:	2101      	movs	r1, #1
 8004884:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	0018      	movs	r0, r3
 800488a:	46bd      	mov	sp, r7
 800488c:	b004      	add	sp, #16
 800488e:	bd80      	pop	{r7, pc}
 8004890:	fffff7ff 	.word	0xfffff7ff

08004894 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b088      	sub	sp, #32
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	603b      	str	r3, [r7, #0]
 80048a0:	1dbb      	adds	r3, r7, #6
 80048a2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80048a4:	231f      	movs	r3, #31
 80048a6:	18fb      	adds	r3, r7, r3
 80048a8:	2200      	movs	r2, #0
 80048aa:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	225c      	movs	r2, #92	; 0x5c
 80048b0:	5c9b      	ldrb	r3, [r3, r2]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d101      	bne.n	80048ba <HAL_SPI_Transmit+0x26>
 80048b6:	2302      	movs	r3, #2
 80048b8:	e140      	b.n	8004b3c <HAL_SPI_Transmit+0x2a8>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	225c      	movs	r2, #92	; 0x5c
 80048be:	2101      	movs	r1, #1
 80048c0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048c2:	f7fe fe27 	bl	8003514 <HAL_GetTick>
 80048c6:	0003      	movs	r3, r0
 80048c8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80048ca:	2316      	movs	r3, #22
 80048cc:	18fb      	adds	r3, r7, r3
 80048ce:	1dba      	adds	r2, r7, #6
 80048d0:	8812      	ldrh	r2, [r2, #0]
 80048d2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	225d      	movs	r2, #93	; 0x5d
 80048d8:	5c9b      	ldrb	r3, [r3, r2]
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d004      	beq.n	80048ea <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80048e0:	231f      	movs	r3, #31
 80048e2:	18fb      	adds	r3, r7, r3
 80048e4:	2202      	movs	r2, #2
 80048e6:	701a      	strb	r2, [r3, #0]
    goto error;
 80048e8:	e11d      	b.n	8004b26 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d003      	beq.n	80048f8 <HAL_SPI_Transmit+0x64>
 80048f0:	1dbb      	adds	r3, r7, #6
 80048f2:	881b      	ldrh	r3, [r3, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d104      	bne.n	8004902 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80048f8:	231f      	movs	r3, #31
 80048fa:	18fb      	adds	r3, r7, r3
 80048fc:	2201      	movs	r2, #1
 80048fe:	701a      	strb	r2, [r3, #0]
    goto error;
 8004900:	e111      	b.n	8004b26 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	225d      	movs	r2, #93	; 0x5d
 8004906:	2103      	movs	r1, #3
 8004908:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	1dba      	adds	r2, r7, #6
 800491a:	8812      	ldrh	r2, [r2, #0]
 800491c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	1dba      	adds	r2, r7, #6
 8004922:	8812      	ldrh	r2, [r2, #0]
 8004924:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2244      	movs	r2, #68	; 0x44
 8004930:	2100      	movs	r1, #0
 8004932:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2246      	movs	r2, #70	; 0x46
 8004938:	2100      	movs	r1, #0
 800493a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	689a      	ldr	r2, [r3, #8]
 800494c:	2380      	movs	r3, #128	; 0x80
 800494e:	021b      	lsls	r3, r3, #8
 8004950:	429a      	cmp	r2, r3
 8004952:	d110      	bne.n	8004976 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2140      	movs	r1, #64	; 0x40
 8004960:	438a      	bics	r2, r1
 8004962:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2180      	movs	r1, #128	; 0x80
 8004970:	01c9      	lsls	r1, r1, #7
 8004972:	430a      	orrs	r2, r1
 8004974:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2240      	movs	r2, #64	; 0x40
 800497e:	4013      	ands	r3, r2
 8004980:	2b40      	cmp	r3, #64	; 0x40
 8004982:	d007      	beq.n	8004994 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2140      	movs	r1, #64	; 0x40
 8004990:	430a      	orrs	r2, r1
 8004992:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	68da      	ldr	r2, [r3, #12]
 8004998:	23e0      	movs	r3, #224	; 0xe0
 800499a:	00db      	lsls	r3, r3, #3
 800499c:	429a      	cmp	r2, r3
 800499e:	d94e      	bls.n	8004a3e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d004      	beq.n	80049b2 <HAL_SPI_Transmit+0x11e>
 80049a8:	2316      	movs	r3, #22
 80049aa:	18fb      	adds	r3, r7, r3
 80049ac:	881b      	ldrh	r3, [r3, #0]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d13f      	bne.n	8004a32 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b6:	881a      	ldrh	r2, [r3, #0]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c2:	1c9a      	adds	r2, r3, #2
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	3b01      	subs	r3, #1
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80049d6:	e02c      	b.n	8004a32 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	2202      	movs	r2, #2
 80049e0:	4013      	ands	r3, r2
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d112      	bne.n	8004a0c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ea:	881a      	ldrh	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f6:	1c9a      	adds	r2, r3, #2
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	3b01      	subs	r3, #1
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a0a:	e012      	b.n	8004a32 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a0c:	f7fe fd82 	bl	8003514 <HAL_GetTick>
 8004a10:	0002      	movs	r2, r0
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	683a      	ldr	r2, [r7, #0]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d802      	bhi.n	8004a22 <HAL_SPI_Transmit+0x18e>
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	d102      	bne.n	8004a28 <HAL_SPI_Transmit+0x194>
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d104      	bne.n	8004a32 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8004a28:	231f      	movs	r3, #31
 8004a2a:	18fb      	adds	r3, r7, r3
 8004a2c:	2203      	movs	r2, #3
 8004a2e:	701a      	strb	r2, [r3, #0]
          goto error;
 8004a30:	e079      	b.n	8004b26 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1cd      	bne.n	80049d8 <HAL_SPI_Transmit+0x144>
 8004a3c:	e04f      	b.n	8004ade <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d004      	beq.n	8004a50 <HAL_SPI_Transmit+0x1bc>
 8004a46:	2316      	movs	r3, #22
 8004a48:	18fb      	adds	r3, r7, r3
 8004a4a:	881b      	ldrh	r3, [r3, #0]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d141      	bne.n	8004ad4 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	330c      	adds	r3, #12
 8004a5a:	7812      	ldrb	r2, [r2, #0]
 8004a5c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a62:	1c5a      	adds	r2, r3, #1
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8004a76:	e02d      	b.n	8004ad4 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	2202      	movs	r2, #2
 8004a80:	4013      	ands	r3, r2
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d113      	bne.n	8004aae <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	330c      	adds	r3, #12
 8004a90:	7812      	ldrb	r2, [r2, #0]
 8004a92:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a98:	1c5a      	adds	r2, r3, #1
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004aac:	e012      	b.n	8004ad4 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004aae:	f7fe fd31 	bl	8003514 <HAL_GetTick>
 8004ab2:	0002      	movs	r2, r0
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d802      	bhi.n	8004ac4 <HAL_SPI_Transmit+0x230>
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	d102      	bne.n	8004aca <HAL_SPI_Transmit+0x236>
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d104      	bne.n	8004ad4 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8004aca:	231f      	movs	r3, #31
 8004acc:	18fb      	adds	r3, r7, r3
 8004ace:	2203      	movs	r2, #3
 8004ad0:	701a      	strb	r2, [r3, #0]
          goto error;
 8004ad2:	e028      	b.n	8004b26 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1cc      	bne.n	8004a78 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ade:	69ba      	ldr	r2, [r7, #24]
 8004ae0:	6839      	ldr	r1, [r7, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	f000 fcd9 	bl	800549c <SPI_EndRxTxTransaction>
 8004aea:	1e03      	subs	r3, r0, #0
 8004aec:	d002      	beq.n	8004af4 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2220      	movs	r2, #32
 8004af2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d10a      	bne.n	8004b12 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004afc:	2300      	movs	r3, #0
 8004afe:	613b      	str	r3, [r7, #16]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	613b      	str	r3, [r7, #16]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	613b      	str	r3, [r7, #16]
 8004b10:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d004      	beq.n	8004b24 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8004b1a:	231f      	movs	r3, #31
 8004b1c:	18fb      	adds	r3, r7, r3
 8004b1e:	2201      	movs	r2, #1
 8004b20:	701a      	strb	r2, [r3, #0]
 8004b22:	e000      	b.n	8004b26 <HAL_SPI_Transmit+0x292>
  }

error:
 8004b24:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	225d      	movs	r2, #93	; 0x5d
 8004b2a:	2101      	movs	r1, #1
 8004b2c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	225c      	movs	r2, #92	; 0x5c
 8004b32:	2100      	movs	r1, #0
 8004b34:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004b36:	231f      	movs	r3, #31
 8004b38:	18fb      	adds	r3, r7, r3
 8004b3a:	781b      	ldrb	r3, [r3, #0]
}
 8004b3c:	0018      	movs	r0, r3
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	b008      	add	sp, #32
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b44:	b590      	push	{r4, r7, lr}
 8004b46:	b089      	sub	sp, #36	; 0x24
 8004b48:	af02      	add	r7, sp, #8
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	603b      	str	r3, [r7, #0]
 8004b50:	1dbb      	adds	r3, r7, #6
 8004b52:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b54:	2317      	movs	r3, #23
 8004b56:	18fb      	adds	r3, r7, r3
 8004b58:	2200      	movs	r2, #0
 8004b5a:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	685a      	ldr	r2, [r3, #4]
 8004b60:	2382      	movs	r3, #130	; 0x82
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d113      	bne.n	8004b90 <HAL_SPI_Receive+0x4c>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d10f      	bne.n	8004b90 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	225d      	movs	r2, #93	; 0x5d
 8004b74:	2104      	movs	r1, #4
 8004b76:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004b78:	1dbb      	adds	r3, r7, #6
 8004b7a:	881c      	ldrh	r4, [r3, #0]
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	68b9      	ldr	r1, [r7, #8]
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	0023      	movs	r3, r4
 8004b88:	f000 f928 	bl	8004ddc <HAL_SPI_TransmitReceive>
 8004b8c:	0003      	movs	r3, r0
 8004b8e:	e11c      	b.n	8004dca <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	225c      	movs	r2, #92	; 0x5c
 8004b94:	5c9b      	ldrb	r3, [r3, r2]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d101      	bne.n	8004b9e <HAL_SPI_Receive+0x5a>
 8004b9a:	2302      	movs	r3, #2
 8004b9c:	e115      	b.n	8004dca <HAL_SPI_Receive+0x286>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	225c      	movs	r2, #92	; 0x5c
 8004ba2:	2101      	movs	r1, #1
 8004ba4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ba6:	f7fe fcb5 	bl	8003514 <HAL_GetTick>
 8004baa:	0003      	movs	r3, r0
 8004bac:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	225d      	movs	r2, #93	; 0x5d
 8004bb2:	5c9b      	ldrb	r3, [r3, r2]
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d004      	beq.n	8004bc4 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8004bba:	2317      	movs	r3, #23
 8004bbc:	18fb      	adds	r3, r7, r3
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	701a      	strb	r2, [r3, #0]
    goto error;
 8004bc2:	e0f7      	b.n	8004db4 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <HAL_SPI_Receive+0x8e>
 8004bca:	1dbb      	adds	r3, r7, #6
 8004bcc:	881b      	ldrh	r3, [r3, #0]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d104      	bne.n	8004bdc <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8004bd2:	2317      	movs	r3, #23
 8004bd4:	18fb      	adds	r3, r7, r3
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	701a      	strb	r2, [r3, #0]
    goto error;
 8004bda:	e0eb      	b.n	8004db4 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	225d      	movs	r2, #93	; 0x5d
 8004be0:	2104      	movs	r1, #4
 8004be2:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	1dba      	adds	r2, r7, #6
 8004bf4:	2144      	movs	r1, #68	; 0x44
 8004bf6:	8812      	ldrh	r2, [r2, #0]
 8004bf8:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	1dba      	adds	r2, r7, #6
 8004bfe:	2146      	movs	r1, #70	; 0x46
 8004c00:	8812      	ldrh	r2, [r2, #0]
 8004c02:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	68da      	ldr	r2, [r3, #12]
 8004c26:	23e0      	movs	r3, #224	; 0xe0
 8004c28:	00db      	lsls	r3, r3, #3
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d908      	bls.n	8004c40 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	685a      	ldr	r2, [r3, #4]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4966      	ldr	r1, [pc, #408]	; (8004dd4 <HAL_SPI_Receive+0x290>)
 8004c3a:	400a      	ands	r2, r1
 8004c3c:	605a      	str	r2, [r3, #4]
 8004c3e:	e008      	b.n	8004c52 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2180      	movs	r1, #128	; 0x80
 8004c4c:	0149      	lsls	r1, r1, #5
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	689a      	ldr	r2, [r3, #8]
 8004c56:	2380      	movs	r3, #128	; 0x80
 8004c58:	021b      	lsls	r3, r3, #8
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d10f      	bne.n	8004c7e <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2140      	movs	r1, #64	; 0x40
 8004c6a:	438a      	bics	r2, r1
 8004c6c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4957      	ldr	r1, [pc, #348]	; (8004dd8 <HAL_SPI_Receive+0x294>)
 8004c7a:	400a      	ands	r2, r1
 8004c7c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2240      	movs	r2, #64	; 0x40
 8004c86:	4013      	ands	r3, r2
 8004c88:	2b40      	cmp	r3, #64	; 0x40
 8004c8a:	d007      	beq.n	8004c9c <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2140      	movs	r1, #64	; 0x40
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	68da      	ldr	r2, [r3, #12]
 8004ca0:	23e0      	movs	r3, #224	; 0xe0
 8004ca2:	00db      	lsls	r3, r3, #3
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d900      	bls.n	8004caa <HAL_SPI_Receive+0x166>
 8004ca8:	e069      	b.n	8004d7e <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004caa:	e031      	b.n	8004d10 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d117      	bne.n	8004cea <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	330c      	adds	r3, #12
 8004cc0:	001a      	movs	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc6:	7812      	ldrb	r2, [r2, #0]
 8004cc8:	b2d2      	uxtb	r2, r2
 8004cca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd0:	1c5a      	adds	r2, r3, #1
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2246      	movs	r2, #70	; 0x46
 8004cda:	5a9b      	ldrh	r3, [r3, r2]
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	b299      	uxth	r1, r3
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2246      	movs	r2, #70	; 0x46
 8004ce6:	5299      	strh	r1, [r3, r2]
 8004ce8:	e012      	b.n	8004d10 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cea:	f7fe fc13 	bl	8003514 <HAL_GetTick>
 8004cee:	0002      	movs	r2, r0
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d802      	bhi.n	8004d00 <HAL_SPI_Receive+0x1bc>
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	d102      	bne.n	8004d06 <HAL_SPI_Receive+0x1c2>
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d104      	bne.n	8004d10 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8004d06:	2317      	movs	r3, #23
 8004d08:	18fb      	adds	r3, r7, r3
 8004d0a:	2203      	movs	r2, #3
 8004d0c:	701a      	strb	r2, [r3, #0]
          goto error;
 8004d0e:	e051      	b.n	8004db4 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2246      	movs	r2, #70	; 0x46
 8004d14:	5a9b      	ldrh	r3, [r3, r2]
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d1c7      	bne.n	8004cac <HAL_SPI_Receive+0x168>
 8004d1c:	e035      	b.n	8004d8a <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	2201      	movs	r2, #1
 8004d26:	4013      	ands	r3, r2
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d115      	bne.n	8004d58 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68da      	ldr	r2, [r3, #12]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d36:	b292      	uxth	r2, r2
 8004d38:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3e:	1c9a      	adds	r2, r3, #2
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2246      	movs	r2, #70	; 0x46
 8004d48:	5a9b      	ldrh	r3, [r3, r2]
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	b299      	uxth	r1, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2246      	movs	r2, #70	; 0x46
 8004d54:	5299      	strh	r1, [r3, r2]
 8004d56:	e012      	b.n	8004d7e <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d58:	f7fe fbdc 	bl	8003514 <HAL_GetTick>
 8004d5c:	0002      	movs	r2, r0
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	683a      	ldr	r2, [r7, #0]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d802      	bhi.n	8004d6e <HAL_SPI_Receive+0x22a>
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	d102      	bne.n	8004d74 <HAL_SPI_Receive+0x230>
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d104      	bne.n	8004d7e <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8004d74:	2317      	movs	r3, #23
 8004d76:	18fb      	adds	r3, r7, r3
 8004d78:	2203      	movs	r2, #3
 8004d7a:	701a      	strb	r2, [r3, #0]
          goto error;
 8004d7c:	e01a      	b.n	8004db4 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2246      	movs	r2, #70	; 0x46
 8004d82:	5a9b      	ldrh	r3, [r3, r2]
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1c9      	bne.n	8004d1e <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d8a:	693a      	ldr	r2, [r7, #16]
 8004d8c:	6839      	ldr	r1, [r7, #0]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	0018      	movs	r0, r3
 8004d92:	f000 fb25 	bl	80053e0 <SPI_EndRxTransaction>
 8004d96:	1e03      	subs	r3, r0, #0
 8004d98:	d002      	beq.n	8004da0 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d004      	beq.n	8004db2 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8004da8:	2317      	movs	r3, #23
 8004daa:	18fb      	adds	r3, r7, r3
 8004dac:	2201      	movs	r2, #1
 8004dae:	701a      	strb	r2, [r3, #0]
 8004db0:	e000      	b.n	8004db4 <HAL_SPI_Receive+0x270>
  }

error :
 8004db2:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	225d      	movs	r2, #93	; 0x5d
 8004db8:	2101      	movs	r1, #1
 8004dba:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	225c      	movs	r2, #92	; 0x5c
 8004dc0:	2100      	movs	r1, #0
 8004dc2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004dc4:	2317      	movs	r3, #23
 8004dc6:	18fb      	adds	r3, r7, r3
 8004dc8:	781b      	ldrb	r3, [r3, #0]
}
 8004dca:	0018      	movs	r0, r3
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	b007      	add	sp, #28
 8004dd0:	bd90      	pop	{r4, r7, pc}
 8004dd2:	46c0      	nop			; (mov r8, r8)
 8004dd4:	ffffefff 	.word	0xffffefff
 8004dd8:	ffffbfff 	.word	0xffffbfff

08004ddc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b08a      	sub	sp, #40	; 0x28
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
 8004de8:	001a      	movs	r2, r3
 8004dea:	1cbb      	adds	r3, r7, #2
 8004dec:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004dee:	2301      	movs	r3, #1
 8004df0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004df2:	2323      	movs	r3, #35	; 0x23
 8004df4:	18fb      	adds	r3, r7, r3
 8004df6:	2200      	movs	r2, #0
 8004df8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	225c      	movs	r2, #92	; 0x5c
 8004dfe:	5c9b      	ldrb	r3, [r3, r2]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d101      	bne.n	8004e08 <HAL_SPI_TransmitReceive+0x2c>
 8004e04:	2302      	movs	r3, #2
 8004e06:	e1b5      	b.n	8005174 <HAL_SPI_TransmitReceive+0x398>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	225c      	movs	r2, #92	; 0x5c
 8004e0c:	2101      	movs	r1, #1
 8004e0e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e10:	f7fe fb80 	bl	8003514 <HAL_GetTick>
 8004e14:	0003      	movs	r3, r0
 8004e16:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004e18:	201b      	movs	r0, #27
 8004e1a:	183b      	adds	r3, r7, r0
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	215d      	movs	r1, #93	; 0x5d
 8004e20:	5c52      	ldrb	r2, [r2, r1]
 8004e22:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004e2a:	2312      	movs	r3, #18
 8004e2c:	18fb      	adds	r3, r7, r3
 8004e2e:	1cba      	adds	r2, r7, #2
 8004e30:	8812      	ldrh	r2, [r2, #0]
 8004e32:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e34:	183b      	adds	r3, r7, r0
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d011      	beq.n	8004e60 <HAL_SPI_TransmitReceive+0x84>
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	2382      	movs	r3, #130	; 0x82
 8004e40:	005b      	lsls	r3, r3, #1
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d107      	bne.n	8004e56 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d103      	bne.n	8004e56 <HAL_SPI_TransmitReceive+0x7a>
 8004e4e:	183b      	adds	r3, r7, r0
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	2b04      	cmp	r3, #4
 8004e54:	d004      	beq.n	8004e60 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8004e56:	2323      	movs	r3, #35	; 0x23
 8004e58:	18fb      	adds	r3, r7, r3
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	701a      	strb	r2, [r3, #0]
    goto error;
 8004e5e:	e17e      	b.n	800515e <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d006      	beq.n	8004e74 <HAL_SPI_TransmitReceive+0x98>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d003      	beq.n	8004e74 <HAL_SPI_TransmitReceive+0x98>
 8004e6c:	1cbb      	adds	r3, r7, #2
 8004e6e:	881b      	ldrh	r3, [r3, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d104      	bne.n	8004e7e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8004e74:	2323      	movs	r3, #35	; 0x23
 8004e76:	18fb      	adds	r3, r7, r3
 8004e78:	2201      	movs	r2, #1
 8004e7a:	701a      	strb	r2, [r3, #0]
    goto error;
 8004e7c:	e16f      	b.n	800515e <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	225d      	movs	r2, #93	; 0x5d
 8004e82:	5c9b      	ldrb	r3, [r3, r2]
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b04      	cmp	r3, #4
 8004e88:	d003      	beq.n	8004e92 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	225d      	movs	r2, #93	; 0x5d
 8004e8e:	2105      	movs	r1, #5
 8004e90:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	1cba      	adds	r2, r7, #2
 8004ea2:	2146      	movs	r1, #70	; 0x46
 8004ea4:	8812      	ldrh	r2, [r2, #0]
 8004ea6:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	1cba      	adds	r2, r7, #2
 8004eac:	2144      	movs	r1, #68	; 0x44
 8004eae:	8812      	ldrh	r2, [r2, #0]
 8004eb0:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	68ba      	ldr	r2, [r7, #8]
 8004eb6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	1cba      	adds	r2, r7, #2
 8004ebc:	8812      	ldrh	r2, [r2, #0]
 8004ebe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	1cba      	adds	r2, r7, #2
 8004ec4:	8812      	ldrh	r2, [r2, #0]
 8004ec6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	68da      	ldr	r2, [r3, #12]
 8004ed8:	23e0      	movs	r3, #224	; 0xe0
 8004eda:	00db      	lsls	r3, r3, #3
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d908      	bls.n	8004ef2 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	685a      	ldr	r2, [r3, #4]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	49a4      	ldr	r1, [pc, #656]	; (800517c <HAL_SPI_TransmitReceive+0x3a0>)
 8004eec:	400a      	ands	r2, r1
 8004eee:	605a      	str	r2, [r3, #4]
 8004ef0:	e008      	b.n	8004f04 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	685a      	ldr	r2, [r3, #4]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2180      	movs	r1, #128	; 0x80
 8004efe:	0149      	lsls	r1, r1, #5
 8004f00:	430a      	orrs	r2, r1
 8004f02:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2240      	movs	r2, #64	; 0x40
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	2b40      	cmp	r3, #64	; 0x40
 8004f10:	d007      	beq.n	8004f22 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2140      	movs	r1, #64	; 0x40
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	68da      	ldr	r2, [r3, #12]
 8004f26:	23e0      	movs	r3, #224	; 0xe0
 8004f28:	00db      	lsls	r3, r3, #3
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d800      	bhi.n	8004f30 <HAL_SPI_TransmitReceive+0x154>
 8004f2e:	e07f      	b.n	8005030 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d005      	beq.n	8004f44 <HAL_SPI_TransmitReceive+0x168>
 8004f38:	2312      	movs	r3, #18
 8004f3a:	18fb      	adds	r3, r7, r3
 8004f3c:	881b      	ldrh	r3, [r3, #0]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d000      	beq.n	8004f44 <HAL_SPI_TransmitReceive+0x168>
 8004f42:	e069      	b.n	8005018 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f48:	881a      	ldrh	r2, [r3, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f54:	1c9a      	adds	r2, r3, #2
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	3b01      	subs	r3, #1
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f68:	e056      	b.n	8005018 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	2202      	movs	r2, #2
 8004f72:	4013      	ands	r3, r2
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d11b      	bne.n	8004fb0 <HAL_SPI_TransmitReceive+0x1d4>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d016      	beq.n	8004fb0 <HAL_SPI_TransmitReceive+0x1d4>
 8004f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d113      	bne.n	8004fb0 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8c:	881a      	ldrh	r2, [r3, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f98:	1c9a      	adds	r2, r3, #2
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004fac:	2300      	movs	r3, #0
 8004fae:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	4013      	ands	r3, r2
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d11c      	bne.n	8004ff8 <HAL_SPI_TransmitReceive+0x21c>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2246      	movs	r2, #70	; 0x46
 8004fc2:	5a9b      	ldrh	r3, [r3, r2]
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d016      	beq.n	8004ff8 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68da      	ldr	r2, [r3, #12]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd4:	b292      	uxth	r2, r2
 8004fd6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fdc:	1c9a      	adds	r2, r3, #2
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2246      	movs	r2, #70	; 0x46
 8004fe6:	5a9b      	ldrh	r3, [r3, r2]
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	3b01      	subs	r3, #1
 8004fec:	b299      	uxth	r1, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2246      	movs	r2, #70	; 0x46
 8004ff2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ff8:	f7fe fa8c 	bl	8003514 <HAL_GetTick>
 8004ffc:	0002      	movs	r2, r0
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005004:	429a      	cmp	r2, r3
 8005006:	d807      	bhi.n	8005018 <HAL_SPI_TransmitReceive+0x23c>
 8005008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500a:	3301      	adds	r3, #1
 800500c:	d004      	beq.n	8005018 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800500e:	2323      	movs	r3, #35	; 0x23
 8005010:	18fb      	adds	r3, r7, r3
 8005012:	2203      	movs	r2, #3
 8005014:	701a      	strb	r2, [r3, #0]
        goto error;
 8005016:	e0a2      	b.n	800515e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800501c:	b29b      	uxth	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1a3      	bne.n	8004f6a <HAL_SPI_TransmitReceive+0x18e>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2246      	movs	r2, #70	; 0x46
 8005026:	5a9b      	ldrh	r3, [r3, r2]
 8005028:	b29b      	uxth	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d19d      	bne.n	8004f6a <HAL_SPI_TransmitReceive+0x18e>
 800502e:	e085      	b.n	800513c <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d005      	beq.n	8005044 <HAL_SPI_TransmitReceive+0x268>
 8005038:	2312      	movs	r3, #18
 800503a:	18fb      	adds	r3, r7, r3
 800503c:	881b      	ldrh	r3, [r3, #0]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d000      	beq.n	8005044 <HAL_SPI_TransmitReceive+0x268>
 8005042:	e070      	b.n	8005126 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	330c      	adds	r3, #12
 800504e:	7812      	ldrb	r2, [r2, #0]
 8005050:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005056:	1c5a      	adds	r2, r3, #1
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005060:	b29b      	uxth	r3, r3
 8005062:	3b01      	subs	r3, #1
 8005064:	b29a      	uxth	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800506a:	e05c      	b.n	8005126 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	2202      	movs	r2, #2
 8005074:	4013      	ands	r3, r2
 8005076:	2b02      	cmp	r3, #2
 8005078:	d11c      	bne.n	80050b4 <HAL_SPI_TransmitReceive+0x2d8>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800507e:	b29b      	uxth	r3, r3
 8005080:	2b00      	cmp	r3, #0
 8005082:	d017      	beq.n	80050b4 <HAL_SPI_TransmitReceive+0x2d8>
 8005084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005086:	2b01      	cmp	r3, #1
 8005088:	d114      	bne.n	80050b4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	330c      	adds	r3, #12
 8005094:	7812      	ldrb	r2, [r2, #0]
 8005096:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509c:	1c5a      	adds	r2, r3, #1
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	3b01      	subs	r3, #1
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050b0:	2300      	movs	r3, #0
 80050b2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	2201      	movs	r2, #1
 80050bc:	4013      	ands	r3, r2
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d11e      	bne.n	8005100 <HAL_SPI_TransmitReceive+0x324>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2246      	movs	r2, #70	; 0x46
 80050c6:	5a9b      	ldrh	r3, [r3, r2]
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d018      	beq.n	8005100 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	330c      	adds	r3, #12
 80050d4:	001a      	movs	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050da:	7812      	ldrb	r2, [r2, #0]
 80050dc:	b2d2      	uxtb	r2, r2
 80050de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e4:	1c5a      	adds	r2, r3, #1
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2246      	movs	r2, #70	; 0x46
 80050ee:	5a9b      	ldrh	r3, [r3, r2]
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	3b01      	subs	r3, #1
 80050f4:	b299      	uxth	r1, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2246      	movs	r2, #70	; 0x46
 80050fa:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050fc:	2301      	movs	r3, #1
 80050fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005100:	f7fe fa08 	bl	8003514 <HAL_GetTick>
 8005104:	0002      	movs	r2, r0
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800510c:	429a      	cmp	r2, r3
 800510e:	d802      	bhi.n	8005116 <HAL_SPI_TransmitReceive+0x33a>
 8005110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005112:	3301      	adds	r3, #1
 8005114:	d102      	bne.n	800511c <HAL_SPI_TransmitReceive+0x340>
 8005116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005118:	2b00      	cmp	r3, #0
 800511a:	d104      	bne.n	8005126 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 800511c:	2323      	movs	r3, #35	; 0x23
 800511e:	18fb      	adds	r3, r7, r3
 8005120:	2203      	movs	r2, #3
 8005122:	701a      	strb	r2, [r3, #0]
        goto error;
 8005124:	e01b      	b.n	800515e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800512a:	b29b      	uxth	r3, r3
 800512c:	2b00      	cmp	r3, #0
 800512e:	d19d      	bne.n	800506c <HAL_SPI_TransmitReceive+0x290>
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2246      	movs	r2, #70	; 0x46
 8005134:	5a9b      	ldrh	r3, [r3, r2]
 8005136:	b29b      	uxth	r3, r3
 8005138:	2b00      	cmp	r3, #0
 800513a:	d197      	bne.n	800506c <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800513c:	69fa      	ldr	r2, [r7, #28]
 800513e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	0018      	movs	r0, r3
 8005144:	f000 f9aa 	bl	800549c <SPI_EndRxTxTransaction>
 8005148:	1e03      	subs	r3, r0, #0
 800514a:	d007      	beq.n	800515c <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 800514c:	2323      	movs	r3, #35	; 0x23
 800514e:	18fb      	adds	r3, r7, r3
 8005150:	2201      	movs	r2, #1
 8005152:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2220      	movs	r2, #32
 8005158:	661a      	str	r2, [r3, #96]	; 0x60
 800515a:	e000      	b.n	800515e <HAL_SPI_TransmitReceive+0x382>
  }

error :
 800515c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	225d      	movs	r2, #93	; 0x5d
 8005162:	2101      	movs	r1, #1
 8005164:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	225c      	movs	r2, #92	; 0x5c
 800516a:	2100      	movs	r1, #0
 800516c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800516e:	2323      	movs	r3, #35	; 0x23
 8005170:	18fb      	adds	r3, r7, r3
 8005172:	781b      	ldrb	r3, [r3, #0]
}
 8005174:	0018      	movs	r0, r3
 8005176:	46bd      	mov	sp, r7
 8005178:	b00a      	add	sp, #40	; 0x28
 800517a:	bd80      	pop	{r7, pc}
 800517c:	ffffefff 	.word	0xffffefff

08005180 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b088      	sub	sp, #32
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	603b      	str	r3, [r7, #0]
 800518c:	1dfb      	adds	r3, r7, #7
 800518e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005190:	f7fe f9c0 	bl	8003514 <HAL_GetTick>
 8005194:	0002      	movs	r2, r0
 8005196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005198:	1a9b      	subs	r3, r3, r2
 800519a:	683a      	ldr	r2, [r7, #0]
 800519c:	18d3      	adds	r3, r2, r3
 800519e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80051a0:	f7fe f9b8 	bl	8003514 <HAL_GetTick>
 80051a4:	0003      	movs	r3, r0
 80051a6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80051a8:	4b3a      	ldr	r3, [pc, #232]	; (8005294 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	015b      	lsls	r3, r3, #5
 80051ae:	0d1b      	lsrs	r3, r3, #20
 80051b0:	69fa      	ldr	r2, [r7, #28]
 80051b2:	4353      	muls	r3, r2
 80051b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051b6:	e058      	b.n	800526a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	3301      	adds	r3, #1
 80051bc:	d055      	beq.n	800526a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051be:	f7fe f9a9 	bl	8003514 <HAL_GetTick>
 80051c2:	0002      	movs	r2, r0
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	69fa      	ldr	r2, [r7, #28]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d902      	bls.n	80051d4 <SPI_WaitFlagStateUntilTimeout+0x54>
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d142      	bne.n	800525a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	21e0      	movs	r1, #224	; 0xe0
 80051e0:	438a      	bics	r2, r1
 80051e2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	685a      	ldr	r2, [r3, #4]
 80051e8:	2382      	movs	r3, #130	; 0x82
 80051ea:	005b      	lsls	r3, r3, #1
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d113      	bne.n	8005218 <SPI_WaitFlagStateUntilTimeout+0x98>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	689a      	ldr	r2, [r3, #8]
 80051f4:	2380      	movs	r3, #128	; 0x80
 80051f6:	021b      	lsls	r3, r3, #8
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d005      	beq.n	8005208 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	689a      	ldr	r2, [r3, #8]
 8005200:	2380      	movs	r3, #128	; 0x80
 8005202:	00db      	lsls	r3, r3, #3
 8005204:	429a      	cmp	r2, r3
 8005206:	d107      	bne.n	8005218 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2140      	movs	r1, #64	; 0x40
 8005214:	438a      	bics	r2, r1
 8005216:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800521c:	2380      	movs	r3, #128	; 0x80
 800521e:	019b      	lsls	r3, r3, #6
 8005220:	429a      	cmp	r2, r3
 8005222:	d110      	bne.n	8005246 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	491a      	ldr	r1, [pc, #104]	; (8005298 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005230:	400a      	ands	r2, r1
 8005232:	601a      	str	r2, [r3, #0]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2180      	movs	r1, #128	; 0x80
 8005240:	0189      	lsls	r1, r1, #6
 8005242:	430a      	orrs	r2, r1
 8005244:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	225d      	movs	r2, #93	; 0x5d
 800524a:	2101      	movs	r1, #1
 800524c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	225c      	movs	r2, #92	; 0x5c
 8005252:	2100      	movs	r1, #0
 8005254:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e017      	b.n	800528a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d101      	bne.n	8005264 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	3b01      	subs	r3, #1
 8005268:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	4013      	ands	r3, r2
 8005274:	68ba      	ldr	r2, [r7, #8]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	425a      	negs	r2, r3
 800527a:	4153      	adcs	r3, r2
 800527c:	b2db      	uxtb	r3, r3
 800527e:	001a      	movs	r2, r3
 8005280:	1dfb      	adds	r3, r7, #7
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	429a      	cmp	r2, r3
 8005286:	d197      	bne.n	80051b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	0018      	movs	r0, r3
 800528c:	46bd      	mov	sp, r7
 800528e:	b008      	add	sp, #32
 8005290:	bd80      	pop	{r7, pc}
 8005292:	46c0      	nop			; (mov r8, r8)
 8005294:	20000000 	.word	0x20000000
 8005298:	ffffdfff 	.word	0xffffdfff

0800529c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b08a      	sub	sp, #40	; 0x28
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
 80052a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80052aa:	2317      	movs	r3, #23
 80052ac:	18fb      	adds	r3, r7, r3
 80052ae:	2200      	movs	r2, #0
 80052b0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80052b2:	f7fe f92f 	bl	8003514 <HAL_GetTick>
 80052b6:	0002      	movs	r2, r0
 80052b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ba:	1a9b      	subs	r3, r3, r2
 80052bc:	683a      	ldr	r2, [r7, #0]
 80052be:	18d3      	adds	r3, r2, r3
 80052c0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80052c2:	f7fe f927 	bl	8003514 <HAL_GetTick>
 80052c6:	0003      	movs	r3, r0
 80052c8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	330c      	adds	r3, #12
 80052d0:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80052d2:	4b41      	ldr	r3, [pc, #260]	; (80053d8 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	0013      	movs	r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	189b      	adds	r3, r3, r2
 80052dc:	00da      	lsls	r2, r3, #3
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	0d1b      	lsrs	r3, r3, #20
 80052e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052e4:	4353      	muls	r3, r2
 80052e6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80052e8:	e068      	b.n	80053bc <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80052ea:	68ba      	ldr	r2, [r7, #8]
 80052ec:	23c0      	movs	r3, #192	; 0xc0
 80052ee:	00db      	lsls	r3, r3, #3
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d10a      	bne.n	800530a <SPI_WaitFifoStateUntilTimeout+0x6e>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d107      	bne.n	800530a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	b2da      	uxtb	r2, r3
 8005300:	2117      	movs	r1, #23
 8005302:	187b      	adds	r3, r7, r1
 8005304:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005306:	187b      	adds	r3, r7, r1
 8005308:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	3301      	adds	r3, #1
 800530e:	d055      	beq.n	80053bc <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005310:	f7fe f900 	bl	8003514 <HAL_GetTick>
 8005314:	0002      	movs	r2, r0
 8005316:	6a3b      	ldr	r3, [r7, #32]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800531c:	429a      	cmp	r2, r3
 800531e:	d902      	bls.n	8005326 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8005320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005322:	2b00      	cmp	r3, #0
 8005324:	d142      	bne.n	80053ac <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	21e0      	movs	r1, #224	; 0xe0
 8005332:	438a      	bics	r2, r1
 8005334:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	685a      	ldr	r2, [r3, #4]
 800533a:	2382      	movs	r3, #130	; 0x82
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	429a      	cmp	r2, r3
 8005340:	d113      	bne.n	800536a <SPI_WaitFifoStateUntilTimeout+0xce>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	689a      	ldr	r2, [r3, #8]
 8005346:	2380      	movs	r3, #128	; 0x80
 8005348:	021b      	lsls	r3, r3, #8
 800534a:	429a      	cmp	r2, r3
 800534c:	d005      	beq.n	800535a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	689a      	ldr	r2, [r3, #8]
 8005352:	2380      	movs	r3, #128	; 0x80
 8005354:	00db      	lsls	r3, r3, #3
 8005356:	429a      	cmp	r2, r3
 8005358:	d107      	bne.n	800536a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2140      	movs	r1, #64	; 0x40
 8005366:	438a      	bics	r2, r1
 8005368:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800536e:	2380      	movs	r3, #128	; 0x80
 8005370:	019b      	lsls	r3, r3, #6
 8005372:	429a      	cmp	r2, r3
 8005374:	d110      	bne.n	8005398 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4916      	ldr	r1, [pc, #88]	; (80053dc <SPI_WaitFifoStateUntilTimeout+0x140>)
 8005382:	400a      	ands	r2, r1
 8005384:	601a      	str	r2, [r3, #0]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2180      	movs	r1, #128	; 0x80
 8005392:	0189      	lsls	r1, r1, #6
 8005394:	430a      	orrs	r2, r1
 8005396:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	225d      	movs	r2, #93	; 0x5d
 800539c:	2101      	movs	r1, #1
 800539e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	225c      	movs	r2, #92	; 0x5c
 80053a4:	2100      	movs	r1, #0
 80053a6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e010      	b.n	80053ce <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d101      	bne.n	80053b6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80053b2:	2300      	movs	r3, #0
 80053b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	3b01      	subs	r3, #1
 80053ba:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	4013      	ands	r3, r2
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d18e      	bne.n	80052ea <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	0018      	movs	r0, r3
 80053d0:	46bd      	mov	sp, r7
 80053d2:	b00a      	add	sp, #40	; 0x28
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	46c0      	nop			; (mov r8, r8)
 80053d8:	20000000 	.word	0x20000000
 80053dc:	ffffdfff 	.word	0xffffdfff

080053e0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af02      	add	r7, sp, #8
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	2382      	movs	r3, #130	; 0x82
 80053f2:	005b      	lsls	r3, r3, #1
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d113      	bne.n	8005420 <SPI_EndRxTransaction+0x40>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	689a      	ldr	r2, [r3, #8]
 80053fc:	2380      	movs	r3, #128	; 0x80
 80053fe:	021b      	lsls	r3, r3, #8
 8005400:	429a      	cmp	r2, r3
 8005402:	d005      	beq.n	8005410 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	689a      	ldr	r2, [r3, #8]
 8005408:	2380      	movs	r3, #128	; 0x80
 800540a:	00db      	lsls	r3, r3, #3
 800540c:	429a      	cmp	r2, r3
 800540e:	d107      	bne.n	8005420 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2140      	movs	r1, #64	; 0x40
 800541c:	438a      	bics	r2, r1
 800541e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	68f8      	ldr	r0, [r7, #12]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	9300      	str	r3, [sp, #0]
 8005428:	0013      	movs	r3, r2
 800542a:	2200      	movs	r2, #0
 800542c:	2180      	movs	r1, #128	; 0x80
 800542e:	f7ff fea7 	bl	8005180 <SPI_WaitFlagStateUntilTimeout>
 8005432:	1e03      	subs	r3, r0, #0
 8005434:	d007      	beq.n	8005446 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800543a:	2220      	movs	r2, #32
 800543c:	431a      	orrs	r2, r3
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e026      	b.n	8005494 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	685a      	ldr	r2, [r3, #4]
 800544a:	2382      	movs	r3, #130	; 0x82
 800544c:	005b      	lsls	r3, r3, #1
 800544e:	429a      	cmp	r2, r3
 8005450:	d11f      	bne.n	8005492 <SPI_EndRxTransaction+0xb2>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	689a      	ldr	r2, [r3, #8]
 8005456:	2380      	movs	r3, #128	; 0x80
 8005458:	021b      	lsls	r3, r3, #8
 800545a:	429a      	cmp	r2, r3
 800545c:	d005      	beq.n	800546a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	689a      	ldr	r2, [r3, #8]
 8005462:	2380      	movs	r3, #128	; 0x80
 8005464:	00db      	lsls	r3, r3, #3
 8005466:	429a      	cmp	r2, r3
 8005468:	d113      	bne.n	8005492 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	23c0      	movs	r3, #192	; 0xc0
 800546e:	00d9      	lsls	r1, r3, #3
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	9300      	str	r3, [sp, #0]
 8005476:	0013      	movs	r3, r2
 8005478:	2200      	movs	r2, #0
 800547a:	f7ff ff0f 	bl	800529c <SPI_WaitFifoStateUntilTimeout>
 800547e:	1e03      	subs	r3, r0, #0
 8005480:	d007      	beq.n	8005492 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005486:	2220      	movs	r2, #32
 8005488:	431a      	orrs	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e000      	b.n	8005494 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	0018      	movs	r0, r3
 8005496:	46bd      	mov	sp, r7
 8005498:	b004      	add	sp, #16
 800549a:	bd80      	pop	{r7, pc}

0800549c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b086      	sub	sp, #24
 80054a0:	af02      	add	r7, sp, #8
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80054a8:	68ba      	ldr	r2, [r7, #8]
 80054aa:	23c0      	movs	r3, #192	; 0xc0
 80054ac:	0159      	lsls	r1, r3, #5
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	9300      	str	r3, [sp, #0]
 80054b4:	0013      	movs	r3, r2
 80054b6:	2200      	movs	r2, #0
 80054b8:	f7ff fef0 	bl	800529c <SPI_WaitFifoStateUntilTimeout>
 80054bc:	1e03      	subs	r3, r0, #0
 80054be:	d007      	beq.n	80054d0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054c4:	2220      	movs	r2, #32
 80054c6:	431a      	orrs	r2, r3
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e027      	b.n	8005520 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054d0:	68ba      	ldr	r2, [r7, #8]
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	9300      	str	r3, [sp, #0]
 80054d8:	0013      	movs	r3, r2
 80054da:	2200      	movs	r2, #0
 80054dc:	2180      	movs	r1, #128	; 0x80
 80054de:	f7ff fe4f 	bl	8005180 <SPI_WaitFlagStateUntilTimeout>
 80054e2:	1e03      	subs	r3, r0, #0
 80054e4:	d007      	beq.n	80054f6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054ea:	2220      	movs	r2, #32
 80054ec:	431a      	orrs	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e014      	b.n	8005520 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80054f6:	68ba      	ldr	r2, [r7, #8]
 80054f8:	23c0      	movs	r3, #192	; 0xc0
 80054fa:	00d9      	lsls	r1, r3, #3
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	0013      	movs	r3, r2
 8005504:	2200      	movs	r2, #0
 8005506:	f7ff fec9 	bl	800529c <SPI_WaitFifoStateUntilTimeout>
 800550a:	1e03      	subs	r3, r0, #0
 800550c:	d007      	beq.n	800551e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005512:	2220      	movs	r2, #32
 8005514:	431a      	orrs	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e000      	b.n	8005520 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	0018      	movs	r0, r3
 8005522:	46bd      	mov	sp, r7
 8005524:	b004      	add	sp, #16
 8005526:	bd80      	pop	{r7, pc}

08005528 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d101      	bne.n	800553a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e046      	b.n	80055c8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2288      	movs	r2, #136	; 0x88
 800553e:	589b      	ldr	r3, [r3, r2]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d107      	bne.n	8005554 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2284      	movs	r2, #132	; 0x84
 8005548:	2100      	movs	r1, #0
 800554a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	0018      	movs	r0, r3
 8005550:	f7fd feda 	bl	8003308 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2288      	movs	r2, #136	; 0x88
 8005558:	2124      	movs	r1, #36	; 0x24
 800555a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2101      	movs	r1, #1
 8005568:	438a      	bics	r2, r1
 800556a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	0018      	movs	r0, r3
 8005570:	f000 f8cc 	bl	800570c <UART_SetConfig>
 8005574:	0003      	movs	r3, r0
 8005576:	2b01      	cmp	r3, #1
 8005578:	d101      	bne.n	800557e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e024      	b.n	80055c8 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	0018      	movs	r0, r3
 800558a:	f000 fb7d 	bl	8005c88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	685a      	ldr	r2, [r3, #4]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	490d      	ldr	r1, [pc, #52]	; (80055d0 <HAL_UART_Init+0xa8>)
 800559a:	400a      	ands	r2, r1
 800559c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	689a      	ldr	r2, [r3, #8]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	212a      	movs	r1, #42	; 0x2a
 80055aa:	438a      	bics	r2, r1
 80055ac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2101      	movs	r1, #1
 80055ba:	430a      	orrs	r2, r1
 80055bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	0018      	movs	r0, r3
 80055c2:	f000 fc15 	bl	8005df0 <UART_CheckIdleState>
 80055c6:	0003      	movs	r3, r0
}
 80055c8:	0018      	movs	r0, r3
 80055ca:	46bd      	mov	sp, r7
 80055cc:	b002      	add	sp, #8
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	ffffb7ff 	.word	0xffffb7ff

080055d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b08a      	sub	sp, #40	; 0x28
 80055d8:	af02      	add	r7, sp, #8
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	603b      	str	r3, [r7, #0]
 80055e0:	1dbb      	adds	r3, r7, #6
 80055e2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2288      	movs	r2, #136	; 0x88
 80055e8:	589b      	ldr	r3, [r3, r2]
 80055ea:	2b20      	cmp	r3, #32
 80055ec:	d000      	beq.n	80055f0 <HAL_UART_Transmit+0x1c>
 80055ee:	e088      	b.n	8005702 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d003      	beq.n	80055fe <HAL_UART_Transmit+0x2a>
 80055f6:	1dbb      	adds	r3, r7, #6
 80055f8:	881b      	ldrh	r3, [r3, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d101      	bne.n	8005602 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e080      	b.n	8005704 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	689a      	ldr	r2, [r3, #8]
 8005606:	2380      	movs	r3, #128	; 0x80
 8005608:	015b      	lsls	r3, r3, #5
 800560a:	429a      	cmp	r2, r3
 800560c:	d109      	bne.n	8005622 <HAL_UART_Transmit+0x4e>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d105      	bne.n	8005622 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	2201      	movs	r2, #1
 800561a:	4013      	ands	r3, r2
 800561c:	d001      	beq.n	8005622 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e070      	b.n	8005704 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2290      	movs	r2, #144	; 0x90
 8005626:	2100      	movs	r1, #0
 8005628:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2288      	movs	r2, #136	; 0x88
 800562e:	2121      	movs	r1, #33	; 0x21
 8005630:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005632:	f7fd ff6f 	bl	8003514 <HAL_GetTick>
 8005636:	0003      	movs	r3, r0
 8005638:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	1dba      	adds	r2, r7, #6
 800563e:	2154      	movs	r1, #84	; 0x54
 8005640:	8812      	ldrh	r2, [r2, #0]
 8005642:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	1dba      	adds	r2, r7, #6
 8005648:	2156      	movs	r1, #86	; 0x56
 800564a:	8812      	ldrh	r2, [r2, #0]
 800564c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	689a      	ldr	r2, [r3, #8]
 8005652:	2380      	movs	r3, #128	; 0x80
 8005654:	015b      	lsls	r3, r3, #5
 8005656:	429a      	cmp	r2, r3
 8005658:	d108      	bne.n	800566c <HAL_UART_Transmit+0x98>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d104      	bne.n	800566c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8005662:	2300      	movs	r3, #0
 8005664:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	61bb      	str	r3, [r7, #24]
 800566a:	e003      	b.n	8005674 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005670:	2300      	movs	r3, #0
 8005672:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005674:	e02c      	b.n	80056d0 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	9300      	str	r3, [sp, #0]
 800567e:	0013      	movs	r3, r2
 8005680:	2200      	movs	r2, #0
 8005682:	2180      	movs	r1, #128	; 0x80
 8005684:	f000 fc02 	bl	8005e8c <UART_WaitOnFlagUntilTimeout>
 8005688:	1e03      	subs	r3, r0, #0
 800568a:	d001      	beq.n	8005690 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e039      	b.n	8005704 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d10b      	bne.n	80056ae <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	881b      	ldrh	r3, [r3, #0]
 800569a:	001a      	movs	r2, r3
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	05d2      	lsls	r2, r2, #23
 80056a2:	0dd2      	lsrs	r2, r2, #23
 80056a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	3302      	adds	r3, #2
 80056aa:	61bb      	str	r3, [r7, #24]
 80056ac:	e007      	b.n	80056be <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	781a      	ldrb	r2, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	3301      	adds	r3, #1
 80056bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2256      	movs	r2, #86	; 0x56
 80056c2:	5a9b      	ldrh	r3, [r3, r2]
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	3b01      	subs	r3, #1
 80056c8:	b299      	uxth	r1, r3
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2256      	movs	r2, #86	; 0x56
 80056ce:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2256      	movs	r2, #86	; 0x56
 80056d4:	5a9b      	ldrh	r3, [r3, r2]
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1cc      	bne.n	8005676 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	9300      	str	r3, [sp, #0]
 80056e4:	0013      	movs	r3, r2
 80056e6:	2200      	movs	r2, #0
 80056e8:	2140      	movs	r1, #64	; 0x40
 80056ea:	f000 fbcf 	bl	8005e8c <UART_WaitOnFlagUntilTimeout>
 80056ee:	1e03      	subs	r3, r0, #0
 80056f0:	d001      	beq.n	80056f6 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e006      	b.n	8005704 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2288      	movs	r2, #136	; 0x88
 80056fa:	2120      	movs	r1, #32
 80056fc:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80056fe:	2300      	movs	r3, #0
 8005700:	e000      	b.n	8005704 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8005702:	2302      	movs	r3, #2
  }
}
 8005704:	0018      	movs	r0, r3
 8005706:	46bd      	mov	sp, r7
 8005708:	b008      	add	sp, #32
 800570a:	bd80      	pop	{r7, pc}

0800570c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800570c:	b5b0      	push	{r4, r5, r7, lr}
 800570e:	b090      	sub	sp, #64	; 0x40
 8005710:	af00      	add	r7, sp, #0
 8005712:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005714:	231a      	movs	r3, #26
 8005716:	2220      	movs	r2, #32
 8005718:	189b      	adds	r3, r3, r2
 800571a:	19db      	adds	r3, r3, r7
 800571c:	2200      	movs	r2, #0
 800571e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005722:	689a      	ldr	r2, [r3, #8]
 8005724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	431a      	orrs	r2, r3
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	431a      	orrs	r2, r3
 8005730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005732:	69db      	ldr	r3, [r3, #28]
 8005734:	4313      	orrs	r3, r2
 8005736:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4aaf      	ldr	r2, [pc, #700]	; (80059fc <UART_SetConfig+0x2f0>)
 8005740:	4013      	ands	r3, r2
 8005742:	0019      	movs	r1, r3
 8005744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800574a:	430b      	orrs	r3, r1
 800574c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800574e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	4aaa      	ldr	r2, [pc, #680]	; (8005a00 <UART_SetConfig+0x2f4>)
 8005756:	4013      	ands	r3, r2
 8005758:	0018      	movs	r0, r3
 800575a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575c:	68d9      	ldr	r1, [r3, #12]
 800575e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	0003      	movs	r3, r0
 8005764:	430b      	orrs	r3, r1
 8005766:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800576e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4aa4      	ldr	r2, [pc, #656]	; (8005a04 <UART_SetConfig+0x2f8>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d004      	beq.n	8005782 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577a:	6a1b      	ldr	r3, [r3, #32]
 800577c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800577e:	4313      	orrs	r3, r2
 8005780:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	4a9f      	ldr	r2, [pc, #636]	; (8005a08 <UART_SetConfig+0x2fc>)
 800578a:	4013      	ands	r3, r2
 800578c:	0019      	movs	r1, r3
 800578e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005794:	430b      	orrs	r3, r1
 8005796:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579e:	220f      	movs	r2, #15
 80057a0:	4393      	bics	r3, r2
 80057a2:	0018      	movs	r0, r3
 80057a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80057a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	0003      	movs	r3, r0
 80057ae:	430b      	orrs	r3, r1
 80057b0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a95      	ldr	r2, [pc, #596]	; (8005a0c <UART_SetConfig+0x300>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d131      	bne.n	8005820 <UART_SetConfig+0x114>
 80057bc:	4b94      	ldr	r3, [pc, #592]	; (8005a10 <UART_SetConfig+0x304>)
 80057be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c0:	2203      	movs	r2, #3
 80057c2:	4013      	ands	r3, r2
 80057c4:	2b03      	cmp	r3, #3
 80057c6:	d01d      	beq.n	8005804 <UART_SetConfig+0xf8>
 80057c8:	d823      	bhi.n	8005812 <UART_SetConfig+0x106>
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d00c      	beq.n	80057e8 <UART_SetConfig+0xdc>
 80057ce:	d820      	bhi.n	8005812 <UART_SetConfig+0x106>
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d002      	beq.n	80057da <UART_SetConfig+0xce>
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d00e      	beq.n	80057f6 <UART_SetConfig+0xea>
 80057d8:	e01b      	b.n	8005812 <UART_SetConfig+0x106>
 80057da:	231b      	movs	r3, #27
 80057dc:	2220      	movs	r2, #32
 80057de:	189b      	adds	r3, r3, r2
 80057e0:	19db      	adds	r3, r3, r7
 80057e2:	2200      	movs	r2, #0
 80057e4:	701a      	strb	r2, [r3, #0]
 80057e6:	e0b4      	b.n	8005952 <UART_SetConfig+0x246>
 80057e8:	231b      	movs	r3, #27
 80057ea:	2220      	movs	r2, #32
 80057ec:	189b      	adds	r3, r3, r2
 80057ee:	19db      	adds	r3, r3, r7
 80057f0:	2202      	movs	r2, #2
 80057f2:	701a      	strb	r2, [r3, #0]
 80057f4:	e0ad      	b.n	8005952 <UART_SetConfig+0x246>
 80057f6:	231b      	movs	r3, #27
 80057f8:	2220      	movs	r2, #32
 80057fa:	189b      	adds	r3, r3, r2
 80057fc:	19db      	adds	r3, r3, r7
 80057fe:	2204      	movs	r2, #4
 8005800:	701a      	strb	r2, [r3, #0]
 8005802:	e0a6      	b.n	8005952 <UART_SetConfig+0x246>
 8005804:	231b      	movs	r3, #27
 8005806:	2220      	movs	r2, #32
 8005808:	189b      	adds	r3, r3, r2
 800580a:	19db      	adds	r3, r3, r7
 800580c:	2208      	movs	r2, #8
 800580e:	701a      	strb	r2, [r3, #0]
 8005810:	e09f      	b.n	8005952 <UART_SetConfig+0x246>
 8005812:	231b      	movs	r3, #27
 8005814:	2220      	movs	r2, #32
 8005816:	189b      	adds	r3, r3, r2
 8005818:	19db      	adds	r3, r3, r7
 800581a:	2210      	movs	r2, #16
 800581c:	701a      	strb	r2, [r3, #0]
 800581e:	e098      	b.n	8005952 <UART_SetConfig+0x246>
 8005820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a7b      	ldr	r2, [pc, #492]	; (8005a14 <UART_SetConfig+0x308>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d131      	bne.n	800588e <UART_SetConfig+0x182>
 800582a:	4b79      	ldr	r3, [pc, #484]	; (8005a10 <UART_SetConfig+0x304>)
 800582c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800582e:	220c      	movs	r2, #12
 8005830:	4013      	ands	r3, r2
 8005832:	2b0c      	cmp	r3, #12
 8005834:	d01d      	beq.n	8005872 <UART_SetConfig+0x166>
 8005836:	d823      	bhi.n	8005880 <UART_SetConfig+0x174>
 8005838:	2b08      	cmp	r3, #8
 800583a:	d00c      	beq.n	8005856 <UART_SetConfig+0x14a>
 800583c:	d820      	bhi.n	8005880 <UART_SetConfig+0x174>
 800583e:	2b00      	cmp	r3, #0
 8005840:	d002      	beq.n	8005848 <UART_SetConfig+0x13c>
 8005842:	2b04      	cmp	r3, #4
 8005844:	d00e      	beq.n	8005864 <UART_SetConfig+0x158>
 8005846:	e01b      	b.n	8005880 <UART_SetConfig+0x174>
 8005848:	231b      	movs	r3, #27
 800584a:	2220      	movs	r2, #32
 800584c:	189b      	adds	r3, r3, r2
 800584e:	19db      	adds	r3, r3, r7
 8005850:	2200      	movs	r2, #0
 8005852:	701a      	strb	r2, [r3, #0]
 8005854:	e07d      	b.n	8005952 <UART_SetConfig+0x246>
 8005856:	231b      	movs	r3, #27
 8005858:	2220      	movs	r2, #32
 800585a:	189b      	adds	r3, r3, r2
 800585c:	19db      	adds	r3, r3, r7
 800585e:	2202      	movs	r2, #2
 8005860:	701a      	strb	r2, [r3, #0]
 8005862:	e076      	b.n	8005952 <UART_SetConfig+0x246>
 8005864:	231b      	movs	r3, #27
 8005866:	2220      	movs	r2, #32
 8005868:	189b      	adds	r3, r3, r2
 800586a:	19db      	adds	r3, r3, r7
 800586c:	2204      	movs	r2, #4
 800586e:	701a      	strb	r2, [r3, #0]
 8005870:	e06f      	b.n	8005952 <UART_SetConfig+0x246>
 8005872:	231b      	movs	r3, #27
 8005874:	2220      	movs	r2, #32
 8005876:	189b      	adds	r3, r3, r2
 8005878:	19db      	adds	r3, r3, r7
 800587a:	2208      	movs	r2, #8
 800587c:	701a      	strb	r2, [r3, #0]
 800587e:	e068      	b.n	8005952 <UART_SetConfig+0x246>
 8005880:	231b      	movs	r3, #27
 8005882:	2220      	movs	r2, #32
 8005884:	189b      	adds	r3, r3, r2
 8005886:	19db      	adds	r3, r3, r7
 8005888:	2210      	movs	r2, #16
 800588a:	701a      	strb	r2, [r3, #0]
 800588c:	e061      	b.n	8005952 <UART_SetConfig+0x246>
 800588e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a61      	ldr	r2, [pc, #388]	; (8005a18 <UART_SetConfig+0x30c>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d106      	bne.n	80058a6 <UART_SetConfig+0x19a>
 8005898:	231b      	movs	r3, #27
 800589a:	2220      	movs	r2, #32
 800589c:	189b      	adds	r3, r3, r2
 800589e:	19db      	adds	r3, r3, r7
 80058a0:	2200      	movs	r2, #0
 80058a2:	701a      	strb	r2, [r3, #0]
 80058a4:	e055      	b.n	8005952 <UART_SetConfig+0x246>
 80058a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a5c      	ldr	r2, [pc, #368]	; (8005a1c <UART_SetConfig+0x310>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d106      	bne.n	80058be <UART_SetConfig+0x1b2>
 80058b0:	231b      	movs	r3, #27
 80058b2:	2220      	movs	r2, #32
 80058b4:	189b      	adds	r3, r3, r2
 80058b6:	19db      	adds	r3, r3, r7
 80058b8:	2200      	movs	r2, #0
 80058ba:	701a      	strb	r2, [r3, #0]
 80058bc:	e049      	b.n	8005952 <UART_SetConfig+0x246>
 80058be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a50      	ldr	r2, [pc, #320]	; (8005a04 <UART_SetConfig+0x2f8>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d13e      	bne.n	8005946 <UART_SetConfig+0x23a>
 80058c8:	4b51      	ldr	r3, [pc, #324]	; (8005a10 <UART_SetConfig+0x304>)
 80058ca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058cc:	23c0      	movs	r3, #192	; 0xc0
 80058ce:	011b      	lsls	r3, r3, #4
 80058d0:	4013      	ands	r3, r2
 80058d2:	22c0      	movs	r2, #192	; 0xc0
 80058d4:	0112      	lsls	r2, r2, #4
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d027      	beq.n	800592a <UART_SetConfig+0x21e>
 80058da:	22c0      	movs	r2, #192	; 0xc0
 80058dc:	0112      	lsls	r2, r2, #4
 80058de:	4293      	cmp	r3, r2
 80058e0:	d82a      	bhi.n	8005938 <UART_SetConfig+0x22c>
 80058e2:	2280      	movs	r2, #128	; 0x80
 80058e4:	0112      	lsls	r2, r2, #4
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d011      	beq.n	800590e <UART_SetConfig+0x202>
 80058ea:	2280      	movs	r2, #128	; 0x80
 80058ec:	0112      	lsls	r2, r2, #4
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d822      	bhi.n	8005938 <UART_SetConfig+0x22c>
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d004      	beq.n	8005900 <UART_SetConfig+0x1f4>
 80058f6:	2280      	movs	r2, #128	; 0x80
 80058f8:	00d2      	lsls	r2, r2, #3
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d00e      	beq.n	800591c <UART_SetConfig+0x210>
 80058fe:	e01b      	b.n	8005938 <UART_SetConfig+0x22c>
 8005900:	231b      	movs	r3, #27
 8005902:	2220      	movs	r2, #32
 8005904:	189b      	adds	r3, r3, r2
 8005906:	19db      	adds	r3, r3, r7
 8005908:	2200      	movs	r2, #0
 800590a:	701a      	strb	r2, [r3, #0]
 800590c:	e021      	b.n	8005952 <UART_SetConfig+0x246>
 800590e:	231b      	movs	r3, #27
 8005910:	2220      	movs	r2, #32
 8005912:	189b      	adds	r3, r3, r2
 8005914:	19db      	adds	r3, r3, r7
 8005916:	2202      	movs	r2, #2
 8005918:	701a      	strb	r2, [r3, #0]
 800591a:	e01a      	b.n	8005952 <UART_SetConfig+0x246>
 800591c:	231b      	movs	r3, #27
 800591e:	2220      	movs	r2, #32
 8005920:	189b      	adds	r3, r3, r2
 8005922:	19db      	adds	r3, r3, r7
 8005924:	2204      	movs	r2, #4
 8005926:	701a      	strb	r2, [r3, #0]
 8005928:	e013      	b.n	8005952 <UART_SetConfig+0x246>
 800592a:	231b      	movs	r3, #27
 800592c:	2220      	movs	r2, #32
 800592e:	189b      	adds	r3, r3, r2
 8005930:	19db      	adds	r3, r3, r7
 8005932:	2208      	movs	r2, #8
 8005934:	701a      	strb	r2, [r3, #0]
 8005936:	e00c      	b.n	8005952 <UART_SetConfig+0x246>
 8005938:	231b      	movs	r3, #27
 800593a:	2220      	movs	r2, #32
 800593c:	189b      	adds	r3, r3, r2
 800593e:	19db      	adds	r3, r3, r7
 8005940:	2210      	movs	r2, #16
 8005942:	701a      	strb	r2, [r3, #0]
 8005944:	e005      	b.n	8005952 <UART_SetConfig+0x246>
 8005946:	231b      	movs	r3, #27
 8005948:	2220      	movs	r2, #32
 800594a:	189b      	adds	r3, r3, r2
 800594c:	19db      	adds	r3, r3, r7
 800594e:	2210      	movs	r2, #16
 8005950:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a2b      	ldr	r2, [pc, #172]	; (8005a04 <UART_SetConfig+0x2f8>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d000      	beq.n	800595e <UART_SetConfig+0x252>
 800595c:	e0a9      	b.n	8005ab2 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800595e:	231b      	movs	r3, #27
 8005960:	2220      	movs	r2, #32
 8005962:	189b      	adds	r3, r3, r2
 8005964:	19db      	adds	r3, r3, r7
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	2b08      	cmp	r3, #8
 800596a:	d015      	beq.n	8005998 <UART_SetConfig+0x28c>
 800596c:	dc18      	bgt.n	80059a0 <UART_SetConfig+0x294>
 800596e:	2b04      	cmp	r3, #4
 8005970:	d00d      	beq.n	800598e <UART_SetConfig+0x282>
 8005972:	dc15      	bgt.n	80059a0 <UART_SetConfig+0x294>
 8005974:	2b00      	cmp	r3, #0
 8005976:	d002      	beq.n	800597e <UART_SetConfig+0x272>
 8005978:	2b02      	cmp	r3, #2
 800597a:	d005      	beq.n	8005988 <UART_SetConfig+0x27c>
 800597c:	e010      	b.n	80059a0 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800597e:	f7fe fd03 	bl	8004388 <HAL_RCC_GetPCLK1Freq>
 8005982:	0003      	movs	r3, r0
 8005984:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005986:	e014      	b.n	80059b2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005988:	4b25      	ldr	r3, [pc, #148]	; (8005a20 <UART_SetConfig+0x314>)
 800598a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800598c:	e011      	b.n	80059b2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800598e:	f7fe fc6f 	bl	8004270 <HAL_RCC_GetSysClockFreq>
 8005992:	0003      	movs	r3, r0
 8005994:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005996:	e00c      	b.n	80059b2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005998:	2380      	movs	r3, #128	; 0x80
 800599a:	021b      	lsls	r3, r3, #8
 800599c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800599e:	e008      	b.n	80059b2 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80059a0:	2300      	movs	r3, #0
 80059a2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80059a4:	231a      	movs	r3, #26
 80059a6:	2220      	movs	r2, #32
 80059a8:	189b      	adds	r3, r3, r2
 80059aa:	19db      	adds	r3, r3, r7
 80059ac:	2201      	movs	r2, #1
 80059ae:	701a      	strb	r2, [r3, #0]
        break;
 80059b0:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80059b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d100      	bne.n	80059ba <UART_SetConfig+0x2ae>
 80059b8:	e14b      	b.n	8005c52 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80059ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059be:	4b19      	ldr	r3, [pc, #100]	; (8005a24 <UART_SetConfig+0x318>)
 80059c0:	0052      	lsls	r2, r2, #1
 80059c2:	5ad3      	ldrh	r3, [r2, r3]
 80059c4:	0019      	movs	r1, r3
 80059c6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80059c8:	f7fa fbb8 	bl	800013c <__udivsi3>
 80059cc:	0003      	movs	r3, r0
 80059ce:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d2:	685a      	ldr	r2, [r3, #4]
 80059d4:	0013      	movs	r3, r2
 80059d6:	005b      	lsls	r3, r3, #1
 80059d8:	189b      	adds	r3, r3, r2
 80059da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059dc:	429a      	cmp	r2, r3
 80059de:	d305      	bcc.n	80059ec <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80059e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d91d      	bls.n	8005a28 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80059ec:	231a      	movs	r3, #26
 80059ee:	2220      	movs	r2, #32
 80059f0:	189b      	adds	r3, r3, r2
 80059f2:	19db      	adds	r3, r3, r7
 80059f4:	2201      	movs	r2, #1
 80059f6:	701a      	strb	r2, [r3, #0]
 80059f8:	e12b      	b.n	8005c52 <UART_SetConfig+0x546>
 80059fa:	46c0      	nop			; (mov r8, r8)
 80059fc:	cfff69f3 	.word	0xcfff69f3
 8005a00:	ffffcfff 	.word	0xffffcfff
 8005a04:	40008000 	.word	0x40008000
 8005a08:	11fff4ff 	.word	0x11fff4ff
 8005a0c:	40013800 	.word	0x40013800
 8005a10:	40021000 	.word	0x40021000
 8005a14:	40004400 	.word	0x40004400
 8005a18:	40004800 	.word	0x40004800
 8005a1c:	40004c00 	.word	0x40004c00
 8005a20:	00f42400 	.word	0x00f42400
 8005a24:	080093ac 	.word	0x080093ac
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a2a:	61bb      	str	r3, [r7, #24]
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	61fb      	str	r3, [r7, #28]
 8005a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a34:	4b92      	ldr	r3, [pc, #584]	; (8005c80 <UART_SetConfig+0x574>)
 8005a36:	0052      	lsls	r2, r2, #1
 8005a38:	5ad3      	ldrh	r3, [r2, r3]
 8005a3a:	613b      	str	r3, [r7, #16]
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	617b      	str	r3, [r7, #20]
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	69b8      	ldr	r0, [r7, #24]
 8005a46:	69f9      	ldr	r1, [r7, #28]
 8005a48:	f7fa fd2c 	bl	80004a4 <__aeabi_uldivmod>
 8005a4c:	0002      	movs	r2, r0
 8005a4e:	000b      	movs	r3, r1
 8005a50:	0e11      	lsrs	r1, r2, #24
 8005a52:	021d      	lsls	r5, r3, #8
 8005a54:	430d      	orrs	r5, r1
 8005a56:	0214      	lsls	r4, r2, #8
 8005a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	085b      	lsrs	r3, r3, #1
 8005a5e:	60bb      	str	r3, [r7, #8]
 8005a60:	2300      	movs	r3, #0
 8005a62:	60fb      	str	r3, [r7, #12]
 8005a64:	68b8      	ldr	r0, [r7, #8]
 8005a66:	68f9      	ldr	r1, [r7, #12]
 8005a68:	1900      	adds	r0, r0, r4
 8005a6a:	4169      	adcs	r1, r5
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	603b      	str	r3, [r7, #0]
 8005a72:	2300      	movs	r3, #0
 8005a74:	607b      	str	r3, [r7, #4]
 8005a76:	683a      	ldr	r2, [r7, #0]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f7fa fd13 	bl	80004a4 <__aeabi_uldivmod>
 8005a7e:	0002      	movs	r2, r0
 8005a80:	000b      	movs	r3, r1
 8005a82:	0013      	movs	r3, r2
 8005a84:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a88:	23c0      	movs	r3, #192	; 0xc0
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d309      	bcc.n	8005aa4 <UART_SetConfig+0x398>
 8005a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a92:	2380      	movs	r3, #128	; 0x80
 8005a94:	035b      	lsls	r3, r3, #13
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d204      	bcs.n	8005aa4 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aa0:	60da      	str	r2, [r3, #12]
 8005aa2:	e0d6      	b.n	8005c52 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8005aa4:	231a      	movs	r3, #26
 8005aa6:	2220      	movs	r2, #32
 8005aa8:	189b      	adds	r3, r3, r2
 8005aaa:	19db      	adds	r3, r3, r7
 8005aac:	2201      	movs	r2, #1
 8005aae:	701a      	strb	r2, [r3, #0]
 8005ab0:	e0cf      	b.n	8005c52 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab4:	69da      	ldr	r2, [r3, #28]
 8005ab6:	2380      	movs	r3, #128	; 0x80
 8005ab8:	021b      	lsls	r3, r3, #8
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d000      	beq.n	8005ac0 <UART_SetConfig+0x3b4>
 8005abe:	e070      	b.n	8005ba2 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8005ac0:	231b      	movs	r3, #27
 8005ac2:	2220      	movs	r2, #32
 8005ac4:	189b      	adds	r3, r3, r2
 8005ac6:	19db      	adds	r3, r3, r7
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	2b08      	cmp	r3, #8
 8005acc:	d015      	beq.n	8005afa <UART_SetConfig+0x3ee>
 8005ace:	dc18      	bgt.n	8005b02 <UART_SetConfig+0x3f6>
 8005ad0:	2b04      	cmp	r3, #4
 8005ad2:	d00d      	beq.n	8005af0 <UART_SetConfig+0x3e4>
 8005ad4:	dc15      	bgt.n	8005b02 <UART_SetConfig+0x3f6>
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d002      	beq.n	8005ae0 <UART_SetConfig+0x3d4>
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d005      	beq.n	8005aea <UART_SetConfig+0x3de>
 8005ade:	e010      	b.n	8005b02 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ae0:	f7fe fc52 	bl	8004388 <HAL_RCC_GetPCLK1Freq>
 8005ae4:	0003      	movs	r3, r0
 8005ae6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ae8:	e014      	b.n	8005b14 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005aea:	4b66      	ldr	r3, [pc, #408]	; (8005c84 <UART_SetConfig+0x578>)
 8005aec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005aee:	e011      	b.n	8005b14 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005af0:	f7fe fbbe 	bl	8004270 <HAL_RCC_GetSysClockFreq>
 8005af4:	0003      	movs	r3, r0
 8005af6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005af8:	e00c      	b.n	8005b14 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005afa:	2380      	movs	r3, #128	; 0x80
 8005afc:	021b      	lsls	r3, r3, #8
 8005afe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b00:	e008      	b.n	8005b14 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005b02:	2300      	movs	r3, #0
 8005b04:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005b06:	231a      	movs	r3, #26
 8005b08:	2220      	movs	r2, #32
 8005b0a:	189b      	adds	r3, r3, r2
 8005b0c:	19db      	adds	r3, r3, r7
 8005b0e:	2201      	movs	r2, #1
 8005b10:	701a      	strb	r2, [r3, #0]
        break;
 8005b12:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d100      	bne.n	8005b1c <UART_SetConfig+0x410>
 8005b1a:	e09a      	b.n	8005c52 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b20:	4b57      	ldr	r3, [pc, #348]	; (8005c80 <UART_SetConfig+0x574>)
 8005b22:	0052      	lsls	r2, r2, #1
 8005b24:	5ad3      	ldrh	r3, [r2, r3]
 8005b26:	0019      	movs	r1, r3
 8005b28:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005b2a:	f7fa fb07 	bl	800013c <__udivsi3>
 8005b2e:	0003      	movs	r3, r0
 8005b30:	005a      	lsls	r2, r3, #1
 8005b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	085b      	lsrs	r3, r3, #1
 8005b38:	18d2      	adds	r2, r2, r3
 8005b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	0019      	movs	r1, r3
 8005b40:	0010      	movs	r0, r2
 8005b42:	f7fa fafb 	bl	800013c <__udivsi3>
 8005b46:	0003      	movs	r3, r0
 8005b48:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4c:	2b0f      	cmp	r3, #15
 8005b4e:	d921      	bls.n	8005b94 <UART_SetConfig+0x488>
 8005b50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b52:	2380      	movs	r3, #128	; 0x80
 8005b54:	025b      	lsls	r3, r3, #9
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d21c      	bcs.n	8005b94 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	200e      	movs	r0, #14
 8005b60:	2420      	movs	r4, #32
 8005b62:	1903      	adds	r3, r0, r4
 8005b64:	19db      	adds	r3, r3, r7
 8005b66:	210f      	movs	r1, #15
 8005b68:	438a      	bics	r2, r1
 8005b6a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6e:	085b      	lsrs	r3, r3, #1
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	2207      	movs	r2, #7
 8005b74:	4013      	ands	r3, r2
 8005b76:	b299      	uxth	r1, r3
 8005b78:	1903      	adds	r3, r0, r4
 8005b7a:	19db      	adds	r3, r3, r7
 8005b7c:	1902      	adds	r2, r0, r4
 8005b7e:	19d2      	adds	r2, r2, r7
 8005b80:	8812      	ldrh	r2, [r2, #0]
 8005b82:	430a      	orrs	r2, r1
 8005b84:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	1902      	adds	r2, r0, r4
 8005b8c:	19d2      	adds	r2, r2, r7
 8005b8e:	8812      	ldrh	r2, [r2, #0]
 8005b90:	60da      	str	r2, [r3, #12]
 8005b92:	e05e      	b.n	8005c52 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8005b94:	231a      	movs	r3, #26
 8005b96:	2220      	movs	r2, #32
 8005b98:	189b      	adds	r3, r3, r2
 8005b9a:	19db      	adds	r3, r3, r7
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	701a      	strb	r2, [r3, #0]
 8005ba0:	e057      	b.n	8005c52 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ba2:	231b      	movs	r3, #27
 8005ba4:	2220      	movs	r2, #32
 8005ba6:	189b      	adds	r3, r3, r2
 8005ba8:	19db      	adds	r3, r3, r7
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	2b08      	cmp	r3, #8
 8005bae:	d015      	beq.n	8005bdc <UART_SetConfig+0x4d0>
 8005bb0:	dc18      	bgt.n	8005be4 <UART_SetConfig+0x4d8>
 8005bb2:	2b04      	cmp	r3, #4
 8005bb4:	d00d      	beq.n	8005bd2 <UART_SetConfig+0x4c6>
 8005bb6:	dc15      	bgt.n	8005be4 <UART_SetConfig+0x4d8>
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d002      	beq.n	8005bc2 <UART_SetConfig+0x4b6>
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d005      	beq.n	8005bcc <UART_SetConfig+0x4c0>
 8005bc0:	e010      	b.n	8005be4 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bc2:	f7fe fbe1 	bl	8004388 <HAL_RCC_GetPCLK1Freq>
 8005bc6:	0003      	movs	r3, r0
 8005bc8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005bca:	e014      	b.n	8005bf6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bcc:	4b2d      	ldr	r3, [pc, #180]	; (8005c84 <UART_SetConfig+0x578>)
 8005bce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005bd0:	e011      	b.n	8005bf6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bd2:	f7fe fb4d 	bl	8004270 <HAL_RCC_GetSysClockFreq>
 8005bd6:	0003      	movs	r3, r0
 8005bd8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005bda:	e00c      	b.n	8005bf6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bdc:	2380      	movs	r3, #128	; 0x80
 8005bde:	021b      	lsls	r3, r3, #8
 8005be0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005be2:	e008      	b.n	8005bf6 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8005be4:	2300      	movs	r3, #0
 8005be6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005be8:	231a      	movs	r3, #26
 8005bea:	2220      	movs	r2, #32
 8005bec:	189b      	adds	r3, r3, r2
 8005bee:	19db      	adds	r3, r3, r7
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	701a      	strb	r2, [r3, #0]
        break;
 8005bf4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d02a      	beq.n	8005c52 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c00:	4b1f      	ldr	r3, [pc, #124]	; (8005c80 <UART_SetConfig+0x574>)
 8005c02:	0052      	lsls	r2, r2, #1
 8005c04:	5ad3      	ldrh	r3, [r2, r3]
 8005c06:	0019      	movs	r1, r3
 8005c08:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005c0a:	f7fa fa97 	bl	800013c <__udivsi3>
 8005c0e:	0003      	movs	r3, r0
 8005c10:	001a      	movs	r2, r3
 8005c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	085b      	lsrs	r3, r3, #1
 8005c18:	18d2      	adds	r2, r2, r3
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	0019      	movs	r1, r3
 8005c20:	0010      	movs	r0, r2
 8005c22:	f7fa fa8b 	bl	800013c <__udivsi3>
 8005c26:	0003      	movs	r3, r0
 8005c28:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2c:	2b0f      	cmp	r3, #15
 8005c2e:	d90a      	bls.n	8005c46 <UART_SetConfig+0x53a>
 8005c30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c32:	2380      	movs	r3, #128	; 0x80
 8005c34:	025b      	lsls	r3, r3, #9
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d205      	bcs.n	8005c46 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	60da      	str	r2, [r3, #12]
 8005c44:	e005      	b.n	8005c52 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8005c46:	231a      	movs	r3, #26
 8005c48:	2220      	movs	r2, #32
 8005c4a:	189b      	adds	r3, r3, r2
 8005c4c:	19db      	adds	r3, r3, r7
 8005c4e:	2201      	movs	r2, #1
 8005c50:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c54:	226a      	movs	r2, #106	; 0x6a
 8005c56:	2101      	movs	r1, #1
 8005c58:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5c:	2268      	movs	r2, #104	; 0x68
 8005c5e:	2101      	movs	r1, #1
 8005c60:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c64:	2200      	movs	r2, #0
 8005c66:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005c6e:	231a      	movs	r3, #26
 8005c70:	2220      	movs	r2, #32
 8005c72:	189b      	adds	r3, r3, r2
 8005c74:	19db      	adds	r3, r3, r7
 8005c76:	781b      	ldrb	r3, [r3, #0]
}
 8005c78:	0018      	movs	r0, r3
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	b010      	add	sp, #64	; 0x40
 8005c7e:	bdb0      	pop	{r4, r5, r7, pc}
 8005c80:	080093ac 	.word	0x080093ac
 8005c84:	00f42400 	.word	0x00f42400

08005c88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c94:	2201      	movs	r2, #1
 8005c96:	4013      	ands	r3, r2
 8005c98:	d00b      	beq.n	8005cb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	4a4a      	ldr	r2, [pc, #296]	; (8005dcc <UART_AdvFeatureConfig+0x144>)
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	0019      	movs	r1, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	430a      	orrs	r2, r1
 8005cb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb6:	2202      	movs	r2, #2
 8005cb8:	4013      	ands	r3, r2
 8005cba:	d00b      	beq.n	8005cd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	4a43      	ldr	r2, [pc, #268]	; (8005dd0 <UART_AdvFeatureConfig+0x148>)
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	0019      	movs	r1, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	430a      	orrs	r2, r1
 8005cd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd8:	2204      	movs	r2, #4
 8005cda:	4013      	ands	r3, r2
 8005cdc:	d00b      	beq.n	8005cf6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	4a3b      	ldr	r2, [pc, #236]	; (8005dd4 <UART_AdvFeatureConfig+0x14c>)
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	0019      	movs	r1, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cfa:	2208      	movs	r2, #8
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	d00b      	beq.n	8005d18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	4a34      	ldr	r2, [pc, #208]	; (8005dd8 <UART_AdvFeatureConfig+0x150>)
 8005d08:	4013      	ands	r3, r2
 8005d0a:	0019      	movs	r1, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	430a      	orrs	r2, r1
 8005d16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d1c:	2210      	movs	r2, #16
 8005d1e:	4013      	ands	r3, r2
 8005d20:	d00b      	beq.n	8005d3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	4a2c      	ldr	r2, [pc, #176]	; (8005ddc <UART_AdvFeatureConfig+0x154>)
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	0019      	movs	r1, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	430a      	orrs	r2, r1
 8005d38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d3e:	2220      	movs	r2, #32
 8005d40:	4013      	ands	r3, r2
 8005d42:	d00b      	beq.n	8005d5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	4a25      	ldr	r2, [pc, #148]	; (8005de0 <UART_AdvFeatureConfig+0x158>)
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	0019      	movs	r1, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	430a      	orrs	r2, r1
 8005d5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d60:	2240      	movs	r2, #64	; 0x40
 8005d62:	4013      	ands	r3, r2
 8005d64:	d01d      	beq.n	8005da2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	4a1d      	ldr	r2, [pc, #116]	; (8005de4 <UART_AdvFeatureConfig+0x15c>)
 8005d6e:	4013      	ands	r3, r2
 8005d70:	0019      	movs	r1, r3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d82:	2380      	movs	r3, #128	; 0x80
 8005d84:	035b      	lsls	r3, r3, #13
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d10b      	bne.n	8005da2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	4a15      	ldr	r2, [pc, #84]	; (8005de8 <UART_AdvFeatureConfig+0x160>)
 8005d92:	4013      	ands	r3, r2
 8005d94:	0019      	movs	r1, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	430a      	orrs	r2, r1
 8005da0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da6:	2280      	movs	r2, #128	; 0x80
 8005da8:	4013      	ands	r3, r2
 8005daa:	d00b      	beq.n	8005dc4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	4a0e      	ldr	r2, [pc, #56]	; (8005dec <UART_AdvFeatureConfig+0x164>)
 8005db4:	4013      	ands	r3, r2
 8005db6:	0019      	movs	r1, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	430a      	orrs	r2, r1
 8005dc2:	605a      	str	r2, [r3, #4]
  }
}
 8005dc4:	46c0      	nop			; (mov r8, r8)
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	b002      	add	sp, #8
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	fffdffff 	.word	0xfffdffff
 8005dd0:	fffeffff 	.word	0xfffeffff
 8005dd4:	fffbffff 	.word	0xfffbffff
 8005dd8:	ffff7fff 	.word	0xffff7fff
 8005ddc:	ffffefff 	.word	0xffffefff
 8005de0:	ffffdfff 	.word	0xffffdfff
 8005de4:	ffefffff 	.word	0xffefffff
 8005de8:	ff9fffff 	.word	0xff9fffff
 8005dec:	fff7ffff 	.word	0xfff7ffff

08005df0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af02      	add	r7, sp, #8
 8005df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2290      	movs	r2, #144	; 0x90
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e00:	f7fd fb88 	bl	8003514 <HAL_GetTick>
 8005e04:	0003      	movs	r3, r0
 8005e06:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2208      	movs	r2, #8
 8005e10:	4013      	ands	r3, r2
 8005e12:	2b08      	cmp	r3, #8
 8005e14:	d10c      	bne.n	8005e30 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2280      	movs	r2, #128	; 0x80
 8005e1a:	0391      	lsls	r1, r2, #14
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	4a1a      	ldr	r2, [pc, #104]	; (8005e88 <UART_CheckIdleState+0x98>)
 8005e20:	9200      	str	r2, [sp, #0]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f000 f832 	bl	8005e8c <UART_WaitOnFlagUntilTimeout>
 8005e28:	1e03      	subs	r3, r0, #0
 8005e2a:	d001      	beq.n	8005e30 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	e026      	b.n	8005e7e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2204      	movs	r2, #4
 8005e38:	4013      	ands	r3, r2
 8005e3a:	2b04      	cmp	r3, #4
 8005e3c:	d10c      	bne.n	8005e58 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2280      	movs	r2, #128	; 0x80
 8005e42:	03d1      	lsls	r1, r2, #15
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	4a10      	ldr	r2, [pc, #64]	; (8005e88 <UART_CheckIdleState+0x98>)
 8005e48:	9200      	str	r2, [sp, #0]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f000 f81e 	bl	8005e8c <UART_WaitOnFlagUntilTimeout>
 8005e50:	1e03      	subs	r3, r0, #0
 8005e52:	d001      	beq.n	8005e58 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e54:	2303      	movs	r3, #3
 8005e56:	e012      	b.n	8005e7e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2288      	movs	r2, #136	; 0x88
 8005e5c:	2120      	movs	r1, #32
 8005e5e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	228c      	movs	r2, #140	; 0x8c
 8005e64:	2120      	movs	r1, #32
 8005e66:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2284      	movs	r2, #132	; 0x84
 8005e78:	2100      	movs	r1, #0
 8005e7a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	0018      	movs	r0, r3
 8005e80:	46bd      	mov	sp, r7
 8005e82:	b004      	add	sp, #16
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	46c0      	nop			; (mov r8, r8)
 8005e88:	01ffffff 	.word	0x01ffffff

08005e8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b094      	sub	sp, #80	; 0x50
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	603b      	str	r3, [r7, #0]
 8005e98:	1dfb      	adds	r3, r7, #7
 8005e9a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e9c:	e0a7      	b.n	8005fee <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	d100      	bne.n	8005ea6 <UART_WaitOnFlagUntilTimeout+0x1a>
 8005ea4:	e0a3      	b.n	8005fee <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ea6:	f7fd fb35 	bl	8003514 <HAL_GetTick>
 8005eaa:	0002      	movs	r2, r0
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d302      	bcc.n	8005ebc <UART_WaitOnFlagUntilTimeout+0x30>
 8005eb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d13f      	bne.n	8005f3c <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ebc:	f3ef 8310 	mrs	r3, PRIMASK
 8005ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005ec4:	647b      	str	r3, [r7, #68]	; 0x44
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ecc:	f383 8810 	msr	PRIMASK, r3
}
 8005ed0:	46c0      	nop			; (mov r8, r8)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	494e      	ldr	r1, [pc, #312]	; (8006018 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005ede:	400a      	ands	r2, r1
 8005ee0:	601a      	str	r2, [r3, #0]
 8005ee2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ee4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee8:	f383 8810 	msr	PRIMASK, r3
}
 8005eec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005eee:	f3ef 8310 	mrs	r3, PRIMASK
 8005ef2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ef6:	643b      	str	r3, [r7, #64]	; 0x40
 8005ef8:	2301      	movs	r3, #1
 8005efa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efe:	f383 8810 	msr	PRIMASK, r3
}
 8005f02:	46c0      	nop			; (mov r8, r8)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	689a      	ldr	r2, [r3, #8]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2101      	movs	r1, #1
 8005f10:	438a      	bics	r2, r1
 8005f12:	609a      	str	r2, [r3, #8]
 8005f14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f16:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f1a:	f383 8810 	msr	PRIMASK, r3
}
 8005f1e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2288      	movs	r2, #136	; 0x88
 8005f24:	2120      	movs	r1, #32
 8005f26:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	228c      	movs	r2, #140	; 0x8c
 8005f2c:	2120      	movs	r1, #32
 8005f2e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2284      	movs	r2, #132	; 0x84
 8005f34:	2100      	movs	r1, #0
 8005f36:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e069      	b.n	8006010 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2204      	movs	r2, #4
 8005f44:	4013      	ands	r3, r2
 8005f46:	d052      	beq.n	8005fee <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	69da      	ldr	r2, [r3, #28]
 8005f4e:	2380      	movs	r3, #128	; 0x80
 8005f50:	011b      	lsls	r3, r3, #4
 8005f52:	401a      	ands	r2, r3
 8005f54:	2380      	movs	r3, #128	; 0x80
 8005f56:	011b      	lsls	r3, r3, #4
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d148      	bne.n	8005fee <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2280      	movs	r2, #128	; 0x80
 8005f62:	0112      	lsls	r2, r2, #4
 8005f64:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f66:	f3ef 8310 	mrs	r3, PRIMASK
 8005f6a:	613b      	str	r3, [r7, #16]
  return(result);
 8005f6c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f70:	2301      	movs	r3, #1
 8005f72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	f383 8810 	msr	PRIMASK, r3
}
 8005f7a:	46c0      	nop			; (mov r8, r8)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4924      	ldr	r1, [pc, #144]	; (8006018 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005f88:	400a      	ands	r2, r1
 8005f8a:	601a      	str	r2, [r3, #0]
 8005f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f8e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	f383 8810 	msr	PRIMASK, r3
}
 8005f96:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f98:	f3ef 8310 	mrs	r3, PRIMASK
 8005f9c:	61fb      	str	r3, [r7, #28]
  return(result);
 8005f9e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fa0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fa6:	6a3b      	ldr	r3, [r7, #32]
 8005fa8:	f383 8810 	msr	PRIMASK, r3
}
 8005fac:	46c0      	nop			; (mov r8, r8)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	689a      	ldr	r2, [r3, #8]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2101      	movs	r1, #1
 8005fba:	438a      	bics	r2, r1
 8005fbc:	609a      	str	r2, [r3, #8]
 8005fbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fc0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc4:	f383 8810 	msr	PRIMASK, r3
}
 8005fc8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2288      	movs	r2, #136	; 0x88
 8005fce:	2120      	movs	r1, #32
 8005fd0:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	228c      	movs	r2, #140	; 0x8c
 8005fd6:	2120      	movs	r1, #32
 8005fd8:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2290      	movs	r2, #144	; 0x90
 8005fde:	2120      	movs	r1, #32
 8005fe0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2284      	movs	r2, #132	; 0x84
 8005fe6:	2100      	movs	r1, #0
 8005fe8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e010      	b.n	8006010 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	69db      	ldr	r3, [r3, #28]
 8005ff4:	68ba      	ldr	r2, [r7, #8]
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	68ba      	ldr	r2, [r7, #8]
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	425a      	negs	r2, r3
 8005ffe:	4153      	adcs	r3, r2
 8006000:	b2db      	uxtb	r3, r3
 8006002:	001a      	movs	r2, r3
 8006004:	1dfb      	adds	r3, r7, #7
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	429a      	cmp	r2, r3
 800600a:	d100      	bne.n	800600e <UART_WaitOnFlagUntilTimeout+0x182>
 800600c:	e747      	b.n	8005e9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	0018      	movs	r0, r3
 8006012:	46bd      	mov	sp, r7
 8006014:	b014      	add	sp, #80	; 0x50
 8006016:	bd80      	pop	{r7, pc}
 8006018:	fffffe5f 	.word	0xfffffe5f

0800601c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2284      	movs	r2, #132	; 0x84
 8006028:	5c9b      	ldrb	r3, [r3, r2]
 800602a:	2b01      	cmp	r3, #1
 800602c:	d101      	bne.n	8006032 <HAL_UARTEx_DisableFifoMode+0x16>
 800602e:	2302      	movs	r3, #2
 8006030:	e027      	b.n	8006082 <HAL_UARTEx_DisableFifoMode+0x66>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2284      	movs	r2, #132	; 0x84
 8006036:	2101      	movs	r1, #1
 8006038:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2288      	movs	r2, #136	; 0x88
 800603e:	2124      	movs	r1, #36	; 0x24
 8006040:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2101      	movs	r1, #1
 8006056:	438a      	bics	r2, r1
 8006058:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	4a0b      	ldr	r2, [pc, #44]	; (800608c <HAL_UARTEx_DisableFifoMode+0x70>)
 800605e:	4013      	ands	r3, r2
 8006060:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2288      	movs	r2, #136	; 0x88
 8006074:	2120      	movs	r1, #32
 8006076:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2284      	movs	r2, #132	; 0x84
 800607c:	2100      	movs	r1, #0
 800607e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	0018      	movs	r0, r3
 8006084:	46bd      	mov	sp, r7
 8006086:	b004      	add	sp, #16
 8006088:	bd80      	pop	{r7, pc}
 800608a:	46c0      	nop			; (mov r8, r8)
 800608c:	dfffffff 	.word	0xdfffffff

08006090 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2284      	movs	r2, #132	; 0x84
 800609e:	5c9b      	ldrb	r3, [r3, r2]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d101      	bne.n	80060a8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80060a4:	2302      	movs	r3, #2
 80060a6:	e02e      	b.n	8006106 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2284      	movs	r2, #132	; 0x84
 80060ac:	2101      	movs	r1, #1
 80060ae:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2288      	movs	r2, #136	; 0x88
 80060b4:	2124      	movs	r1, #36	; 0x24
 80060b6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2101      	movs	r1, #1
 80060cc:	438a      	bics	r2, r1
 80060ce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	00db      	lsls	r3, r3, #3
 80060d8:	08d9      	lsrs	r1, r3, #3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	683a      	ldr	r2, [r7, #0]
 80060e0:	430a      	orrs	r2, r1
 80060e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	0018      	movs	r0, r3
 80060e8:	f000 f854 	bl	8006194 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2288      	movs	r2, #136	; 0x88
 80060f8:	2120      	movs	r1, #32
 80060fa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2284      	movs	r2, #132	; 0x84
 8006100:	2100      	movs	r1, #0
 8006102:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	0018      	movs	r0, r3
 8006108:	46bd      	mov	sp, r7
 800610a:	b004      	add	sp, #16
 800610c:	bd80      	pop	{r7, pc}
	...

08006110 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2284      	movs	r2, #132	; 0x84
 800611e:	5c9b      	ldrb	r3, [r3, r2]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d101      	bne.n	8006128 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006124:	2302      	movs	r3, #2
 8006126:	e02f      	b.n	8006188 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2284      	movs	r2, #132	; 0x84
 800612c:	2101      	movs	r1, #1
 800612e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2288      	movs	r2, #136	; 0x88
 8006134:	2124      	movs	r1, #36	; 0x24
 8006136:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2101      	movs	r1, #1
 800614c:	438a      	bics	r2, r1
 800614e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	4a0e      	ldr	r2, [pc, #56]	; (8006190 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006158:	4013      	ands	r3, r2
 800615a:	0019      	movs	r1, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	683a      	ldr	r2, [r7, #0]
 8006162:	430a      	orrs	r2, r1
 8006164:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	0018      	movs	r0, r3
 800616a:	f000 f813 	bl	8006194 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2288      	movs	r2, #136	; 0x88
 800617a:	2120      	movs	r1, #32
 800617c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2284      	movs	r2, #132	; 0x84
 8006182:	2100      	movs	r1, #0
 8006184:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	0018      	movs	r0, r3
 800618a:	46bd      	mov	sp, r7
 800618c:	b004      	add	sp, #16
 800618e:	bd80      	pop	{r7, pc}
 8006190:	f1ffffff 	.word	0xf1ffffff

08006194 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d108      	bne.n	80061b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	226a      	movs	r2, #106	; 0x6a
 80061a8:	2101      	movs	r1, #1
 80061aa:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2268      	movs	r2, #104	; 0x68
 80061b0:	2101      	movs	r1, #1
 80061b2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80061b4:	e043      	b.n	800623e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80061b6:	260f      	movs	r6, #15
 80061b8:	19bb      	adds	r3, r7, r6
 80061ba:	2208      	movs	r2, #8
 80061bc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80061be:	200e      	movs	r0, #14
 80061c0:	183b      	adds	r3, r7, r0
 80061c2:	2208      	movs	r2, #8
 80061c4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	0e5b      	lsrs	r3, r3, #25
 80061ce:	b2da      	uxtb	r2, r3
 80061d0:	240d      	movs	r4, #13
 80061d2:	193b      	adds	r3, r7, r4
 80061d4:	2107      	movs	r1, #7
 80061d6:	400a      	ands	r2, r1
 80061d8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	0f5b      	lsrs	r3, r3, #29
 80061e2:	b2da      	uxtb	r2, r3
 80061e4:	250c      	movs	r5, #12
 80061e6:	197b      	adds	r3, r7, r5
 80061e8:	2107      	movs	r1, #7
 80061ea:	400a      	ands	r2, r1
 80061ec:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061ee:	183b      	adds	r3, r7, r0
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	197a      	adds	r2, r7, r5
 80061f4:	7812      	ldrb	r2, [r2, #0]
 80061f6:	4914      	ldr	r1, [pc, #80]	; (8006248 <UARTEx_SetNbDataToProcess+0xb4>)
 80061f8:	5c8a      	ldrb	r2, [r1, r2]
 80061fa:	435a      	muls	r2, r3
 80061fc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80061fe:	197b      	adds	r3, r7, r5
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	4a12      	ldr	r2, [pc, #72]	; (800624c <UARTEx_SetNbDataToProcess+0xb8>)
 8006204:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006206:	0019      	movs	r1, r3
 8006208:	f7fa f822 	bl	8000250 <__divsi3>
 800620c:	0003      	movs	r3, r0
 800620e:	b299      	uxth	r1, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	226a      	movs	r2, #106	; 0x6a
 8006214:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006216:	19bb      	adds	r3, r7, r6
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	193a      	adds	r2, r7, r4
 800621c:	7812      	ldrb	r2, [r2, #0]
 800621e:	490a      	ldr	r1, [pc, #40]	; (8006248 <UARTEx_SetNbDataToProcess+0xb4>)
 8006220:	5c8a      	ldrb	r2, [r1, r2]
 8006222:	435a      	muls	r2, r3
 8006224:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006226:	193b      	adds	r3, r7, r4
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	4a08      	ldr	r2, [pc, #32]	; (800624c <UARTEx_SetNbDataToProcess+0xb8>)
 800622c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800622e:	0019      	movs	r1, r3
 8006230:	f7fa f80e 	bl	8000250 <__divsi3>
 8006234:	0003      	movs	r3, r0
 8006236:	b299      	uxth	r1, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2268      	movs	r2, #104	; 0x68
 800623c:	5299      	strh	r1, [r3, r2]
}
 800623e:	46c0      	nop			; (mov r8, r8)
 8006240:	46bd      	mov	sp, r7
 8006242:	b005      	add	sp, #20
 8006244:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006246:	46c0      	nop			; (mov r8, r8)
 8006248:	080093c4 	.word	0x080093c4
 800624c:	080093cc 	.word	0x080093cc

08006250 <__errno>:
 8006250:	4b01      	ldr	r3, [pc, #4]	; (8006258 <__errno+0x8>)
 8006252:	6818      	ldr	r0, [r3, #0]
 8006254:	4770      	bx	lr
 8006256:	46c0      	nop			; (mov r8, r8)
 8006258:	2000000c 	.word	0x2000000c

0800625c <__libc_init_array>:
 800625c:	b570      	push	{r4, r5, r6, lr}
 800625e:	2600      	movs	r6, #0
 8006260:	4d0c      	ldr	r5, [pc, #48]	; (8006294 <__libc_init_array+0x38>)
 8006262:	4c0d      	ldr	r4, [pc, #52]	; (8006298 <__libc_init_array+0x3c>)
 8006264:	1b64      	subs	r4, r4, r5
 8006266:	10a4      	asrs	r4, r4, #2
 8006268:	42a6      	cmp	r6, r4
 800626a:	d109      	bne.n	8006280 <__libc_init_array+0x24>
 800626c:	2600      	movs	r6, #0
 800626e:	f002 ffbb 	bl	80091e8 <_init>
 8006272:	4d0a      	ldr	r5, [pc, #40]	; (800629c <__libc_init_array+0x40>)
 8006274:	4c0a      	ldr	r4, [pc, #40]	; (80062a0 <__libc_init_array+0x44>)
 8006276:	1b64      	subs	r4, r4, r5
 8006278:	10a4      	asrs	r4, r4, #2
 800627a:	42a6      	cmp	r6, r4
 800627c:	d105      	bne.n	800628a <__libc_init_array+0x2e>
 800627e:	bd70      	pop	{r4, r5, r6, pc}
 8006280:	00b3      	lsls	r3, r6, #2
 8006282:	58eb      	ldr	r3, [r5, r3]
 8006284:	4798      	blx	r3
 8006286:	3601      	adds	r6, #1
 8006288:	e7ee      	b.n	8006268 <__libc_init_array+0xc>
 800628a:	00b3      	lsls	r3, r6, #2
 800628c:	58eb      	ldr	r3, [r5, r3]
 800628e:	4798      	blx	r3
 8006290:	3601      	adds	r6, #1
 8006292:	e7f2      	b.n	800627a <__libc_init_array+0x1e>
 8006294:	080097b4 	.word	0x080097b4
 8006298:	080097b4 	.word	0x080097b4
 800629c:	080097b4 	.word	0x080097b4
 80062a0:	080097b8 	.word	0x080097b8

080062a4 <memset>:
 80062a4:	0003      	movs	r3, r0
 80062a6:	1882      	adds	r2, r0, r2
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d100      	bne.n	80062ae <memset+0xa>
 80062ac:	4770      	bx	lr
 80062ae:	7019      	strb	r1, [r3, #0]
 80062b0:	3301      	adds	r3, #1
 80062b2:	e7f9      	b.n	80062a8 <memset+0x4>

080062b4 <__cvt>:
 80062b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062b6:	001e      	movs	r6, r3
 80062b8:	2300      	movs	r3, #0
 80062ba:	0014      	movs	r4, r2
 80062bc:	b08b      	sub	sp, #44	; 0x2c
 80062be:	429e      	cmp	r6, r3
 80062c0:	da04      	bge.n	80062cc <__cvt+0x18>
 80062c2:	2180      	movs	r1, #128	; 0x80
 80062c4:	0609      	lsls	r1, r1, #24
 80062c6:	1873      	adds	r3, r6, r1
 80062c8:	001e      	movs	r6, r3
 80062ca:	232d      	movs	r3, #45	; 0x2d
 80062cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80062ce:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80062d0:	7013      	strb	r3, [r2, #0]
 80062d2:	2320      	movs	r3, #32
 80062d4:	2203      	movs	r2, #3
 80062d6:	439f      	bics	r7, r3
 80062d8:	2f46      	cmp	r7, #70	; 0x46
 80062da:	d007      	beq.n	80062ec <__cvt+0x38>
 80062dc:	003b      	movs	r3, r7
 80062de:	3b45      	subs	r3, #69	; 0x45
 80062e0:	4259      	negs	r1, r3
 80062e2:	414b      	adcs	r3, r1
 80062e4:	9910      	ldr	r1, [sp, #64]	; 0x40
 80062e6:	3a01      	subs	r2, #1
 80062e8:	18cb      	adds	r3, r1, r3
 80062ea:	9310      	str	r3, [sp, #64]	; 0x40
 80062ec:	ab09      	add	r3, sp, #36	; 0x24
 80062ee:	9304      	str	r3, [sp, #16]
 80062f0:	ab08      	add	r3, sp, #32
 80062f2:	9303      	str	r3, [sp, #12]
 80062f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80062f6:	9200      	str	r2, [sp, #0]
 80062f8:	9302      	str	r3, [sp, #8]
 80062fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80062fc:	0022      	movs	r2, r4
 80062fe:	9301      	str	r3, [sp, #4]
 8006300:	0033      	movs	r3, r6
 8006302:	f000 fcf1 	bl	8006ce8 <_dtoa_r>
 8006306:	0005      	movs	r5, r0
 8006308:	2f47      	cmp	r7, #71	; 0x47
 800630a:	d102      	bne.n	8006312 <__cvt+0x5e>
 800630c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800630e:	07db      	lsls	r3, r3, #31
 8006310:	d528      	bpl.n	8006364 <__cvt+0xb0>
 8006312:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006314:	18eb      	adds	r3, r5, r3
 8006316:	9307      	str	r3, [sp, #28]
 8006318:	2f46      	cmp	r7, #70	; 0x46
 800631a:	d114      	bne.n	8006346 <__cvt+0x92>
 800631c:	782b      	ldrb	r3, [r5, #0]
 800631e:	2b30      	cmp	r3, #48	; 0x30
 8006320:	d10c      	bne.n	800633c <__cvt+0x88>
 8006322:	2200      	movs	r2, #0
 8006324:	2300      	movs	r3, #0
 8006326:	0020      	movs	r0, r4
 8006328:	0031      	movs	r1, r6
 800632a:	f7fa f88d 	bl	8000448 <__aeabi_dcmpeq>
 800632e:	2800      	cmp	r0, #0
 8006330:	d104      	bne.n	800633c <__cvt+0x88>
 8006332:	2301      	movs	r3, #1
 8006334:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006336:	1a9b      	subs	r3, r3, r2
 8006338:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800633a:	6013      	str	r3, [r2, #0]
 800633c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800633e:	9a07      	ldr	r2, [sp, #28]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	18d3      	adds	r3, r2, r3
 8006344:	9307      	str	r3, [sp, #28]
 8006346:	2200      	movs	r2, #0
 8006348:	2300      	movs	r3, #0
 800634a:	0020      	movs	r0, r4
 800634c:	0031      	movs	r1, r6
 800634e:	f7fa f87b 	bl	8000448 <__aeabi_dcmpeq>
 8006352:	2800      	cmp	r0, #0
 8006354:	d001      	beq.n	800635a <__cvt+0xa6>
 8006356:	9b07      	ldr	r3, [sp, #28]
 8006358:	9309      	str	r3, [sp, #36]	; 0x24
 800635a:	2230      	movs	r2, #48	; 0x30
 800635c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800635e:	9907      	ldr	r1, [sp, #28]
 8006360:	428b      	cmp	r3, r1
 8006362:	d306      	bcc.n	8006372 <__cvt+0xbe>
 8006364:	0028      	movs	r0, r5
 8006366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006368:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800636a:	1b5b      	subs	r3, r3, r5
 800636c:	6013      	str	r3, [r2, #0]
 800636e:	b00b      	add	sp, #44	; 0x2c
 8006370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006372:	1c59      	adds	r1, r3, #1
 8006374:	9109      	str	r1, [sp, #36]	; 0x24
 8006376:	701a      	strb	r2, [r3, #0]
 8006378:	e7f0      	b.n	800635c <__cvt+0xa8>

0800637a <__exponent>:
 800637a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800637c:	1c83      	adds	r3, r0, #2
 800637e:	b087      	sub	sp, #28
 8006380:	9303      	str	r3, [sp, #12]
 8006382:	0005      	movs	r5, r0
 8006384:	000c      	movs	r4, r1
 8006386:	232b      	movs	r3, #43	; 0x2b
 8006388:	7002      	strb	r2, [r0, #0]
 800638a:	2900      	cmp	r1, #0
 800638c:	da01      	bge.n	8006392 <__exponent+0x18>
 800638e:	424c      	negs	r4, r1
 8006390:	3302      	adds	r3, #2
 8006392:	706b      	strb	r3, [r5, #1]
 8006394:	2c09      	cmp	r4, #9
 8006396:	dd31      	ble.n	80063fc <__exponent+0x82>
 8006398:	270a      	movs	r7, #10
 800639a:	ab04      	add	r3, sp, #16
 800639c:	1dde      	adds	r6, r3, #7
 800639e:	0020      	movs	r0, r4
 80063a0:	0039      	movs	r1, r7
 80063a2:	9601      	str	r6, [sp, #4]
 80063a4:	f7fa f83a 	bl	800041c <__aeabi_idivmod>
 80063a8:	3e01      	subs	r6, #1
 80063aa:	3130      	adds	r1, #48	; 0x30
 80063ac:	0020      	movs	r0, r4
 80063ae:	7031      	strb	r1, [r6, #0]
 80063b0:	0039      	movs	r1, r7
 80063b2:	9402      	str	r4, [sp, #8]
 80063b4:	f7f9 ff4c 	bl	8000250 <__divsi3>
 80063b8:	9b02      	ldr	r3, [sp, #8]
 80063ba:	0004      	movs	r4, r0
 80063bc:	2b63      	cmp	r3, #99	; 0x63
 80063be:	dcee      	bgt.n	800639e <__exponent+0x24>
 80063c0:	9b01      	ldr	r3, [sp, #4]
 80063c2:	3430      	adds	r4, #48	; 0x30
 80063c4:	1e9a      	subs	r2, r3, #2
 80063c6:	0013      	movs	r3, r2
 80063c8:	9903      	ldr	r1, [sp, #12]
 80063ca:	7014      	strb	r4, [r2, #0]
 80063cc:	a804      	add	r0, sp, #16
 80063ce:	3007      	adds	r0, #7
 80063d0:	4298      	cmp	r0, r3
 80063d2:	d80e      	bhi.n	80063f2 <__exponent+0x78>
 80063d4:	ab04      	add	r3, sp, #16
 80063d6:	3307      	adds	r3, #7
 80063d8:	2000      	movs	r0, #0
 80063da:	429a      	cmp	r2, r3
 80063dc:	d804      	bhi.n	80063e8 <__exponent+0x6e>
 80063de:	ab04      	add	r3, sp, #16
 80063e0:	3009      	adds	r0, #9
 80063e2:	18c0      	adds	r0, r0, r3
 80063e4:	9b01      	ldr	r3, [sp, #4]
 80063e6:	1ac0      	subs	r0, r0, r3
 80063e8:	9b03      	ldr	r3, [sp, #12]
 80063ea:	1818      	adds	r0, r3, r0
 80063ec:	1b40      	subs	r0, r0, r5
 80063ee:	b007      	add	sp, #28
 80063f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063f2:	7818      	ldrb	r0, [r3, #0]
 80063f4:	3301      	adds	r3, #1
 80063f6:	7008      	strb	r0, [r1, #0]
 80063f8:	3101      	adds	r1, #1
 80063fa:	e7e7      	b.n	80063cc <__exponent+0x52>
 80063fc:	2330      	movs	r3, #48	; 0x30
 80063fe:	18e4      	adds	r4, r4, r3
 8006400:	70ab      	strb	r3, [r5, #2]
 8006402:	1d28      	adds	r0, r5, #4
 8006404:	70ec      	strb	r4, [r5, #3]
 8006406:	e7f1      	b.n	80063ec <__exponent+0x72>

08006408 <_printf_float>:
 8006408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800640a:	b095      	sub	sp, #84	; 0x54
 800640c:	000c      	movs	r4, r1
 800640e:	9209      	str	r2, [sp, #36]	; 0x24
 8006410:	001e      	movs	r6, r3
 8006412:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006414:	0007      	movs	r7, r0
 8006416:	f001 fa81 	bl	800791c <_localeconv_r>
 800641a:	6803      	ldr	r3, [r0, #0]
 800641c:	0018      	movs	r0, r3
 800641e:	930c      	str	r3, [sp, #48]	; 0x30
 8006420:	f7f9 fe70 	bl	8000104 <strlen>
 8006424:	2300      	movs	r3, #0
 8006426:	9312      	str	r3, [sp, #72]	; 0x48
 8006428:	7e23      	ldrb	r3, [r4, #24]
 800642a:	2207      	movs	r2, #7
 800642c:	930a      	str	r3, [sp, #40]	; 0x28
 800642e:	6823      	ldr	r3, [r4, #0]
 8006430:	900e      	str	r0, [sp, #56]	; 0x38
 8006432:	930d      	str	r3, [sp, #52]	; 0x34
 8006434:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006436:	682b      	ldr	r3, [r5, #0]
 8006438:	05c9      	lsls	r1, r1, #23
 800643a:	d547      	bpl.n	80064cc <_printf_float+0xc4>
 800643c:	189b      	adds	r3, r3, r2
 800643e:	4393      	bics	r3, r2
 8006440:	001a      	movs	r2, r3
 8006442:	3208      	adds	r2, #8
 8006444:	602a      	str	r2, [r5, #0]
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	64a2      	str	r2, [r4, #72]	; 0x48
 800644c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800644e:	2201      	movs	r2, #1
 8006450:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006452:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8006454:	930b      	str	r3, [sp, #44]	; 0x2c
 8006456:	006b      	lsls	r3, r5, #1
 8006458:	085b      	lsrs	r3, r3, #1
 800645a:	930f      	str	r3, [sp, #60]	; 0x3c
 800645c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800645e:	4ba7      	ldr	r3, [pc, #668]	; (80066fc <_printf_float+0x2f4>)
 8006460:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006462:	4252      	negs	r2, r2
 8006464:	f7fb ffac 	bl	80023c0 <__aeabi_dcmpun>
 8006468:	2800      	cmp	r0, #0
 800646a:	d131      	bne.n	80064d0 <_printf_float+0xc8>
 800646c:	2201      	movs	r2, #1
 800646e:	4ba3      	ldr	r3, [pc, #652]	; (80066fc <_printf_float+0x2f4>)
 8006470:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006472:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006474:	4252      	negs	r2, r2
 8006476:	f7f9 fff7 	bl	8000468 <__aeabi_dcmple>
 800647a:	2800      	cmp	r0, #0
 800647c:	d128      	bne.n	80064d0 <_printf_float+0xc8>
 800647e:	2200      	movs	r2, #0
 8006480:	2300      	movs	r3, #0
 8006482:	0029      	movs	r1, r5
 8006484:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006486:	f7f9 ffe5 	bl	8000454 <__aeabi_dcmplt>
 800648a:	2800      	cmp	r0, #0
 800648c:	d003      	beq.n	8006496 <_printf_float+0x8e>
 800648e:	0023      	movs	r3, r4
 8006490:	222d      	movs	r2, #45	; 0x2d
 8006492:	3343      	adds	r3, #67	; 0x43
 8006494:	701a      	strb	r2, [r3, #0]
 8006496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006498:	4d99      	ldr	r5, [pc, #612]	; (8006700 <_printf_float+0x2f8>)
 800649a:	2b47      	cmp	r3, #71	; 0x47
 800649c:	d900      	bls.n	80064a0 <_printf_float+0x98>
 800649e:	4d99      	ldr	r5, [pc, #612]	; (8006704 <_printf_float+0x2fc>)
 80064a0:	2303      	movs	r3, #3
 80064a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80064a4:	6123      	str	r3, [r4, #16]
 80064a6:	3301      	adds	r3, #1
 80064a8:	439a      	bics	r2, r3
 80064aa:	2300      	movs	r3, #0
 80064ac:	6022      	str	r2, [r4, #0]
 80064ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80064b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064b2:	0021      	movs	r1, r4
 80064b4:	0038      	movs	r0, r7
 80064b6:	9600      	str	r6, [sp, #0]
 80064b8:	aa13      	add	r2, sp, #76	; 0x4c
 80064ba:	f000 f9e7 	bl	800688c <_printf_common>
 80064be:	1c43      	adds	r3, r0, #1
 80064c0:	d000      	beq.n	80064c4 <_printf_float+0xbc>
 80064c2:	e0a2      	b.n	800660a <_printf_float+0x202>
 80064c4:	2001      	movs	r0, #1
 80064c6:	4240      	negs	r0, r0
 80064c8:	b015      	add	sp, #84	; 0x54
 80064ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064cc:	3307      	adds	r3, #7
 80064ce:	e7b6      	b.n	800643e <_printf_float+0x36>
 80064d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80064d2:	002b      	movs	r3, r5
 80064d4:	0010      	movs	r0, r2
 80064d6:	0029      	movs	r1, r5
 80064d8:	f7fb ff72 	bl	80023c0 <__aeabi_dcmpun>
 80064dc:	2800      	cmp	r0, #0
 80064de:	d00b      	beq.n	80064f8 <_printf_float+0xf0>
 80064e0:	2d00      	cmp	r5, #0
 80064e2:	da03      	bge.n	80064ec <_printf_float+0xe4>
 80064e4:	0023      	movs	r3, r4
 80064e6:	222d      	movs	r2, #45	; 0x2d
 80064e8:	3343      	adds	r3, #67	; 0x43
 80064ea:	701a      	strb	r2, [r3, #0]
 80064ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064ee:	4d86      	ldr	r5, [pc, #536]	; (8006708 <_printf_float+0x300>)
 80064f0:	2b47      	cmp	r3, #71	; 0x47
 80064f2:	d9d5      	bls.n	80064a0 <_printf_float+0x98>
 80064f4:	4d85      	ldr	r5, [pc, #532]	; (800670c <_printf_float+0x304>)
 80064f6:	e7d3      	b.n	80064a0 <_printf_float+0x98>
 80064f8:	2220      	movs	r2, #32
 80064fa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80064fc:	6863      	ldr	r3, [r4, #4]
 80064fe:	4391      	bics	r1, r2
 8006500:	910f      	str	r1, [sp, #60]	; 0x3c
 8006502:	1c5a      	adds	r2, r3, #1
 8006504:	d149      	bne.n	800659a <_printf_float+0x192>
 8006506:	3307      	adds	r3, #7
 8006508:	6063      	str	r3, [r4, #4]
 800650a:	2380      	movs	r3, #128	; 0x80
 800650c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800650e:	00db      	lsls	r3, r3, #3
 8006510:	4313      	orrs	r3, r2
 8006512:	2200      	movs	r2, #0
 8006514:	9206      	str	r2, [sp, #24]
 8006516:	aa12      	add	r2, sp, #72	; 0x48
 8006518:	9205      	str	r2, [sp, #20]
 800651a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800651c:	a908      	add	r1, sp, #32
 800651e:	9204      	str	r2, [sp, #16]
 8006520:	aa11      	add	r2, sp, #68	; 0x44
 8006522:	9203      	str	r2, [sp, #12]
 8006524:	2223      	movs	r2, #35	; 0x23
 8006526:	6023      	str	r3, [r4, #0]
 8006528:	9301      	str	r3, [sp, #4]
 800652a:	6863      	ldr	r3, [r4, #4]
 800652c:	1852      	adds	r2, r2, r1
 800652e:	9202      	str	r2, [sp, #8]
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	0038      	movs	r0, r7
 8006534:	002b      	movs	r3, r5
 8006536:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006538:	f7ff febc 	bl	80062b4 <__cvt>
 800653c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800653e:	0005      	movs	r5, r0
 8006540:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006542:	2b47      	cmp	r3, #71	; 0x47
 8006544:	d108      	bne.n	8006558 <_printf_float+0x150>
 8006546:	1ccb      	adds	r3, r1, #3
 8006548:	db02      	blt.n	8006550 <_printf_float+0x148>
 800654a:	6863      	ldr	r3, [r4, #4]
 800654c:	4299      	cmp	r1, r3
 800654e:	dd48      	ble.n	80065e2 <_printf_float+0x1da>
 8006550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006552:	3b02      	subs	r3, #2
 8006554:	b2db      	uxtb	r3, r3
 8006556:	930a      	str	r3, [sp, #40]	; 0x28
 8006558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800655a:	2b65      	cmp	r3, #101	; 0x65
 800655c:	d824      	bhi.n	80065a8 <_printf_float+0x1a0>
 800655e:	0020      	movs	r0, r4
 8006560:	001a      	movs	r2, r3
 8006562:	3901      	subs	r1, #1
 8006564:	3050      	adds	r0, #80	; 0x50
 8006566:	9111      	str	r1, [sp, #68]	; 0x44
 8006568:	f7ff ff07 	bl	800637a <__exponent>
 800656c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800656e:	900b      	str	r0, [sp, #44]	; 0x2c
 8006570:	1813      	adds	r3, r2, r0
 8006572:	6123      	str	r3, [r4, #16]
 8006574:	2a01      	cmp	r2, #1
 8006576:	dc02      	bgt.n	800657e <_printf_float+0x176>
 8006578:	6822      	ldr	r2, [r4, #0]
 800657a:	07d2      	lsls	r2, r2, #31
 800657c:	d501      	bpl.n	8006582 <_printf_float+0x17a>
 800657e:	3301      	adds	r3, #1
 8006580:	6123      	str	r3, [r4, #16]
 8006582:	2323      	movs	r3, #35	; 0x23
 8006584:	aa08      	add	r2, sp, #32
 8006586:	189b      	adds	r3, r3, r2
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d100      	bne.n	8006590 <_printf_float+0x188>
 800658e:	e78f      	b.n	80064b0 <_printf_float+0xa8>
 8006590:	0023      	movs	r3, r4
 8006592:	222d      	movs	r2, #45	; 0x2d
 8006594:	3343      	adds	r3, #67	; 0x43
 8006596:	701a      	strb	r2, [r3, #0]
 8006598:	e78a      	b.n	80064b0 <_printf_float+0xa8>
 800659a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800659c:	2a47      	cmp	r2, #71	; 0x47
 800659e:	d1b4      	bne.n	800650a <_printf_float+0x102>
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d1b2      	bne.n	800650a <_printf_float+0x102>
 80065a4:	3301      	adds	r3, #1
 80065a6:	e7af      	b.n	8006508 <_printf_float+0x100>
 80065a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065aa:	2b66      	cmp	r3, #102	; 0x66
 80065ac:	d11b      	bne.n	80065e6 <_printf_float+0x1de>
 80065ae:	6863      	ldr	r3, [r4, #4]
 80065b0:	2900      	cmp	r1, #0
 80065b2:	dd0d      	ble.n	80065d0 <_printf_float+0x1c8>
 80065b4:	6121      	str	r1, [r4, #16]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d102      	bne.n	80065c0 <_printf_float+0x1b8>
 80065ba:	6822      	ldr	r2, [r4, #0]
 80065bc:	07d2      	lsls	r2, r2, #31
 80065be:	d502      	bpl.n	80065c6 <_printf_float+0x1be>
 80065c0:	3301      	adds	r3, #1
 80065c2:	1859      	adds	r1, r3, r1
 80065c4:	6121      	str	r1, [r4, #16]
 80065c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80065c8:	65a3      	str	r3, [r4, #88]	; 0x58
 80065ca:	2300      	movs	r3, #0
 80065cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80065ce:	e7d8      	b.n	8006582 <_printf_float+0x17a>
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d103      	bne.n	80065dc <_printf_float+0x1d4>
 80065d4:	2201      	movs	r2, #1
 80065d6:	6821      	ldr	r1, [r4, #0]
 80065d8:	4211      	tst	r1, r2
 80065da:	d000      	beq.n	80065de <_printf_float+0x1d6>
 80065dc:	1c9a      	adds	r2, r3, #2
 80065de:	6122      	str	r2, [r4, #16]
 80065e0:	e7f1      	b.n	80065c6 <_printf_float+0x1be>
 80065e2:	2367      	movs	r3, #103	; 0x67
 80065e4:	930a      	str	r3, [sp, #40]	; 0x28
 80065e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80065e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80065ea:	4293      	cmp	r3, r2
 80065ec:	db06      	blt.n	80065fc <_printf_float+0x1f4>
 80065ee:	6822      	ldr	r2, [r4, #0]
 80065f0:	6123      	str	r3, [r4, #16]
 80065f2:	07d2      	lsls	r2, r2, #31
 80065f4:	d5e7      	bpl.n	80065c6 <_printf_float+0x1be>
 80065f6:	3301      	adds	r3, #1
 80065f8:	6123      	str	r3, [r4, #16]
 80065fa:	e7e4      	b.n	80065c6 <_printf_float+0x1be>
 80065fc:	2101      	movs	r1, #1
 80065fe:	2b00      	cmp	r3, #0
 8006600:	dc01      	bgt.n	8006606 <_printf_float+0x1fe>
 8006602:	1849      	adds	r1, r1, r1
 8006604:	1ac9      	subs	r1, r1, r3
 8006606:	1852      	adds	r2, r2, r1
 8006608:	e7e9      	b.n	80065de <_printf_float+0x1d6>
 800660a:	6822      	ldr	r2, [r4, #0]
 800660c:	0553      	lsls	r3, r2, #21
 800660e:	d407      	bmi.n	8006620 <_printf_float+0x218>
 8006610:	6923      	ldr	r3, [r4, #16]
 8006612:	002a      	movs	r2, r5
 8006614:	0038      	movs	r0, r7
 8006616:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006618:	47b0      	blx	r6
 800661a:	1c43      	adds	r3, r0, #1
 800661c:	d128      	bne.n	8006670 <_printf_float+0x268>
 800661e:	e751      	b.n	80064c4 <_printf_float+0xbc>
 8006620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006622:	2b65      	cmp	r3, #101	; 0x65
 8006624:	d800      	bhi.n	8006628 <_printf_float+0x220>
 8006626:	e0e1      	b.n	80067ec <_printf_float+0x3e4>
 8006628:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800662a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800662c:	2200      	movs	r2, #0
 800662e:	2300      	movs	r3, #0
 8006630:	f7f9 ff0a 	bl	8000448 <__aeabi_dcmpeq>
 8006634:	2800      	cmp	r0, #0
 8006636:	d031      	beq.n	800669c <_printf_float+0x294>
 8006638:	2301      	movs	r3, #1
 800663a:	0038      	movs	r0, r7
 800663c:	4a34      	ldr	r2, [pc, #208]	; (8006710 <_printf_float+0x308>)
 800663e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006640:	47b0      	blx	r6
 8006642:	1c43      	adds	r3, r0, #1
 8006644:	d100      	bne.n	8006648 <_printf_float+0x240>
 8006646:	e73d      	b.n	80064c4 <_printf_float+0xbc>
 8006648:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800664a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800664c:	4293      	cmp	r3, r2
 800664e:	db02      	blt.n	8006656 <_printf_float+0x24e>
 8006650:	6823      	ldr	r3, [r4, #0]
 8006652:	07db      	lsls	r3, r3, #31
 8006654:	d50c      	bpl.n	8006670 <_printf_float+0x268>
 8006656:	0038      	movs	r0, r7
 8006658:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800665a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800665c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800665e:	47b0      	blx	r6
 8006660:	2500      	movs	r5, #0
 8006662:	1c43      	adds	r3, r0, #1
 8006664:	d100      	bne.n	8006668 <_printf_float+0x260>
 8006666:	e72d      	b.n	80064c4 <_printf_float+0xbc>
 8006668:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800666a:	3b01      	subs	r3, #1
 800666c:	42ab      	cmp	r3, r5
 800666e:	dc0a      	bgt.n	8006686 <_printf_float+0x27e>
 8006670:	6823      	ldr	r3, [r4, #0]
 8006672:	079b      	lsls	r3, r3, #30
 8006674:	d500      	bpl.n	8006678 <_printf_float+0x270>
 8006676:	e106      	b.n	8006886 <_printf_float+0x47e>
 8006678:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800667a:	68e0      	ldr	r0, [r4, #12]
 800667c:	4298      	cmp	r0, r3
 800667e:	db00      	blt.n	8006682 <_printf_float+0x27a>
 8006680:	e722      	b.n	80064c8 <_printf_float+0xc0>
 8006682:	0018      	movs	r0, r3
 8006684:	e720      	b.n	80064c8 <_printf_float+0xc0>
 8006686:	0022      	movs	r2, r4
 8006688:	2301      	movs	r3, #1
 800668a:	0038      	movs	r0, r7
 800668c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800668e:	321a      	adds	r2, #26
 8006690:	47b0      	blx	r6
 8006692:	1c43      	adds	r3, r0, #1
 8006694:	d100      	bne.n	8006698 <_printf_float+0x290>
 8006696:	e715      	b.n	80064c4 <_printf_float+0xbc>
 8006698:	3501      	adds	r5, #1
 800669a:	e7e5      	b.n	8006668 <_printf_float+0x260>
 800669c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800669e:	2b00      	cmp	r3, #0
 80066a0:	dc38      	bgt.n	8006714 <_printf_float+0x30c>
 80066a2:	2301      	movs	r3, #1
 80066a4:	0038      	movs	r0, r7
 80066a6:	4a1a      	ldr	r2, [pc, #104]	; (8006710 <_printf_float+0x308>)
 80066a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066aa:	47b0      	blx	r6
 80066ac:	1c43      	adds	r3, r0, #1
 80066ae:	d100      	bne.n	80066b2 <_printf_float+0x2aa>
 80066b0:	e708      	b.n	80064c4 <_printf_float+0xbc>
 80066b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80066b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80066b6:	4313      	orrs	r3, r2
 80066b8:	d102      	bne.n	80066c0 <_printf_float+0x2b8>
 80066ba:	6823      	ldr	r3, [r4, #0]
 80066bc:	07db      	lsls	r3, r3, #31
 80066be:	d5d7      	bpl.n	8006670 <_printf_float+0x268>
 80066c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066c2:	0038      	movs	r0, r7
 80066c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80066c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066c8:	47b0      	blx	r6
 80066ca:	1c43      	adds	r3, r0, #1
 80066cc:	d100      	bne.n	80066d0 <_printf_float+0x2c8>
 80066ce:	e6f9      	b.n	80064c4 <_printf_float+0xbc>
 80066d0:	2300      	movs	r3, #0
 80066d2:	930a      	str	r3, [sp, #40]	; 0x28
 80066d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80066d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066d8:	425b      	negs	r3, r3
 80066da:	4293      	cmp	r3, r2
 80066dc:	dc01      	bgt.n	80066e2 <_printf_float+0x2da>
 80066de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80066e0:	e797      	b.n	8006612 <_printf_float+0x20a>
 80066e2:	0022      	movs	r2, r4
 80066e4:	2301      	movs	r3, #1
 80066e6:	0038      	movs	r0, r7
 80066e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066ea:	321a      	adds	r2, #26
 80066ec:	47b0      	blx	r6
 80066ee:	1c43      	adds	r3, r0, #1
 80066f0:	d100      	bne.n	80066f4 <_printf_float+0x2ec>
 80066f2:	e6e7      	b.n	80064c4 <_printf_float+0xbc>
 80066f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066f6:	3301      	adds	r3, #1
 80066f8:	e7eb      	b.n	80066d2 <_printf_float+0x2ca>
 80066fa:	46c0      	nop			; (mov r8, r8)
 80066fc:	7fefffff 	.word	0x7fefffff
 8006700:	080093d8 	.word	0x080093d8
 8006704:	080093dc 	.word	0x080093dc
 8006708:	080093e0 	.word	0x080093e0
 800670c:	080093e4 	.word	0x080093e4
 8006710:	080093e8 	.word	0x080093e8
 8006714:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006716:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006718:	920a      	str	r2, [sp, #40]	; 0x28
 800671a:	429a      	cmp	r2, r3
 800671c:	dd00      	ble.n	8006720 <_printf_float+0x318>
 800671e:	930a      	str	r3, [sp, #40]	; 0x28
 8006720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006722:	2b00      	cmp	r3, #0
 8006724:	dc3c      	bgt.n	80067a0 <_printf_float+0x398>
 8006726:	2300      	movs	r3, #0
 8006728:	930d      	str	r3, [sp, #52]	; 0x34
 800672a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800672c:	43db      	mvns	r3, r3
 800672e:	17db      	asrs	r3, r3, #31
 8006730:	930f      	str	r3, [sp, #60]	; 0x3c
 8006732:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006734:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006736:	930b      	str	r3, [sp, #44]	; 0x2c
 8006738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800673a:	4013      	ands	r3, r2
 800673c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006742:	4293      	cmp	r3, r2
 8006744:	dc34      	bgt.n	80067b0 <_printf_float+0x3a8>
 8006746:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006748:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800674a:	4293      	cmp	r3, r2
 800674c:	db3d      	blt.n	80067ca <_printf_float+0x3c2>
 800674e:	6823      	ldr	r3, [r4, #0]
 8006750:	07db      	lsls	r3, r3, #31
 8006752:	d43a      	bmi.n	80067ca <_printf_float+0x3c2>
 8006754:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006756:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006758:	9911      	ldr	r1, [sp, #68]	; 0x44
 800675a:	1ad3      	subs	r3, r2, r3
 800675c:	1a52      	subs	r2, r2, r1
 800675e:	920a      	str	r2, [sp, #40]	; 0x28
 8006760:	429a      	cmp	r2, r3
 8006762:	dd00      	ble.n	8006766 <_printf_float+0x35e>
 8006764:	930a      	str	r3, [sp, #40]	; 0x28
 8006766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006768:	2b00      	cmp	r3, #0
 800676a:	dc36      	bgt.n	80067da <_printf_float+0x3d2>
 800676c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800676e:	2500      	movs	r5, #0
 8006770:	43db      	mvns	r3, r3
 8006772:	17db      	asrs	r3, r3, #31
 8006774:	930b      	str	r3, [sp, #44]	; 0x2c
 8006776:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006778:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800677a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800677c:	1a9b      	subs	r3, r3, r2
 800677e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006780:	400a      	ands	r2, r1
 8006782:	1a9b      	subs	r3, r3, r2
 8006784:	42ab      	cmp	r3, r5
 8006786:	dc00      	bgt.n	800678a <_printf_float+0x382>
 8006788:	e772      	b.n	8006670 <_printf_float+0x268>
 800678a:	0022      	movs	r2, r4
 800678c:	2301      	movs	r3, #1
 800678e:	0038      	movs	r0, r7
 8006790:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006792:	321a      	adds	r2, #26
 8006794:	47b0      	blx	r6
 8006796:	1c43      	adds	r3, r0, #1
 8006798:	d100      	bne.n	800679c <_printf_float+0x394>
 800679a:	e693      	b.n	80064c4 <_printf_float+0xbc>
 800679c:	3501      	adds	r5, #1
 800679e:	e7ea      	b.n	8006776 <_printf_float+0x36e>
 80067a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067a2:	002a      	movs	r2, r5
 80067a4:	0038      	movs	r0, r7
 80067a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067a8:	47b0      	blx	r6
 80067aa:	1c43      	adds	r3, r0, #1
 80067ac:	d1bb      	bne.n	8006726 <_printf_float+0x31e>
 80067ae:	e689      	b.n	80064c4 <_printf_float+0xbc>
 80067b0:	0022      	movs	r2, r4
 80067b2:	2301      	movs	r3, #1
 80067b4:	0038      	movs	r0, r7
 80067b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067b8:	321a      	adds	r2, #26
 80067ba:	47b0      	blx	r6
 80067bc:	1c43      	adds	r3, r0, #1
 80067be:	d100      	bne.n	80067c2 <_printf_float+0x3ba>
 80067c0:	e680      	b.n	80064c4 <_printf_float+0xbc>
 80067c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067c4:	3301      	adds	r3, #1
 80067c6:	930d      	str	r3, [sp, #52]	; 0x34
 80067c8:	e7b3      	b.n	8006732 <_printf_float+0x32a>
 80067ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067cc:	0038      	movs	r0, r7
 80067ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80067d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067d2:	47b0      	blx	r6
 80067d4:	1c43      	adds	r3, r0, #1
 80067d6:	d1bd      	bne.n	8006754 <_printf_float+0x34c>
 80067d8:	e674      	b.n	80064c4 <_printf_float+0xbc>
 80067da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067dc:	0038      	movs	r0, r7
 80067de:	18ea      	adds	r2, r5, r3
 80067e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067e4:	47b0      	blx	r6
 80067e6:	1c43      	adds	r3, r0, #1
 80067e8:	d1c0      	bne.n	800676c <_printf_float+0x364>
 80067ea:	e66b      	b.n	80064c4 <_printf_float+0xbc>
 80067ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	dc02      	bgt.n	80067f8 <_printf_float+0x3f0>
 80067f2:	2301      	movs	r3, #1
 80067f4:	421a      	tst	r2, r3
 80067f6:	d034      	beq.n	8006862 <_printf_float+0x45a>
 80067f8:	2301      	movs	r3, #1
 80067fa:	002a      	movs	r2, r5
 80067fc:	0038      	movs	r0, r7
 80067fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006800:	47b0      	blx	r6
 8006802:	1c43      	adds	r3, r0, #1
 8006804:	d100      	bne.n	8006808 <_printf_float+0x400>
 8006806:	e65d      	b.n	80064c4 <_printf_float+0xbc>
 8006808:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800680a:	0038      	movs	r0, r7
 800680c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800680e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006810:	47b0      	blx	r6
 8006812:	1c43      	adds	r3, r0, #1
 8006814:	d100      	bne.n	8006818 <_printf_float+0x410>
 8006816:	e655      	b.n	80064c4 <_printf_float+0xbc>
 8006818:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800681a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800681c:	2200      	movs	r2, #0
 800681e:	2300      	movs	r3, #0
 8006820:	f7f9 fe12 	bl	8000448 <__aeabi_dcmpeq>
 8006824:	2800      	cmp	r0, #0
 8006826:	d11a      	bne.n	800685e <_printf_float+0x456>
 8006828:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800682a:	1c6a      	adds	r2, r5, #1
 800682c:	3b01      	subs	r3, #1
 800682e:	0038      	movs	r0, r7
 8006830:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006832:	47b0      	blx	r6
 8006834:	1c43      	adds	r3, r0, #1
 8006836:	d10e      	bne.n	8006856 <_printf_float+0x44e>
 8006838:	e644      	b.n	80064c4 <_printf_float+0xbc>
 800683a:	0022      	movs	r2, r4
 800683c:	2301      	movs	r3, #1
 800683e:	0038      	movs	r0, r7
 8006840:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006842:	321a      	adds	r2, #26
 8006844:	47b0      	blx	r6
 8006846:	1c43      	adds	r3, r0, #1
 8006848:	d100      	bne.n	800684c <_printf_float+0x444>
 800684a:	e63b      	b.n	80064c4 <_printf_float+0xbc>
 800684c:	3501      	adds	r5, #1
 800684e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006850:	3b01      	subs	r3, #1
 8006852:	42ab      	cmp	r3, r5
 8006854:	dcf1      	bgt.n	800683a <_printf_float+0x432>
 8006856:	0022      	movs	r2, r4
 8006858:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800685a:	3250      	adds	r2, #80	; 0x50
 800685c:	e6da      	b.n	8006614 <_printf_float+0x20c>
 800685e:	2500      	movs	r5, #0
 8006860:	e7f5      	b.n	800684e <_printf_float+0x446>
 8006862:	002a      	movs	r2, r5
 8006864:	e7e3      	b.n	800682e <_printf_float+0x426>
 8006866:	0022      	movs	r2, r4
 8006868:	2301      	movs	r3, #1
 800686a:	0038      	movs	r0, r7
 800686c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800686e:	3219      	adds	r2, #25
 8006870:	47b0      	blx	r6
 8006872:	1c43      	adds	r3, r0, #1
 8006874:	d100      	bne.n	8006878 <_printf_float+0x470>
 8006876:	e625      	b.n	80064c4 <_printf_float+0xbc>
 8006878:	3501      	adds	r5, #1
 800687a:	68e3      	ldr	r3, [r4, #12]
 800687c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800687e:	1a9b      	subs	r3, r3, r2
 8006880:	42ab      	cmp	r3, r5
 8006882:	dcf0      	bgt.n	8006866 <_printf_float+0x45e>
 8006884:	e6f8      	b.n	8006678 <_printf_float+0x270>
 8006886:	2500      	movs	r5, #0
 8006888:	e7f7      	b.n	800687a <_printf_float+0x472>
 800688a:	46c0      	nop			; (mov r8, r8)

0800688c <_printf_common>:
 800688c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800688e:	0015      	movs	r5, r2
 8006890:	9301      	str	r3, [sp, #4]
 8006892:	688a      	ldr	r2, [r1, #8]
 8006894:	690b      	ldr	r3, [r1, #16]
 8006896:	000c      	movs	r4, r1
 8006898:	9000      	str	r0, [sp, #0]
 800689a:	4293      	cmp	r3, r2
 800689c:	da00      	bge.n	80068a0 <_printf_common+0x14>
 800689e:	0013      	movs	r3, r2
 80068a0:	0022      	movs	r2, r4
 80068a2:	602b      	str	r3, [r5, #0]
 80068a4:	3243      	adds	r2, #67	; 0x43
 80068a6:	7812      	ldrb	r2, [r2, #0]
 80068a8:	2a00      	cmp	r2, #0
 80068aa:	d001      	beq.n	80068b0 <_printf_common+0x24>
 80068ac:	3301      	adds	r3, #1
 80068ae:	602b      	str	r3, [r5, #0]
 80068b0:	6823      	ldr	r3, [r4, #0]
 80068b2:	069b      	lsls	r3, r3, #26
 80068b4:	d502      	bpl.n	80068bc <_printf_common+0x30>
 80068b6:	682b      	ldr	r3, [r5, #0]
 80068b8:	3302      	adds	r3, #2
 80068ba:	602b      	str	r3, [r5, #0]
 80068bc:	6822      	ldr	r2, [r4, #0]
 80068be:	2306      	movs	r3, #6
 80068c0:	0017      	movs	r7, r2
 80068c2:	401f      	ands	r7, r3
 80068c4:	421a      	tst	r2, r3
 80068c6:	d027      	beq.n	8006918 <_printf_common+0x8c>
 80068c8:	0023      	movs	r3, r4
 80068ca:	3343      	adds	r3, #67	; 0x43
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	1e5a      	subs	r2, r3, #1
 80068d0:	4193      	sbcs	r3, r2
 80068d2:	6822      	ldr	r2, [r4, #0]
 80068d4:	0692      	lsls	r2, r2, #26
 80068d6:	d430      	bmi.n	800693a <_printf_common+0xae>
 80068d8:	0022      	movs	r2, r4
 80068da:	9901      	ldr	r1, [sp, #4]
 80068dc:	9800      	ldr	r0, [sp, #0]
 80068de:	9e08      	ldr	r6, [sp, #32]
 80068e0:	3243      	adds	r2, #67	; 0x43
 80068e2:	47b0      	blx	r6
 80068e4:	1c43      	adds	r3, r0, #1
 80068e6:	d025      	beq.n	8006934 <_printf_common+0xa8>
 80068e8:	2306      	movs	r3, #6
 80068ea:	6820      	ldr	r0, [r4, #0]
 80068ec:	682a      	ldr	r2, [r5, #0]
 80068ee:	68e1      	ldr	r1, [r4, #12]
 80068f0:	2500      	movs	r5, #0
 80068f2:	4003      	ands	r3, r0
 80068f4:	2b04      	cmp	r3, #4
 80068f6:	d103      	bne.n	8006900 <_printf_common+0x74>
 80068f8:	1a8d      	subs	r5, r1, r2
 80068fa:	43eb      	mvns	r3, r5
 80068fc:	17db      	asrs	r3, r3, #31
 80068fe:	401d      	ands	r5, r3
 8006900:	68a3      	ldr	r3, [r4, #8]
 8006902:	6922      	ldr	r2, [r4, #16]
 8006904:	4293      	cmp	r3, r2
 8006906:	dd01      	ble.n	800690c <_printf_common+0x80>
 8006908:	1a9b      	subs	r3, r3, r2
 800690a:	18ed      	adds	r5, r5, r3
 800690c:	2700      	movs	r7, #0
 800690e:	42bd      	cmp	r5, r7
 8006910:	d120      	bne.n	8006954 <_printf_common+0xc8>
 8006912:	2000      	movs	r0, #0
 8006914:	e010      	b.n	8006938 <_printf_common+0xac>
 8006916:	3701      	adds	r7, #1
 8006918:	68e3      	ldr	r3, [r4, #12]
 800691a:	682a      	ldr	r2, [r5, #0]
 800691c:	1a9b      	subs	r3, r3, r2
 800691e:	42bb      	cmp	r3, r7
 8006920:	ddd2      	ble.n	80068c8 <_printf_common+0x3c>
 8006922:	0022      	movs	r2, r4
 8006924:	2301      	movs	r3, #1
 8006926:	9901      	ldr	r1, [sp, #4]
 8006928:	9800      	ldr	r0, [sp, #0]
 800692a:	9e08      	ldr	r6, [sp, #32]
 800692c:	3219      	adds	r2, #25
 800692e:	47b0      	blx	r6
 8006930:	1c43      	adds	r3, r0, #1
 8006932:	d1f0      	bne.n	8006916 <_printf_common+0x8a>
 8006934:	2001      	movs	r0, #1
 8006936:	4240      	negs	r0, r0
 8006938:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800693a:	2030      	movs	r0, #48	; 0x30
 800693c:	18e1      	adds	r1, r4, r3
 800693e:	3143      	adds	r1, #67	; 0x43
 8006940:	7008      	strb	r0, [r1, #0]
 8006942:	0021      	movs	r1, r4
 8006944:	1c5a      	adds	r2, r3, #1
 8006946:	3145      	adds	r1, #69	; 0x45
 8006948:	7809      	ldrb	r1, [r1, #0]
 800694a:	18a2      	adds	r2, r4, r2
 800694c:	3243      	adds	r2, #67	; 0x43
 800694e:	3302      	adds	r3, #2
 8006950:	7011      	strb	r1, [r2, #0]
 8006952:	e7c1      	b.n	80068d8 <_printf_common+0x4c>
 8006954:	0022      	movs	r2, r4
 8006956:	2301      	movs	r3, #1
 8006958:	9901      	ldr	r1, [sp, #4]
 800695a:	9800      	ldr	r0, [sp, #0]
 800695c:	9e08      	ldr	r6, [sp, #32]
 800695e:	321a      	adds	r2, #26
 8006960:	47b0      	blx	r6
 8006962:	1c43      	adds	r3, r0, #1
 8006964:	d0e6      	beq.n	8006934 <_printf_common+0xa8>
 8006966:	3701      	adds	r7, #1
 8006968:	e7d1      	b.n	800690e <_printf_common+0x82>
	...

0800696c <_printf_i>:
 800696c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800696e:	b08b      	sub	sp, #44	; 0x2c
 8006970:	9206      	str	r2, [sp, #24]
 8006972:	000a      	movs	r2, r1
 8006974:	3243      	adds	r2, #67	; 0x43
 8006976:	9307      	str	r3, [sp, #28]
 8006978:	9005      	str	r0, [sp, #20]
 800697a:	9204      	str	r2, [sp, #16]
 800697c:	7e0a      	ldrb	r2, [r1, #24]
 800697e:	000c      	movs	r4, r1
 8006980:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006982:	2a78      	cmp	r2, #120	; 0x78
 8006984:	d807      	bhi.n	8006996 <_printf_i+0x2a>
 8006986:	2a62      	cmp	r2, #98	; 0x62
 8006988:	d809      	bhi.n	800699e <_printf_i+0x32>
 800698a:	2a00      	cmp	r2, #0
 800698c:	d100      	bne.n	8006990 <_printf_i+0x24>
 800698e:	e0c1      	b.n	8006b14 <_printf_i+0x1a8>
 8006990:	2a58      	cmp	r2, #88	; 0x58
 8006992:	d100      	bne.n	8006996 <_printf_i+0x2a>
 8006994:	e08c      	b.n	8006ab0 <_printf_i+0x144>
 8006996:	0026      	movs	r6, r4
 8006998:	3642      	adds	r6, #66	; 0x42
 800699a:	7032      	strb	r2, [r6, #0]
 800699c:	e022      	b.n	80069e4 <_printf_i+0x78>
 800699e:	0010      	movs	r0, r2
 80069a0:	3863      	subs	r0, #99	; 0x63
 80069a2:	2815      	cmp	r0, #21
 80069a4:	d8f7      	bhi.n	8006996 <_printf_i+0x2a>
 80069a6:	f7f9 fbbf 	bl	8000128 <__gnu_thumb1_case_shi>
 80069aa:	0016      	.short	0x0016
 80069ac:	fff6001f 	.word	0xfff6001f
 80069b0:	fff6fff6 	.word	0xfff6fff6
 80069b4:	001ffff6 	.word	0x001ffff6
 80069b8:	fff6fff6 	.word	0xfff6fff6
 80069bc:	fff6fff6 	.word	0xfff6fff6
 80069c0:	003600a8 	.word	0x003600a8
 80069c4:	fff6009a 	.word	0xfff6009a
 80069c8:	00b9fff6 	.word	0x00b9fff6
 80069cc:	0036fff6 	.word	0x0036fff6
 80069d0:	fff6fff6 	.word	0xfff6fff6
 80069d4:	009e      	.short	0x009e
 80069d6:	0026      	movs	r6, r4
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	3642      	adds	r6, #66	; 0x42
 80069dc:	1d11      	adds	r1, r2, #4
 80069de:	6019      	str	r1, [r3, #0]
 80069e0:	6813      	ldr	r3, [r2, #0]
 80069e2:	7033      	strb	r3, [r6, #0]
 80069e4:	2301      	movs	r3, #1
 80069e6:	e0a7      	b.n	8006b38 <_printf_i+0x1cc>
 80069e8:	6808      	ldr	r0, [r1, #0]
 80069ea:	6819      	ldr	r1, [r3, #0]
 80069ec:	1d0a      	adds	r2, r1, #4
 80069ee:	0605      	lsls	r5, r0, #24
 80069f0:	d50b      	bpl.n	8006a0a <_printf_i+0x9e>
 80069f2:	680d      	ldr	r5, [r1, #0]
 80069f4:	601a      	str	r2, [r3, #0]
 80069f6:	2d00      	cmp	r5, #0
 80069f8:	da03      	bge.n	8006a02 <_printf_i+0x96>
 80069fa:	232d      	movs	r3, #45	; 0x2d
 80069fc:	9a04      	ldr	r2, [sp, #16]
 80069fe:	426d      	negs	r5, r5
 8006a00:	7013      	strb	r3, [r2, #0]
 8006a02:	4b61      	ldr	r3, [pc, #388]	; (8006b88 <_printf_i+0x21c>)
 8006a04:	270a      	movs	r7, #10
 8006a06:	9303      	str	r3, [sp, #12]
 8006a08:	e01b      	b.n	8006a42 <_printf_i+0xd6>
 8006a0a:	680d      	ldr	r5, [r1, #0]
 8006a0c:	601a      	str	r2, [r3, #0]
 8006a0e:	0641      	lsls	r1, r0, #25
 8006a10:	d5f1      	bpl.n	80069f6 <_printf_i+0x8a>
 8006a12:	b22d      	sxth	r5, r5
 8006a14:	e7ef      	b.n	80069f6 <_printf_i+0x8a>
 8006a16:	680d      	ldr	r5, [r1, #0]
 8006a18:	6819      	ldr	r1, [r3, #0]
 8006a1a:	1d08      	adds	r0, r1, #4
 8006a1c:	6018      	str	r0, [r3, #0]
 8006a1e:	062e      	lsls	r6, r5, #24
 8006a20:	d501      	bpl.n	8006a26 <_printf_i+0xba>
 8006a22:	680d      	ldr	r5, [r1, #0]
 8006a24:	e003      	b.n	8006a2e <_printf_i+0xc2>
 8006a26:	066d      	lsls	r5, r5, #25
 8006a28:	d5fb      	bpl.n	8006a22 <_printf_i+0xb6>
 8006a2a:	680d      	ldr	r5, [r1, #0]
 8006a2c:	b2ad      	uxth	r5, r5
 8006a2e:	4b56      	ldr	r3, [pc, #344]	; (8006b88 <_printf_i+0x21c>)
 8006a30:	2708      	movs	r7, #8
 8006a32:	9303      	str	r3, [sp, #12]
 8006a34:	2a6f      	cmp	r2, #111	; 0x6f
 8006a36:	d000      	beq.n	8006a3a <_printf_i+0xce>
 8006a38:	3702      	adds	r7, #2
 8006a3a:	0023      	movs	r3, r4
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	3343      	adds	r3, #67	; 0x43
 8006a40:	701a      	strb	r2, [r3, #0]
 8006a42:	6863      	ldr	r3, [r4, #4]
 8006a44:	60a3      	str	r3, [r4, #8]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	db03      	blt.n	8006a52 <_printf_i+0xe6>
 8006a4a:	2204      	movs	r2, #4
 8006a4c:	6821      	ldr	r1, [r4, #0]
 8006a4e:	4391      	bics	r1, r2
 8006a50:	6021      	str	r1, [r4, #0]
 8006a52:	2d00      	cmp	r5, #0
 8006a54:	d102      	bne.n	8006a5c <_printf_i+0xf0>
 8006a56:	9e04      	ldr	r6, [sp, #16]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d00c      	beq.n	8006a76 <_printf_i+0x10a>
 8006a5c:	9e04      	ldr	r6, [sp, #16]
 8006a5e:	0028      	movs	r0, r5
 8006a60:	0039      	movs	r1, r7
 8006a62:	f7f9 fbf1 	bl	8000248 <__aeabi_uidivmod>
 8006a66:	9b03      	ldr	r3, [sp, #12]
 8006a68:	3e01      	subs	r6, #1
 8006a6a:	5c5b      	ldrb	r3, [r3, r1]
 8006a6c:	7033      	strb	r3, [r6, #0]
 8006a6e:	002b      	movs	r3, r5
 8006a70:	0005      	movs	r5, r0
 8006a72:	429f      	cmp	r7, r3
 8006a74:	d9f3      	bls.n	8006a5e <_printf_i+0xf2>
 8006a76:	2f08      	cmp	r7, #8
 8006a78:	d109      	bne.n	8006a8e <_printf_i+0x122>
 8006a7a:	6823      	ldr	r3, [r4, #0]
 8006a7c:	07db      	lsls	r3, r3, #31
 8006a7e:	d506      	bpl.n	8006a8e <_printf_i+0x122>
 8006a80:	6863      	ldr	r3, [r4, #4]
 8006a82:	6922      	ldr	r2, [r4, #16]
 8006a84:	4293      	cmp	r3, r2
 8006a86:	dc02      	bgt.n	8006a8e <_printf_i+0x122>
 8006a88:	2330      	movs	r3, #48	; 0x30
 8006a8a:	3e01      	subs	r6, #1
 8006a8c:	7033      	strb	r3, [r6, #0]
 8006a8e:	9b04      	ldr	r3, [sp, #16]
 8006a90:	1b9b      	subs	r3, r3, r6
 8006a92:	6123      	str	r3, [r4, #16]
 8006a94:	9b07      	ldr	r3, [sp, #28]
 8006a96:	0021      	movs	r1, r4
 8006a98:	9300      	str	r3, [sp, #0]
 8006a9a:	9805      	ldr	r0, [sp, #20]
 8006a9c:	9b06      	ldr	r3, [sp, #24]
 8006a9e:	aa09      	add	r2, sp, #36	; 0x24
 8006aa0:	f7ff fef4 	bl	800688c <_printf_common>
 8006aa4:	1c43      	adds	r3, r0, #1
 8006aa6:	d14c      	bne.n	8006b42 <_printf_i+0x1d6>
 8006aa8:	2001      	movs	r0, #1
 8006aaa:	4240      	negs	r0, r0
 8006aac:	b00b      	add	sp, #44	; 0x2c
 8006aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ab0:	3145      	adds	r1, #69	; 0x45
 8006ab2:	700a      	strb	r2, [r1, #0]
 8006ab4:	4a34      	ldr	r2, [pc, #208]	; (8006b88 <_printf_i+0x21c>)
 8006ab6:	9203      	str	r2, [sp, #12]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	6821      	ldr	r1, [r4, #0]
 8006abc:	ca20      	ldmia	r2!, {r5}
 8006abe:	601a      	str	r2, [r3, #0]
 8006ac0:	0608      	lsls	r0, r1, #24
 8006ac2:	d516      	bpl.n	8006af2 <_printf_i+0x186>
 8006ac4:	07cb      	lsls	r3, r1, #31
 8006ac6:	d502      	bpl.n	8006ace <_printf_i+0x162>
 8006ac8:	2320      	movs	r3, #32
 8006aca:	4319      	orrs	r1, r3
 8006acc:	6021      	str	r1, [r4, #0]
 8006ace:	2710      	movs	r7, #16
 8006ad0:	2d00      	cmp	r5, #0
 8006ad2:	d1b2      	bne.n	8006a3a <_printf_i+0xce>
 8006ad4:	2320      	movs	r3, #32
 8006ad6:	6822      	ldr	r2, [r4, #0]
 8006ad8:	439a      	bics	r2, r3
 8006ada:	6022      	str	r2, [r4, #0]
 8006adc:	e7ad      	b.n	8006a3a <_printf_i+0xce>
 8006ade:	2220      	movs	r2, #32
 8006ae0:	6809      	ldr	r1, [r1, #0]
 8006ae2:	430a      	orrs	r2, r1
 8006ae4:	6022      	str	r2, [r4, #0]
 8006ae6:	0022      	movs	r2, r4
 8006ae8:	2178      	movs	r1, #120	; 0x78
 8006aea:	3245      	adds	r2, #69	; 0x45
 8006aec:	7011      	strb	r1, [r2, #0]
 8006aee:	4a27      	ldr	r2, [pc, #156]	; (8006b8c <_printf_i+0x220>)
 8006af0:	e7e1      	b.n	8006ab6 <_printf_i+0x14a>
 8006af2:	0648      	lsls	r0, r1, #25
 8006af4:	d5e6      	bpl.n	8006ac4 <_printf_i+0x158>
 8006af6:	b2ad      	uxth	r5, r5
 8006af8:	e7e4      	b.n	8006ac4 <_printf_i+0x158>
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	680d      	ldr	r5, [r1, #0]
 8006afe:	1d10      	adds	r0, r2, #4
 8006b00:	6949      	ldr	r1, [r1, #20]
 8006b02:	6018      	str	r0, [r3, #0]
 8006b04:	6813      	ldr	r3, [r2, #0]
 8006b06:	062e      	lsls	r6, r5, #24
 8006b08:	d501      	bpl.n	8006b0e <_printf_i+0x1a2>
 8006b0a:	6019      	str	r1, [r3, #0]
 8006b0c:	e002      	b.n	8006b14 <_printf_i+0x1a8>
 8006b0e:	066d      	lsls	r5, r5, #25
 8006b10:	d5fb      	bpl.n	8006b0a <_printf_i+0x19e>
 8006b12:	8019      	strh	r1, [r3, #0]
 8006b14:	2300      	movs	r3, #0
 8006b16:	9e04      	ldr	r6, [sp, #16]
 8006b18:	6123      	str	r3, [r4, #16]
 8006b1a:	e7bb      	b.n	8006a94 <_printf_i+0x128>
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	1d11      	adds	r1, r2, #4
 8006b20:	6019      	str	r1, [r3, #0]
 8006b22:	6816      	ldr	r6, [r2, #0]
 8006b24:	2100      	movs	r1, #0
 8006b26:	0030      	movs	r0, r6
 8006b28:	6862      	ldr	r2, [r4, #4]
 8006b2a:	f000 ff05 	bl	8007938 <memchr>
 8006b2e:	2800      	cmp	r0, #0
 8006b30:	d001      	beq.n	8006b36 <_printf_i+0x1ca>
 8006b32:	1b80      	subs	r0, r0, r6
 8006b34:	6060      	str	r0, [r4, #4]
 8006b36:	6863      	ldr	r3, [r4, #4]
 8006b38:	6123      	str	r3, [r4, #16]
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	9a04      	ldr	r2, [sp, #16]
 8006b3e:	7013      	strb	r3, [r2, #0]
 8006b40:	e7a8      	b.n	8006a94 <_printf_i+0x128>
 8006b42:	6923      	ldr	r3, [r4, #16]
 8006b44:	0032      	movs	r2, r6
 8006b46:	9906      	ldr	r1, [sp, #24]
 8006b48:	9805      	ldr	r0, [sp, #20]
 8006b4a:	9d07      	ldr	r5, [sp, #28]
 8006b4c:	47a8      	blx	r5
 8006b4e:	1c43      	adds	r3, r0, #1
 8006b50:	d0aa      	beq.n	8006aa8 <_printf_i+0x13c>
 8006b52:	6823      	ldr	r3, [r4, #0]
 8006b54:	079b      	lsls	r3, r3, #30
 8006b56:	d415      	bmi.n	8006b84 <_printf_i+0x218>
 8006b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b5a:	68e0      	ldr	r0, [r4, #12]
 8006b5c:	4298      	cmp	r0, r3
 8006b5e:	daa5      	bge.n	8006aac <_printf_i+0x140>
 8006b60:	0018      	movs	r0, r3
 8006b62:	e7a3      	b.n	8006aac <_printf_i+0x140>
 8006b64:	0022      	movs	r2, r4
 8006b66:	2301      	movs	r3, #1
 8006b68:	9906      	ldr	r1, [sp, #24]
 8006b6a:	9805      	ldr	r0, [sp, #20]
 8006b6c:	9e07      	ldr	r6, [sp, #28]
 8006b6e:	3219      	adds	r2, #25
 8006b70:	47b0      	blx	r6
 8006b72:	1c43      	adds	r3, r0, #1
 8006b74:	d098      	beq.n	8006aa8 <_printf_i+0x13c>
 8006b76:	3501      	adds	r5, #1
 8006b78:	68e3      	ldr	r3, [r4, #12]
 8006b7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b7c:	1a9b      	subs	r3, r3, r2
 8006b7e:	42ab      	cmp	r3, r5
 8006b80:	dcf0      	bgt.n	8006b64 <_printf_i+0x1f8>
 8006b82:	e7e9      	b.n	8006b58 <_printf_i+0x1ec>
 8006b84:	2500      	movs	r5, #0
 8006b86:	e7f7      	b.n	8006b78 <_printf_i+0x20c>
 8006b88:	080093ea 	.word	0x080093ea
 8006b8c:	080093fb 	.word	0x080093fb

08006b90 <siprintf>:
 8006b90:	b40e      	push	{r1, r2, r3}
 8006b92:	b500      	push	{lr}
 8006b94:	490b      	ldr	r1, [pc, #44]	; (8006bc4 <siprintf+0x34>)
 8006b96:	b09c      	sub	sp, #112	; 0x70
 8006b98:	ab1d      	add	r3, sp, #116	; 0x74
 8006b9a:	9002      	str	r0, [sp, #8]
 8006b9c:	9006      	str	r0, [sp, #24]
 8006b9e:	9107      	str	r1, [sp, #28]
 8006ba0:	9104      	str	r1, [sp, #16]
 8006ba2:	4809      	ldr	r0, [pc, #36]	; (8006bc8 <siprintf+0x38>)
 8006ba4:	4909      	ldr	r1, [pc, #36]	; (8006bcc <siprintf+0x3c>)
 8006ba6:	cb04      	ldmia	r3!, {r2}
 8006ba8:	9105      	str	r1, [sp, #20]
 8006baa:	6800      	ldr	r0, [r0, #0]
 8006bac:	a902      	add	r1, sp, #8
 8006bae:	9301      	str	r3, [sp, #4]
 8006bb0:	f001 fbe2 	bl	8008378 <_svfiprintf_r>
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	9a02      	ldr	r2, [sp, #8]
 8006bb8:	7013      	strb	r3, [r2, #0]
 8006bba:	b01c      	add	sp, #112	; 0x70
 8006bbc:	bc08      	pop	{r3}
 8006bbe:	b003      	add	sp, #12
 8006bc0:	4718      	bx	r3
 8006bc2:	46c0      	nop			; (mov r8, r8)
 8006bc4:	7fffffff 	.word	0x7fffffff
 8006bc8:	2000000c 	.word	0x2000000c
 8006bcc:	ffff0208 	.word	0xffff0208

08006bd0 <quorem>:
 8006bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bd2:	0006      	movs	r6, r0
 8006bd4:	690b      	ldr	r3, [r1, #16]
 8006bd6:	6932      	ldr	r2, [r6, #16]
 8006bd8:	b087      	sub	sp, #28
 8006bda:	2000      	movs	r0, #0
 8006bdc:	9103      	str	r1, [sp, #12]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	db65      	blt.n	8006cae <quorem+0xde>
 8006be2:	3b01      	subs	r3, #1
 8006be4:	009c      	lsls	r4, r3, #2
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	000b      	movs	r3, r1
 8006bea:	3314      	adds	r3, #20
 8006bec:	9305      	str	r3, [sp, #20]
 8006bee:	191b      	adds	r3, r3, r4
 8006bf0:	9304      	str	r3, [sp, #16]
 8006bf2:	0033      	movs	r3, r6
 8006bf4:	3314      	adds	r3, #20
 8006bf6:	9302      	str	r3, [sp, #8]
 8006bf8:	191c      	adds	r4, r3, r4
 8006bfa:	9b04      	ldr	r3, [sp, #16]
 8006bfc:	6827      	ldr	r7, [r4, #0]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	0038      	movs	r0, r7
 8006c02:	1c5d      	adds	r5, r3, #1
 8006c04:	0029      	movs	r1, r5
 8006c06:	9301      	str	r3, [sp, #4]
 8006c08:	f7f9 fa98 	bl	800013c <__udivsi3>
 8006c0c:	9001      	str	r0, [sp, #4]
 8006c0e:	42af      	cmp	r7, r5
 8006c10:	d324      	bcc.n	8006c5c <quorem+0x8c>
 8006c12:	2500      	movs	r5, #0
 8006c14:	46ac      	mov	ip, r5
 8006c16:	9802      	ldr	r0, [sp, #8]
 8006c18:	9f05      	ldr	r7, [sp, #20]
 8006c1a:	cf08      	ldmia	r7!, {r3}
 8006c1c:	9a01      	ldr	r2, [sp, #4]
 8006c1e:	b299      	uxth	r1, r3
 8006c20:	4351      	muls	r1, r2
 8006c22:	0c1b      	lsrs	r3, r3, #16
 8006c24:	4353      	muls	r3, r2
 8006c26:	1949      	adds	r1, r1, r5
 8006c28:	0c0a      	lsrs	r2, r1, #16
 8006c2a:	189b      	adds	r3, r3, r2
 8006c2c:	6802      	ldr	r2, [r0, #0]
 8006c2e:	b289      	uxth	r1, r1
 8006c30:	b292      	uxth	r2, r2
 8006c32:	4462      	add	r2, ip
 8006c34:	1a52      	subs	r2, r2, r1
 8006c36:	6801      	ldr	r1, [r0, #0]
 8006c38:	0c1d      	lsrs	r5, r3, #16
 8006c3a:	0c09      	lsrs	r1, r1, #16
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	1acb      	subs	r3, r1, r3
 8006c40:	1411      	asrs	r1, r2, #16
 8006c42:	185b      	adds	r3, r3, r1
 8006c44:	1419      	asrs	r1, r3, #16
 8006c46:	b292      	uxth	r2, r2
 8006c48:	041b      	lsls	r3, r3, #16
 8006c4a:	431a      	orrs	r2, r3
 8006c4c:	9b04      	ldr	r3, [sp, #16]
 8006c4e:	468c      	mov	ip, r1
 8006c50:	c004      	stmia	r0!, {r2}
 8006c52:	42bb      	cmp	r3, r7
 8006c54:	d2e1      	bcs.n	8006c1a <quorem+0x4a>
 8006c56:	6823      	ldr	r3, [r4, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d030      	beq.n	8006cbe <quorem+0xee>
 8006c5c:	0030      	movs	r0, r6
 8006c5e:	9903      	ldr	r1, [sp, #12]
 8006c60:	f001 f902 	bl	8007e68 <__mcmp>
 8006c64:	2800      	cmp	r0, #0
 8006c66:	db21      	blt.n	8006cac <quorem+0xdc>
 8006c68:	0030      	movs	r0, r6
 8006c6a:	2400      	movs	r4, #0
 8006c6c:	9b01      	ldr	r3, [sp, #4]
 8006c6e:	9903      	ldr	r1, [sp, #12]
 8006c70:	3301      	adds	r3, #1
 8006c72:	9301      	str	r3, [sp, #4]
 8006c74:	3014      	adds	r0, #20
 8006c76:	3114      	adds	r1, #20
 8006c78:	6803      	ldr	r3, [r0, #0]
 8006c7a:	c920      	ldmia	r1!, {r5}
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	1914      	adds	r4, r2, r4
 8006c80:	b2aa      	uxth	r2, r5
 8006c82:	1aa2      	subs	r2, r4, r2
 8006c84:	0c1b      	lsrs	r3, r3, #16
 8006c86:	0c2d      	lsrs	r5, r5, #16
 8006c88:	1414      	asrs	r4, r2, #16
 8006c8a:	1b5b      	subs	r3, r3, r5
 8006c8c:	191b      	adds	r3, r3, r4
 8006c8e:	141c      	asrs	r4, r3, #16
 8006c90:	b292      	uxth	r2, r2
 8006c92:	041b      	lsls	r3, r3, #16
 8006c94:	4313      	orrs	r3, r2
 8006c96:	c008      	stmia	r0!, {r3}
 8006c98:	9b04      	ldr	r3, [sp, #16]
 8006c9a:	428b      	cmp	r3, r1
 8006c9c:	d2ec      	bcs.n	8006c78 <quorem+0xa8>
 8006c9e:	9b00      	ldr	r3, [sp, #0]
 8006ca0:	9a02      	ldr	r2, [sp, #8]
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	18d3      	adds	r3, r2, r3
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	2a00      	cmp	r2, #0
 8006caa:	d015      	beq.n	8006cd8 <quorem+0x108>
 8006cac:	9801      	ldr	r0, [sp, #4]
 8006cae:	b007      	add	sp, #28
 8006cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cb2:	6823      	ldr	r3, [r4, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d106      	bne.n	8006cc6 <quorem+0xf6>
 8006cb8:	9b00      	ldr	r3, [sp, #0]
 8006cba:	3b01      	subs	r3, #1
 8006cbc:	9300      	str	r3, [sp, #0]
 8006cbe:	9b02      	ldr	r3, [sp, #8]
 8006cc0:	3c04      	subs	r4, #4
 8006cc2:	42a3      	cmp	r3, r4
 8006cc4:	d3f5      	bcc.n	8006cb2 <quorem+0xe2>
 8006cc6:	9b00      	ldr	r3, [sp, #0]
 8006cc8:	6133      	str	r3, [r6, #16]
 8006cca:	e7c7      	b.n	8006c5c <quorem+0x8c>
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	2a00      	cmp	r2, #0
 8006cd0:	d106      	bne.n	8006ce0 <quorem+0x110>
 8006cd2:	9a00      	ldr	r2, [sp, #0]
 8006cd4:	3a01      	subs	r2, #1
 8006cd6:	9200      	str	r2, [sp, #0]
 8006cd8:	9a02      	ldr	r2, [sp, #8]
 8006cda:	3b04      	subs	r3, #4
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d3f5      	bcc.n	8006ccc <quorem+0xfc>
 8006ce0:	9b00      	ldr	r3, [sp, #0]
 8006ce2:	6133      	str	r3, [r6, #16]
 8006ce4:	e7e2      	b.n	8006cac <quorem+0xdc>
	...

08006ce8 <_dtoa_r>:
 8006ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cea:	b09d      	sub	sp, #116	; 0x74
 8006cec:	9202      	str	r2, [sp, #8]
 8006cee:	9303      	str	r3, [sp, #12]
 8006cf0:	9b02      	ldr	r3, [sp, #8]
 8006cf2:	9c03      	ldr	r4, [sp, #12]
 8006cf4:	9308      	str	r3, [sp, #32]
 8006cf6:	9409      	str	r4, [sp, #36]	; 0x24
 8006cf8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006cfa:	0007      	movs	r7, r0
 8006cfc:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8006cfe:	2c00      	cmp	r4, #0
 8006d00:	d10e      	bne.n	8006d20 <_dtoa_r+0x38>
 8006d02:	2010      	movs	r0, #16
 8006d04:	f000 fe0e 	bl	8007924 <malloc>
 8006d08:	1e02      	subs	r2, r0, #0
 8006d0a:	6278      	str	r0, [r7, #36]	; 0x24
 8006d0c:	d104      	bne.n	8006d18 <_dtoa_r+0x30>
 8006d0e:	21ea      	movs	r1, #234	; 0xea
 8006d10:	4bc7      	ldr	r3, [pc, #796]	; (8007030 <_dtoa_r+0x348>)
 8006d12:	48c8      	ldr	r0, [pc, #800]	; (8007034 <_dtoa_r+0x34c>)
 8006d14:	f001 fc42 	bl	800859c <__assert_func>
 8006d18:	6044      	str	r4, [r0, #4]
 8006d1a:	6084      	str	r4, [r0, #8]
 8006d1c:	6004      	str	r4, [r0, #0]
 8006d1e:	60c4      	str	r4, [r0, #12]
 8006d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d22:	6819      	ldr	r1, [r3, #0]
 8006d24:	2900      	cmp	r1, #0
 8006d26:	d00a      	beq.n	8006d3e <_dtoa_r+0x56>
 8006d28:	685a      	ldr	r2, [r3, #4]
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	4093      	lsls	r3, r2
 8006d2e:	604a      	str	r2, [r1, #4]
 8006d30:	608b      	str	r3, [r1, #8]
 8006d32:	0038      	movs	r0, r7
 8006d34:	f000 fe58 	bl	80079e8 <_Bfree>
 8006d38:	2200      	movs	r2, #0
 8006d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3c:	601a      	str	r2, [r3, #0]
 8006d3e:	9b03      	ldr	r3, [sp, #12]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	da20      	bge.n	8006d86 <_dtoa_r+0x9e>
 8006d44:	2301      	movs	r3, #1
 8006d46:	602b      	str	r3, [r5, #0]
 8006d48:	9b03      	ldr	r3, [sp, #12]
 8006d4a:	005b      	lsls	r3, r3, #1
 8006d4c:	085b      	lsrs	r3, r3, #1
 8006d4e:	9309      	str	r3, [sp, #36]	; 0x24
 8006d50:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006d52:	4bb9      	ldr	r3, [pc, #740]	; (8007038 <_dtoa_r+0x350>)
 8006d54:	4ab8      	ldr	r2, [pc, #736]	; (8007038 <_dtoa_r+0x350>)
 8006d56:	402b      	ands	r3, r5
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d117      	bne.n	8006d8c <_dtoa_r+0xa4>
 8006d5c:	4bb7      	ldr	r3, [pc, #732]	; (800703c <_dtoa_r+0x354>)
 8006d5e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006d60:	0328      	lsls	r0, r5, #12
 8006d62:	6013      	str	r3, [r2, #0]
 8006d64:	9b02      	ldr	r3, [sp, #8]
 8006d66:	0b00      	lsrs	r0, r0, #12
 8006d68:	4318      	orrs	r0, r3
 8006d6a:	d101      	bne.n	8006d70 <_dtoa_r+0x88>
 8006d6c:	f000 fdbf 	bl	80078ee <_dtoa_r+0xc06>
 8006d70:	48b3      	ldr	r0, [pc, #716]	; (8007040 <_dtoa_r+0x358>)
 8006d72:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006d74:	9006      	str	r0, [sp, #24]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d002      	beq.n	8006d80 <_dtoa_r+0x98>
 8006d7a:	4bb2      	ldr	r3, [pc, #712]	; (8007044 <_dtoa_r+0x35c>)
 8006d7c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006d7e:	6013      	str	r3, [r2, #0]
 8006d80:	9806      	ldr	r0, [sp, #24]
 8006d82:	b01d      	add	sp, #116	; 0x74
 8006d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d86:	2300      	movs	r3, #0
 8006d88:	602b      	str	r3, [r5, #0]
 8006d8a:	e7e1      	b.n	8006d50 <_dtoa_r+0x68>
 8006d8c:	9b08      	ldr	r3, [sp, #32]
 8006d8e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8006d90:	9312      	str	r3, [sp, #72]	; 0x48
 8006d92:	9413      	str	r4, [sp, #76]	; 0x4c
 8006d94:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006d96:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006d98:	2200      	movs	r2, #0
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	f7f9 fb54 	bl	8000448 <__aeabi_dcmpeq>
 8006da0:	1e04      	subs	r4, r0, #0
 8006da2:	d009      	beq.n	8006db8 <_dtoa_r+0xd0>
 8006da4:	2301      	movs	r3, #1
 8006da6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006da8:	6013      	str	r3, [r2, #0]
 8006daa:	4ba7      	ldr	r3, [pc, #668]	; (8007048 <_dtoa_r+0x360>)
 8006dac:	9306      	str	r3, [sp, #24]
 8006dae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d0e5      	beq.n	8006d80 <_dtoa_r+0x98>
 8006db4:	4ba5      	ldr	r3, [pc, #660]	; (800704c <_dtoa_r+0x364>)
 8006db6:	e7e1      	b.n	8006d7c <_dtoa_r+0x94>
 8006db8:	ab1a      	add	r3, sp, #104	; 0x68
 8006dba:	9301      	str	r3, [sp, #4]
 8006dbc:	ab1b      	add	r3, sp, #108	; 0x6c
 8006dbe:	9300      	str	r3, [sp, #0]
 8006dc0:	0038      	movs	r0, r7
 8006dc2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006dc4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006dc6:	f001 f903 	bl	8007fd0 <__d2b>
 8006dca:	006e      	lsls	r6, r5, #1
 8006dcc:	9005      	str	r0, [sp, #20]
 8006dce:	0d76      	lsrs	r6, r6, #21
 8006dd0:	d100      	bne.n	8006dd4 <_dtoa_r+0xec>
 8006dd2:	e07c      	b.n	8006ece <_dtoa_r+0x1e6>
 8006dd4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006dd6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006dd8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006dda:	4a9d      	ldr	r2, [pc, #628]	; (8007050 <_dtoa_r+0x368>)
 8006ddc:	031b      	lsls	r3, r3, #12
 8006dde:	0b1b      	lsrs	r3, r3, #12
 8006de0:	431a      	orrs	r2, r3
 8006de2:	0011      	movs	r1, r2
 8006de4:	4b9b      	ldr	r3, [pc, #620]	; (8007054 <_dtoa_r+0x36c>)
 8006de6:	9418      	str	r4, [sp, #96]	; 0x60
 8006de8:	18f6      	adds	r6, r6, r3
 8006dea:	2200      	movs	r2, #0
 8006dec:	4b9a      	ldr	r3, [pc, #616]	; (8007058 <_dtoa_r+0x370>)
 8006dee:	f7fa ff55 	bl	8001c9c <__aeabi_dsub>
 8006df2:	4a9a      	ldr	r2, [pc, #616]	; (800705c <_dtoa_r+0x374>)
 8006df4:	4b9a      	ldr	r3, [pc, #616]	; (8007060 <_dtoa_r+0x378>)
 8006df6:	f7fa fce5 	bl	80017c4 <__aeabi_dmul>
 8006dfa:	4a9a      	ldr	r2, [pc, #616]	; (8007064 <_dtoa_r+0x37c>)
 8006dfc:	4b9a      	ldr	r3, [pc, #616]	; (8007068 <_dtoa_r+0x380>)
 8006dfe:	f7f9 fda3 	bl	8000948 <__aeabi_dadd>
 8006e02:	0004      	movs	r4, r0
 8006e04:	0030      	movs	r0, r6
 8006e06:	000d      	movs	r5, r1
 8006e08:	f7fb fb2e 	bl	8002468 <__aeabi_i2d>
 8006e0c:	4a97      	ldr	r2, [pc, #604]	; (800706c <_dtoa_r+0x384>)
 8006e0e:	4b98      	ldr	r3, [pc, #608]	; (8007070 <_dtoa_r+0x388>)
 8006e10:	f7fa fcd8 	bl	80017c4 <__aeabi_dmul>
 8006e14:	0002      	movs	r2, r0
 8006e16:	000b      	movs	r3, r1
 8006e18:	0020      	movs	r0, r4
 8006e1a:	0029      	movs	r1, r5
 8006e1c:	f7f9 fd94 	bl	8000948 <__aeabi_dadd>
 8006e20:	0004      	movs	r4, r0
 8006e22:	000d      	movs	r5, r1
 8006e24:	f7fb faea 	bl	80023fc <__aeabi_d2iz>
 8006e28:	2200      	movs	r2, #0
 8006e2a:	9002      	str	r0, [sp, #8]
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	0020      	movs	r0, r4
 8006e30:	0029      	movs	r1, r5
 8006e32:	f7f9 fb0f 	bl	8000454 <__aeabi_dcmplt>
 8006e36:	2800      	cmp	r0, #0
 8006e38:	d00b      	beq.n	8006e52 <_dtoa_r+0x16a>
 8006e3a:	9802      	ldr	r0, [sp, #8]
 8006e3c:	f7fb fb14 	bl	8002468 <__aeabi_i2d>
 8006e40:	002b      	movs	r3, r5
 8006e42:	0022      	movs	r2, r4
 8006e44:	f7f9 fb00 	bl	8000448 <__aeabi_dcmpeq>
 8006e48:	4243      	negs	r3, r0
 8006e4a:	4158      	adcs	r0, r3
 8006e4c:	9b02      	ldr	r3, [sp, #8]
 8006e4e:	1a1b      	subs	r3, r3, r0
 8006e50:	9302      	str	r3, [sp, #8]
 8006e52:	2301      	movs	r3, #1
 8006e54:	9316      	str	r3, [sp, #88]	; 0x58
 8006e56:	9b02      	ldr	r3, [sp, #8]
 8006e58:	2b16      	cmp	r3, #22
 8006e5a:	d80f      	bhi.n	8006e7c <_dtoa_r+0x194>
 8006e5c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006e5e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006e60:	00da      	lsls	r2, r3, #3
 8006e62:	4b84      	ldr	r3, [pc, #528]	; (8007074 <_dtoa_r+0x38c>)
 8006e64:	189b      	adds	r3, r3, r2
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	f7f9 faf3 	bl	8000454 <__aeabi_dcmplt>
 8006e6e:	2800      	cmp	r0, #0
 8006e70:	d049      	beq.n	8006f06 <_dtoa_r+0x21e>
 8006e72:	9b02      	ldr	r3, [sp, #8]
 8006e74:	3b01      	subs	r3, #1
 8006e76:	9302      	str	r3, [sp, #8]
 8006e78:	2300      	movs	r3, #0
 8006e7a:	9316      	str	r3, [sp, #88]	; 0x58
 8006e7c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006e7e:	1b9e      	subs	r6, r3, r6
 8006e80:	2300      	movs	r3, #0
 8006e82:	930a      	str	r3, [sp, #40]	; 0x28
 8006e84:	0033      	movs	r3, r6
 8006e86:	3b01      	subs	r3, #1
 8006e88:	930d      	str	r3, [sp, #52]	; 0x34
 8006e8a:	d504      	bpl.n	8006e96 <_dtoa_r+0x1ae>
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	1b9b      	subs	r3, r3, r6
 8006e90:	930a      	str	r3, [sp, #40]	; 0x28
 8006e92:	2300      	movs	r3, #0
 8006e94:	930d      	str	r3, [sp, #52]	; 0x34
 8006e96:	9b02      	ldr	r3, [sp, #8]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	db36      	blt.n	8006f0a <_dtoa_r+0x222>
 8006e9c:	9a02      	ldr	r2, [sp, #8]
 8006e9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ea0:	4694      	mov	ip, r2
 8006ea2:	4463      	add	r3, ip
 8006ea4:	930d      	str	r3, [sp, #52]	; 0x34
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	9215      	str	r2, [sp, #84]	; 0x54
 8006eaa:	930e      	str	r3, [sp, #56]	; 0x38
 8006eac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006eae:	2401      	movs	r4, #1
 8006eb0:	2b09      	cmp	r3, #9
 8006eb2:	d864      	bhi.n	8006f7e <_dtoa_r+0x296>
 8006eb4:	2b05      	cmp	r3, #5
 8006eb6:	dd02      	ble.n	8006ebe <_dtoa_r+0x1d6>
 8006eb8:	2400      	movs	r4, #0
 8006eba:	3b04      	subs	r3, #4
 8006ebc:	9322      	str	r3, [sp, #136]	; 0x88
 8006ebe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ec0:	1e98      	subs	r0, r3, #2
 8006ec2:	2803      	cmp	r0, #3
 8006ec4:	d864      	bhi.n	8006f90 <_dtoa_r+0x2a8>
 8006ec6:	f7f9 f925 	bl	8000114 <__gnu_thumb1_case_uqi>
 8006eca:	3829      	.short	0x3829
 8006ecc:	5836      	.short	0x5836
 8006ece:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006ed0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006ed2:	189e      	adds	r6, r3, r2
 8006ed4:	4b68      	ldr	r3, [pc, #416]	; (8007078 <_dtoa_r+0x390>)
 8006ed6:	18f2      	adds	r2, r6, r3
 8006ed8:	2a20      	cmp	r2, #32
 8006eda:	dd0f      	ble.n	8006efc <_dtoa_r+0x214>
 8006edc:	2340      	movs	r3, #64	; 0x40
 8006ede:	1a9b      	subs	r3, r3, r2
 8006ee0:	409d      	lsls	r5, r3
 8006ee2:	4b66      	ldr	r3, [pc, #408]	; (800707c <_dtoa_r+0x394>)
 8006ee4:	9802      	ldr	r0, [sp, #8]
 8006ee6:	18f3      	adds	r3, r6, r3
 8006ee8:	40d8      	lsrs	r0, r3
 8006eea:	4328      	orrs	r0, r5
 8006eec:	f7fb faec 	bl	80024c8 <__aeabi_ui2d>
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	4c63      	ldr	r4, [pc, #396]	; (8007080 <_dtoa_r+0x398>)
 8006ef4:	3e01      	subs	r6, #1
 8006ef6:	1909      	adds	r1, r1, r4
 8006ef8:	9318      	str	r3, [sp, #96]	; 0x60
 8006efa:	e776      	b.n	8006dea <_dtoa_r+0x102>
 8006efc:	2320      	movs	r3, #32
 8006efe:	9802      	ldr	r0, [sp, #8]
 8006f00:	1a9b      	subs	r3, r3, r2
 8006f02:	4098      	lsls	r0, r3
 8006f04:	e7f2      	b.n	8006eec <_dtoa_r+0x204>
 8006f06:	9016      	str	r0, [sp, #88]	; 0x58
 8006f08:	e7b8      	b.n	8006e7c <_dtoa_r+0x194>
 8006f0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f0c:	9a02      	ldr	r2, [sp, #8]
 8006f0e:	1a9b      	subs	r3, r3, r2
 8006f10:	930a      	str	r3, [sp, #40]	; 0x28
 8006f12:	4253      	negs	r3, r2
 8006f14:	930e      	str	r3, [sp, #56]	; 0x38
 8006f16:	2300      	movs	r3, #0
 8006f18:	9315      	str	r3, [sp, #84]	; 0x54
 8006f1a:	e7c7      	b.n	8006eac <_dtoa_r+0x1c4>
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f20:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006f22:	930c      	str	r3, [sp, #48]	; 0x30
 8006f24:	9307      	str	r3, [sp, #28]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	dc13      	bgt.n	8006f52 <_dtoa_r+0x26a>
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	001a      	movs	r2, r3
 8006f2e:	930c      	str	r3, [sp, #48]	; 0x30
 8006f30:	9307      	str	r3, [sp, #28]
 8006f32:	9223      	str	r2, [sp, #140]	; 0x8c
 8006f34:	e00d      	b.n	8006f52 <_dtoa_r+0x26a>
 8006f36:	2301      	movs	r3, #1
 8006f38:	e7f1      	b.n	8006f1e <_dtoa_r+0x236>
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8006f3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f40:	4694      	mov	ip, r2
 8006f42:	9b02      	ldr	r3, [sp, #8]
 8006f44:	4463      	add	r3, ip
 8006f46:	930c      	str	r3, [sp, #48]	; 0x30
 8006f48:	3301      	adds	r3, #1
 8006f4a:	9307      	str	r3, [sp, #28]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	dc00      	bgt.n	8006f52 <_dtoa_r+0x26a>
 8006f50:	2301      	movs	r3, #1
 8006f52:	2200      	movs	r2, #0
 8006f54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f56:	6042      	str	r2, [r0, #4]
 8006f58:	3204      	adds	r2, #4
 8006f5a:	0015      	movs	r5, r2
 8006f5c:	3514      	adds	r5, #20
 8006f5e:	6841      	ldr	r1, [r0, #4]
 8006f60:	429d      	cmp	r5, r3
 8006f62:	d919      	bls.n	8006f98 <_dtoa_r+0x2b0>
 8006f64:	0038      	movs	r0, r7
 8006f66:	f000 fcfb 	bl	8007960 <_Balloc>
 8006f6a:	9006      	str	r0, [sp, #24]
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	d117      	bne.n	8006fa0 <_dtoa_r+0x2b8>
 8006f70:	21d5      	movs	r1, #213	; 0xd5
 8006f72:	0002      	movs	r2, r0
 8006f74:	4b43      	ldr	r3, [pc, #268]	; (8007084 <_dtoa_r+0x39c>)
 8006f76:	0049      	lsls	r1, r1, #1
 8006f78:	e6cb      	b.n	8006d12 <_dtoa_r+0x2a>
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e7de      	b.n	8006f3c <_dtoa_r+0x254>
 8006f7e:	2300      	movs	r3, #0
 8006f80:	940f      	str	r4, [sp, #60]	; 0x3c
 8006f82:	9322      	str	r3, [sp, #136]	; 0x88
 8006f84:	3b01      	subs	r3, #1
 8006f86:	930c      	str	r3, [sp, #48]	; 0x30
 8006f88:	9307      	str	r3, [sp, #28]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	3313      	adds	r3, #19
 8006f8e:	e7d0      	b.n	8006f32 <_dtoa_r+0x24a>
 8006f90:	2301      	movs	r3, #1
 8006f92:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f94:	3b02      	subs	r3, #2
 8006f96:	e7f6      	b.n	8006f86 <_dtoa_r+0x29e>
 8006f98:	3101      	adds	r1, #1
 8006f9a:	6041      	str	r1, [r0, #4]
 8006f9c:	0052      	lsls	r2, r2, #1
 8006f9e:	e7dc      	b.n	8006f5a <_dtoa_r+0x272>
 8006fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa2:	9a06      	ldr	r2, [sp, #24]
 8006fa4:	601a      	str	r2, [r3, #0]
 8006fa6:	9b07      	ldr	r3, [sp, #28]
 8006fa8:	2b0e      	cmp	r3, #14
 8006faa:	d900      	bls.n	8006fae <_dtoa_r+0x2c6>
 8006fac:	e0eb      	b.n	8007186 <_dtoa_r+0x49e>
 8006fae:	2c00      	cmp	r4, #0
 8006fb0:	d100      	bne.n	8006fb4 <_dtoa_r+0x2cc>
 8006fb2:	e0e8      	b.n	8007186 <_dtoa_r+0x49e>
 8006fb4:	9b02      	ldr	r3, [sp, #8]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	dd68      	ble.n	800708c <_dtoa_r+0x3a4>
 8006fba:	001a      	movs	r2, r3
 8006fbc:	210f      	movs	r1, #15
 8006fbe:	4b2d      	ldr	r3, [pc, #180]	; (8007074 <_dtoa_r+0x38c>)
 8006fc0:	400a      	ands	r2, r1
 8006fc2:	00d2      	lsls	r2, r2, #3
 8006fc4:	189b      	adds	r3, r3, r2
 8006fc6:	681d      	ldr	r5, [r3, #0]
 8006fc8:	685e      	ldr	r6, [r3, #4]
 8006fca:	9b02      	ldr	r3, [sp, #8]
 8006fcc:	111c      	asrs	r4, r3, #4
 8006fce:	2302      	movs	r3, #2
 8006fd0:	9310      	str	r3, [sp, #64]	; 0x40
 8006fd2:	9b02      	ldr	r3, [sp, #8]
 8006fd4:	05db      	lsls	r3, r3, #23
 8006fd6:	d50b      	bpl.n	8006ff0 <_dtoa_r+0x308>
 8006fd8:	4b2b      	ldr	r3, [pc, #172]	; (8007088 <_dtoa_r+0x3a0>)
 8006fda:	400c      	ands	r4, r1
 8006fdc:	6a1a      	ldr	r2, [r3, #32]
 8006fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006fe2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006fe4:	f7f9 ffec 	bl	8000fc0 <__aeabi_ddiv>
 8006fe8:	2303      	movs	r3, #3
 8006fea:	9008      	str	r0, [sp, #32]
 8006fec:	9109      	str	r1, [sp, #36]	; 0x24
 8006fee:	9310      	str	r3, [sp, #64]	; 0x40
 8006ff0:	4b25      	ldr	r3, [pc, #148]	; (8007088 <_dtoa_r+0x3a0>)
 8006ff2:	9314      	str	r3, [sp, #80]	; 0x50
 8006ff4:	2c00      	cmp	r4, #0
 8006ff6:	d108      	bne.n	800700a <_dtoa_r+0x322>
 8006ff8:	9808      	ldr	r0, [sp, #32]
 8006ffa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ffc:	002a      	movs	r2, r5
 8006ffe:	0033      	movs	r3, r6
 8007000:	f7f9 ffde 	bl	8000fc0 <__aeabi_ddiv>
 8007004:	9008      	str	r0, [sp, #32]
 8007006:	9109      	str	r1, [sp, #36]	; 0x24
 8007008:	e05c      	b.n	80070c4 <_dtoa_r+0x3dc>
 800700a:	2301      	movs	r3, #1
 800700c:	421c      	tst	r4, r3
 800700e:	d00b      	beq.n	8007028 <_dtoa_r+0x340>
 8007010:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007012:	0028      	movs	r0, r5
 8007014:	3301      	adds	r3, #1
 8007016:	9310      	str	r3, [sp, #64]	; 0x40
 8007018:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800701a:	0031      	movs	r1, r6
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	f7fa fbd0 	bl	80017c4 <__aeabi_dmul>
 8007024:	0005      	movs	r5, r0
 8007026:	000e      	movs	r6, r1
 8007028:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800702a:	1064      	asrs	r4, r4, #1
 800702c:	3308      	adds	r3, #8
 800702e:	e7e0      	b.n	8006ff2 <_dtoa_r+0x30a>
 8007030:	08009419 	.word	0x08009419
 8007034:	08009430 	.word	0x08009430
 8007038:	7ff00000 	.word	0x7ff00000
 800703c:	0000270f 	.word	0x0000270f
 8007040:	08009415 	.word	0x08009415
 8007044:	08009418 	.word	0x08009418
 8007048:	080093e8 	.word	0x080093e8
 800704c:	080093e9 	.word	0x080093e9
 8007050:	3ff00000 	.word	0x3ff00000
 8007054:	fffffc01 	.word	0xfffffc01
 8007058:	3ff80000 	.word	0x3ff80000
 800705c:	636f4361 	.word	0x636f4361
 8007060:	3fd287a7 	.word	0x3fd287a7
 8007064:	8b60c8b3 	.word	0x8b60c8b3
 8007068:	3fc68a28 	.word	0x3fc68a28
 800706c:	509f79fb 	.word	0x509f79fb
 8007070:	3fd34413 	.word	0x3fd34413
 8007074:	08009520 	.word	0x08009520
 8007078:	00000432 	.word	0x00000432
 800707c:	00000412 	.word	0x00000412
 8007080:	fe100000 	.word	0xfe100000
 8007084:	0800948b 	.word	0x0800948b
 8007088:	080094f8 	.word	0x080094f8
 800708c:	2302      	movs	r3, #2
 800708e:	9310      	str	r3, [sp, #64]	; 0x40
 8007090:	9b02      	ldr	r3, [sp, #8]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d016      	beq.n	80070c4 <_dtoa_r+0x3dc>
 8007096:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007098:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800709a:	425c      	negs	r4, r3
 800709c:	230f      	movs	r3, #15
 800709e:	4ab6      	ldr	r2, [pc, #728]	; (8007378 <_dtoa_r+0x690>)
 80070a0:	4023      	ands	r3, r4
 80070a2:	00db      	lsls	r3, r3, #3
 80070a4:	18d3      	adds	r3, r2, r3
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	f7fa fb8b 	bl	80017c4 <__aeabi_dmul>
 80070ae:	2601      	movs	r6, #1
 80070b0:	2300      	movs	r3, #0
 80070b2:	9008      	str	r0, [sp, #32]
 80070b4:	9109      	str	r1, [sp, #36]	; 0x24
 80070b6:	4db1      	ldr	r5, [pc, #708]	; (800737c <_dtoa_r+0x694>)
 80070b8:	1124      	asrs	r4, r4, #4
 80070ba:	2c00      	cmp	r4, #0
 80070bc:	d000      	beq.n	80070c0 <_dtoa_r+0x3d8>
 80070be:	e094      	b.n	80071ea <_dtoa_r+0x502>
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d19f      	bne.n	8007004 <_dtoa_r+0x31c>
 80070c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d100      	bne.n	80070cc <_dtoa_r+0x3e4>
 80070ca:	e09b      	b.n	8007204 <_dtoa_r+0x51c>
 80070cc:	9c08      	ldr	r4, [sp, #32]
 80070ce:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80070d0:	2200      	movs	r2, #0
 80070d2:	0020      	movs	r0, r4
 80070d4:	0029      	movs	r1, r5
 80070d6:	4baa      	ldr	r3, [pc, #680]	; (8007380 <_dtoa_r+0x698>)
 80070d8:	f7f9 f9bc 	bl	8000454 <__aeabi_dcmplt>
 80070dc:	2800      	cmp	r0, #0
 80070de:	d100      	bne.n	80070e2 <_dtoa_r+0x3fa>
 80070e0:	e090      	b.n	8007204 <_dtoa_r+0x51c>
 80070e2:	9b07      	ldr	r3, [sp, #28]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d100      	bne.n	80070ea <_dtoa_r+0x402>
 80070e8:	e08c      	b.n	8007204 <_dtoa_r+0x51c>
 80070ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	dd46      	ble.n	800717e <_dtoa_r+0x496>
 80070f0:	9b02      	ldr	r3, [sp, #8]
 80070f2:	2200      	movs	r2, #0
 80070f4:	0020      	movs	r0, r4
 80070f6:	0029      	movs	r1, r5
 80070f8:	1e5e      	subs	r6, r3, #1
 80070fa:	4ba2      	ldr	r3, [pc, #648]	; (8007384 <_dtoa_r+0x69c>)
 80070fc:	f7fa fb62 	bl	80017c4 <__aeabi_dmul>
 8007100:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007102:	9008      	str	r0, [sp, #32]
 8007104:	9109      	str	r1, [sp, #36]	; 0x24
 8007106:	3301      	adds	r3, #1
 8007108:	9310      	str	r3, [sp, #64]	; 0x40
 800710a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800710c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800710e:	9c08      	ldr	r4, [sp, #32]
 8007110:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007112:	9314      	str	r3, [sp, #80]	; 0x50
 8007114:	f7fb f9a8 	bl	8002468 <__aeabi_i2d>
 8007118:	0022      	movs	r2, r4
 800711a:	002b      	movs	r3, r5
 800711c:	f7fa fb52 	bl	80017c4 <__aeabi_dmul>
 8007120:	2200      	movs	r2, #0
 8007122:	4b99      	ldr	r3, [pc, #612]	; (8007388 <_dtoa_r+0x6a0>)
 8007124:	f7f9 fc10 	bl	8000948 <__aeabi_dadd>
 8007128:	9010      	str	r0, [sp, #64]	; 0x40
 800712a:	9111      	str	r1, [sp, #68]	; 0x44
 800712c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800712e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007130:	9208      	str	r2, [sp, #32]
 8007132:	9309      	str	r3, [sp, #36]	; 0x24
 8007134:	4a95      	ldr	r2, [pc, #596]	; (800738c <_dtoa_r+0x6a4>)
 8007136:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007138:	4694      	mov	ip, r2
 800713a:	4463      	add	r3, ip
 800713c:	9317      	str	r3, [sp, #92]	; 0x5c
 800713e:	9309      	str	r3, [sp, #36]	; 0x24
 8007140:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007142:	2b00      	cmp	r3, #0
 8007144:	d161      	bne.n	800720a <_dtoa_r+0x522>
 8007146:	2200      	movs	r2, #0
 8007148:	0020      	movs	r0, r4
 800714a:	0029      	movs	r1, r5
 800714c:	4b90      	ldr	r3, [pc, #576]	; (8007390 <_dtoa_r+0x6a8>)
 800714e:	f7fa fda5 	bl	8001c9c <__aeabi_dsub>
 8007152:	9a08      	ldr	r2, [sp, #32]
 8007154:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007156:	0004      	movs	r4, r0
 8007158:	000d      	movs	r5, r1
 800715a:	f7f9 f98f 	bl	800047c <__aeabi_dcmpgt>
 800715e:	2800      	cmp	r0, #0
 8007160:	d000      	beq.n	8007164 <_dtoa_r+0x47c>
 8007162:	e2af      	b.n	80076c4 <_dtoa_r+0x9dc>
 8007164:	488b      	ldr	r0, [pc, #556]	; (8007394 <_dtoa_r+0x6ac>)
 8007166:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007168:	4684      	mov	ip, r0
 800716a:	4461      	add	r1, ip
 800716c:	000b      	movs	r3, r1
 800716e:	0020      	movs	r0, r4
 8007170:	0029      	movs	r1, r5
 8007172:	9a08      	ldr	r2, [sp, #32]
 8007174:	f7f9 f96e 	bl	8000454 <__aeabi_dcmplt>
 8007178:	2800      	cmp	r0, #0
 800717a:	d000      	beq.n	800717e <_dtoa_r+0x496>
 800717c:	e29f      	b.n	80076be <_dtoa_r+0x9d6>
 800717e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007180:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8007182:	9308      	str	r3, [sp, #32]
 8007184:	9409      	str	r4, [sp, #36]	; 0x24
 8007186:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007188:	2b00      	cmp	r3, #0
 800718a:	da00      	bge.n	800718e <_dtoa_r+0x4a6>
 800718c:	e172      	b.n	8007474 <_dtoa_r+0x78c>
 800718e:	9a02      	ldr	r2, [sp, #8]
 8007190:	2a0e      	cmp	r2, #14
 8007192:	dd00      	ble.n	8007196 <_dtoa_r+0x4ae>
 8007194:	e16e      	b.n	8007474 <_dtoa_r+0x78c>
 8007196:	4b78      	ldr	r3, [pc, #480]	; (8007378 <_dtoa_r+0x690>)
 8007198:	00d2      	lsls	r2, r2, #3
 800719a:	189b      	adds	r3, r3, r2
 800719c:	685c      	ldr	r4, [r3, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	930a      	str	r3, [sp, #40]	; 0x28
 80071a2:	940b      	str	r4, [sp, #44]	; 0x2c
 80071a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	db00      	blt.n	80071ac <_dtoa_r+0x4c4>
 80071aa:	e0f7      	b.n	800739c <_dtoa_r+0x6b4>
 80071ac:	9b07      	ldr	r3, [sp, #28]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	dd00      	ble.n	80071b4 <_dtoa_r+0x4cc>
 80071b2:	e0f3      	b.n	800739c <_dtoa_r+0x6b4>
 80071b4:	d000      	beq.n	80071b8 <_dtoa_r+0x4d0>
 80071b6:	e282      	b.n	80076be <_dtoa_r+0x9d6>
 80071b8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80071ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80071bc:	2200      	movs	r2, #0
 80071be:	4b74      	ldr	r3, [pc, #464]	; (8007390 <_dtoa_r+0x6a8>)
 80071c0:	f7fa fb00 	bl	80017c4 <__aeabi_dmul>
 80071c4:	9a08      	ldr	r2, [sp, #32]
 80071c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071c8:	f7f9 f962 	bl	8000490 <__aeabi_dcmpge>
 80071cc:	9e07      	ldr	r6, [sp, #28]
 80071ce:	0035      	movs	r5, r6
 80071d0:	2800      	cmp	r0, #0
 80071d2:	d000      	beq.n	80071d6 <_dtoa_r+0x4ee>
 80071d4:	e259      	b.n	800768a <_dtoa_r+0x9a2>
 80071d6:	9b06      	ldr	r3, [sp, #24]
 80071d8:	9a06      	ldr	r2, [sp, #24]
 80071da:	3301      	adds	r3, #1
 80071dc:	9308      	str	r3, [sp, #32]
 80071de:	2331      	movs	r3, #49	; 0x31
 80071e0:	7013      	strb	r3, [r2, #0]
 80071e2:	9b02      	ldr	r3, [sp, #8]
 80071e4:	3301      	adds	r3, #1
 80071e6:	9302      	str	r3, [sp, #8]
 80071e8:	e254      	b.n	8007694 <_dtoa_r+0x9ac>
 80071ea:	4234      	tst	r4, r6
 80071ec:	d007      	beq.n	80071fe <_dtoa_r+0x516>
 80071ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80071f0:	3301      	adds	r3, #1
 80071f2:	9310      	str	r3, [sp, #64]	; 0x40
 80071f4:	682a      	ldr	r2, [r5, #0]
 80071f6:	686b      	ldr	r3, [r5, #4]
 80071f8:	f7fa fae4 	bl	80017c4 <__aeabi_dmul>
 80071fc:	0033      	movs	r3, r6
 80071fe:	1064      	asrs	r4, r4, #1
 8007200:	3508      	adds	r5, #8
 8007202:	e75a      	b.n	80070ba <_dtoa_r+0x3d2>
 8007204:	9e02      	ldr	r6, [sp, #8]
 8007206:	9b07      	ldr	r3, [sp, #28]
 8007208:	e780      	b.n	800710c <_dtoa_r+0x424>
 800720a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800720c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800720e:	1e5a      	subs	r2, r3, #1
 8007210:	4b59      	ldr	r3, [pc, #356]	; (8007378 <_dtoa_r+0x690>)
 8007212:	00d2      	lsls	r2, r2, #3
 8007214:	189b      	adds	r3, r3, r2
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	2900      	cmp	r1, #0
 800721c:	d051      	beq.n	80072c2 <_dtoa_r+0x5da>
 800721e:	2000      	movs	r0, #0
 8007220:	495d      	ldr	r1, [pc, #372]	; (8007398 <_dtoa_r+0x6b0>)
 8007222:	f7f9 fecd 	bl	8000fc0 <__aeabi_ddiv>
 8007226:	9a08      	ldr	r2, [sp, #32]
 8007228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800722a:	f7fa fd37 	bl	8001c9c <__aeabi_dsub>
 800722e:	9a06      	ldr	r2, [sp, #24]
 8007230:	9b06      	ldr	r3, [sp, #24]
 8007232:	4694      	mov	ip, r2
 8007234:	9317      	str	r3, [sp, #92]	; 0x5c
 8007236:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007238:	9010      	str	r0, [sp, #64]	; 0x40
 800723a:	9111      	str	r1, [sp, #68]	; 0x44
 800723c:	4463      	add	r3, ip
 800723e:	9319      	str	r3, [sp, #100]	; 0x64
 8007240:	0029      	movs	r1, r5
 8007242:	0020      	movs	r0, r4
 8007244:	f7fb f8da 	bl	80023fc <__aeabi_d2iz>
 8007248:	9014      	str	r0, [sp, #80]	; 0x50
 800724a:	f7fb f90d 	bl	8002468 <__aeabi_i2d>
 800724e:	0002      	movs	r2, r0
 8007250:	000b      	movs	r3, r1
 8007252:	0020      	movs	r0, r4
 8007254:	0029      	movs	r1, r5
 8007256:	f7fa fd21 	bl	8001c9c <__aeabi_dsub>
 800725a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800725c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800725e:	3301      	adds	r3, #1
 8007260:	9308      	str	r3, [sp, #32]
 8007262:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007264:	0004      	movs	r4, r0
 8007266:	3330      	adds	r3, #48	; 0x30
 8007268:	7013      	strb	r3, [r2, #0]
 800726a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800726c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800726e:	000d      	movs	r5, r1
 8007270:	f7f9 f8f0 	bl	8000454 <__aeabi_dcmplt>
 8007274:	2800      	cmp	r0, #0
 8007276:	d175      	bne.n	8007364 <_dtoa_r+0x67c>
 8007278:	0022      	movs	r2, r4
 800727a:	002b      	movs	r3, r5
 800727c:	2000      	movs	r0, #0
 800727e:	4940      	ldr	r1, [pc, #256]	; (8007380 <_dtoa_r+0x698>)
 8007280:	f7fa fd0c 	bl	8001c9c <__aeabi_dsub>
 8007284:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007286:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007288:	f7f9 f8e4 	bl	8000454 <__aeabi_dcmplt>
 800728c:	2800      	cmp	r0, #0
 800728e:	d000      	beq.n	8007292 <_dtoa_r+0x5aa>
 8007290:	e0d2      	b.n	8007438 <_dtoa_r+0x750>
 8007292:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007294:	9a08      	ldr	r2, [sp, #32]
 8007296:	4293      	cmp	r3, r2
 8007298:	d100      	bne.n	800729c <_dtoa_r+0x5b4>
 800729a:	e770      	b.n	800717e <_dtoa_r+0x496>
 800729c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800729e:	9911      	ldr	r1, [sp, #68]	; 0x44
 80072a0:	2200      	movs	r2, #0
 80072a2:	4b38      	ldr	r3, [pc, #224]	; (8007384 <_dtoa_r+0x69c>)
 80072a4:	f7fa fa8e 	bl	80017c4 <__aeabi_dmul>
 80072a8:	4b36      	ldr	r3, [pc, #216]	; (8007384 <_dtoa_r+0x69c>)
 80072aa:	9010      	str	r0, [sp, #64]	; 0x40
 80072ac:	9111      	str	r1, [sp, #68]	; 0x44
 80072ae:	2200      	movs	r2, #0
 80072b0:	0020      	movs	r0, r4
 80072b2:	0029      	movs	r1, r5
 80072b4:	f7fa fa86 	bl	80017c4 <__aeabi_dmul>
 80072b8:	9b08      	ldr	r3, [sp, #32]
 80072ba:	0004      	movs	r4, r0
 80072bc:	000d      	movs	r5, r1
 80072be:	9317      	str	r3, [sp, #92]	; 0x5c
 80072c0:	e7be      	b.n	8007240 <_dtoa_r+0x558>
 80072c2:	9808      	ldr	r0, [sp, #32]
 80072c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072c6:	f7fa fa7d 	bl	80017c4 <__aeabi_dmul>
 80072ca:	9a06      	ldr	r2, [sp, #24]
 80072cc:	9b06      	ldr	r3, [sp, #24]
 80072ce:	4694      	mov	ip, r2
 80072d0:	9308      	str	r3, [sp, #32]
 80072d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80072d4:	9010      	str	r0, [sp, #64]	; 0x40
 80072d6:	9111      	str	r1, [sp, #68]	; 0x44
 80072d8:	4463      	add	r3, ip
 80072da:	9319      	str	r3, [sp, #100]	; 0x64
 80072dc:	0029      	movs	r1, r5
 80072de:	0020      	movs	r0, r4
 80072e0:	f7fb f88c 	bl	80023fc <__aeabi_d2iz>
 80072e4:	9017      	str	r0, [sp, #92]	; 0x5c
 80072e6:	f7fb f8bf 	bl	8002468 <__aeabi_i2d>
 80072ea:	0002      	movs	r2, r0
 80072ec:	000b      	movs	r3, r1
 80072ee:	0020      	movs	r0, r4
 80072f0:	0029      	movs	r1, r5
 80072f2:	f7fa fcd3 	bl	8001c9c <__aeabi_dsub>
 80072f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072f8:	9a08      	ldr	r2, [sp, #32]
 80072fa:	3330      	adds	r3, #48	; 0x30
 80072fc:	7013      	strb	r3, [r2, #0]
 80072fe:	0013      	movs	r3, r2
 8007300:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007302:	3301      	adds	r3, #1
 8007304:	0004      	movs	r4, r0
 8007306:	000d      	movs	r5, r1
 8007308:	9308      	str	r3, [sp, #32]
 800730a:	4293      	cmp	r3, r2
 800730c:	d12c      	bne.n	8007368 <_dtoa_r+0x680>
 800730e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007310:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007312:	9a06      	ldr	r2, [sp, #24]
 8007314:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007316:	4694      	mov	ip, r2
 8007318:	4463      	add	r3, ip
 800731a:	2200      	movs	r2, #0
 800731c:	9308      	str	r3, [sp, #32]
 800731e:	4b1e      	ldr	r3, [pc, #120]	; (8007398 <_dtoa_r+0x6b0>)
 8007320:	f7f9 fb12 	bl	8000948 <__aeabi_dadd>
 8007324:	0002      	movs	r2, r0
 8007326:	000b      	movs	r3, r1
 8007328:	0020      	movs	r0, r4
 800732a:	0029      	movs	r1, r5
 800732c:	f7f9 f8a6 	bl	800047c <__aeabi_dcmpgt>
 8007330:	2800      	cmp	r0, #0
 8007332:	d000      	beq.n	8007336 <_dtoa_r+0x64e>
 8007334:	e080      	b.n	8007438 <_dtoa_r+0x750>
 8007336:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007338:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800733a:	2000      	movs	r0, #0
 800733c:	4916      	ldr	r1, [pc, #88]	; (8007398 <_dtoa_r+0x6b0>)
 800733e:	f7fa fcad 	bl	8001c9c <__aeabi_dsub>
 8007342:	0002      	movs	r2, r0
 8007344:	000b      	movs	r3, r1
 8007346:	0020      	movs	r0, r4
 8007348:	0029      	movs	r1, r5
 800734a:	f7f9 f883 	bl	8000454 <__aeabi_dcmplt>
 800734e:	2800      	cmp	r0, #0
 8007350:	d100      	bne.n	8007354 <_dtoa_r+0x66c>
 8007352:	e714      	b.n	800717e <_dtoa_r+0x496>
 8007354:	9b08      	ldr	r3, [sp, #32]
 8007356:	001a      	movs	r2, r3
 8007358:	3a01      	subs	r2, #1
 800735a:	9208      	str	r2, [sp, #32]
 800735c:	7812      	ldrb	r2, [r2, #0]
 800735e:	2a30      	cmp	r2, #48	; 0x30
 8007360:	d0f8      	beq.n	8007354 <_dtoa_r+0x66c>
 8007362:	9308      	str	r3, [sp, #32]
 8007364:	9602      	str	r6, [sp, #8]
 8007366:	e055      	b.n	8007414 <_dtoa_r+0x72c>
 8007368:	2200      	movs	r2, #0
 800736a:	4b06      	ldr	r3, [pc, #24]	; (8007384 <_dtoa_r+0x69c>)
 800736c:	f7fa fa2a 	bl	80017c4 <__aeabi_dmul>
 8007370:	0004      	movs	r4, r0
 8007372:	000d      	movs	r5, r1
 8007374:	e7b2      	b.n	80072dc <_dtoa_r+0x5f4>
 8007376:	46c0      	nop			; (mov r8, r8)
 8007378:	08009520 	.word	0x08009520
 800737c:	080094f8 	.word	0x080094f8
 8007380:	3ff00000 	.word	0x3ff00000
 8007384:	40240000 	.word	0x40240000
 8007388:	401c0000 	.word	0x401c0000
 800738c:	fcc00000 	.word	0xfcc00000
 8007390:	40140000 	.word	0x40140000
 8007394:	7cc00000 	.word	0x7cc00000
 8007398:	3fe00000 	.word	0x3fe00000
 800739c:	9b07      	ldr	r3, [sp, #28]
 800739e:	9e06      	ldr	r6, [sp, #24]
 80073a0:	3b01      	subs	r3, #1
 80073a2:	199b      	adds	r3, r3, r6
 80073a4:	930c      	str	r3, [sp, #48]	; 0x30
 80073a6:	9c08      	ldr	r4, [sp, #32]
 80073a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80073aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073ae:	0020      	movs	r0, r4
 80073b0:	0029      	movs	r1, r5
 80073b2:	f7f9 fe05 	bl	8000fc0 <__aeabi_ddiv>
 80073b6:	f7fb f821 	bl	80023fc <__aeabi_d2iz>
 80073ba:	9007      	str	r0, [sp, #28]
 80073bc:	f7fb f854 	bl	8002468 <__aeabi_i2d>
 80073c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073c4:	f7fa f9fe 	bl	80017c4 <__aeabi_dmul>
 80073c8:	0002      	movs	r2, r0
 80073ca:	000b      	movs	r3, r1
 80073cc:	0020      	movs	r0, r4
 80073ce:	0029      	movs	r1, r5
 80073d0:	f7fa fc64 	bl	8001c9c <__aeabi_dsub>
 80073d4:	0033      	movs	r3, r6
 80073d6:	9a07      	ldr	r2, [sp, #28]
 80073d8:	3601      	adds	r6, #1
 80073da:	3230      	adds	r2, #48	; 0x30
 80073dc:	701a      	strb	r2, [r3, #0]
 80073de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073e0:	9608      	str	r6, [sp, #32]
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d139      	bne.n	800745a <_dtoa_r+0x772>
 80073e6:	0002      	movs	r2, r0
 80073e8:	000b      	movs	r3, r1
 80073ea:	f7f9 faad 	bl	8000948 <__aeabi_dadd>
 80073ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073f2:	0004      	movs	r4, r0
 80073f4:	000d      	movs	r5, r1
 80073f6:	f7f9 f841 	bl	800047c <__aeabi_dcmpgt>
 80073fa:	2800      	cmp	r0, #0
 80073fc:	d11b      	bne.n	8007436 <_dtoa_r+0x74e>
 80073fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007400:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007402:	0020      	movs	r0, r4
 8007404:	0029      	movs	r1, r5
 8007406:	f7f9 f81f 	bl	8000448 <__aeabi_dcmpeq>
 800740a:	2800      	cmp	r0, #0
 800740c:	d002      	beq.n	8007414 <_dtoa_r+0x72c>
 800740e:	9b07      	ldr	r3, [sp, #28]
 8007410:	07db      	lsls	r3, r3, #31
 8007412:	d410      	bmi.n	8007436 <_dtoa_r+0x74e>
 8007414:	0038      	movs	r0, r7
 8007416:	9905      	ldr	r1, [sp, #20]
 8007418:	f000 fae6 	bl	80079e8 <_Bfree>
 800741c:	2300      	movs	r3, #0
 800741e:	9a08      	ldr	r2, [sp, #32]
 8007420:	9802      	ldr	r0, [sp, #8]
 8007422:	7013      	strb	r3, [r2, #0]
 8007424:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007426:	3001      	adds	r0, #1
 8007428:	6018      	str	r0, [r3, #0]
 800742a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800742c:	2b00      	cmp	r3, #0
 800742e:	d100      	bne.n	8007432 <_dtoa_r+0x74a>
 8007430:	e4a6      	b.n	8006d80 <_dtoa_r+0x98>
 8007432:	601a      	str	r2, [r3, #0]
 8007434:	e4a4      	b.n	8006d80 <_dtoa_r+0x98>
 8007436:	9e02      	ldr	r6, [sp, #8]
 8007438:	9b08      	ldr	r3, [sp, #32]
 800743a:	9308      	str	r3, [sp, #32]
 800743c:	3b01      	subs	r3, #1
 800743e:	781a      	ldrb	r2, [r3, #0]
 8007440:	2a39      	cmp	r2, #57	; 0x39
 8007442:	d106      	bne.n	8007452 <_dtoa_r+0x76a>
 8007444:	9a06      	ldr	r2, [sp, #24]
 8007446:	429a      	cmp	r2, r3
 8007448:	d1f7      	bne.n	800743a <_dtoa_r+0x752>
 800744a:	2230      	movs	r2, #48	; 0x30
 800744c:	9906      	ldr	r1, [sp, #24]
 800744e:	3601      	adds	r6, #1
 8007450:	700a      	strb	r2, [r1, #0]
 8007452:	781a      	ldrb	r2, [r3, #0]
 8007454:	3201      	adds	r2, #1
 8007456:	701a      	strb	r2, [r3, #0]
 8007458:	e784      	b.n	8007364 <_dtoa_r+0x67c>
 800745a:	2200      	movs	r2, #0
 800745c:	4baa      	ldr	r3, [pc, #680]	; (8007708 <_dtoa_r+0xa20>)
 800745e:	f7fa f9b1 	bl	80017c4 <__aeabi_dmul>
 8007462:	2200      	movs	r2, #0
 8007464:	2300      	movs	r3, #0
 8007466:	0004      	movs	r4, r0
 8007468:	000d      	movs	r5, r1
 800746a:	f7f8 ffed 	bl	8000448 <__aeabi_dcmpeq>
 800746e:	2800      	cmp	r0, #0
 8007470:	d09b      	beq.n	80073aa <_dtoa_r+0x6c2>
 8007472:	e7cf      	b.n	8007414 <_dtoa_r+0x72c>
 8007474:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007476:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007478:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800747a:	2d00      	cmp	r5, #0
 800747c:	d012      	beq.n	80074a4 <_dtoa_r+0x7bc>
 800747e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007480:	2a01      	cmp	r2, #1
 8007482:	dc66      	bgt.n	8007552 <_dtoa_r+0x86a>
 8007484:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007486:	2a00      	cmp	r2, #0
 8007488:	d05d      	beq.n	8007546 <_dtoa_r+0x85e>
 800748a:	4aa0      	ldr	r2, [pc, #640]	; (800770c <_dtoa_r+0xa24>)
 800748c:	189b      	adds	r3, r3, r2
 800748e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007490:	2101      	movs	r1, #1
 8007492:	18d2      	adds	r2, r2, r3
 8007494:	920a      	str	r2, [sp, #40]	; 0x28
 8007496:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007498:	0038      	movs	r0, r7
 800749a:	18d3      	adds	r3, r2, r3
 800749c:	930d      	str	r3, [sp, #52]	; 0x34
 800749e:	f000 fb53 	bl	8007b48 <__i2b>
 80074a2:	0005      	movs	r5, r0
 80074a4:	2c00      	cmp	r4, #0
 80074a6:	dd0e      	ble.n	80074c6 <_dtoa_r+0x7de>
 80074a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	dd0b      	ble.n	80074c6 <_dtoa_r+0x7de>
 80074ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80074b0:	0023      	movs	r3, r4
 80074b2:	4294      	cmp	r4, r2
 80074b4:	dd00      	ble.n	80074b8 <_dtoa_r+0x7d0>
 80074b6:	0013      	movs	r3, r2
 80074b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074ba:	1ae4      	subs	r4, r4, r3
 80074bc:	1ad2      	subs	r2, r2, r3
 80074be:	920a      	str	r2, [sp, #40]	; 0x28
 80074c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80074c2:	1ad3      	subs	r3, r2, r3
 80074c4:	930d      	str	r3, [sp, #52]	; 0x34
 80074c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d01f      	beq.n	800750c <_dtoa_r+0x824>
 80074cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d054      	beq.n	800757c <_dtoa_r+0x894>
 80074d2:	2e00      	cmp	r6, #0
 80074d4:	dd11      	ble.n	80074fa <_dtoa_r+0x812>
 80074d6:	0029      	movs	r1, r5
 80074d8:	0032      	movs	r2, r6
 80074da:	0038      	movs	r0, r7
 80074dc:	f000 fbfa 	bl	8007cd4 <__pow5mult>
 80074e0:	9a05      	ldr	r2, [sp, #20]
 80074e2:	0001      	movs	r1, r0
 80074e4:	0005      	movs	r5, r0
 80074e6:	0038      	movs	r0, r7
 80074e8:	f000 fb44 	bl	8007b74 <__multiply>
 80074ec:	9905      	ldr	r1, [sp, #20]
 80074ee:	9014      	str	r0, [sp, #80]	; 0x50
 80074f0:	0038      	movs	r0, r7
 80074f2:	f000 fa79 	bl	80079e8 <_Bfree>
 80074f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80074f8:	9305      	str	r3, [sp, #20]
 80074fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074fc:	1b9a      	subs	r2, r3, r6
 80074fe:	42b3      	cmp	r3, r6
 8007500:	d004      	beq.n	800750c <_dtoa_r+0x824>
 8007502:	0038      	movs	r0, r7
 8007504:	9905      	ldr	r1, [sp, #20]
 8007506:	f000 fbe5 	bl	8007cd4 <__pow5mult>
 800750a:	9005      	str	r0, [sp, #20]
 800750c:	2101      	movs	r1, #1
 800750e:	0038      	movs	r0, r7
 8007510:	f000 fb1a 	bl	8007b48 <__i2b>
 8007514:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007516:	0006      	movs	r6, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	dd31      	ble.n	8007580 <_dtoa_r+0x898>
 800751c:	001a      	movs	r2, r3
 800751e:	0001      	movs	r1, r0
 8007520:	0038      	movs	r0, r7
 8007522:	f000 fbd7 	bl	8007cd4 <__pow5mult>
 8007526:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007528:	0006      	movs	r6, r0
 800752a:	2b01      	cmp	r3, #1
 800752c:	dd2d      	ble.n	800758a <_dtoa_r+0x8a2>
 800752e:	2300      	movs	r3, #0
 8007530:	930e      	str	r3, [sp, #56]	; 0x38
 8007532:	6933      	ldr	r3, [r6, #16]
 8007534:	3303      	adds	r3, #3
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	18f3      	adds	r3, r6, r3
 800753a:	6858      	ldr	r0, [r3, #4]
 800753c:	f000 fabc 	bl	8007ab8 <__hi0bits>
 8007540:	2320      	movs	r3, #32
 8007542:	1a18      	subs	r0, r3, r0
 8007544:	e039      	b.n	80075ba <_dtoa_r+0x8d2>
 8007546:	2336      	movs	r3, #54	; 0x36
 8007548:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800754a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800754c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800754e:	1a9b      	subs	r3, r3, r2
 8007550:	e79d      	b.n	800748e <_dtoa_r+0x7a6>
 8007552:	9b07      	ldr	r3, [sp, #28]
 8007554:	1e5e      	subs	r6, r3, #1
 8007556:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007558:	42b3      	cmp	r3, r6
 800755a:	db07      	blt.n	800756c <_dtoa_r+0x884>
 800755c:	1b9e      	subs	r6, r3, r6
 800755e:	9b07      	ldr	r3, [sp, #28]
 8007560:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007562:	2b00      	cmp	r3, #0
 8007564:	da93      	bge.n	800748e <_dtoa_r+0x7a6>
 8007566:	1ae4      	subs	r4, r4, r3
 8007568:	2300      	movs	r3, #0
 800756a:	e790      	b.n	800748e <_dtoa_r+0x7a6>
 800756c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800756e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007570:	1af3      	subs	r3, r6, r3
 8007572:	18d3      	adds	r3, r2, r3
 8007574:	960e      	str	r6, [sp, #56]	; 0x38
 8007576:	9315      	str	r3, [sp, #84]	; 0x54
 8007578:	2600      	movs	r6, #0
 800757a:	e7f0      	b.n	800755e <_dtoa_r+0x876>
 800757c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800757e:	e7c0      	b.n	8007502 <_dtoa_r+0x81a>
 8007580:	2300      	movs	r3, #0
 8007582:	930e      	str	r3, [sp, #56]	; 0x38
 8007584:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007586:	2b01      	cmp	r3, #1
 8007588:	dc13      	bgt.n	80075b2 <_dtoa_r+0x8ca>
 800758a:	2300      	movs	r3, #0
 800758c:	930e      	str	r3, [sp, #56]	; 0x38
 800758e:	9b08      	ldr	r3, [sp, #32]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d10e      	bne.n	80075b2 <_dtoa_r+0x8ca>
 8007594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007596:	031b      	lsls	r3, r3, #12
 8007598:	d10b      	bne.n	80075b2 <_dtoa_r+0x8ca>
 800759a:	4b5d      	ldr	r3, [pc, #372]	; (8007710 <_dtoa_r+0xa28>)
 800759c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800759e:	4213      	tst	r3, r2
 80075a0:	d007      	beq.n	80075b2 <_dtoa_r+0x8ca>
 80075a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075a4:	3301      	adds	r3, #1
 80075a6:	930a      	str	r3, [sp, #40]	; 0x28
 80075a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075aa:	3301      	adds	r3, #1
 80075ac:	930d      	str	r3, [sp, #52]	; 0x34
 80075ae:	2301      	movs	r3, #1
 80075b0:	930e      	str	r3, [sp, #56]	; 0x38
 80075b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075b4:	2001      	movs	r0, #1
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d1bb      	bne.n	8007532 <_dtoa_r+0x84a>
 80075ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075bc:	221f      	movs	r2, #31
 80075be:	1818      	adds	r0, r3, r0
 80075c0:	0003      	movs	r3, r0
 80075c2:	4013      	ands	r3, r2
 80075c4:	4210      	tst	r0, r2
 80075c6:	d046      	beq.n	8007656 <_dtoa_r+0x96e>
 80075c8:	3201      	adds	r2, #1
 80075ca:	1ad2      	subs	r2, r2, r3
 80075cc:	2a04      	cmp	r2, #4
 80075ce:	dd3f      	ble.n	8007650 <_dtoa_r+0x968>
 80075d0:	221c      	movs	r2, #28
 80075d2:	1ad3      	subs	r3, r2, r3
 80075d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075d6:	18e4      	adds	r4, r4, r3
 80075d8:	18d2      	adds	r2, r2, r3
 80075da:	920a      	str	r2, [sp, #40]	; 0x28
 80075dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80075de:	18d3      	adds	r3, r2, r3
 80075e0:	930d      	str	r3, [sp, #52]	; 0x34
 80075e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	dd05      	ble.n	80075f4 <_dtoa_r+0x90c>
 80075e8:	001a      	movs	r2, r3
 80075ea:	0038      	movs	r0, r7
 80075ec:	9905      	ldr	r1, [sp, #20]
 80075ee:	f000 fbcd 	bl	8007d8c <__lshift>
 80075f2:	9005      	str	r0, [sp, #20]
 80075f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	dd05      	ble.n	8007606 <_dtoa_r+0x91e>
 80075fa:	0031      	movs	r1, r6
 80075fc:	001a      	movs	r2, r3
 80075fe:	0038      	movs	r0, r7
 8007600:	f000 fbc4 	bl	8007d8c <__lshift>
 8007604:	0006      	movs	r6, r0
 8007606:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007608:	2b00      	cmp	r3, #0
 800760a:	d026      	beq.n	800765a <_dtoa_r+0x972>
 800760c:	0031      	movs	r1, r6
 800760e:	9805      	ldr	r0, [sp, #20]
 8007610:	f000 fc2a 	bl	8007e68 <__mcmp>
 8007614:	2800      	cmp	r0, #0
 8007616:	da20      	bge.n	800765a <_dtoa_r+0x972>
 8007618:	9b02      	ldr	r3, [sp, #8]
 800761a:	220a      	movs	r2, #10
 800761c:	3b01      	subs	r3, #1
 800761e:	9302      	str	r3, [sp, #8]
 8007620:	0038      	movs	r0, r7
 8007622:	2300      	movs	r3, #0
 8007624:	9905      	ldr	r1, [sp, #20]
 8007626:	f000 fa03 	bl	8007a30 <__multadd>
 800762a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800762c:	9005      	str	r0, [sp, #20]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d100      	bne.n	8007634 <_dtoa_r+0x94c>
 8007632:	e166      	b.n	8007902 <_dtoa_r+0xc1a>
 8007634:	2300      	movs	r3, #0
 8007636:	0029      	movs	r1, r5
 8007638:	220a      	movs	r2, #10
 800763a:	0038      	movs	r0, r7
 800763c:	f000 f9f8 	bl	8007a30 <__multadd>
 8007640:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007642:	0005      	movs	r5, r0
 8007644:	2b00      	cmp	r3, #0
 8007646:	dc47      	bgt.n	80076d8 <_dtoa_r+0x9f0>
 8007648:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800764a:	2b02      	cmp	r3, #2
 800764c:	dc0d      	bgt.n	800766a <_dtoa_r+0x982>
 800764e:	e043      	b.n	80076d8 <_dtoa_r+0x9f0>
 8007650:	2a04      	cmp	r2, #4
 8007652:	d0c6      	beq.n	80075e2 <_dtoa_r+0x8fa>
 8007654:	0013      	movs	r3, r2
 8007656:	331c      	adds	r3, #28
 8007658:	e7bc      	b.n	80075d4 <_dtoa_r+0x8ec>
 800765a:	9b07      	ldr	r3, [sp, #28]
 800765c:	2b00      	cmp	r3, #0
 800765e:	dc35      	bgt.n	80076cc <_dtoa_r+0x9e4>
 8007660:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007662:	2b02      	cmp	r3, #2
 8007664:	dd32      	ble.n	80076cc <_dtoa_r+0x9e4>
 8007666:	9b07      	ldr	r3, [sp, #28]
 8007668:	930c      	str	r3, [sp, #48]	; 0x30
 800766a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800766c:	2b00      	cmp	r3, #0
 800766e:	d10c      	bne.n	800768a <_dtoa_r+0x9a2>
 8007670:	0031      	movs	r1, r6
 8007672:	2205      	movs	r2, #5
 8007674:	0038      	movs	r0, r7
 8007676:	f000 f9db 	bl	8007a30 <__multadd>
 800767a:	0006      	movs	r6, r0
 800767c:	0001      	movs	r1, r0
 800767e:	9805      	ldr	r0, [sp, #20]
 8007680:	f000 fbf2 	bl	8007e68 <__mcmp>
 8007684:	2800      	cmp	r0, #0
 8007686:	dd00      	ble.n	800768a <_dtoa_r+0x9a2>
 8007688:	e5a5      	b.n	80071d6 <_dtoa_r+0x4ee>
 800768a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800768c:	43db      	mvns	r3, r3
 800768e:	9302      	str	r3, [sp, #8]
 8007690:	9b06      	ldr	r3, [sp, #24]
 8007692:	9308      	str	r3, [sp, #32]
 8007694:	2400      	movs	r4, #0
 8007696:	0031      	movs	r1, r6
 8007698:	0038      	movs	r0, r7
 800769a:	f000 f9a5 	bl	80079e8 <_Bfree>
 800769e:	2d00      	cmp	r5, #0
 80076a0:	d100      	bne.n	80076a4 <_dtoa_r+0x9bc>
 80076a2:	e6b7      	b.n	8007414 <_dtoa_r+0x72c>
 80076a4:	2c00      	cmp	r4, #0
 80076a6:	d005      	beq.n	80076b4 <_dtoa_r+0x9cc>
 80076a8:	42ac      	cmp	r4, r5
 80076aa:	d003      	beq.n	80076b4 <_dtoa_r+0x9cc>
 80076ac:	0021      	movs	r1, r4
 80076ae:	0038      	movs	r0, r7
 80076b0:	f000 f99a 	bl	80079e8 <_Bfree>
 80076b4:	0029      	movs	r1, r5
 80076b6:	0038      	movs	r0, r7
 80076b8:	f000 f996 	bl	80079e8 <_Bfree>
 80076bc:	e6aa      	b.n	8007414 <_dtoa_r+0x72c>
 80076be:	2600      	movs	r6, #0
 80076c0:	0035      	movs	r5, r6
 80076c2:	e7e2      	b.n	800768a <_dtoa_r+0x9a2>
 80076c4:	9602      	str	r6, [sp, #8]
 80076c6:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80076c8:	0035      	movs	r5, r6
 80076ca:	e584      	b.n	80071d6 <_dtoa_r+0x4ee>
 80076cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d100      	bne.n	80076d4 <_dtoa_r+0x9ec>
 80076d2:	e0ce      	b.n	8007872 <_dtoa_r+0xb8a>
 80076d4:	9b07      	ldr	r3, [sp, #28]
 80076d6:	930c      	str	r3, [sp, #48]	; 0x30
 80076d8:	2c00      	cmp	r4, #0
 80076da:	dd05      	ble.n	80076e8 <_dtoa_r+0xa00>
 80076dc:	0029      	movs	r1, r5
 80076de:	0022      	movs	r2, r4
 80076e0:	0038      	movs	r0, r7
 80076e2:	f000 fb53 	bl	8007d8c <__lshift>
 80076e6:	0005      	movs	r5, r0
 80076e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076ea:	0028      	movs	r0, r5
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d022      	beq.n	8007736 <_dtoa_r+0xa4e>
 80076f0:	0038      	movs	r0, r7
 80076f2:	6869      	ldr	r1, [r5, #4]
 80076f4:	f000 f934 	bl	8007960 <_Balloc>
 80076f8:	1e04      	subs	r4, r0, #0
 80076fa:	d10f      	bne.n	800771c <_dtoa_r+0xa34>
 80076fc:	0002      	movs	r2, r0
 80076fe:	4b05      	ldr	r3, [pc, #20]	; (8007714 <_dtoa_r+0xa2c>)
 8007700:	4905      	ldr	r1, [pc, #20]	; (8007718 <_dtoa_r+0xa30>)
 8007702:	f7ff fb06 	bl	8006d12 <_dtoa_r+0x2a>
 8007706:	46c0      	nop			; (mov r8, r8)
 8007708:	40240000 	.word	0x40240000
 800770c:	00000433 	.word	0x00000433
 8007710:	7ff00000 	.word	0x7ff00000
 8007714:	0800948b 	.word	0x0800948b
 8007718:	000002ea 	.word	0x000002ea
 800771c:	0029      	movs	r1, r5
 800771e:	692b      	ldr	r3, [r5, #16]
 8007720:	310c      	adds	r1, #12
 8007722:	1c9a      	adds	r2, r3, #2
 8007724:	0092      	lsls	r2, r2, #2
 8007726:	300c      	adds	r0, #12
 8007728:	f000 f911 	bl	800794e <memcpy>
 800772c:	2201      	movs	r2, #1
 800772e:	0021      	movs	r1, r4
 8007730:	0038      	movs	r0, r7
 8007732:	f000 fb2b 	bl	8007d8c <__lshift>
 8007736:	9b06      	ldr	r3, [sp, #24]
 8007738:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800773a:	930a      	str	r3, [sp, #40]	; 0x28
 800773c:	3b01      	subs	r3, #1
 800773e:	189b      	adds	r3, r3, r2
 8007740:	2201      	movs	r2, #1
 8007742:	002c      	movs	r4, r5
 8007744:	0005      	movs	r5, r0
 8007746:	9314      	str	r3, [sp, #80]	; 0x50
 8007748:	9b08      	ldr	r3, [sp, #32]
 800774a:	4013      	ands	r3, r2
 800774c:	930f      	str	r3, [sp, #60]	; 0x3c
 800774e:	0031      	movs	r1, r6
 8007750:	9805      	ldr	r0, [sp, #20]
 8007752:	f7ff fa3d 	bl	8006bd0 <quorem>
 8007756:	0003      	movs	r3, r0
 8007758:	0021      	movs	r1, r4
 800775a:	3330      	adds	r3, #48	; 0x30
 800775c:	900d      	str	r0, [sp, #52]	; 0x34
 800775e:	9805      	ldr	r0, [sp, #20]
 8007760:	9307      	str	r3, [sp, #28]
 8007762:	f000 fb81 	bl	8007e68 <__mcmp>
 8007766:	002a      	movs	r2, r5
 8007768:	900e      	str	r0, [sp, #56]	; 0x38
 800776a:	0031      	movs	r1, r6
 800776c:	0038      	movs	r0, r7
 800776e:	f000 fb97 	bl	8007ea0 <__mdiff>
 8007772:	68c3      	ldr	r3, [r0, #12]
 8007774:	9008      	str	r0, [sp, #32]
 8007776:	9310      	str	r3, [sp, #64]	; 0x40
 8007778:	2301      	movs	r3, #1
 800777a:	930c      	str	r3, [sp, #48]	; 0x30
 800777c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800777e:	2b00      	cmp	r3, #0
 8007780:	d104      	bne.n	800778c <_dtoa_r+0xaa4>
 8007782:	0001      	movs	r1, r0
 8007784:	9805      	ldr	r0, [sp, #20]
 8007786:	f000 fb6f 	bl	8007e68 <__mcmp>
 800778a:	900c      	str	r0, [sp, #48]	; 0x30
 800778c:	0038      	movs	r0, r7
 800778e:	9908      	ldr	r1, [sp, #32]
 8007790:	f000 f92a 	bl	80079e8 <_Bfree>
 8007794:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007796:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007798:	3301      	adds	r3, #1
 800779a:	9308      	str	r3, [sp, #32]
 800779c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800779e:	4313      	orrs	r3, r2
 80077a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80077a2:	4313      	orrs	r3, r2
 80077a4:	d10c      	bne.n	80077c0 <_dtoa_r+0xad8>
 80077a6:	9b07      	ldr	r3, [sp, #28]
 80077a8:	2b39      	cmp	r3, #57	; 0x39
 80077aa:	d026      	beq.n	80077fa <_dtoa_r+0xb12>
 80077ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	dd02      	ble.n	80077b8 <_dtoa_r+0xad0>
 80077b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077b4:	3331      	adds	r3, #49	; 0x31
 80077b6:	9307      	str	r3, [sp, #28]
 80077b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077ba:	9a07      	ldr	r2, [sp, #28]
 80077bc:	701a      	strb	r2, [r3, #0]
 80077be:	e76a      	b.n	8007696 <_dtoa_r+0x9ae>
 80077c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	db04      	blt.n	80077d0 <_dtoa_r+0xae8>
 80077c6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80077c8:	4313      	orrs	r3, r2
 80077ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80077cc:	4313      	orrs	r3, r2
 80077ce:	d11f      	bne.n	8007810 <_dtoa_r+0xb28>
 80077d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	ddf0      	ble.n	80077b8 <_dtoa_r+0xad0>
 80077d6:	9905      	ldr	r1, [sp, #20]
 80077d8:	2201      	movs	r2, #1
 80077da:	0038      	movs	r0, r7
 80077dc:	f000 fad6 	bl	8007d8c <__lshift>
 80077e0:	0031      	movs	r1, r6
 80077e2:	9005      	str	r0, [sp, #20]
 80077e4:	f000 fb40 	bl	8007e68 <__mcmp>
 80077e8:	2800      	cmp	r0, #0
 80077ea:	dc03      	bgt.n	80077f4 <_dtoa_r+0xb0c>
 80077ec:	d1e4      	bne.n	80077b8 <_dtoa_r+0xad0>
 80077ee:	9b07      	ldr	r3, [sp, #28]
 80077f0:	07db      	lsls	r3, r3, #31
 80077f2:	d5e1      	bpl.n	80077b8 <_dtoa_r+0xad0>
 80077f4:	9b07      	ldr	r3, [sp, #28]
 80077f6:	2b39      	cmp	r3, #57	; 0x39
 80077f8:	d1db      	bne.n	80077b2 <_dtoa_r+0xaca>
 80077fa:	2339      	movs	r3, #57	; 0x39
 80077fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077fe:	7013      	strb	r3, [r2, #0]
 8007800:	9b08      	ldr	r3, [sp, #32]
 8007802:	9308      	str	r3, [sp, #32]
 8007804:	3b01      	subs	r3, #1
 8007806:	781a      	ldrb	r2, [r3, #0]
 8007808:	2a39      	cmp	r2, #57	; 0x39
 800780a:	d068      	beq.n	80078de <_dtoa_r+0xbf6>
 800780c:	3201      	adds	r2, #1
 800780e:	e7d5      	b.n	80077bc <_dtoa_r+0xad4>
 8007810:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007812:	2b00      	cmp	r3, #0
 8007814:	dd07      	ble.n	8007826 <_dtoa_r+0xb3e>
 8007816:	9b07      	ldr	r3, [sp, #28]
 8007818:	2b39      	cmp	r3, #57	; 0x39
 800781a:	d0ee      	beq.n	80077fa <_dtoa_r+0xb12>
 800781c:	9b07      	ldr	r3, [sp, #28]
 800781e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007820:	3301      	adds	r3, #1
 8007822:	7013      	strb	r3, [r2, #0]
 8007824:	e737      	b.n	8007696 <_dtoa_r+0x9ae>
 8007826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007828:	9a07      	ldr	r2, [sp, #28]
 800782a:	701a      	strb	r2, [r3, #0]
 800782c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800782e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007830:	4293      	cmp	r3, r2
 8007832:	d03e      	beq.n	80078b2 <_dtoa_r+0xbca>
 8007834:	2300      	movs	r3, #0
 8007836:	220a      	movs	r2, #10
 8007838:	9905      	ldr	r1, [sp, #20]
 800783a:	0038      	movs	r0, r7
 800783c:	f000 f8f8 	bl	8007a30 <__multadd>
 8007840:	2300      	movs	r3, #0
 8007842:	9005      	str	r0, [sp, #20]
 8007844:	220a      	movs	r2, #10
 8007846:	0021      	movs	r1, r4
 8007848:	0038      	movs	r0, r7
 800784a:	42ac      	cmp	r4, r5
 800784c:	d106      	bne.n	800785c <_dtoa_r+0xb74>
 800784e:	f000 f8ef 	bl	8007a30 <__multadd>
 8007852:	0004      	movs	r4, r0
 8007854:	0005      	movs	r5, r0
 8007856:	9b08      	ldr	r3, [sp, #32]
 8007858:	930a      	str	r3, [sp, #40]	; 0x28
 800785a:	e778      	b.n	800774e <_dtoa_r+0xa66>
 800785c:	f000 f8e8 	bl	8007a30 <__multadd>
 8007860:	0029      	movs	r1, r5
 8007862:	0004      	movs	r4, r0
 8007864:	2300      	movs	r3, #0
 8007866:	220a      	movs	r2, #10
 8007868:	0038      	movs	r0, r7
 800786a:	f000 f8e1 	bl	8007a30 <__multadd>
 800786e:	0005      	movs	r5, r0
 8007870:	e7f1      	b.n	8007856 <_dtoa_r+0xb6e>
 8007872:	9b07      	ldr	r3, [sp, #28]
 8007874:	930c      	str	r3, [sp, #48]	; 0x30
 8007876:	2400      	movs	r4, #0
 8007878:	0031      	movs	r1, r6
 800787a:	9805      	ldr	r0, [sp, #20]
 800787c:	f7ff f9a8 	bl	8006bd0 <quorem>
 8007880:	9b06      	ldr	r3, [sp, #24]
 8007882:	3030      	adds	r0, #48	; 0x30
 8007884:	5518      	strb	r0, [r3, r4]
 8007886:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007888:	3401      	adds	r4, #1
 800788a:	9007      	str	r0, [sp, #28]
 800788c:	42a3      	cmp	r3, r4
 800788e:	dd07      	ble.n	80078a0 <_dtoa_r+0xbb8>
 8007890:	2300      	movs	r3, #0
 8007892:	220a      	movs	r2, #10
 8007894:	0038      	movs	r0, r7
 8007896:	9905      	ldr	r1, [sp, #20]
 8007898:	f000 f8ca 	bl	8007a30 <__multadd>
 800789c:	9005      	str	r0, [sp, #20]
 800789e:	e7eb      	b.n	8007878 <_dtoa_r+0xb90>
 80078a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078a2:	2001      	movs	r0, #1
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	dd00      	ble.n	80078aa <_dtoa_r+0xbc2>
 80078a8:	0018      	movs	r0, r3
 80078aa:	2400      	movs	r4, #0
 80078ac:	9b06      	ldr	r3, [sp, #24]
 80078ae:	181b      	adds	r3, r3, r0
 80078b0:	9308      	str	r3, [sp, #32]
 80078b2:	9905      	ldr	r1, [sp, #20]
 80078b4:	2201      	movs	r2, #1
 80078b6:	0038      	movs	r0, r7
 80078b8:	f000 fa68 	bl	8007d8c <__lshift>
 80078bc:	0031      	movs	r1, r6
 80078be:	9005      	str	r0, [sp, #20]
 80078c0:	f000 fad2 	bl	8007e68 <__mcmp>
 80078c4:	2800      	cmp	r0, #0
 80078c6:	dc9b      	bgt.n	8007800 <_dtoa_r+0xb18>
 80078c8:	d102      	bne.n	80078d0 <_dtoa_r+0xbe8>
 80078ca:	9b07      	ldr	r3, [sp, #28]
 80078cc:	07db      	lsls	r3, r3, #31
 80078ce:	d497      	bmi.n	8007800 <_dtoa_r+0xb18>
 80078d0:	9b08      	ldr	r3, [sp, #32]
 80078d2:	9308      	str	r3, [sp, #32]
 80078d4:	3b01      	subs	r3, #1
 80078d6:	781a      	ldrb	r2, [r3, #0]
 80078d8:	2a30      	cmp	r2, #48	; 0x30
 80078da:	d0fa      	beq.n	80078d2 <_dtoa_r+0xbea>
 80078dc:	e6db      	b.n	8007696 <_dtoa_r+0x9ae>
 80078de:	9a06      	ldr	r2, [sp, #24]
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d18e      	bne.n	8007802 <_dtoa_r+0xb1a>
 80078e4:	9b02      	ldr	r3, [sp, #8]
 80078e6:	3301      	adds	r3, #1
 80078e8:	9302      	str	r3, [sp, #8]
 80078ea:	2331      	movs	r3, #49	; 0x31
 80078ec:	e799      	b.n	8007822 <_dtoa_r+0xb3a>
 80078ee:	4b09      	ldr	r3, [pc, #36]	; (8007914 <_dtoa_r+0xc2c>)
 80078f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80078f2:	9306      	str	r3, [sp, #24]
 80078f4:	4b08      	ldr	r3, [pc, #32]	; (8007918 <_dtoa_r+0xc30>)
 80078f6:	2a00      	cmp	r2, #0
 80078f8:	d001      	beq.n	80078fe <_dtoa_r+0xc16>
 80078fa:	f7ff fa3f 	bl	8006d7c <_dtoa_r+0x94>
 80078fe:	f7ff fa3f 	bl	8006d80 <_dtoa_r+0x98>
 8007902:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007904:	2b00      	cmp	r3, #0
 8007906:	dcb6      	bgt.n	8007876 <_dtoa_r+0xb8e>
 8007908:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800790a:	2b02      	cmp	r3, #2
 800790c:	dd00      	ble.n	8007910 <_dtoa_r+0xc28>
 800790e:	e6ac      	b.n	800766a <_dtoa_r+0x982>
 8007910:	e7b1      	b.n	8007876 <_dtoa_r+0xb8e>
 8007912:	46c0      	nop			; (mov r8, r8)
 8007914:	0800940c 	.word	0x0800940c
 8007918:	08009414 	.word	0x08009414

0800791c <_localeconv_r>:
 800791c:	4800      	ldr	r0, [pc, #0]	; (8007920 <_localeconv_r+0x4>)
 800791e:	4770      	bx	lr
 8007920:	20000160 	.word	0x20000160

08007924 <malloc>:
 8007924:	b510      	push	{r4, lr}
 8007926:	4b03      	ldr	r3, [pc, #12]	; (8007934 <malloc+0x10>)
 8007928:	0001      	movs	r1, r0
 800792a:	6818      	ldr	r0, [r3, #0]
 800792c:	f000 fc4c 	bl	80081c8 <_malloc_r>
 8007930:	bd10      	pop	{r4, pc}
 8007932:	46c0      	nop			; (mov r8, r8)
 8007934:	2000000c 	.word	0x2000000c

08007938 <memchr>:
 8007938:	b2c9      	uxtb	r1, r1
 800793a:	1882      	adds	r2, r0, r2
 800793c:	4290      	cmp	r0, r2
 800793e:	d101      	bne.n	8007944 <memchr+0xc>
 8007940:	2000      	movs	r0, #0
 8007942:	4770      	bx	lr
 8007944:	7803      	ldrb	r3, [r0, #0]
 8007946:	428b      	cmp	r3, r1
 8007948:	d0fb      	beq.n	8007942 <memchr+0xa>
 800794a:	3001      	adds	r0, #1
 800794c:	e7f6      	b.n	800793c <memchr+0x4>

0800794e <memcpy>:
 800794e:	2300      	movs	r3, #0
 8007950:	b510      	push	{r4, lr}
 8007952:	429a      	cmp	r2, r3
 8007954:	d100      	bne.n	8007958 <memcpy+0xa>
 8007956:	bd10      	pop	{r4, pc}
 8007958:	5ccc      	ldrb	r4, [r1, r3]
 800795a:	54c4      	strb	r4, [r0, r3]
 800795c:	3301      	adds	r3, #1
 800795e:	e7f8      	b.n	8007952 <memcpy+0x4>

08007960 <_Balloc>:
 8007960:	b570      	push	{r4, r5, r6, lr}
 8007962:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007964:	0006      	movs	r6, r0
 8007966:	000c      	movs	r4, r1
 8007968:	2d00      	cmp	r5, #0
 800796a:	d10e      	bne.n	800798a <_Balloc+0x2a>
 800796c:	2010      	movs	r0, #16
 800796e:	f7ff ffd9 	bl	8007924 <malloc>
 8007972:	1e02      	subs	r2, r0, #0
 8007974:	6270      	str	r0, [r6, #36]	; 0x24
 8007976:	d104      	bne.n	8007982 <_Balloc+0x22>
 8007978:	2166      	movs	r1, #102	; 0x66
 800797a:	4b19      	ldr	r3, [pc, #100]	; (80079e0 <_Balloc+0x80>)
 800797c:	4819      	ldr	r0, [pc, #100]	; (80079e4 <_Balloc+0x84>)
 800797e:	f000 fe0d 	bl	800859c <__assert_func>
 8007982:	6045      	str	r5, [r0, #4]
 8007984:	6085      	str	r5, [r0, #8]
 8007986:	6005      	str	r5, [r0, #0]
 8007988:	60c5      	str	r5, [r0, #12]
 800798a:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800798c:	68eb      	ldr	r3, [r5, #12]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d013      	beq.n	80079ba <_Balloc+0x5a>
 8007992:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007994:	00a2      	lsls	r2, r4, #2
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	189b      	adds	r3, r3, r2
 800799a:	6818      	ldr	r0, [r3, #0]
 800799c:	2800      	cmp	r0, #0
 800799e:	d118      	bne.n	80079d2 <_Balloc+0x72>
 80079a0:	2101      	movs	r1, #1
 80079a2:	000d      	movs	r5, r1
 80079a4:	40a5      	lsls	r5, r4
 80079a6:	1d6a      	adds	r2, r5, #5
 80079a8:	0030      	movs	r0, r6
 80079aa:	0092      	lsls	r2, r2, #2
 80079ac:	f000 fb74 	bl	8008098 <_calloc_r>
 80079b0:	2800      	cmp	r0, #0
 80079b2:	d00c      	beq.n	80079ce <_Balloc+0x6e>
 80079b4:	6044      	str	r4, [r0, #4]
 80079b6:	6085      	str	r5, [r0, #8]
 80079b8:	e00d      	b.n	80079d6 <_Balloc+0x76>
 80079ba:	2221      	movs	r2, #33	; 0x21
 80079bc:	2104      	movs	r1, #4
 80079be:	0030      	movs	r0, r6
 80079c0:	f000 fb6a 	bl	8008098 <_calloc_r>
 80079c4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80079c6:	60e8      	str	r0, [r5, #12]
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d1e1      	bne.n	8007992 <_Balloc+0x32>
 80079ce:	2000      	movs	r0, #0
 80079d0:	bd70      	pop	{r4, r5, r6, pc}
 80079d2:	6802      	ldr	r2, [r0, #0]
 80079d4:	601a      	str	r2, [r3, #0]
 80079d6:	2300      	movs	r3, #0
 80079d8:	6103      	str	r3, [r0, #16]
 80079da:	60c3      	str	r3, [r0, #12]
 80079dc:	e7f8      	b.n	80079d0 <_Balloc+0x70>
 80079de:	46c0      	nop			; (mov r8, r8)
 80079e0:	08009419 	.word	0x08009419
 80079e4:	0800949c 	.word	0x0800949c

080079e8 <_Bfree>:
 80079e8:	b570      	push	{r4, r5, r6, lr}
 80079ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80079ec:	0005      	movs	r5, r0
 80079ee:	000c      	movs	r4, r1
 80079f0:	2e00      	cmp	r6, #0
 80079f2:	d10e      	bne.n	8007a12 <_Bfree+0x2a>
 80079f4:	2010      	movs	r0, #16
 80079f6:	f7ff ff95 	bl	8007924 <malloc>
 80079fa:	1e02      	subs	r2, r0, #0
 80079fc:	6268      	str	r0, [r5, #36]	; 0x24
 80079fe:	d104      	bne.n	8007a0a <_Bfree+0x22>
 8007a00:	218a      	movs	r1, #138	; 0x8a
 8007a02:	4b09      	ldr	r3, [pc, #36]	; (8007a28 <_Bfree+0x40>)
 8007a04:	4809      	ldr	r0, [pc, #36]	; (8007a2c <_Bfree+0x44>)
 8007a06:	f000 fdc9 	bl	800859c <__assert_func>
 8007a0a:	6046      	str	r6, [r0, #4]
 8007a0c:	6086      	str	r6, [r0, #8]
 8007a0e:	6006      	str	r6, [r0, #0]
 8007a10:	60c6      	str	r6, [r0, #12]
 8007a12:	2c00      	cmp	r4, #0
 8007a14:	d007      	beq.n	8007a26 <_Bfree+0x3e>
 8007a16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007a18:	6862      	ldr	r2, [r4, #4]
 8007a1a:	68db      	ldr	r3, [r3, #12]
 8007a1c:	0092      	lsls	r2, r2, #2
 8007a1e:	189b      	adds	r3, r3, r2
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	6022      	str	r2, [r4, #0]
 8007a24:	601c      	str	r4, [r3, #0]
 8007a26:	bd70      	pop	{r4, r5, r6, pc}
 8007a28:	08009419 	.word	0x08009419
 8007a2c:	0800949c 	.word	0x0800949c

08007a30 <__multadd>:
 8007a30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a32:	000e      	movs	r6, r1
 8007a34:	9001      	str	r0, [sp, #4]
 8007a36:	000c      	movs	r4, r1
 8007a38:	001d      	movs	r5, r3
 8007a3a:	2000      	movs	r0, #0
 8007a3c:	690f      	ldr	r7, [r1, #16]
 8007a3e:	3614      	adds	r6, #20
 8007a40:	6833      	ldr	r3, [r6, #0]
 8007a42:	3001      	adds	r0, #1
 8007a44:	b299      	uxth	r1, r3
 8007a46:	4351      	muls	r1, r2
 8007a48:	0c1b      	lsrs	r3, r3, #16
 8007a4a:	4353      	muls	r3, r2
 8007a4c:	1949      	adds	r1, r1, r5
 8007a4e:	0c0d      	lsrs	r5, r1, #16
 8007a50:	195b      	adds	r3, r3, r5
 8007a52:	0c1d      	lsrs	r5, r3, #16
 8007a54:	b289      	uxth	r1, r1
 8007a56:	041b      	lsls	r3, r3, #16
 8007a58:	185b      	adds	r3, r3, r1
 8007a5a:	c608      	stmia	r6!, {r3}
 8007a5c:	4287      	cmp	r7, r0
 8007a5e:	dcef      	bgt.n	8007a40 <__multadd+0x10>
 8007a60:	2d00      	cmp	r5, #0
 8007a62:	d022      	beq.n	8007aaa <__multadd+0x7a>
 8007a64:	68a3      	ldr	r3, [r4, #8]
 8007a66:	42bb      	cmp	r3, r7
 8007a68:	dc19      	bgt.n	8007a9e <__multadd+0x6e>
 8007a6a:	6863      	ldr	r3, [r4, #4]
 8007a6c:	9801      	ldr	r0, [sp, #4]
 8007a6e:	1c59      	adds	r1, r3, #1
 8007a70:	f7ff ff76 	bl	8007960 <_Balloc>
 8007a74:	1e06      	subs	r6, r0, #0
 8007a76:	d105      	bne.n	8007a84 <__multadd+0x54>
 8007a78:	0002      	movs	r2, r0
 8007a7a:	21b5      	movs	r1, #181	; 0xb5
 8007a7c:	4b0c      	ldr	r3, [pc, #48]	; (8007ab0 <__multadd+0x80>)
 8007a7e:	480d      	ldr	r0, [pc, #52]	; (8007ab4 <__multadd+0x84>)
 8007a80:	f000 fd8c 	bl	800859c <__assert_func>
 8007a84:	0021      	movs	r1, r4
 8007a86:	6923      	ldr	r3, [r4, #16]
 8007a88:	310c      	adds	r1, #12
 8007a8a:	1c9a      	adds	r2, r3, #2
 8007a8c:	0092      	lsls	r2, r2, #2
 8007a8e:	300c      	adds	r0, #12
 8007a90:	f7ff ff5d 	bl	800794e <memcpy>
 8007a94:	0021      	movs	r1, r4
 8007a96:	9801      	ldr	r0, [sp, #4]
 8007a98:	f7ff ffa6 	bl	80079e8 <_Bfree>
 8007a9c:	0034      	movs	r4, r6
 8007a9e:	1d3b      	adds	r3, r7, #4
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	18e3      	adds	r3, r4, r3
 8007aa4:	605d      	str	r5, [r3, #4]
 8007aa6:	1c7b      	adds	r3, r7, #1
 8007aa8:	6123      	str	r3, [r4, #16]
 8007aaa:	0020      	movs	r0, r4
 8007aac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007aae:	46c0      	nop			; (mov r8, r8)
 8007ab0:	0800948b 	.word	0x0800948b
 8007ab4:	0800949c 	.word	0x0800949c

08007ab8 <__hi0bits>:
 8007ab8:	0003      	movs	r3, r0
 8007aba:	0c02      	lsrs	r2, r0, #16
 8007abc:	2000      	movs	r0, #0
 8007abe:	4282      	cmp	r2, r0
 8007ac0:	d101      	bne.n	8007ac6 <__hi0bits+0xe>
 8007ac2:	041b      	lsls	r3, r3, #16
 8007ac4:	3010      	adds	r0, #16
 8007ac6:	0e1a      	lsrs	r2, r3, #24
 8007ac8:	d101      	bne.n	8007ace <__hi0bits+0x16>
 8007aca:	3008      	adds	r0, #8
 8007acc:	021b      	lsls	r3, r3, #8
 8007ace:	0f1a      	lsrs	r2, r3, #28
 8007ad0:	d101      	bne.n	8007ad6 <__hi0bits+0x1e>
 8007ad2:	3004      	adds	r0, #4
 8007ad4:	011b      	lsls	r3, r3, #4
 8007ad6:	0f9a      	lsrs	r2, r3, #30
 8007ad8:	d101      	bne.n	8007ade <__hi0bits+0x26>
 8007ada:	3002      	adds	r0, #2
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	db03      	blt.n	8007aea <__hi0bits+0x32>
 8007ae2:	3001      	adds	r0, #1
 8007ae4:	005b      	lsls	r3, r3, #1
 8007ae6:	d400      	bmi.n	8007aea <__hi0bits+0x32>
 8007ae8:	2020      	movs	r0, #32
 8007aea:	4770      	bx	lr

08007aec <__lo0bits>:
 8007aec:	6803      	ldr	r3, [r0, #0]
 8007aee:	0002      	movs	r2, r0
 8007af0:	2107      	movs	r1, #7
 8007af2:	0018      	movs	r0, r3
 8007af4:	4008      	ands	r0, r1
 8007af6:	420b      	tst	r3, r1
 8007af8:	d00d      	beq.n	8007b16 <__lo0bits+0x2a>
 8007afa:	3906      	subs	r1, #6
 8007afc:	2000      	movs	r0, #0
 8007afe:	420b      	tst	r3, r1
 8007b00:	d105      	bne.n	8007b0e <__lo0bits+0x22>
 8007b02:	3002      	adds	r0, #2
 8007b04:	4203      	tst	r3, r0
 8007b06:	d003      	beq.n	8007b10 <__lo0bits+0x24>
 8007b08:	40cb      	lsrs	r3, r1
 8007b0a:	0008      	movs	r0, r1
 8007b0c:	6013      	str	r3, [r2, #0]
 8007b0e:	4770      	bx	lr
 8007b10:	089b      	lsrs	r3, r3, #2
 8007b12:	6013      	str	r3, [r2, #0]
 8007b14:	e7fb      	b.n	8007b0e <__lo0bits+0x22>
 8007b16:	b299      	uxth	r1, r3
 8007b18:	2900      	cmp	r1, #0
 8007b1a:	d101      	bne.n	8007b20 <__lo0bits+0x34>
 8007b1c:	2010      	movs	r0, #16
 8007b1e:	0c1b      	lsrs	r3, r3, #16
 8007b20:	b2d9      	uxtb	r1, r3
 8007b22:	2900      	cmp	r1, #0
 8007b24:	d101      	bne.n	8007b2a <__lo0bits+0x3e>
 8007b26:	3008      	adds	r0, #8
 8007b28:	0a1b      	lsrs	r3, r3, #8
 8007b2a:	0719      	lsls	r1, r3, #28
 8007b2c:	d101      	bne.n	8007b32 <__lo0bits+0x46>
 8007b2e:	3004      	adds	r0, #4
 8007b30:	091b      	lsrs	r3, r3, #4
 8007b32:	0799      	lsls	r1, r3, #30
 8007b34:	d101      	bne.n	8007b3a <__lo0bits+0x4e>
 8007b36:	3002      	adds	r0, #2
 8007b38:	089b      	lsrs	r3, r3, #2
 8007b3a:	07d9      	lsls	r1, r3, #31
 8007b3c:	d4e9      	bmi.n	8007b12 <__lo0bits+0x26>
 8007b3e:	3001      	adds	r0, #1
 8007b40:	085b      	lsrs	r3, r3, #1
 8007b42:	d1e6      	bne.n	8007b12 <__lo0bits+0x26>
 8007b44:	2020      	movs	r0, #32
 8007b46:	e7e2      	b.n	8007b0e <__lo0bits+0x22>

08007b48 <__i2b>:
 8007b48:	b510      	push	{r4, lr}
 8007b4a:	000c      	movs	r4, r1
 8007b4c:	2101      	movs	r1, #1
 8007b4e:	f7ff ff07 	bl	8007960 <_Balloc>
 8007b52:	2800      	cmp	r0, #0
 8007b54:	d106      	bne.n	8007b64 <__i2b+0x1c>
 8007b56:	21a0      	movs	r1, #160	; 0xa0
 8007b58:	0002      	movs	r2, r0
 8007b5a:	4b04      	ldr	r3, [pc, #16]	; (8007b6c <__i2b+0x24>)
 8007b5c:	4804      	ldr	r0, [pc, #16]	; (8007b70 <__i2b+0x28>)
 8007b5e:	0049      	lsls	r1, r1, #1
 8007b60:	f000 fd1c 	bl	800859c <__assert_func>
 8007b64:	2301      	movs	r3, #1
 8007b66:	6144      	str	r4, [r0, #20]
 8007b68:	6103      	str	r3, [r0, #16]
 8007b6a:	bd10      	pop	{r4, pc}
 8007b6c:	0800948b 	.word	0x0800948b
 8007b70:	0800949c 	.word	0x0800949c

08007b74 <__multiply>:
 8007b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b76:	690b      	ldr	r3, [r1, #16]
 8007b78:	0014      	movs	r4, r2
 8007b7a:	6912      	ldr	r2, [r2, #16]
 8007b7c:	000d      	movs	r5, r1
 8007b7e:	b089      	sub	sp, #36	; 0x24
 8007b80:	4293      	cmp	r3, r2
 8007b82:	da01      	bge.n	8007b88 <__multiply+0x14>
 8007b84:	0025      	movs	r5, r4
 8007b86:	000c      	movs	r4, r1
 8007b88:	692f      	ldr	r7, [r5, #16]
 8007b8a:	6926      	ldr	r6, [r4, #16]
 8007b8c:	6869      	ldr	r1, [r5, #4]
 8007b8e:	19bb      	adds	r3, r7, r6
 8007b90:	9302      	str	r3, [sp, #8]
 8007b92:	68ab      	ldr	r3, [r5, #8]
 8007b94:	19ba      	adds	r2, r7, r6
 8007b96:	4293      	cmp	r3, r2
 8007b98:	da00      	bge.n	8007b9c <__multiply+0x28>
 8007b9a:	3101      	adds	r1, #1
 8007b9c:	f7ff fee0 	bl	8007960 <_Balloc>
 8007ba0:	9001      	str	r0, [sp, #4]
 8007ba2:	2800      	cmp	r0, #0
 8007ba4:	d106      	bne.n	8007bb4 <__multiply+0x40>
 8007ba6:	215e      	movs	r1, #94	; 0x5e
 8007ba8:	0002      	movs	r2, r0
 8007baa:	4b48      	ldr	r3, [pc, #288]	; (8007ccc <__multiply+0x158>)
 8007bac:	4848      	ldr	r0, [pc, #288]	; (8007cd0 <__multiply+0x15c>)
 8007bae:	31ff      	adds	r1, #255	; 0xff
 8007bb0:	f000 fcf4 	bl	800859c <__assert_func>
 8007bb4:	9b01      	ldr	r3, [sp, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	3314      	adds	r3, #20
 8007bba:	469c      	mov	ip, r3
 8007bbc:	19bb      	adds	r3, r7, r6
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	4463      	add	r3, ip
 8007bc2:	9303      	str	r3, [sp, #12]
 8007bc4:	4663      	mov	r3, ip
 8007bc6:	9903      	ldr	r1, [sp, #12]
 8007bc8:	428b      	cmp	r3, r1
 8007bca:	d32c      	bcc.n	8007c26 <__multiply+0xb2>
 8007bcc:	002b      	movs	r3, r5
 8007bce:	0022      	movs	r2, r4
 8007bd0:	3314      	adds	r3, #20
 8007bd2:	00bf      	lsls	r7, r7, #2
 8007bd4:	3214      	adds	r2, #20
 8007bd6:	9306      	str	r3, [sp, #24]
 8007bd8:	00b6      	lsls	r6, r6, #2
 8007bda:	19db      	adds	r3, r3, r7
 8007bdc:	9304      	str	r3, [sp, #16]
 8007bde:	1993      	adds	r3, r2, r6
 8007be0:	9307      	str	r3, [sp, #28]
 8007be2:	2304      	movs	r3, #4
 8007be4:	9305      	str	r3, [sp, #20]
 8007be6:	002b      	movs	r3, r5
 8007be8:	9904      	ldr	r1, [sp, #16]
 8007bea:	3315      	adds	r3, #21
 8007bec:	9200      	str	r2, [sp, #0]
 8007bee:	4299      	cmp	r1, r3
 8007bf0:	d305      	bcc.n	8007bfe <__multiply+0x8a>
 8007bf2:	1b4b      	subs	r3, r1, r5
 8007bf4:	3b15      	subs	r3, #21
 8007bf6:	089b      	lsrs	r3, r3, #2
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	9305      	str	r3, [sp, #20]
 8007bfe:	9b07      	ldr	r3, [sp, #28]
 8007c00:	9a00      	ldr	r2, [sp, #0]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d311      	bcc.n	8007c2a <__multiply+0xb6>
 8007c06:	9b02      	ldr	r3, [sp, #8]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	dd06      	ble.n	8007c1a <__multiply+0xa6>
 8007c0c:	9b03      	ldr	r3, [sp, #12]
 8007c0e:	3b04      	subs	r3, #4
 8007c10:	9303      	str	r3, [sp, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	9300      	str	r3, [sp, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d053      	beq.n	8007cc2 <__multiply+0x14e>
 8007c1a:	9b01      	ldr	r3, [sp, #4]
 8007c1c:	9a02      	ldr	r2, [sp, #8]
 8007c1e:	0018      	movs	r0, r3
 8007c20:	611a      	str	r2, [r3, #16]
 8007c22:	b009      	add	sp, #36	; 0x24
 8007c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c26:	c304      	stmia	r3!, {r2}
 8007c28:	e7cd      	b.n	8007bc6 <__multiply+0x52>
 8007c2a:	9b00      	ldr	r3, [sp, #0]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	b298      	uxth	r0, r3
 8007c30:	2800      	cmp	r0, #0
 8007c32:	d01b      	beq.n	8007c6c <__multiply+0xf8>
 8007c34:	4667      	mov	r7, ip
 8007c36:	2400      	movs	r4, #0
 8007c38:	9e06      	ldr	r6, [sp, #24]
 8007c3a:	ce02      	ldmia	r6!, {r1}
 8007c3c:	683a      	ldr	r2, [r7, #0]
 8007c3e:	b28b      	uxth	r3, r1
 8007c40:	4343      	muls	r3, r0
 8007c42:	b292      	uxth	r2, r2
 8007c44:	189b      	adds	r3, r3, r2
 8007c46:	191b      	adds	r3, r3, r4
 8007c48:	0c0c      	lsrs	r4, r1, #16
 8007c4a:	4344      	muls	r4, r0
 8007c4c:	683a      	ldr	r2, [r7, #0]
 8007c4e:	0c11      	lsrs	r1, r2, #16
 8007c50:	1861      	adds	r1, r4, r1
 8007c52:	0c1c      	lsrs	r4, r3, #16
 8007c54:	1909      	adds	r1, r1, r4
 8007c56:	0c0c      	lsrs	r4, r1, #16
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	0409      	lsls	r1, r1, #16
 8007c5c:	430b      	orrs	r3, r1
 8007c5e:	c708      	stmia	r7!, {r3}
 8007c60:	9b04      	ldr	r3, [sp, #16]
 8007c62:	42b3      	cmp	r3, r6
 8007c64:	d8e9      	bhi.n	8007c3a <__multiply+0xc6>
 8007c66:	4663      	mov	r3, ip
 8007c68:	9a05      	ldr	r2, [sp, #20]
 8007c6a:	509c      	str	r4, [r3, r2]
 8007c6c:	9b00      	ldr	r3, [sp, #0]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	0c1e      	lsrs	r6, r3, #16
 8007c72:	d020      	beq.n	8007cb6 <__multiply+0x142>
 8007c74:	4663      	mov	r3, ip
 8007c76:	002c      	movs	r4, r5
 8007c78:	4660      	mov	r0, ip
 8007c7a:	2700      	movs	r7, #0
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	3414      	adds	r4, #20
 8007c80:	6822      	ldr	r2, [r4, #0]
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	b291      	uxth	r1, r2
 8007c86:	4371      	muls	r1, r6
 8007c88:	6802      	ldr	r2, [r0, #0]
 8007c8a:	0c12      	lsrs	r2, r2, #16
 8007c8c:	1889      	adds	r1, r1, r2
 8007c8e:	19cf      	adds	r7, r1, r7
 8007c90:	0439      	lsls	r1, r7, #16
 8007c92:	430b      	orrs	r3, r1
 8007c94:	6003      	str	r3, [r0, #0]
 8007c96:	cc02      	ldmia	r4!, {r1}
 8007c98:	6843      	ldr	r3, [r0, #4]
 8007c9a:	0c09      	lsrs	r1, r1, #16
 8007c9c:	4371      	muls	r1, r6
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	0c3f      	lsrs	r7, r7, #16
 8007ca2:	18cb      	adds	r3, r1, r3
 8007ca4:	9a04      	ldr	r2, [sp, #16]
 8007ca6:	19db      	adds	r3, r3, r7
 8007ca8:	0c1f      	lsrs	r7, r3, #16
 8007caa:	3004      	adds	r0, #4
 8007cac:	42a2      	cmp	r2, r4
 8007cae:	d8e7      	bhi.n	8007c80 <__multiply+0x10c>
 8007cb0:	4662      	mov	r2, ip
 8007cb2:	9905      	ldr	r1, [sp, #20]
 8007cb4:	5053      	str	r3, [r2, r1]
 8007cb6:	9b00      	ldr	r3, [sp, #0]
 8007cb8:	3304      	adds	r3, #4
 8007cba:	9300      	str	r3, [sp, #0]
 8007cbc:	2304      	movs	r3, #4
 8007cbe:	449c      	add	ip, r3
 8007cc0:	e79d      	b.n	8007bfe <__multiply+0x8a>
 8007cc2:	9b02      	ldr	r3, [sp, #8]
 8007cc4:	3b01      	subs	r3, #1
 8007cc6:	9302      	str	r3, [sp, #8]
 8007cc8:	e79d      	b.n	8007c06 <__multiply+0x92>
 8007cca:	46c0      	nop			; (mov r8, r8)
 8007ccc:	0800948b 	.word	0x0800948b
 8007cd0:	0800949c 	.word	0x0800949c

08007cd4 <__pow5mult>:
 8007cd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cd6:	2303      	movs	r3, #3
 8007cd8:	0015      	movs	r5, r2
 8007cda:	0007      	movs	r7, r0
 8007cdc:	000e      	movs	r6, r1
 8007cde:	401a      	ands	r2, r3
 8007ce0:	421d      	tst	r5, r3
 8007ce2:	d008      	beq.n	8007cf6 <__pow5mult+0x22>
 8007ce4:	4925      	ldr	r1, [pc, #148]	; (8007d7c <__pow5mult+0xa8>)
 8007ce6:	3a01      	subs	r2, #1
 8007ce8:	0092      	lsls	r2, r2, #2
 8007cea:	5852      	ldr	r2, [r2, r1]
 8007cec:	2300      	movs	r3, #0
 8007cee:	0031      	movs	r1, r6
 8007cf0:	f7ff fe9e 	bl	8007a30 <__multadd>
 8007cf4:	0006      	movs	r6, r0
 8007cf6:	10ad      	asrs	r5, r5, #2
 8007cf8:	d03d      	beq.n	8007d76 <__pow5mult+0xa2>
 8007cfa:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8007cfc:	2c00      	cmp	r4, #0
 8007cfe:	d10f      	bne.n	8007d20 <__pow5mult+0x4c>
 8007d00:	2010      	movs	r0, #16
 8007d02:	f7ff fe0f 	bl	8007924 <malloc>
 8007d06:	1e02      	subs	r2, r0, #0
 8007d08:	6278      	str	r0, [r7, #36]	; 0x24
 8007d0a:	d105      	bne.n	8007d18 <__pow5mult+0x44>
 8007d0c:	21d7      	movs	r1, #215	; 0xd7
 8007d0e:	4b1c      	ldr	r3, [pc, #112]	; (8007d80 <__pow5mult+0xac>)
 8007d10:	481c      	ldr	r0, [pc, #112]	; (8007d84 <__pow5mult+0xb0>)
 8007d12:	0049      	lsls	r1, r1, #1
 8007d14:	f000 fc42 	bl	800859c <__assert_func>
 8007d18:	6044      	str	r4, [r0, #4]
 8007d1a:	6084      	str	r4, [r0, #8]
 8007d1c:	6004      	str	r4, [r0, #0]
 8007d1e:	60c4      	str	r4, [r0, #12]
 8007d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d22:	689c      	ldr	r4, [r3, #8]
 8007d24:	9301      	str	r3, [sp, #4]
 8007d26:	2c00      	cmp	r4, #0
 8007d28:	d108      	bne.n	8007d3c <__pow5mult+0x68>
 8007d2a:	0038      	movs	r0, r7
 8007d2c:	4916      	ldr	r1, [pc, #88]	; (8007d88 <__pow5mult+0xb4>)
 8007d2e:	f7ff ff0b 	bl	8007b48 <__i2b>
 8007d32:	9b01      	ldr	r3, [sp, #4]
 8007d34:	0004      	movs	r4, r0
 8007d36:	6098      	str	r0, [r3, #8]
 8007d38:	2300      	movs	r3, #0
 8007d3a:	6003      	str	r3, [r0, #0]
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	421d      	tst	r5, r3
 8007d40:	d00a      	beq.n	8007d58 <__pow5mult+0x84>
 8007d42:	0031      	movs	r1, r6
 8007d44:	0022      	movs	r2, r4
 8007d46:	0038      	movs	r0, r7
 8007d48:	f7ff ff14 	bl	8007b74 <__multiply>
 8007d4c:	0031      	movs	r1, r6
 8007d4e:	9001      	str	r0, [sp, #4]
 8007d50:	0038      	movs	r0, r7
 8007d52:	f7ff fe49 	bl	80079e8 <_Bfree>
 8007d56:	9e01      	ldr	r6, [sp, #4]
 8007d58:	106d      	asrs	r5, r5, #1
 8007d5a:	d00c      	beq.n	8007d76 <__pow5mult+0xa2>
 8007d5c:	6820      	ldr	r0, [r4, #0]
 8007d5e:	2800      	cmp	r0, #0
 8007d60:	d107      	bne.n	8007d72 <__pow5mult+0x9e>
 8007d62:	0022      	movs	r2, r4
 8007d64:	0021      	movs	r1, r4
 8007d66:	0038      	movs	r0, r7
 8007d68:	f7ff ff04 	bl	8007b74 <__multiply>
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	6020      	str	r0, [r4, #0]
 8007d70:	6003      	str	r3, [r0, #0]
 8007d72:	0004      	movs	r4, r0
 8007d74:	e7e2      	b.n	8007d3c <__pow5mult+0x68>
 8007d76:	0030      	movs	r0, r6
 8007d78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007d7a:	46c0      	nop			; (mov r8, r8)
 8007d7c:	080095e8 	.word	0x080095e8
 8007d80:	08009419 	.word	0x08009419
 8007d84:	0800949c 	.word	0x0800949c
 8007d88:	00000271 	.word	0x00000271

08007d8c <__lshift>:
 8007d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d8e:	000c      	movs	r4, r1
 8007d90:	0017      	movs	r7, r2
 8007d92:	6923      	ldr	r3, [r4, #16]
 8007d94:	1155      	asrs	r5, r2, #5
 8007d96:	b087      	sub	sp, #28
 8007d98:	18eb      	adds	r3, r5, r3
 8007d9a:	9302      	str	r3, [sp, #8]
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	9301      	str	r3, [sp, #4]
 8007da0:	6849      	ldr	r1, [r1, #4]
 8007da2:	68a3      	ldr	r3, [r4, #8]
 8007da4:	9004      	str	r0, [sp, #16]
 8007da6:	9a01      	ldr	r2, [sp, #4]
 8007da8:	4293      	cmp	r3, r2
 8007daa:	db10      	blt.n	8007dce <__lshift+0x42>
 8007dac:	9804      	ldr	r0, [sp, #16]
 8007dae:	f7ff fdd7 	bl	8007960 <_Balloc>
 8007db2:	2300      	movs	r3, #0
 8007db4:	0002      	movs	r2, r0
 8007db6:	0006      	movs	r6, r0
 8007db8:	0019      	movs	r1, r3
 8007dba:	3214      	adds	r2, #20
 8007dbc:	4298      	cmp	r0, r3
 8007dbe:	d10c      	bne.n	8007dda <__lshift+0x4e>
 8007dc0:	21da      	movs	r1, #218	; 0xda
 8007dc2:	0002      	movs	r2, r0
 8007dc4:	4b26      	ldr	r3, [pc, #152]	; (8007e60 <__lshift+0xd4>)
 8007dc6:	4827      	ldr	r0, [pc, #156]	; (8007e64 <__lshift+0xd8>)
 8007dc8:	31ff      	adds	r1, #255	; 0xff
 8007dca:	f000 fbe7 	bl	800859c <__assert_func>
 8007dce:	3101      	adds	r1, #1
 8007dd0:	005b      	lsls	r3, r3, #1
 8007dd2:	e7e8      	b.n	8007da6 <__lshift+0x1a>
 8007dd4:	0098      	lsls	r0, r3, #2
 8007dd6:	5011      	str	r1, [r2, r0]
 8007dd8:	3301      	adds	r3, #1
 8007dda:	42ab      	cmp	r3, r5
 8007ddc:	dbfa      	blt.n	8007dd4 <__lshift+0x48>
 8007dde:	43eb      	mvns	r3, r5
 8007de0:	17db      	asrs	r3, r3, #31
 8007de2:	401d      	ands	r5, r3
 8007de4:	211f      	movs	r1, #31
 8007de6:	0023      	movs	r3, r4
 8007de8:	0038      	movs	r0, r7
 8007dea:	00ad      	lsls	r5, r5, #2
 8007dec:	1955      	adds	r5, r2, r5
 8007dee:	6922      	ldr	r2, [r4, #16]
 8007df0:	3314      	adds	r3, #20
 8007df2:	0092      	lsls	r2, r2, #2
 8007df4:	4008      	ands	r0, r1
 8007df6:	4684      	mov	ip, r0
 8007df8:	189a      	adds	r2, r3, r2
 8007dfa:	420f      	tst	r7, r1
 8007dfc:	d02a      	beq.n	8007e54 <__lshift+0xc8>
 8007dfe:	3101      	adds	r1, #1
 8007e00:	1a09      	subs	r1, r1, r0
 8007e02:	9105      	str	r1, [sp, #20]
 8007e04:	2100      	movs	r1, #0
 8007e06:	9503      	str	r5, [sp, #12]
 8007e08:	4667      	mov	r7, ip
 8007e0a:	6818      	ldr	r0, [r3, #0]
 8007e0c:	40b8      	lsls	r0, r7
 8007e0e:	4301      	orrs	r1, r0
 8007e10:	9803      	ldr	r0, [sp, #12]
 8007e12:	c002      	stmia	r0!, {r1}
 8007e14:	cb02      	ldmia	r3!, {r1}
 8007e16:	9003      	str	r0, [sp, #12]
 8007e18:	9805      	ldr	r0, [sp, #20]
 8007e1a:	40c1      	lsrs	r1, r0
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d8f3      	bhi.n	8007e08 <__lshift+0x7c>
 8007e20:	0020      	movs	r0, r4
 8007e22:	3015      	adds	r0, #21
 8007e24:	2304      	movs	r3, #4
 8007e26:	4282      	cmp	r2, r0
 8007e28:	d304      	bcc.n	8007e34 <__lshift+0xa8>
 8007e2a:	1b13      	subs	r3, r2, r4
 8007e2c:	3b15      	subs	r3, #21
 8007e2e:	089b      	lsrs	r3, r3, #2
 8007e30:	3301      	adds	r3, #1
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	50e9      	str	r1, [r5, r3]
 8007e36:	2900      	cmp	r1, #0
 8007e38:	d002      	beq.n	8007e40 <__lshift+0xb4>
 8007e3a:	9b02      	ldr	r3, [sp, #8]
 8007e3c:	3302      	adds	r3, #2
 8007e3e:	9301      	str	r3, [sp, #4]
 8007e40:	9b01      	ldr	r3, [sp, #4]
 8007e42:	9804      	ldr	r0, [sp, #16]
 8007e44:	3b01      	subs	r3, #1
 8007e46:	0021      	movs	r1, r4
 8007e48:	6133      	str	r3, [r6, #16]
 8007e4a:	f7ff fdcd 	bl	80079e8 <_Bfree>
 8007e4e:	0030      	movs	r0, r6
 8007e50:	b007      	add	sp, #28
 8007e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e54:	cb02      	ldmia	r3!, {r1}
 8007e56:	c502      	stmia	r5!, {r1}
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d8fb      	bhi.n	8007e54 <__lshift+0xc8>
 8007e5c:	e7f0      	b.n	8007e40 <__lshift+0xb4>
 8007e5e:	46c0      	nop			; (mov r8, r8)
 8007e60:	0800948b 	.word	0x0800948b
 8007e64:	0800949c 	.word	0x0800949c

08007e68 <__mcmp>:
 8007e68:	6902      	ldr	r2, [r0, #16]
 8007e6a:	690b      	ldr	r3, [r1, #16]
 8007e6c:	b530      	push	{r4, r5, lr}
 8007e6e:	0004      	movs	r4, r0
 8007e70:	1ad0      	subs	r0, r2, r3
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d10d      	bne.n	8007e92 <__mcmp+0x2a>
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	3414      	adds	r4, #20
 8007e7a:	3114      	adds	r1, #20
 8007e7c:	18e2      	adds	r2, r4, r3
 8007e7e:	18c9      	adds	r1, r1, r3
 8007e80:	3a04      	subs	r2, #4
 8007e82:	3904      	subs	r1, #4
 8007e84:	6815      	ldr	r5, [r2, #0]
 8007e86:	680b      	ldr	r3, [r1, #0]
 8007e88:	429d      	cmp	r5, r3
 8007e8a:	d003      	beq.n	8007e94 <__mcmp+0x2c>
 8007e8c:	2001      	movs	r0, #1
 8007e8e:	429d      	cmp	r5, r3
 8007e90:	d303      	bcc.n	8007e9a <__mcmp+0x32>
 8007e92:	bd30      	pop	{r4, r5, pc}
 8007e94:	4294      	cmp	r4, r2
 8007e96:	d3f3      	bcc.n	8007e80 <__mcmp+0x18>
 8007e98:	e7fb      	b.n	8007e92 <__mcmp+0x2a>
 8007e9a:	4240      	negs	r0, r0
 8007e9c:	e7f9      	b.n	8007e92 <__mcmp+0x2a>
	...

08007ea0 <__mdiff>:
 8007ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ea2:	000e      	movs	r6, r1
 8007ea4:	0007      	movs	r7, r0
 8007ea6:	0011      	movs	r1, r2
 8007ea8:	0030      	movs	r0, r6
 8007eaa:	b087      	sub	sp, #28
 8007eac:	0014      	movs	r4, r2
 8007eae:	f7ff ffdb 	bl	8007e68 <__mcmp>
 8007eb2:	1e05      	subs	r5, r0, #0
 8007eb4:	d110      	bne.n	8007ed8 <__mdiff+0x38>
 8007eb6:	0001      	movs	r1, r0
 8007eb8:	0038      	movs	r0, r7
 8007eba:	f7ff fd51 	bl	8007960 <_Balloc>
 8007ebe:	1e02      	subs	r2, r0, #0
 8007ec0:	d104      	bne.n	8007ecc <__mdiff+0x2c>
 8007ec2:	4b40      	ldr	r3, [pc, #256]	; (8007fc4 <__mdiff+0x124>)
 8007ec4:	4940      	ldr	r1, [pc, #256]	; (8007fc8 <__mdiff+0x128>)
 8007ec6:	4841      	ldr	r0, [pc, #260]	; (8007fcc <__mdiff+0x12c>)
 8007ec8:	f000 fb68 	bl	800859c <__assert_func>
 8007ecc:	2301      	movs	r3, #1
 8007ece:	6145      	str	r5, [r0, #20]
 8007ed0:	6103      	str	r3, [r0, #16]
 8007ed2:	0010      	movs	r0, r2
 8007ed4:	b007      	add	sp, #28
 8007ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ed8:	2301      	movs	r3, #1
 8007eda:	9301      	str	r3, [sp, #4]
 8007edc:	2800      	cmp	r0, #0
 8007ede:	db04      	blt.n	8007eea <__mdiff+0x4a>
 8007ee0:	0023      	movs	r3, r4
 8007ee2:	0034      	movs	r4, r6
 8007ee4:	001e      	movs	r6, r3
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	9301      	str	r3, [sp, #4]
 8007eea:	0038      	movs	r0, r7
 8007eec:	6861      	ldr	r1, [r4, #4]
 8007eee:	f7ff fd37 	bl	8007960 <_Balloc>
 8007ef2:	1e02      	subs	r2, r0, #0
 8007ef4:	d103      	bne.n	8007efe <__mdiff+0x5e>
 8007ef6:	2190      	movs	r1, #144	; 0x90
 8007ef8:	4b32      	ldr	r3, [pc, #200]	; (8007fc4 <__mdiff+0x124>)
 8007efa:	0089      	lsls	r1, r1, #2
 8007efc:	e7e3      	b.n	8007ec6 <__mdiff+0x26>
 8007efe:	9b01      	ldr	r3, [sp, #4]
 8007f00:	2700      	movs	r7, #0
 8007f02:	60c3      	str	r3, [r0, #12]
 8007f04:	6920      	ldr	r0, [r4, #16]
 8007f06:	3414      	adds	r4, #20
 8007f08:	9401      	str	r4, [sp, #4]
 8007f0a:	9b01      	ldr	r3, [sp, #4]
 8007f0c:	0084      	lsls	r4, r0, #2
 8007f0e:	191b      	adds	r3, r3, r4
 8007f10:	0034      	movs	r4, r6
 8007f12:	9302      	str	r3, [sp, #8]
 8007f14:	6933      	ldr	r3, [r6, #16]
 8007f16:	3414      	adds	r4, #20
 8007f18:	0099      	lsls	r1, r3, #2
 8007f1a:	1863      	adds	r3, r4, r1
 8007f1c:	9303      	str	r3, [sp, #12]
 8007f1e:	0013      	movs	r3, r2
 8007f20:	3314      	adds	r3, #20
 8007f22:	469c      	mov	ip, r3
 8007f24:	9305      	str	r3, [sp, #20]
 8007f26:	9b01      	ldr	r3, [sp, #4]
 8007f28:	9304      	str	r3, [sp, #16]
 8007f2a:	9b04      	ldr	r3, [sp, #16]
 8007f2c:	cc02      	ldmia	r4!, {r1}
 8007f2e:	cb20      	ldmia	r3!, {r5}
 8007f30:	9304      	str	r3, [sp, #16]
 8007f32:	b2ab      	uxth	r3, r5
 8007f34:	19df      	adds	r7, r3, r7
 8007f36:	b28b      	uxth	r3, r1
 8007f38:	1afb      	subs	r3, r7, r3
 8007f3a:	0c09      	lsrs	r1, r1, #16
 8007f3c:	0c2d      	lsrs	r5, r5, #16
 8007f3e:	1a6d      	subs	r5, r5, r1
 8007f40:	1419      	asrs	r1, r3, #16
 8007f42:	186d      	adds	r5, r5, r1
 8007f44:	4661      	mov	r1, ip
 8007f46:	142f      	asrs	r7, r5, #16
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	042d      	lsls	r5, r5, #16
 8007f4c:	432b      	orrs	r3, r5
 8007f4e:	c108      	stmia	r1!, {r3}
 8007f50:	9b03      	ldr	r3, [sp, #12]
 8007f52:	468c      	mov	ip, r1
 8007f54:	42a3      	cmp	r3, r4
 8007f56:	d8e8      	bhi.n	8007f2a <__mdiff+0x8a>
 8007f58:	0031      	movs	r1, r6
 8007f5a:	9c03      	ldr	r4, [sp, #12]
 8007f5c:	3115      	adds	r1, #21
 8007f5e:	2304      	movs	r3, #4
 8007f60:	428c      	cmp	r4, r1
 8007f62:	d304      	bcc.n	8007f6e <__mdiff+0xce>
 8007f64:	1ba3      	subs	r3, r4, r6
 8007f66:	3b15      	subs	r3, #21
 8007f68:	089b      	lsrs	r3, r3, #2
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	9901      	ldr	r1, [sp, #4]
 8007f70:	18cc      	adds	r4, r1, r3
 8007f72:	9905      	ldr	r1, [sp, #20]
 8007f74:	0026      	movs	r6, r4
 8007f76:	18cb      	adds	r3, r1, r3
 8007f78:	469c      	mov	ip, r3
 8007f7a:	9902      	ldr	r1, [sp, #8]
 8007f7c:	428e      	cmp	r6, r1
 8007f7e:	d310      	bcc.n	8007fa2 <__mdiff+0x102>
 8007f80:	9e02      	ldr	r6, [sp, #8]
 8007f82:	1ee1      	subs	r1, r4, #3
 8007f84:	2500      	movs	r5, #0
 8007f86:	428e      	cmp	r6, r1
 8007f88:	d304      	bcc.n	8007f94 <__mdiff+0xf4>
 8007f8a:	0031      	movs	r1, r6
 8007f8c:	3103      	adds	r1, #3
 8007f8e:	1b0c      	subs	r4, r1, r4
 8007f90:	08a4      	lsrs	r4, r4, #2
 8007f92:	00a5      	lsls	r5, r4, #2
 8007f94:	195b      	adds	r3, r3, r5
 8007f96:	3b04      	subs	r3, #4
 8007f98:	6819      	ldr	r1, [r3, #0]
 8007f9a:	2900      	cmp	r1, #0
 8007f9c:	d00f      	beq.n	8007fbe <__mdiff+0x11e>
 8007f9e:	6110      	str	r0, [r2, #16]
 8007fa0:	e797      	b.n	8007ed2 <__mdiff+0x32>
 8007fa2:	ce02      	ldmia	r6!, {r1}
 8007fa4:	b28d      	uxth	r5, r1
 8007fa6:	19ed      	adds	r5, r5, r7
 8007fa8:	0c0f      	lsrs	r7, r1, #16
 8007faa:	1429      	asrs	r1, r5, #16
 8007fac:	1879      	adds	r1, r7, r1
 8007fae:	140f      	asrs	r7, r1, #16
 8007fb0:	b2ad      	uxth	r5, r5
 8007fb2:	0409      	lsls	r1, r1, #16
 8007fb4:	430d      	orrs	r5, r1
 8007fb6:	4661      	mov	r1, ip
 8007fb8:	c120      	stmia	r1!, {r5}
 8007fba:	468c      	mov	ip, r1
 8007fbc:	e7dd      	b.n	8007f7a <__mdiff+0xda>
 8007fbe:	3801      	subs	r0, #1
 8007fc0:	e7e9      	b.n	8007f96 <__mdiff+0xf6>
 8007fc2:	46c0      	nop			; (mov r8, r8)
 8007fc4:	0800948b 	.word	0x0800948b
 8007fc8:	00000232 	.word	0x00000232
 8007fcc:	0800949c 	.word	0x0800949c

08007fd0 <__d2b>:
 8007fd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007fd2:	2101      	movs	r1, #1
 8007fd4:	0014      	movs	r4, r2
 8007fd6:	001e      	movs	r6, r3
 8007fd8:	9f08      	ldr	r7, [sp, #32]
 8007fda:	f7ff fcc1 	bl	8007960 <_Balloc>
 8007fde:	1e05      	subs	r5, r0, #0
 8007fe0:	d105      	bne.n	8007fee <__d2b+0x1e>
 8007fe2:	0002      	movs	r2, r0
 8007fe4:	4b26      	ldr	r3, [pc, #152]	; (8008080 <__d2b+0xb0>)
 8007fe6:	4927      	ldr	r1, [pc, #156]	; (8008084 <__d2b+0xb4>)
 8007fe8:	4827      	ldr	r0, [pc, #156]	; (8008088 <__d2b+0xb8>)
 8007fea:	f000 fad7 	bl	800859c <__assert_func>
 8007fee:	0333      	lsls	r3, r6, #12
 8007ff0:	0076      	lsls	r6, r6, #1
 8007ff2:	0b1b      	lsrs	r3, r3, #12
 8007ff4:	0d76      	lsrs	r6, r6, #21
 8007ff6:	d124      	bne.n	8008042 <__d2b+0x72>
 8007ff8:	9301      	str	r3, [sp, #4]
 8007ffa:	2c00      	cmp	r4, #0
 8007ffc:	d027      	beq.n	800804e <__d2b+0x7e>
 8007ffe:	4668      	mov	r0, sp
 8008000:	9400      	str	r4, [sp, #0]
 8008002:	f7ff fd73 	bl	8007aec <__lo0bits>
 8008006:	9c00      	ldr	r4, [sp, #0]
 8008008:	2800      	cmp	r0, #0
 800800a:	d01e      	beq.n	800804a <__d2b+0x7a>
 800800c:	9b01      	ldr	r3, [sp, #4]
 800800e:	2120      	movs	r1, #32
 8008010:	001a      	movs	r2, r3
 8008012:	1a09      	subs	r1, r1, r0
 8008014:	408a      	lsls	r2, r1
 8008016:	40c3      	lsrs	r3, r0
 8008018:	4322      	orrs	r2, r4
 800801a:	616a      	str	r2, [r5, #20]
 800801c:	9301      	str	r3, [sp, #4]
 800801e:	9c01      	ldr	r4, [sp, #4]
 8008020:	61ac      	str	r4, [r5, #24]
 8008022:	1e63      	subs	r3, r4, #1
 8008024:	419c      	sbcs	r4, r3
 8008026:	3401      	adds	r4, #1
 8008028:	612c      	str	r4, [r5, #16]
 800802a:	2e00      	cmp	r6, #0
 800802c:	d018      	beq.n	8008060 <__d2b+0x90>
 800802e:	4b17      	ldr	r3, [pc, #92]	; (800808c <__d2b+0xbc>)
 8008030:	18f6      	adds	r6, r6, r3
 8008032:	2335      	movs	r3, #53	; 0x35
 8008034:	1836      	adds	r6, r6, r0
 8008036:	1a18      	subs	r0, r3, r0
 8008038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800803a:	603e      	str	r6, [r7, #0]
 800803c:	6018      	str	r0, [r3, #0]
 800803e:	0028      	movs	r0, r5
 8008040:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008042:	2280      	movs	r2, #128	; 0x80
 8008044:	0352      	lsls	r2, r2, #13
 8008046:	4313      	orrs	r3, r2
 8008048:	e7d6      	b.n	8007ff8 <__d2b+0x28>
 800804a:	616c      	str	r4, [r5, #20]
 800804c:	e7e7      	b.n	800801e <__d2b+0x4e>
 800804e:	a801      	add	r0, sp, #4
 8008050:	f7ff fd4c 	bl	8007aec <__lo0bits>
 8008054:	2401      	movs	r4, #1
 8008056:	9b01      	ldr	r3, [sp, #4]
 8008058:	612c      	str	r4, [r5, #16]
 800805a:	616b      	str	r3, [r5, #20]
 800805c:	3020      	adds	r0, #32
 800805e:	e7e4      	b.n	800802a <__d2b+0x5a>
 8008060:	4b0b      	ldr	r3, [pc, #44]	; (8008090 <__d2b+0xc0>)
 8008062:	18c0      	adds	r0, r0, r3
 8008064:	4b0b      	ldr	r3, [pc, #44]	; (8008094 <__d2b+0xc4>)
 8008066:	6038      	str	r0, [r7, #0]
 8008068:	18e3      	adds	r3, r4, r3
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	18eb      	adds	r3, r5, r3
 800806e:	6958      	ldr	r0, [r3, #20]
 8008070:	f7ff fd22 	bl	8007ab8 <__hi0bits>
 8008074:	0164      	lsls	r4, r4, #5
 8008076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008078:	1a24      	subs	r4, r4, r0
 800807a:	601c      	str	r4, [r3, #0]
 800807c:	e7df      	b.n	800803e <__d2b+0x6e>
 800807e:	46c0      	nop			; (mov r8, r8)
 8008080:	0800948b 	.word	0x0800948b
 8008084:	0000030a 	.word	0x0000030a
 8008088:	0800949c 	.word	0x0800949c
 800808c:	fffffbcd 	.word	0xfffffbcd
 8008090:	fffffbce 	.word	0xfffffbce
 8008094:	3fffffff 	.word	0x3fffffff

08008098 <_calloc_r>:
 8008098:	b570      	push	{r4, r5, r6, lr}
 800809a:	0c13      	lsrs	r3, r2, #16
 800809c:	0c0d      	lsrs	r5, r1, #16
 800809e:	d11e      	bne.n	80080de <_calloc_r+0x46>
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d10c      	bne.n	80080be <_calloc_r+0x26>
 80080a4:	b289      	uxth	r1, r1
 80080a6:	b294      	uxth	r4, r2
 80080a8:	434c      	muls	r4, r1
 80080aa:	0021      	movs	r1, r4
 80080ac:	f000 f88c 	bl	80081c8 <_malloc_r>
 80080b0:	1e05      	subs	r5, r0, #0
 80080b2:	d01b      	beq.n	80080ec <_calloc_r+0x54>
 80080b4:	0022      	movs	r2, r4
 80080b6:	2100      	movs	r1, #0
 80080b8:	f7fe f8f4 	bl	80062a4 <memset>
 80080bc:	e016      	b.n	80080ec <_calloc_r+0x54>
 80080be:	1c1d      	adds	r5, r3, #0
 80080c0:	1c0b      	adds	r3, r1, #0
 80080c2:	b292      	uxth	r2, r2
 80080c4:	b289      	uxth	r1, r1
 80080c6:	b29c      	uxth	r4, r3
 80080c8:	4351      	muls	r1, r2
 80080ca:	b2ab      	uxth	r3, r5
 80080cc:	4363      	muls	r3, r4
 80080ce:	0c0c      	lsrs	r4, r1, #16
 80080d0:	191c      	adds	r4, r3, r4
 80080d2:	0c22      	lsrs	r2, r4, #16
 80080d4:	d107      	bne.n	80080e6 <_calloc_r+0x4e>
 80080d6:	0424      	lsls	r4, r4, #16
 80080d8:	b289      	uxth	r1, r1
 80080da:	430c      	orrs	r4, r1
 80080dc:	e7e5      	b.n	80080aa <_calloc_r+0x12>
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d101      	bne.n	80080e6 <_calloc_r+0x4e>
 80080e2:	1c13      	adds	r3, r2, #0
 80080e4:	e7ed      	b.n	80080c2 <_calloc_r+0x2a>
 80080e6:	230c      	movs	r3, #12
 80080e8:	2500      	movs	r5, #0
 80080ea:	6003      	str	r3, [r0, #0]
 80080ec:	0028      	movs	r0, r5
 80080ee:	bd70      	pop	{r4, r5, r6, pc}

080080f0 <_free_r>:
 80080f0:	b570      	push	{r4, r5, r6, lr}
 80080f2:	0005      	movs	r5, r0
 80080f4:	2900      	cmp	r1, #0
 80080f6:	d010      	beq.n	800811a <_free_r+0x2a>
 80080f8:	1f0c      	subs	r4, r1, #4
 80080fa:	6823      	ldr	r3, [r4, #0]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	da00      	bge.n	8008102 <_free_r+0x12>
 8008100:	18e4      	adds	r4, r4, r3
 8008102:	0028      	movs	r0, r5
 8008104:	f000 fa9e 	bl	8008644 <__malloc_lock>
 8008108:	4a1d      	ldr	r2, [pc, #116]	; (8008180 <_free_r+0x90>)
 800810a:	6813      	ldr	r3, [r2, #0]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d105      	bne.n	800811c <_free_r+0x2c>
 8008110:	6063      	str	r3, [r4, #4]
 8008112:	6014      	str	r4, [r2, #0]
 8008114:	0028      	movs	r0, r5
 8008116:	f000 fa9d 	bl	8008654 <__malloc_unlock>
 800811a:	bd70      	pop	{r4, r5, r6, pc}
 800811c:	42a3      	cmp	r3, r4
 800811e:	d908      	bls.n	8008132 <_free_r+0x42>
 8008120:	6821      	ldr	r1, [r4, #0]
 8008122:	1860      	adds	r0, r4, r1
 8008124:	4283      	cmp	r3, r0
 8008126:	d1f3      	bne.n	8008110 <_free_r+0x20>
 8008128:	6818      	ldr	r0, [r3, #0]
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	1841      	adds	r1, r0, r1
 800812e:	6021      	str	r1, [r4, #0]
 8008130:	e7ee      	b.n	8008110 <_free_r+0x20>
 8008132:	001a      	movs	r2, r3
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d001      	beq.n	800813e <_free_r+0x4e>
 800813a:	42a3      	cmp	r3, r4
 800813c:	d9f9      	bls.n	8008132 <_free_r+0x42>
 800813e:	6811      	ldr	r1, [r2, #0]
 8008140:	1850      	adds	r0, r2, r1
 8008142:	42a0      	cmp	r0, r4
 8008144:	d10b      	bne.n	800815e <_free_r+0x6e>
 8008146:	6820      	ldr	r0, [r4, #0]
 8008148:	1809      	adds	r1, r1, r0
 800814a:	1850      	adds	r0, r2, r1
 800814c:	6011      	str	r1, [r2, #0]
 800814e:	4283      	cmp	r3, r0
 8008150:	d1e0      	bne.n	8008114 <_free_r+0x24>
 8008152:	6818      	ldr	r0, [r3, #0]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	1841      	adds	r1, r0, r1
 8008158:	6011      	str	r1, [r2, #0]
 800815a:	6053      	str	r3, [r2, #4]
 800815c:	e7da      	b.n	8008114 <_free_r+0x24>
 800815e:	42a0      	cmp	r0, r4
 8008160:	d902      	bls.n	8008168 <_free_r+0x78>
 8008162:	230c      	movs	r3, #12
 8008164:	602b      	str	r3, [r5, #0]
 8008166:	e7d5      	b.n	8008114 <_free_r+0x24>
 8008168:	6821      	ldr	r1, [r4, #0]
 800816a:	1860      	adds	r0, r4, r1
 800816c:	4283      	cmp	r3, r0
 800816e:	d103      	bne.n	8008178 <_free_r+0x88>
 8008170:	6818      	ldr	r0, [r3, #0]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	1841      	adds	r1, r0, r1
 8008176:	6021      	str	r1, [r4, #0]
 8008178:	6063      	str	r3, [r4, #4]
 800817a:	6054      	str	r4, [r2, #4]
 800817c:	e7ca      	b.n	8008114 <_free_r+0x24>
 800817e:	46c0      	nop			; (mov r8, r8)
 8008180:	200006f8 	.word	0x200006f8

08008184 <sbrk_aligned>:
 8008184:	b570      	push	{r4, r5, r6, lr}
 8008186:	4e0f      	ldr	r6, [pc, #60]	; (80081c4 <sbrk_aligned+0x40>)
 8008188:	000d      	movs	r5, r1
 800818a:	6831      	ldr	r1, [r6, #0]
 800818c:	0004      	movs	r4, r0
 800818e:	2900      	cmp	r1, #0
 8008190:	d102      	bne.n	8008198 <sbrk_aligned+0x14>
 8008192:	f000 f9f1 	bl	8008578 <_sbrk_r>
 8008196:	6030      	str	r0, [r6, #0]
 8008198:	0029      	movs	r1, r5
 800819a:	0020      	movs	r0, r4
 800819c:	f000 f9ec 	bl	8008578 <_sbrk_r>
 80081a0:	1c43      	adds	r3, r0, #1
 80081a2:	d00a      	beq.n	80081ba <sbrk_aligned+0x36>
 80081a4:	2303      	movs	r3, #3
 80081a6:	1cc5      	adds	r5, r0, #3
 80081a8:	439d      	bics	r5, r3
 80081aa:	42a8      	cmp	r0, r5
 80081ac:	d007      	beq.n	80081be <sbrk_aligned+0x3a>
 80081ae:	1a29      	subs	r1, r5, r0
 80081b0:	0020      	movs	r0, r4
 80081b2:	f000 f9e1 	bl	8008578 <_sbrk_r>
 80081b6:	1c43      	adds	r3, r0, #1
 80081b8:	d101      	bne.n	80081be <sbrk_aligned+0x3a>
 80081ba:	2501      	movs	r5, #1
 80081bc:	426d      	negs	r5, r5
 80081be:	0028      	movs	r0, r5
 80081c0:	bd70      	pop	{r4, r5, r6, pc}
 80081c2:	46c0      	nop			; (mov r8, r8)
 80081c4:	200006fc 	.word	0x200006fc

080081c8 <_malloc_r>:
 80081c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081ca:	2203      	movs	r2, #3
 80081cc:	1ccb      	adds	r3, r1, #3
 80081ce:	4393      	bics	r3, r2
 80081d0:	3308      	adds	r3, #8
 80081d2:	0006      	movs	r6, r0
 80081d4:	001f      	movs	r7, r3
 80081d6:	2b0c      	cmp	r3, #12
 80081d8:	d232      	bcs.n	8008240 <_malloc_r+0x78>
 80081da:	270c      	movs	r7, #12
 80081dc:	42b9      	cmp	r1, r7
 80081de:	d831      	bhi.n	8008244 <_malloc_r+0x7c>
 80081e0:	0030      	movs	r0, r6
 80081e2:	f000 fa2f 	bl	8008644 <__malloc_lock>
 80081e6:	4d32      	ldr	r5, [pc, #200]	; (80082b0 <_malloc_r+0xe8>)
 80081e8:	682b      	ldr	r3, [r5, #0]
 80081ea:	001c      	movs	r4, r3
 80081ec:	2c00      	cmp	r4, #0
 80081ee:	d12e      	bne.n	800824e <_malloc_r+0x86>
 80081f0:	0039      	movs	r1, r7
 80081f2:	0030      	movs	r0, r6
 80081f4:	f7ff ffc6 	bl	8008184 <sbrk_aligned>
 80081f8:	0004      	movs	r4, r0
 80081fa:	1c43      	adds	r3, r0, #1
 80081fc:	d11e      	bne.n	800823c <_malloc_r+0x74>
 80081fe:	682c      	ldr	r4, [r5, #0]
 8008200:	0025      	movs	r5, r4
 8008202:	2d00      	cmp	r5, #0
 8008204:	d14a      	bne.n	800829c <_malloc_r+0xd4>
 8008206:	6823      	ldr	r3, [r4, #0]
 8008208:	0029      	movs	r1, r5
 800820a:	18e3      	adds	r3, r4, r3
 800820c:	0030      	movs	r0, r6
 800820e:	9301      	str	r3, [sp, #4]
 8008210:	f000 f9b2 	bl	8008578 <_sbrk_r>
 8008214:	9b01      	ldr	r3, [sp, #4]
 8008216:	4283      	cmp	r3, r0
 8008218:	d143      	bne.n	80082a2 <_malloc_r+0xda>
 800821a:	6823      	ldr	r3, [r4, #0]
 800821c:	3703      	adds	r7, #3
 800821e:	1aff      	subs	r7, r7, r3
 8008220:	2303      	movs	r3, #3
 8008222:	439f      	bics	r7, r3
 8008224:	3708      	adds	r7, #8
 8008226:	2f0c      	cmp	r7, #12
 8008228:	d200      	bcs.n	800822c <_malloc_r+0x64>
 800822a:	270c      	movs	r7, #12
 800822c:	0039      	movs	r1, r7
 800822e:	0030      	movs	r0, r6
 8008230:	f7ff ffa8 	bl	8008184 <sbrk_aligned>
 8008234:	1c43      	adds	r3, r0, #1
 8008236:	d034      	beq.n	80082a2 <_malloc_r+0xda>
 8008238:	6823      	ldr	r3, [r4, #0]
 800823a:	19df      	adds	r7, r3, r7
 800823c:	6027      	str	r7, [r4, #0]
 800823e:	e013      	b.n	8008268 <_malloc_r+0xa0>
 8008240:	2b00      	cmp	r3, #0
 8008242:	dacb      	bge.n	80081dc <_malloc_r+0x14>
 8008244:	230c      	movs	r3, #12
 8008246:	2500      	movs	r5, #0
 8008248:	6033      	str	r3, [r6, #0]
 800824a:	0028      	movs	r0, r5
 800824c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800824e:	6822      	ldr	r2, [r4, #0]
 8008250:	1bd1      	subs	r1, r2, r7
 8008252:	d420      	bmi.n	8008296 <_malloc_r+0xce>
 8008254:	290b      	cmp	r1, #11
 8008256:	d917      	bls.n	8008288 <_malloc_r+0xc0>
 8008258:	19e2      	adds	r2, r4, r7
 800825a:	6027      	str	r7, [r4, #0]
 800825c:	42a3      	cmp	r3, r4
 800825e:	d111      	bne.n	8008284 <_malloc_r+0xbc>
 8008260:	602a      	str	r2, [r5, #0]
 8008262:	6863      	ldr	r3, [r4, #4]
 8008264:	6011      	str	r1, [r2, #0]
 8008266:	6053      	str	r3, [r2, #4]
 8008268:	0030      	movs	r0, r6
 800826a:	0025      	movs	r5, r4
 800826c:	f000 f9f2 	bl	8008654 <__malloc_unlock>
 8008270:	2207      	movs	r2, #7
 8008272:	350b      	adds	r5, #11
 8008274:	1d23      	adds	r3, r4, #4
 8008276:	4395      	bics	r5, r2
 8008278:	1aea      	subs	r2, r5, r3
 800827a:	429d      	cmp	r5, r3
 800827c:	d0e5      	beq.n	800824a <_malloc_r+0x82>
 800827e:	1b5b      	subs	r3, r3, r5
 8008280:	50a3      	str	r3, [r4, r2]
 8008282:	e7e2      	b.n	800824a <_malloc_r+0x82>
 8008284:	605a      	str	r2, [r3, #4]
 8008286:	e7ec      	b.n	8008262 <_malloc_r+0x9a>
 8008288:	6862      	ldr	r2, [r4, #4]
 800828a:	42a3      	cmp	r3, r4
 800828c:	d101      	bne.n	8008292 <_malloc_r+0xca>
 800828e:	602a      	str	r2, [r5, #0]
 8008290:	e7ea      	b.n	8008268 <_malloc_r+0xa0>
 8008292:	605a      	str	r2, [r3, #4]
 8008294:	e7e8      	b.n	8008268 <_malloc_r+0xa0>
 8008296:	0023      	movs	r3, r4
 8008298:	6864      	ldr	r4, [r4, #4]
 800829a:	e7a7      	b.n	80081ec <_malloc_r+0x24>
 800829c:	002c      	movs	r4, r5
 800829e:	686d      	ldr	r5, [r5, #4]
 80082a0:	e7af      	b.n	8008202 <_malloc_r+0x3a>
 80082a2:	230c      	movs	r3, #12
 80082a4:	0030      	movs	r0, r6
 80082a6:	6033      	str	r3, [r6, #0]
 80082a8:	f000 f9d4 	bl	8008654 <__malloc_unlock>
 80082ac:	e7cd      	b.n	800824a <_malloc_r+0x82>
 80082ae:	46c0      	nop			; (mov r8, r8)
 80082b0:	200006f8 	.word	0x200006f8

080082b4 <__ssputs_r>:
 80082b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082b6:	688e      	ldr	r6, [r1, #8]
 80082b8:	b085      	sub	sp, #20
 80082ba:	0007      	movs	r7, r0
 80082bc:	000c      	movs	r4, r1
 80082be:	9203      	str	r2, [sp, #12]
 80082c0:	9301      	str	r3, [sp, #4]
 80082c2:	429e      	cmp	r6, r3
 80082c4:	d83c      	bhi.n	8008340 <__ssputs_r+0x8c>
 80082c6:	2390      	movs	r3, #144	; 0x90
 80082c8:	898a      	ldrh	r2, [r1, #12]
 80082ca:	00db      	lsls	r3, r3, #3
 80082cc:	421a      	tst	r2, r3
 80082ce:	d034      	beq.n	800833a <__ssputs_r+0x86>
 80082d0:	6909      	ldr	r1, [r1, #16]
 80082d2:	6823      	ldr	r3, [r4, #0]
 80082d4:	6960      	ldr	r0, [r4, #20]
 80082d6:	1a5b      	subs	r3, r3, r1
 80082d8:	9302      	str	r3, [sp, #8]
 80082da:	2303      	movs	r3, #3
 80082dc:	4343      	muls	r3, r0
 80082de:	0fdd      	lsrs	r5, r3, #31
 80082e0:	18ed      	adds	r5, r5, r3
 80082e2:	9b01      	ldr	r3, [sp, #4]
 80082e4:	9802      	ldr	r0, [sp, #8]
 80082e6:	3301      	adds	r3, #1
 80082e8:	181b      	adds	r3, r3, r0
 80082ea:	106d      	asrs	r5, r5, #1
 80082ec:	42ab      	cmp	r3, r5
 80082ee:	d900      	bls.n	80082f2 <__ssputs_r+0x3e>
 80082f0:	001d      	movs	r5, r3
 80082f2:	0553      	lsls	r3, r2, #21
 80082f4:	d532      	bpl.n	800835c <__ssputs_r+0xa8>
 80082f6:	0029      	movs	r1, r5
 80082f8:	0038      	movs	r0, r7
 80082fa:	f7ff ff65 	bl	80081c8 <_malloc_r>
 80082fe:	1e06      	subs	r6, r0, #0
 8008300:	d109      	bne.n	8008316 <__ssputs_r+0x62>
 8008302:	230c      	movs	r3, #12
 8008304:	603b      	str	r3, [r7, #0]
 8008306:	2340      	movs	r3, #64	; 0x40
 8008308:	2001      	movs	r0, #1
 800830a:	89a2      	ldrh	r2, [r4, #12]
 800830c:	4240      	negs	r0, r0
 800830e:	4313      	orrs	r3, r2
 8008310:	81a3      	strh	r3, [r4, #12]
 8008312:	b005      	add	sp, #20
 8008314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008316:	9a02      	ldr	r2, [sp, #8]
 8008318:	6921      	ldr	r1, [r4, #16]
 800831a:	f7ff fb18 	bl	800794e <memcpy>
 800831e:	89a3      	ldrh	r3, [r4, #12]
 8008320:	4a14      	ldr	r2, [pc, #80]	; (8008374 <__ssputs_r+0xc0>)
 8008322:	401a      	ands	r2, r3
 8008324:	2380      	movs	r3, #128	; 0x80
 8008326:	4313      	orrs	r3, r2
 8008328:	81a3      	strh	r3, [r4, #12]
 800832a:	9b02      	ldr	r3, [sp, #8]
 800832c:	6126      	str	r6, [r4, #16]
 800832e:	18f6      	adds	r6, r6, r3
 8008330:	6026      	str	r6, [r4, #0]
 8008332:	6165      	str	r5, [r4, #20]
 8008334:	9e01      	ldr	r6, [sp, #4]
 8008336:	1aed      	subs	r5, r5, r3
 8008338:	60a5      	str	r5, [r4, #8]
 800833a:	9b01      	ldr	r3, [sp, #4]
 800833c:	429e      	cmp	r6, r3
 800833e:	d900      	bls.n	8008342 <__ssputs_r+0x8e>
 8008340:	9e01      	ldr	r6, [sp, #4]
 8008342:	0032      	movs	r2, r6
 8008344:	9903      	ldr	r1, [sp, #12]
 8008346:	6820      	ldr	r0, [r4, #0]
 8008348:	f000 f968 	bl	800861c <memmove>
 800834c:	68a3      	ldr	r3, [r4, #8]
 800834e:	2000      	movs	r0, #0
 8008350:	1b9b      	subs	r3, r3, r6
 8008352:	60a3      	str	r3, [r4, #8]
 8008354:	6823      	ldr	r3, [r4, #0]
 8008356:	199e      	adds	r6, r3, r6
 8008358:	6026      	str	r6, [r4, #0]
 800835a:	e7da      	b.n	8008312 <__ssputs_r+0x5e>
 800835c:	002a      	movs	r2, r5
 800835e:	0038      	movs	r0, r7
 8008360:	f000 f980 	bl	8008664 <_realloc_r>
 8008364:	1e06      	subs	r6, r0, #0
 8008366:	d1e0      	bne.n	800832a <__ssputs_r+0x76>
 8008368:	0038      	movs	r0, r7
 800836a:	6921      	ldr	r1, [r4, #16]
 800836c:	f7ff fec0 	bl	80080f0 <_free_r>
 8008370:	e7c7      	b.n	8008302 <__ssputs_r+0x4e>
 8008372:	46c0      	nop			; (mov r8, r8)
 8008374:	fffffb7f 	.word	0xfffffb7f

08008378 <_svfiprintf_r>:
 8008378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800837a:	b0a1      	sub	sp, #132	; 0x84
 800837c:	9003      	str	r0, [sp, #12]
 800837e:	001d      	movs	r5, r3
 8008380:	898b      	ldrh	r3, [r1, #12]
 8008382:	000f      	movs	r7, r1
 8008384:	0016      	movs	r6, r2
 8008386:	061b      	lsls	r3, r3, #24
 8008388:	d511      	bpl.n	80083ae <_svfiprintf_r+0x36>
 800838a:	690b      	ldr	r3, [r1, #16]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d10e      	bne.n	80083ae <_svfiprintf_r+0x36>
 8008390:	2140      	movs	r1, #64	; 0x40
 8008392:	f7ff ff19 	bl	80081c8 <_malloc_r>
 8008396:	6038      	str	r0, [r7, #0]
 8008398:	6138      	str	r0, [r7, #16]
 800839a:	2800      	cmp	r0, #0
 800839c:	d105      	bne.n	80083aa <_svfiprintf_r+0x32>
 800839e:	230c      	movs	r3, #12
 80083a0:	9a03      	ldr	r2, [sp, #12]
 80083a2:	3801      	subs	r0, #1
 80083a4:	6013      	str	r3, [r2, #0]
 80083a6:	b021      	add	sp, #132	; 0x84
 80083a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083aa:	2340      	movs	r3, #64	; 0x40
 80083ac:	617b      	str	r3, [r7, #20]
 80083ae:	2300      	movs	r3, #0
 80083b0:	ac08      	add	r4, sp, #32
 80083b2:	6163      	str	r3, [r4, #20]
 80083b4:	3320      	adds	r3, #32
 80083b6:	7663      	strb	r3, [r4, #25]
 80083b8:	3310      	adds	r3, #16
 80083ba:	76a3      	strb	r3, [r4, #26]
 80083bc:	9507      	str	r5, [sp, #28]
 80083be:	0035      	movs	r5, r6
 80083c0:	782b      	ldrb	r3, [r5, #0]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d001      	beq.n	80083ca <_svfiprintf_r+0x52>
 80083c6:	2b25      	cmp	r3, #37	; 0x25
 80083c8:	d147      	bne.n	800845a <_svfiprintf_r+0xe2>
 80083ca:	1bab      	subs	r3, r5, r6
 80083cc:	9305      	str	r3, [sp, #20]
 80083ce:	42b5      	cmp	r5, r6
 80083d0:	d00c      	beq.n	80083ec <_svfiprintf_r+0x74>
 80083d2:	0032      	movs	r2, r6
 80083d4:	0039      	movs	r1, r7
 80083d6:	9803      	ldr	r0, [sp, #12]
 80083d8:	f7ff ff6c 	bl	80082b4 <__ssputs_r>
 80083dc:	1c43      	adds	r3, r0, #1
 80083de:	d100      	bne.n	80083e2 <_svfiprintf_r+0x6a>
 80083e0:	e0ae      	b.n	8008540 <_svfiprintf_r+0x1c8>
 80083e2:	6962      	ldr	r2, [r4, #20]
 80083e4:	9b05      	ldr	r3, [sp, #20]
 80083e6:	4694      	mov	ip, r2
 80083e8:	4463      	add	r3, ip
 80083ea:	6163      	str	r3, [r4, #20]
 80083ec:	782b      	ldrb	r3, [r5, #0]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d100      	bne.n	80083f4 <_svfiprintf_r+0x7c>
 80083f2:	e0a5      	b.n	8008540 <_svfiprintf_r+0x1c8>
 80083f4:	2201      	movs	r2, #1
 80083f6:	2300      	movs	r3, #0
 80083f8:	4252      	negs	r2, r2
 80083fa:	6062      	str	r2, [r4, #4]
 80083fc:	a904      	add	r1, sp, #16
 80083fe:	3254      	adds	r2, #84	; 0x54
 8008400:	1852      	adds	r2, r2, r1
 8008402:	1c6e      	adds	r6, r5, #1
 8008404:	6023      	str	r3, [r4, #0]
 8008406:	60e3      	str	r3, [r4, #12]
 8008408:	60a3      	str	r3, [r4, #8]
 800840a:	7013      	strb	r3, [r2, #0]
 800840c:	65a3      	str	r3, [r4, #88]	; 0x58
 800840e:	2205      	movs	r2, #5
 8008410:	7831      	ldrb	r1, [r6, #0]
 8008412:	4854      	ldr	r0, [pc, #336]	; (8008564 <_svfiprintf_r+0x1ec>)
 8008414:	f7ff fa90 	bl	8007938 <memchr>
 8008418:	1c75      	adds	r5, r6, #1
 800841a:	2800      	cmp	r0, #0
 800841c:	d11f      	bne.n	800845e <_svfiprintf_r+0xe6>
 800841e:	6822      	ldr	r2, [r4, #0]
 8008420:	06d3      	lsls	r3, r2, #27
 8008422:	d504      	bpl.n	800842e <_svfiprintf_r+0xb6>
 8008424:	2353      	movs	r3, #83	; 0x53
 8008426:	a904      	add	r1, sp, #16
 8008428:	185b      	adds	r3, r3, r1
 800842a:	2120      	movs	r1, #32
 800842c:	7019      	strb	r1, [r3, #0]
 800842e:	0713      	lsls	r3, r2, #28
 8008430:	d504      	bpl.n	800843c <_svfiprintf_r+0xc4>
 8008432:	2353      	movs	r3, #83	; 0x53
 8008434:	a904      	add	r1, sp, #16
 8008436:	185b      	adds	r3, r3, r1
 8008438:	212b      	movs	r1, #43	; 0x2b
 800843a:	7019      	strb	r1, [r3, #0]
 800843c:	7833      	ldrb	r3, [r6, #0]
 800843e:	2b2a      	cmp	r3, #42	; 0x2a
 8008440:	d016      	beq.n	8008470 <_svfiprintf_r+0xf8>
 8008442:	0035      	movs	r5, r6
 8008444:	2100      	movs	r1, #0
 8008446:	200a      	movs	r0, #10
 8008448:	68e3      	ldr	r3, [r4, #12]
 800844a:	782a      	ldrb	r2, [r5, #0]
 800844c:	1c6e      	adds	r6, r5, #1
 800844e:	3a30      	subs	r2, #48	; 0x30
 8008450:	2a09      	cmp	r2, #9
 8008452:	d94e      	bls.n	80084f2 <_svfiprintf_r+0x17a>
 8008454:	2900      	cmp	r1, #0
 8008456:	d111      	bne.n	800847c <_svfiprintf_r+0x104>
 8008458:	e017      	b.n	800848a <_svfiprintf_r+0x112>
 800845a:	3501      	adds	r5, #1
 800845c:	e7b0      	b.n	80083c0 <_svfiprintf_r+0x48>
 800845e:	4b41      	ldr	r3, [pc, #260]	; (8008564 <_svfiprintf_r+0x1ec>)
 8008460:	6822      	ldr	r2, [r4, #0]
 8008462:	1ac0      	subs	r0, r0, r3
 8008464:	2301      	movs	r3, #1
 8008466:	4083      	lsls	r3, r0
 8008468:	4313      	orrs	r3, r2
 800846a:	002e      	movs	r6, r5
 800846c:	6023      	str	r3, [r4, #0]
 800846e:	e7ce      	b.n	800840e <_svfiprintf_r+0x96>
 8008470:	9b07      	ldr	r3, [sp, #28]
 8008472:	1d19      	adds	r1, r3, #4
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	9107      	str	r1, [sp, #28]
 8008478:	2b00      	cmp	r3, #0
 800847a:	db01      	blt.n	8008480 <_svfiprintf_r+0x108>
 800847c:	930b      	str	r3, [sp, #44]	; 0x2c
 800847e:	e004      	b.n	800848a <_svfiprintf_r+0x112>
 8008480:	425b      	negs	r3, r3
 8008482:	60e3      	str	r3, [r4, #12]
 8008484:	2302      	movs	r3, #2
 8008486:	4313      	orrs	r3, r2
 8008488:	6023      	str	r3, [r4, #0]
 800848a:	782b      	ldrb	r3, [r5, #0]
 800848c:	2b2e      	cmp	r3, #46	; 0x2e
 800848e:	d10a      	bne.n	80084a6 <_svfiprintf_r+0x12e>
 8008490:	786b      	ldrb	r3, [r5, #1]
 8008492:	2b2a      	cmp	r3, #42	; 0x2a
 8008494:	d135      	bne.n	8008502 <_svfiprintf_r+0x18a>
 8008496:	9b07      	ldr	r3, [sp, #28]
 8008498:	3502      	adds	r5, #2
 800849a:	1d1a      	adds	r2, r3, #4
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	9207      	str	r2, [sp, #28]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	db2b      	blt.n	80084fc <_svfiprintf_r+0x184>
 80084a4:	9309      	str	r3, [sp, #36]	; 0x24
 80084a6:	4e30      	ldr	r6, [pc, #192]	; (8008568 <_svfiprintf_r+0x1f0>)
 80084a8:	2203      	movs	r2, #3
 80084aa:	0030      	movs	r0, r6
 80084ac:	7829      	ldrb	r1, [r5, #0]
 80084ae:	f7ff fa43 	bl	8007938 <memchr>
 80084b2:	2800      	cmp	r0, #0
 80084b4:	d006      	beq.n	80084c4 <_svfiprintf_r+0x14c>
 80084b6:	2340      	movs	r3, #64	; 0x40
 80084b8:	1b80      	subs	r0, r0, r6
 80084ba:	4083      	lsls	r3, r0
 80084bc:	6822      	ldr	r2, [r4, #0]
 80084be:	3501      	adds	r5, #1
 80084c0:	4313      	orrs	r3, r2
 80084c2:	6023      	str	r3, [r4, #0]
 80084c4:	7829      	ldrb	r1, [r5, #0]
 80084c6:	2206      	movs	r2, #6
 80084c8:	4828      	ldr	r0, [pc, #160]	; (800856c <_svfiprintf_r+0x1f4>)
 80084ca:	1c6e      	adds	r6, r5, #1
 80084cc:	7621      	strb	r1, [r4, #24]
 80084ce:	f7ff fa33 	bl	8007938 <memchr>
 80084d2:	2800      	cmp	r0, #0
 80084d4:	d03c      	beq.n	8008550 <_svfiprintf_r+0x1d8>
 80084d6:	4b26      	ldr	r3, [pc, #152]	; (8008570 <_svfiprintf_r+0x1f8>)
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d125      	bne.n	8008528 <_svfiprintf_r+0x1b0>
 80084dc:	2207      	movs	r2, #7
 80084de:	9b07      	ldr	r3, [sp, #28]
 80084e0:	3307      	adds	r3, #7
 80084e2:	4393      	bics	r3, r2
 80084e4:	3308      	adds	r3, #8
 80084e6:	9307      	str	r3, [sp, #28]
 80084e8:	6963      	ldr	r3, [r4, #20]
 80084ea:	9a04      	ldr	r2, [sp, #16]
 80084ec:	189b      	adds	r3, r3, r2
 80084ee:	6163      	str	r3, [r4, #20]
 80084f0:	e765      	b.n	80083be <_svfiprintf_r+0x46>
 80084f2:	4343      	muls	r3, r0
 80084f4:	0035      	movs	r5, r6
 80084f6:	2101      	movs	r1, #1
 80084f8:	189b      	adds	r3, r3, r2
 80084fa:	e7a6      	b.n	800844a <_svfiprintf_r+0xd2>
 80084fc:	2301      	movs	r3, #1
 80084fe:	425b      	negs	r3, r3
 8008500:	e7d0      	b.n	80084a4 <_svfiprintf_r+0x12c>
 8008502:	2300      	movs	r3, #0
 8008504:	200a      	movs	r0, #10
 8008506:	001a      	movs	r2, r3
 8008508:	3501      	adds	r5, #1
 800850a:	6063      	str	r3, [r4, #4]
 800850c:	7829      	ldrb	r1, [r5, #0]
 800850e:	1c6e      	adds	r6, r5, #1
 8008510:	3930      	subs	r1, #48	; 0x30
 8008512:	2909      	cmp	r1, #9
 8008514:	d903      	bls.n	800851e <_svfiprintf_r+0x1a6>
 8008516:	2b00      	cmp	r3, #0
 8008518:	d0c5      	beq.n	80084a6 <_svfiprintf_r+0x12e>
 800851a:	9209      	str	r2, [sp, #36]	; 0x24
 800851c:	e7c3      	b.n	80084a6 <_svfiprintf_r+0x12e>
 800851e:	4342      	muls	r2, r0
 8008520:	0035      	movs	r5, r6
 8008522:	2301      	movs	r3, #1
 8008524:	1852      	adds	r2, r2, r1
 8008526:	e7f1      	b.n	800850c <_svfiprintf_r+0x194>
 8008528:	ab07      	add	r3, sp, #28
 800852a:	9300      	str	r3, [sp, #0]
 800852c:	003a      	movs	r2, r7
 800852e:	0021      	movs	r1, r4
 8008530:	4b10      	ldr	r3, [pc, #64]	; (8008574 <_svfiprintf_r+0x1fc>)
 8008532:	9803      	ldr	r0, [sp, #12]
 8008534:	f7fd ff68 	bl	8006408 <_printf_float>
 8008538:	9004      	str	r0, [sp, #16]
 800853a:	9b04      	ldr	r3, [sp, #16]
 800853c:	3301      	adds	r3, #1
 800853e:	d1d3      	bne.n	80084e8 <_svfiprintf_r+0x170>
 8008540:	89bb      	ldrh	r3, [r7, #12]
 8008542:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008544:	065b      	lsls	r3, r3, #25
 8008546:	d400      	bmi.n	800854a <_svfiprintf_r+0x1d2>
 8008548:	e72d      	b.n	80083a6 <_svfiprintf_r+0x2e>
 800854a:	2001      	movs	r0, #1
 800854c:	4240      	negs	r0, r0
 800854e:	e72a      	b.n	80083a6 <_svfiprintf_r+0x2e>
 8008550:	ab07      	add	r3, sp, #28
 8008552:	9300      	str	r3, [sp, #0]
 8008554:	003a      	movs	r2, r7
 8008556:	0021      	movs	r1, r4
 8008558:	4b06      	ldr	r3, [pc, #24]	; (8008574 <_svfiprintf_r+0x1fc>)
 800855a:	9803      	ldr	r0, [sp, #12]
 800855c:	f7fe fa06 	bl	800696c <_printf_i>
 8008560:	e7ea      	b.n	8008538 <_svfiprintf_r+0x1c0>
 8008562:	46c0      	nop			; (mov r8, r8)
 8008564:	080095f4 	.word	0x080095f4
 8008568:	080095fa 	.word	0x080095fa
 800856c:	080095fe 	.word	0x080095fe
 8008570:	08006409 	.word	0x08006409
 8008574:	080082b5 	.word	0x080082b5

08008578 <_sbrk_r>:
 8008578:	2300      	movs	r3, #0
 800857a:	b570      	push	{r4, r5, r6, lr}
 800857c:	4d06      	ldr	r5, [pc, #24]	; (8008598 <_sbrk_r+0x20>)
 800857e:	0004      	movs	r4, r0
 8008580:	0008      	movs	r0, r1
 8008582:	602b      	str	r3, [r5, #0]
 8008584:	f7fa fe36 	bl	80031f4 <_sbrk>
 8008588:	1c43      	adds	r3, r0, #1
 800858a:	d103      	bne.n	8008594 <_sbrk_r+0x1c>
 800858c:	682b      	ldr	r3, [r5, #0]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d000      	beq.n	8008594 <_sbrk_r+0x1c>
 8008592:	6023      	str	r3, [r4, #0]
 8008594:	bd70      	pop	{r4, r5, r6, pc}
 8008596:	46c0      	nop			; (mov r8, r8)
 8008598:	20000700 	.word	0x20000700

0800859c <__assert_func>:
 800859c:	b530      	push	{r4, r5, lr}
 800859e:	0014      	movs	r4, r2
 80085a0:	001a      	movs	r2, r3
 80085a2:	4b09      	ldr	r3, [pc, #36]	; (80085c8 <__assert_func+0x2c>)
 80085a4:	0005      	movs	r5, r0
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	b085      	sub	sp, #20
 80085aa:	68d8      	ldr	r0, [r3, #12]
 80085ac:	4b07      	ldr	r3, [pc, #28]	; (80085cc <__assert_func+0x30>)
 80085ae:	2c00      	cmp	r4, #0
 80085b0:	d101      	bne.n	80085b6 <__assert_func+0x1a>
 80085b2:	4b07      	ldr	r3, [pc, #28]	; (80085d0 <__assert_func+0x34>)
 80085b4:	001c      	movs	r4, r3
 80085b6:	9301      	str	r3, [sp, #4]
 80085b8:	9100      	str	r1, [sp, #0]
 80085ba:	002b      	movs	r3, r5
 80085bc:	4905      	ldr	r1, [pc, #20]	; (80085d4 <__assert_func+0x38>)
 80085be:	9402      	str	r4, [sp, #8]
 80085c0:	f000 f80a 	bl	80085d8 <fiprintf>
 80085c4:	f000 faba 	bl	8008b3c <abort>
 80085c8:	2000000c 	.word	0x2000000c
 80085cc:	08009605 	.word	0x08009605
 80085d0:	08009640 	.word	0x08009640
 80085d4:	08009612 	.word	0x08009612

080085d8 <fiprintf>:
 80085d8:	b40e      	push	{r1, r2, r3}
 80085da:	b503      	push	{r0, r1, lr}
 80085dc:	0001      	movs	r1, r0
 80085de:	ab03      	add	r3, sp, #12
 80085e0:	4804      	ldr	r0, [pc, #16]	; (80085f4 <fiprintf+0x1c>)
 80085e2:	cb04      	ldmia	r3!, {r2}
 80085e4:	6800      	ldr	r0, [r0, #0]
 80085e6:	9301      	str	r3, [sp, #4]
 80085e8:	f000 f892 	bl	8008710 <_vfiprintf_r>
 80085ec:	b002      	add	sp, #8
 80085ee:	bc08      	pop	{r3}
 80085f0:	b003      	add	sp, #12
 80085f2:	4718      	bx	r3
 80085f4:	2000000c 	.word	0x2000000c

080085f8 <__ascii_mbtowc>:
 80085f8:	b082      	sub	sp, #8
 80085fa:	2900      	cmp	r1, #0
 80085fc:	d100      	bne.n	8008600 <__ascii_mbtowc+0x8>
 80085fe:	a901      	add	r1, sp, #4
 8008600:	1e10      	subs	r0, r2, #0
 8008602:	d006      	beq.n	8008612 <__ascii_mbtowc+0x1a>
 8008604:	2b00      	cmp	r3, #0
 8008606:	d006      	beq.n	8008616 <__ascii_mbtowc+0x1e>
 8008608:	7813      	ldrb	r3, [r2, #0]
 800860a:	600b      	str	r3, [r1, #0]
 800860c:	7810      	ldrb	r0, [r2, #0]
 800860e:	1e43      	subs	r3, r0, #1
 8008610:	4198      	sbcs	r0, r3
 8008612:	b002      	add	sp, #8
 8008614:	4770      	bx	lr
 8008616:	2002      	movs	r0, #2
 8008618:	4240      	negs	r0, r0
 800861a:	e7fa      	b.n	8008612 <__ascii_mbtowc+0x1a>

0800861c <memmove>:
 800861c:	b510      	push	{r4, lr}
 800861e:	4288      	cmp	r0, r1
 8008620:	d902      	bls.n	8008628 <memmove+0xc>
 8008622:	188b      	adds	r3, r1, r2
 8008624:	4298      	cmp	r0, r3
 8008626:	d303      	bcc.n	8008630 <memmove+0x14>
 8008628:	2300      	movs	r3, #0
 800862a:	e007      	b.n	800863c <memmove+0x20>
 800862c:	5c8b      	ldrb	r3, [r1, r2]
 800862e:	5483      	strb	r3, [r0, r2]
 8008630:	3a01      	subs	r2, #1
 8008632:	d2fb      	bcs.n	800862c <memmove+0x10>
 8008634:	bd10      	pop	{r4, pc}
 8008636:	5ccc      	ldrb	r4, [r1, r3]
 8008638:	54c4      	strb	r4, [r0, r3]
 800863a:	3301      	adds	r3, #1
 800863c:	429a      	cmp	r2, r3
 800863e:	d1fa      	bne.n	8008636 <memmove+0x1a>
 8008640:	e7f8      	b.n	8008634 <memmove+0x18>
	...

08008644 <__malloc_lock>:
 8008644:	b510      	push	{r4, lr}
 8008646:	4802      	ldr	r0, [pc, #8]	; (8008650 <__malloc_lock+0xc>)
 8008648:	f000 fc4f 	bl	8008eea <__retarget_lock_acquire_recursive>
 800864c:	bd10      	pop	{r4, pc}
 800864e:	46c0      	nop			; (mov r8, r8)
 8008650:	20000704 	.word	0x20000704

08008654 <__malloc_unlock>:
 8008654:	b510      	push	{r4, lr}
 8008656:	4802      	ldr	r0, [pc, #8]	; (8008660 <__malloc_unlock+0xc>)
 8008658:	f000 fc48 	bl	8008eec <__retarget_lock_release_recursive>
 800865c:	bd10      	pop	{r4, pc}
 800865e:	46c0      	nop			; (mov r8, r8)
 8008660:	20000704 	.word	0x20000704

08008664 <_realloc_r>:
 8008664:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008666:	0007      	movs	r7, r0
 8008668:	000e      	movs	r6, r1
 800866a:	0014      	movs	r4, r2
 800866c:	2900      	cmp	r1, #0
 800866e:	d105      	bne.n	800867c <_realloc_r+0x18>
 8008670:	0011      	movs	r1, r2
 8008672:	f7ff fda9 	bl	80081c8 <_malloc_r>
 8008676:	0005      	movs	r5, r0
 8008678:	0028      	movs	r0, r5
 800867a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800867c:	2a00      	cmp	r2, #0
 800867e:	d103      	bne.n	8008688 <_realloc_r+0x24>
 8008680:	f7ff fd36 	bl	80080f0 <_free_r>
 8008684:	0025      	movs	r5, r4
 8008686:	e7f7      	b.n	8008678 <_realloc_r+0x14>
 8008688:	f000 fc9e 	bl	8008fc8 <_malloc_usable_size_r>
 800868c:	9001      	str	r0, [sp, #4]
 800868e:	4284      	cmp	r4, r0
 8008690:	d803      	bhi.n	800869a <_realloc_r+0x36>
 8008692:	0035      	movs	r5, r6
 8008694:	0843      	lsrs	r3, r0, #1
 8008696:	42a3      	cmp	r3, r4
 8008698:	d3ee      	bcc.n	8008678 <_realloc_r+0x14>
 800869a:	0021      	movs	r1, r4
 800869c:	0038      	movs	r0, r7
 800869e:	f7ff fd93 	bl	80081c8 <_malloc_r>
 80086a2:	1e05      	subs	r5, r0, #0
 80086a4:	d0e8      	beq.n	8008678 <_realloc_r+0x14>
 80086a6:	9b01      	ldr	r3, [sp, #4]
 80086a8:	0022      	movs	r2, r4
 80086aa:	429c      	cmp	r4, r3
 80086ac:	d900      	bls.n	80086b0 <_realloc_r+0x4c>
 80086ae:	001a      	movs	r2, r3
 80086b0:	0031      	movs	r1, r6
 80086b2:	0028      	movs	r0, r5
 80086b4:	f7ff f94b 	bl	800794e <memcpy>
 80086b8:	0031      	movs	r1, r6
 80086ba:	0038      	movs	r0, r7
 80086bc:	f7ff fd18 	bl	80080f0 <_free_r>
 80086c0:	e7da      	b.n	8008678 <_realloc_r+0x14>

080086c2 <__sfputc_r>:
 80086c2:	6893      	ldr	r3, [r2, #8]
 80086c4:	b510      	push	{r4, lr}
 80086c6:	3b01      	subs	r3, #1
 80086c8:	6093      	str	r3, [r2, #8]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	da04      	bge.n	80086d8 <__sfputc_r+0x16>
 80086ce:	6994      	ldr	r4, [r2, #24]
 80086d0:	42a3      	cmp	r3, r4
 80086d2:	db07      	blt.n	80086e4 <__sfputc_r+0x22>
 80086d4:	290a      	cmp	r1, #10
 80086d6:	d005      	beq.n	80086e4 <__sfputc_r+0x22>
 80086d8:	6813      	ldr	r3, [r2, #0]
 80086da:	1c58      	adds	r0, r3, #1
 80086dc:	6010      	str	r0, [r2, #0]
 80086de:	7019      	strb	r1, [r3, #0]
 80086e0:	0008      	movs	r0, r1
 80086e2:	bd10      	pop	{r4, pc}
 80086e4:	f000 f94e 	bl	8008984 <__swbuf_r>
 80086e8:	0001      	movs	r1, r0
 80086ea:	e7f9      	b.n	80086e0 <__sfputc_r+0x1e>

080086ec <__sfputs_r>:
 80086ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ee:	0006      	movs	r6, r0
 80086f0:	000f      	movs	r7, r1
 80086f2:	0014      	movs	r4, r2
 80086f4:	18d5      	adds	r5, r2, r3
 80086f6:	42ac      	cmp	r4, r5
 80086f8:	d101      	bne.n	80086fe <__sfputs_r+0x12>
 80086fa:	2000      	movs	r0, #0
 80086fc:	e007      	b.n	800870e <__sfputs_r+0x22>
 80086fe:	7821      	ldrb	r1, [r4, #0]
 8008700:	003a      	movs	r2, r7
 8008702:	0030      	movs	r0, r6
 8008704:	f7ff ffdd 	bl	80086c2 <__sfputc_r>
 8008708:	3401      	adds	r4, #1
 800870a:	1c43      	adds	r3, r0, #1
 800870c:	d1f3      	bne.n	80086f6 <__sfputs_r+0xa>
 800870e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008710 <_vfiprintf_r>:
 8008710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008712:	b0a1      	sub	sp, #132	; 0x84
 8008714:	0006      	movs	r6, r0
 8008716:	000c      	movs	r4, r1
 8008718:	001f      	movs	r7, r3
 800871a:	9203      	str	r2, [sp, #12]
 800871c:	2800      	cmp	r0, #0
 800871e:	d004      	beq.n	800872a <_vfiprintf_r+0x1a>
 8008720:	6983      	ldr	r3, [r0, #24]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d101      	bne.n	800872a <_vfiprintf_r+0x1a>
 8008726:	f000 fb3f 	bl	8008da8 <__sinit>
 800872a:	4b8e      	ldr	r3, [pc, #568]	; (8008964 <_vfiprintf_r+0x254>)
 800872c:	429c      	cmp	r4, r3
 800872e:	d11c      	bne.n	800876a <_vfiprintf_r+0x5a>
 8008730:	6874      	ldr	r4, [r6, #4]
 8008732:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008734:	07db      	lsls	r3, r3, #31
 8008736:	d405      	bmi.n	8008744 <_vfiprintf_r+0x34>
 8008738:	89a3      	ldrh	r3, [r4, #12]
 800873a:	059b      	lsls	r3, r3, #22
 800873c:	d402      	bmi.n	8008744 <_vfiprintf_r+0x34>
 800873e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008740:	f000 fbd3 	bl	8008eea <__retarget_lock_acquire_recursive>
 8008744:	89a3      	ldrh	r3, [r4, #12]
 8008746:	071b      	lsls	r3, r3, #28
 8008748:	d502      	bpl.n	8008750 <_vfiprintf_r+0x40>
 800874a:	6923      	ldr	r3, [r4, #16]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d11d      	bne.n	800878c <_vfiprintf_r+0x7c>
 8008750:	0021      	movs	r1, r4
 8008752:	0030      	movs	r0, r6
 8008754:	f000 f97a 	bl	8008a4c <__swsetup_r>
 8008758:	2800      	cmp	r0, #0
 800875a:	d017      	beq.n	800878c <_vfiprintf_r+0x7c>
 800875c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800875e:	07db      	lsls	r3, r3, #31
 8008760:	d50d      	bpl.n	800877e <_vfiprintf_r+0x6e>
 8008762:	2001      	movs	r0, #1
 8008764:	4240      	negs	r0, r0
 8008766:	b021      	add	sp, #132	; 0x84
 8008768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800876a:	4b7f      	ldr	r3, [pc, #508]	; (8008968 <_vfiprintf_r+0x258>)
 800876c:	429c      	cmp	r4, r3
 800876e:	d101      	bne.n	8008774 <_vfiprintf_r+0x64>
 8008770:	68b4      	ldr	r4, [r6, #8]
 8008772:	e7de      	b.n	8008732 <_vfiprintf_r+0x22>
 8008774:	4b7d      	ldr	r3, [pc, #500]	; (800896c <_vfiprintf_r+0x25c>)
 8008776:	429c      	cmp	r4, r3
 8008778:	d1db      	bne.n	8008732 <_vfiprintf_r+0x22>
 800877a:	68f4      	ldr	r4, [r6, #12]
 800877c:	e7d9      	b.n	8008732 <_vfiprintf_r+0x22>
 800877e:	89a3      	ldrh	r3, [r4, #12]
 8008780:	059b      	lsls	r3, r3, #22
 8008782:	d4ee      	bmi.n	8008762 <_vfiprintf_r+0x52>
 8008784:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008786:	f000 fbb1 	bl	8008eec <__retarget_lock_release_recursive>
 800878a:	e7ea      	b.n	8008762 <_vfiprintf_r+0x52>
 800878c:	2300      	movs	r3, #0
 800878e:	ad08      	add	r5, sp, #32
 8008790:	616b      	str	r3, [r5, #20]
 8008792:	3320      	adds	r3, #32
 8008794:	766b      	strb	r3, [r5, #25]
 8008796:	3310      	adds	r3, #16
 8008798:	76ab      	strb	r3, [r5, #26]
 800879a:	9707      	str	r7, [sp, #28]
 800879c:	9f03      	ldr	r7, [sp, #12]
 800879e:	783b      	ldrb	r3, [r7, #0]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d001      	beq.n	80087a8 <_vfiprintf_r+0x98>
 80087a4:	2b25      	cmp	r3, #37	; 0x25
 80087a6:	d14e      	bne.n	8008846 <_vfiprintf_r+0x136>
 80087a8:	9b03      	ldr	r3, [sp, #12]
 80087aa:	1afb      	subs	r3, r7, r3
 80087ac:	9305      	str	r3, [sp, #20]
 80087ae:	9b03      	ldr	r3, [sp, #12]
 80087b0:	429f      	cmp	r7, r3
 80087b2:	d00d      	beq.n	80087d0 <_vfiprintf_r+0xc0>
 80087b4:	9b05      	ldr	r3, [sp, #20]
 80087b6:	0021      	movs	r1, r4
 80087b8:	0030      	movs	r0, r6
 80087ba:	9a03      	ldr	r2, [sp, #12]
 80087bc:	f7ff ff96 	bl	80086ec <__sfputs_r>
 80087c0:	1c43      	adds	r3, r0, #1
 80087c2:	d100      	bne.n	80087c6 <_vfiprintf_r+0xb6>
 80087c4:	e0b5      	b.n	8008932 <_vfiprintf_r+0x222>
 80087c6:	696a      	ldr	r2, [r5, #20]
 80087c8:	9b05      	ldr	r3, [sp, #20]
 80087ca:	4694      	mov	ip, r2
 80087cc:	4463      	add	r3, ip
 80087ce:	616b      	str	r3, [r5, #20]
 80087d0:	783b      	ldrb	r3, [r7, #0]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d100      	bne.n	80087d8 <_vfiprintf_r+0xc8>
 80087d6:	e0ac      	b.n	8008932 <_vfiprintf_r+0x222>
 80087d8:	2201      	movs	r2, #1
 80087da:	1c7b      	adds	r3, r7, #1
 80087dc:	9303      	str	r3, [sp, #12]
 80087de:	2300      	movs	r3, #0
 80087e0:	4252      	negs	r2, r2
 80087e2:	606a      	str	r2, [r5, #4]
 80087e4:	a904      	add	r1, sp, #16
 80087e6:	3254      	adds	r2, #84	; 0x54
 80087e8:	1852      	adds	r2, r2, r1
 80087ea:	602b      	str	r3, [r5, #0]
 80087ec:	60eb      	str	r3, [r5, #12]
 80087ee:	60ab      	str	r3, [r5, #8]
 80087f0:	7013      	strb	r3, [r2, #0]
 80087f2:	65ab      	str	r3, [r5, #88]	; 0x58
 80087f4:	9b03      	ldr	r3, [sp, #12]
 80087f6:	2205      	movs	r2, #5
 80087f8:	7819      	ldrb	r1, [r3, #0]
 80087fa:	485d      	ldr	r0, [pc, #372]	; (8008970 <_vfiprintf_r+0x260>)
 80087fc:	f7ff f89c 	bl	8007938 <memchr>
 8008800:	9b03      	ldr	r3, [sp, #12]
 8008802:	1c5f      	adds	r7, r3, #1
 8008804:	2800      	cmp	r0, #0
 8008806:	d120      	bne.n	800884a <_vfiprintf_r+0x13a>
 8008808:	682a      	ldr	r2, [r5, #0]
 800880a:	06d3      	lsls	r3, r2, #27
 800880c:	d504      	bpl.n	8008818 <_vfiprintf_r+0x108>
 800880e:	2353      	movs	r3, #83	; 0x53
 8008810:	a904      	add	r1, sp, #16
 8008812:	185b      	adds	r3, r3, r1
 8008814:	2120      	movs	r1, #32
 8008816:	7019      	strb	r1, [r3, #0]
 8008818:	0713      	lsls	r3, r2, #28
 800881a:	d504      	bpl.n	8008826 <_vfiprintf_r+0x116>
 800881c:	2353      	movs	r3, #83	; 0x53
 800881e:	a904      	add	r1, sp, #16
 8008820:	185b      	adds	r3, r3, r1
 8008822:	212b      	movs	r1, #43	; 0x2b
 8008824:	7019      	strb	r1, [r3, #0]
 8008826:	9b03      	ldr	r3, [sp, #12]
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	2b2a      	cmp	r3, #42	; 0x2a
 800882c:	d016      	beq.n	800885c <_vfiprintf_r+0x14c>
 800882e:	2100      	movs	r1, #0
 8008830:	68eb      	ldr	r3, [r5, #12]
 8008832:	9f03      	ldr	r7, [sp, #12]
 8008834:	783a      	ldrb	r2, [r7, #0]
 8008836:	1c78      	adds	r0, r7, #1
 8008838:	3a30      	subs	r2, #48	; 0x30
 800883a:	4684      	mov	ip, r0
 800883c:	2a09      	cmp	r2, #9
 800883e:	d94f      	bls.n	80088e0 <_vfiprintf_r+0x1d0>
 8008840:	2900      	cmp	r1, #0
 8008842:	d111      	bne.n	8008868 <_vfiprintf_r+0x158>
 8008844:	e017      	b.n	8008876 <_vfiprintf_r+0x166>
 8008846:	3701      	adds	r7, #1
 8008848:	e7a9      	b.n	800879e <_vfiprintf_r+0x8e>
 800884a:	4b49      	ldr	r3, [pc, #292]	; (8008970 <_vfiprintf_r+0x260>)
 800884c:	682a      	ldr	r2, [r5, #0]
 800884e:	1ac0      	subs	r0, r0, r3
 8008850:	2301      	movs	r3, #1
 8008852:	4083      	lsls	r3, r0
 8008854:	4313      	orrs	r3, r2
 8008856:	602b      	str	r3, [r5, #0]
 8008858:	9703      	str	r7, [sp, #12]
 800885a:	e7cb      	b.n	80087f4 <_vfiprintf_r+0xe4>
 800885c:	9b07      	ldr	r3, [sp, #28]
 800885e:	1d19      	adds	r1, r3, #4
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	9107      	str	r1, [sp, #28]
 8008864:	2b00      	cmp	r3, #0
 8008866:	db01      	blt.n	800886c <_vfiprintf_r+0x15c>
 8008868:	930b      	str	r3, [sp, #44]	; 0x2c
 800886a:	e004      	b.n	8008876 <_vfiprintf_r+0x166>
 800886c:	425b      	negs	r3, r3
 800886e:	60eb      	str	r3, [r5, #12]
 8008870:	2302      	movs	r3, #2
 8008872:	4313      	orrs	r3, r2
 8008874:	602b      	str	r3, [r5, #0]
 8008876:	783b      	ldrb	r3, [r7, #0]
 8008878:	2b2e      	cmp	r3, #46	; 0x2e
 800887a:	d10a      	bne.n	8008892 <_vfiprintf_r+0x182>
 800887c:	787b      	ldrb	r3, [r7, #1]
 800887e:	2b2a      	cmp	r3, #42	; 0x2a
 8008880:	d137      	bne.n	80088f2 <_vfiprintf_r+0x1e2>
 8008882:	9b07      	ldr	r3, [sp, #28]
 8008884:	3702      	adds	r7, #2
 8008886:	1d1a      	adds	r2, r3, #4
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	9207      	str	r2, [sp, #28]
 800888c:	2b00      	cmp	r3, #0
 800888e:	db2d      	blt.n	80088ec <_vfiprintf_r+0x1dc>
 8008890:	9309      	str	r3, [sp, #36]	; 0x24
 8008892:	2203      	movs	r2, #3
 8008894:	7839      	ldrb	r1, [r7, #0]
 8008896:	4837      	ldr	r0, [pc, #220]	; (8008974 <_vfiprintf_r+0x264>)
 8008898:	f7ff f84e 	bl	8007938 <memchr>
 800889c:	2800      	cmp	r0, #0
 800889e:	d007      	beq.n	80088b0 <_vfiprintf_r+0x1a0>
 80088a0:	4b34      	ldr	r3, [pc, #208]	; (8008974 <_vfiprintf_r+0x264>)
 80088a2:	682a      	ldr	r2, [r5, #0]
 80088a4:	1ac0      	subs	r0, r0, r3
 80088a6:	2340      	movs	r3, #64	; 0x40
 80088a8:	4083      	lsls	r3, r0
 80088aa:	4313      	orrs	r3, r2
 80088ac:	3701      	adds	r7, #1
 80088ae:	602b      	str	r3, [r5, #0]
 80088b0:	7839      	ldrb	r1, [r7, #0]
 80088b2:	1c7b      	adds	r3, r7, #1
 80088b4:	2206      	movs	r2, #6
 80088b6:	4830      	ldr	r0, [pc, #192]	; (8008978 <_vfiprintf_r+0x268>)
 80088b8:	9303      	str	r3, [sp, #12]
 80088ba:	7629      	strb	r1, [r5, #24]
 80088bc:	f7ff f83c 	bl	8007938 <memchr>
 80088c0:	2800      	cmp	r0, #0
 80088c2:	d045      	beq.n	8008950 <_vfiprintf_r+0x240>
 80088c4:	4b2d      	ldr	r3, [pc, #180]	; (800897c <_vfiprintf_r+0x26c>)
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d127      	bne.n	800891a <_vfiprintf_r+0x20a>
 80088ca:	2207      	movs	r2, #7
 80088cc:	9b07      	ldr	r3, [sp, #28]
 80088ce:	3307      	adds	r3, #7
 80088d0:	4393      	bics	r3, r2
 80088d2:	3308      	adds	r3, #8
 80088d4:	9307      	str	r3, [sp, #28]
 80088d6:	696b      	ldr	r3, [r5, #20]
 80088d8:	9a04      	ldr	r2, [sp, #16]
 80088da:	189b      	adds	r3, r3, r2
 80088dc:	616b      	str	r3, [r5, #20]
 80088de:	e75d      	b.n	800879c <_vfiprintf_r+0x8c>
 80088e0:	210a      	movs	r1, #10
 80088e2:	434b      	muls	r3, r1
 80088e4:	4667      	mov	r7, ip
 80088e6:	189b      	adds	r3, r3, r2
 80088e8:	3909      	subs	r1, #9
 80088ea:	e7a3      	b.n	8008834 <_vfiprintf_r+0x124>
 80088ec:	2301      	movs	r3, #1
 80088ee:	425b      	negs	r3, r3
 80088f0:	e7ce      	b.n	8008890 <_vfiprintf_r+0x180>
 80088f2:	2300      	movs	r3, #0
 80088f4:	001a      	movs	r2, r3
 80088f6:	3701      	adds	r7, #1
 80088f8:	606b      	str	r3, [r5, #4]
 80088fa:	7839      	ldrb	r1, [r7, #0]
 80088fc:	1c78      	adds	r0, r7, #1
 80088fe:	3930      	subs	r1, #48	; 0x30
 8008900:	4684      	mov	ip, r0
 8008902:	2909      	cmp	r1, #9
 8008904:	d903      	bls.n	800890e <_vfiprintf_r+0x1fe>
 8008906:	2b00      	cmp	r3, #0
 8008908:	d0c3      	beq.n	8008892 <_vfiprintf_r+0x182>
 800890a:	9209      	str	r2, [sp, #36]	; 0x24
 800890c:	e7c1      	b.n	8008892 <_vfiprintf_r+0x182>
 800890e:	230a      	movs	r3, #10
 8008910:	435a      	muls	r2, r3
 8008912:	4667      	mov	r7, ip
 8008914:	1852      	adds	r2, r2, r1
 8008916:	3b09      	subs	r3, #9
 8008918:	e7ef      	b.n	80088fa <_vfiprintf_r+0x1ea>
 800891a:	ab07      	add	r3, sp, #28
 800891c:	9300      	str	r3, [sp, #0]
 800891e:	0022      	movs	r2, r4
 8008920:	0029      	movs	r1, r5
 8008922:	0030      	movs	r0, r6
 8008924:	4b16      	ldr	r3, [pc, #88]	; (8008980 <_vfiprintf_r+0x270>)
 8008926:	f7fd fd6f 	bl	8006408 <_printf_float>
 800892a:	9004      	str	r0, [sp, #16]
 800892c:	9b04      	ldr	r3, [sp, #16]
 800892e:	3301      	adds	r3, #1
 8008930:	d1d1      	bne.n	80088d6 <_vfiprintf_r+0x1c6>
 8008932:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008934:	07db      	lsls	r3, r3, #31
 8008936:	d405      	bmi.n	8008944 <_vfiprintf_r+0x234>
 8008938:	89a3      	ldrh	r3, [r4, #12]
 800893a:	059b      	lsls	r3, r3, #22
 800893c:	d402      	bmi.n	8008944 <_vfiprintf_r+0x234>
 800893e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008940:	f000 fad4 	bl	8008eec <__retarget_lock_release_recursive>
 8008944:	89a3      	ldrh	r3, [r4, #12]
 8008946:	065b      	lsls	r3, r3, #25
 8008948:	d500      	bpl.n	800894c <_vfiprintf_r+0x23c>
 800894a:	e70a      	b.n	8008762 <_vfiprintf_r+0x52>
 800894c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800894e:	e70a      	b.n	8008766 <_vfiprintf_r+0x56>
 8008950:	ab07      	add	r3, sp, #28
 8008952:	9300      	str	r3, [sp, #0]
 8008954:	0022      	movs	r2, r4
 8008956:	0029      	movs	r1, r5
 8008958:	0030      	movs	r0, r6
 800895a:	4b09      	ldr	r3, [pc, #36]	; (8008980 <_vfiprintf_r+0x270>)
 800895c:	f7fe f806 	bl	800696c <_printf_i>
 8008960:	e7e3      	b.n	800892a <_vfiprintf_r+0x21a>
 8008962:	46c0      	nop			; (mov r8, r8)
 8008964:	0800976c 	.word	0x0800976c
 8008968:	0800978c 	.word	0x0800978c
 800896c:	0800974c 	.word	0x0800974c
 8008970:	080095f4 	.word	0x080095f4
 8008974:	080095fa 	.word	0x080095fa
 8008978:	080095fe 	.word	0x080095fe
 800897c:	08006409 	.word	0x08006409
 8008980:	080086ed 	.word	0x080086ed

08008984 <__swbuf_r>:
 8008984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008986:	0005      	movs	r5, r0
 8008988:	000e      	movs	r6, r1
 800898a:	0014      	movs	r4, r2
 800898c:	2800      	cmp	r0, #0
 800898e:	d004      	beq.n	800899a <__swbuf_r+0x16>
 8008990:	6983      	ldr	r3, [r0, #24]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d101      	bne.n	800899a <__swbuf_r+0x16>
 8008996:	f000 fa07 	bl	8008da8 <__sinit>
 800899a:	4b22      	ldr	r3, [pc, #136]	; (8008a24 <__swbuf_r+0xa0>)
 800899c:	429c      	cmp	r4, r3
 800899e:	d12e      	bne.n	80089fe <__swbuf_r+0x7a>
 80089a0:	686c      	ldr	r4, [r5, #4]
 80089a2:	69a3      	ldr	r3, [r4, #24]
 80089a4:	60a3      	str	r3, [r4, #8]
 80089a6:	89a3      	ldrh	r3, [r4, #12]
 80089a8:	071b      	lsls	r3, r3, #28
 80089aa:	d532      	bpl.n	8008a12 <__swbuf_r+0x8e>
 80089ac:	6923      	ldr	r3, [r4, #16]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d02f      	beq.n	8008a12 <__swbuf_r+0x8e>
 80089b2:	6823      	ldr	r3, [r4, #0]
 80089b4:	6922      	ldr	r2, [r4, #16]
 80089b6:	b2f7      	uxtb	r7, r6
 80089b8:	1a98      	subs	r0, r3, r2
 80089ba:	6963      	ldr	r3, [r4, #20]
 80089bc:	b2f6      	uxtb	r6, r6
 80089be:	4283      	cmp	r3, r0
 80089c0:	dc05      	bgt.n	80089ce <__swbuf_r+0x4a>
 80089c2:	0021      	movs	r1, r4
 80089c4:	0028      	movs	r0, r5
 80089c6:	f000 f94d 	bl	8008c64 <_fflush_r>
 80089ca:	2800      	cmp	r0, #0
 80089cc:	d127      	bne.n	8008a1e <__swbuf_r+0x9a>
 80089ce:	68a3      	ldr	r3, [r4, #8]
 80089d0:	3001      	adds	r0, #1
 80089d2:	3b01      	subs	r3, #1
 80089d4:	60a3      	str	r3, [r4, #8]
 80089d6:	6823      	ldr	r3, [r4, #0]
 80089d8:	1c5a      	adds	r2, r3, #1
 80089da:	6022      	str	r2, [r4, #0]
 80089dc:	701f      	strb	r7, [r3, #0]
 80089de:	6963      	ldr	r3, [r4, #20]
 80089e0:	4283      	cmp	r3, r0
 80089e2:	d004      	beq.n	80089ee <__swbuf_r+0x6a>
 80089e4:	89a3      	ldrh	r3, [r4, #12]
 80089e6:	07db      	lsls	r3, r3, #31
 80089e8:	d507      	bpl.n	80089fa <__swbuf_r+0x76>
 80089ea:	2e0a      	cmp	r6, #10
 80089ec:	d105      	bne.n	80089fa <__swbuf_r+0x76>
 80089ee:	0021      	movs	r1, r4
 80089f0:	0028      	movs	r0, r5
 80089f2:	f000 f937 	bl	8008c64 <_fflush_r>
 80089f6:	2800      	cmp	r0, #0
 80089f8:	d111      	bne.n	8008a1e <__swbuf_r+0x9a>
 80089fa:	0030      	movs	r0, r6
 80089fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089fe:	4b0a      	ldr	r3, [pc, #40]	; (8008a28 <__swbuf_r+0xa4>)
 8008a00:	429c      	cmp	r4, r3
 8008a02:	d101      	bne.n	8008a08 <__swbuf_r+0x84>
 8008a04:	68ac      	ldr	r4, [r5, #8]
 8008a06:	e7cc      	b.n	80089a2 <__swbuf_r+0x1e>
 8008a08:	4b08      	ldr	r3, [pc, #32]	; (8008a2c <__swbuf_r+0xa8>)
 8008a0a:	429c      	cmp	r4, r3
 8008a0c:	d1c9      	bne.n	80089a2 <__swbuf_r+0x1e>
 8008a0e:	68ec      	ldr	r4, [r5, #12]
 8008a10:	e7c7      	b.n	80089a2 <__swbuf_r+0x1e>
 8008a12:	0021      	movs	r1, r4
 8008a14:	0028      	movs	r0, r5
 8008a16:	f000 f819 	bl	8008a4c <__swsetup_r>
 8008a1a:	2800      	cmp	r0, #0
 8008a1c:	d0c9      	beq.n	80089b2 <__swbuf_r+0x2e>
 8008a1e:	2601      	movs	r6, #1
 8008a20:	4276      	negs	r6, r6
 8008a22:	e7ea      	b.n	80089fa <__swbuf_r+0x76>
 8008a24:	0800976c 	.word	0x0800976c
 8008a28:	0800978c 	.word	0x0800978c
 8008a2c:	0800974c 	.word	0x0800974c

08008a30 <__ascii_wctomb>:
 8008a30:	0003      	movs	r3, r0
 8008a32:	1e08      	subs	r0, r1, #0
 8008a34:	d005      	beq.n	8008a42 <__ascii_wctomb+0x12>
 8008a36:	2aff      	cmp	r2, #255	; 0xff
 8008a38:	d904      	bls.n	8008a44 <__ascii_wctomb+0x14>
 8008a3a:	228a      	movs	r2, #138	; 0x8a
 8008a3c:	2001      	movs	r0, #1
 8008a3e:	601a      	str	r2, [r3, #0]
 8008a40:	4240      	negs	r0, r0
 8008a42:	4770      	bx	lr
 8008a44:	2001      	movs	r0, #1
 8008a46:	700a      	strb	r2, [r1, #0]
 8008a48:	e7fb      	b.n	8008a42 <__ascii_wctomb+0x12>
	...

08008a4c <__swsetup_r>:
 8008a4c:	4b37      	ldr	r3, [pc, #220]	; (8008b2c <__swsetup_r+0xe0>)
 8008a4e:	b570      	push	{r4, r5, r6, lr}
 8008a50:	681d      	ldr	r5, [r3, #0]
 8008a52:	0006      	movs	r6, r0
 8008a54:	000c      	movs	r4, r1
 8008a56:	2d00      	cmp	r5, #0
 8008a58:	d005      	beq.n	8008a66 <__swsetup_r+0x1a>
 8008a5a:	69ab      	ldr	r3, [r5, #24]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d102      	bne.n	8008a66 <__swsetup_r+0x1a>
 8008a60:	0028      	movs	r0, r5
 8008a62:	f000 f9a1 	bl	8008da8 <__sinit>
 8008a66:	4b32      	ldr	r3, [pc, #200]	; (8008b30 <__swsetup_r+0xe4>)
 8008a68:	429c      	cmp	r4, r3
 8008a6a:	d10f      	bne.n	8008a8c <__swsetup_r+0x40>
 8008a6c:	686c      	ldr	r4, [r5, #4]
 8008a6e:	230c      	movs	r3, #12
 8008a70:	5ee2      	ldrsh	r2, [r4, r3]
 8008a72:	b293      	uxth	r3, r2
 8008a74:	0711      	lsls	r1, r2, #28
 8008a76:	d42d      	bmi.n	8008ad4 <__swsetup_r+0x88>
 8008a78:	06d9      	lsls	r1, r3, #27
 8008a7a:	d411      	bmi.n	8008aa0 <__swsetup_r+0x54>
 8008a7c:	2309      	movs	r3, #9
 8008a7e:	2001      	movs	r0, #1
 8008a80:	6033      	str	r3, [r6, #0]
 8008a82:	3337      	adds	r3, #55	; 0x37
 8008a84:	4313      	orrs	r3, r2
 8008a86:	81a3      	strh	r3, [r4, #12]
 8008a88:	4240      	negs	r0, r0
 8008a8a:	bd70      	pop	{r4, r5, r6, pc}
 8008a8c:	4b29      	ldr	r3, [pc, #164]	; (8008b34 <__swsetup_r+0xe8>)
 8008a8e:	429c      	cmp	r4, r3
 8008a90:	d101      	bne.n	8008a96 <__swsetup_r+0x4a>
 8008a92:	68ac      	ldr	r4, [r5, #8]
 8008a94:	e7eb      	b.n	8008a6e <__swsetup_r+0x22>
 8008a96:	4b28      	ldr	r3, [pc, #160]	; (8008b38 <__swsetup_r+0xec>)
 8008a98:	429c      	cmp	r4, r3
 8008a9a:	d1e8      	bne.n	8008a6e <__swsetup_r+0x22>
 8008a9c:	68ec      	ldr	r4, [r5, #12]
 8008a9e:	e7e6      	b.n	8008a6e <__swsetup_r+0x22>
 8008aa0:	075b      	lsls	r3, r3, #29
 8008aa2:	d513      	bpl.n	8008acc <__swsetup_r+0x80>
 8008aa4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008aa6:	2900      	cmp	r1, #0
 8008aa8:	d008      	beq.n	8008abc <__swsetup_r+0x70>
 8008aaa:	0023      	movs	r3, r4
 8008aac:	3344      	adds	r3, #68	; 0x44
 8008aae:	4299      	cmp	r1, r3
 8008ab0:	d002      	beq.n	8008ab8 <__swsetup_r+0x6c>
 8008ab2:	0030      	movs	r0, r6
 8008ab4:	f7ff fb1c 	bl	80080f0 <_free_r>
 8008ab8:	2300      	movs	r3, #0
 8008aba:	6363      	str	r3, [r4, #52]	; 0x34
 8008abc:	2224      	movs	r2, #36	; 0x24
 8008abe:	89a3      	ldrh	r3, [r4, #12]
 8008ac0:	4393      	bics	r3, r2
 8008ac2:	81a3      	strh	r3, [r4, #12]
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	6063      	str	r3, [r4, #4]
 8008ac8:	6923      	ldr	r3, [r4, #16]
 8008aca:	6023      	str	r3, [r4, #0]
 8008acc:	2308      	movs	r3, #8
 8008ace:	89a2      	ldrh	r2, [r4, #12]
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	81a3      	strh	r3, [r4, #12]
 8008ad4:	6923      	ldr	r3, [r4, #16]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d10b      	bne.n	8008af2 <__swsetup_r+0xa6>
 8008ada:	21a0      	movs	r1, #160	; 0xa0
 8008adc:	2280      	movs	r2, #128	; 0x80
 8008ade:	89a3      	ldrh	r3, [r4, #12]
 8008ae0:	0089      	lsls	r1, r1, #2
 8008ae2:	0092      	lsls	r2, r2, #2
 8008ae4:	400b      	ands	r3, r1
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d003      	beq.n	8008af2 <__swsetup_r+0xa6>
 8008aea:	0021      	movs	r1, r4
 8008aec:	0030      	movs	r0, r6
 8008aee:	f000 fa27 	bl	8008f40 <__smakebuf_r>
 8008af2:	220c      	movs	r2, #12
 8008af4:	5ea3      	ldrsh	r3, [r4, r2]
 8008af6:	2001      	movs	r0, #1
 8008af8:	001a      	movs	r2, r3
 8008afa:	b299      	uxth	r1, r3
 8008afc:	4002      	ands	r2, r0
 8008afe:	4203      	tst	r3, r0
 8008b00:	d00f      	beq.n	8008b22 <__swsetup_r+0xd6>
 8008b02:	2200      	movs	r2, #0
 8008b04:	60a2      	str	r2, [r4, #8]
 8008b06:	6962      	ldr	r2, [r4, #20]
 8008b08:	4252      	negs	r2, r2
 8008b0a:	61a2      	str	r2, [r4, #24]
 8008b0c:	2000      	movs	r0, #0
 8008b0e:	6922      	ldr	r2, [r4, #16]
 8008b10:	4282      	cmp	r2, r0
 8008b12:	d1ba      	bne.n	8008a8a <__swsetup_r+0x3e>
 8008b14:	060a      	lsls	r2, r1, #24
 8008b16:	d5b8      	bpl.n	8008a8a <__swsetup_r+0x3e>
 8008b18:	2240      	movs	r2, #64	; 0x40
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	81a3      	strh	r3, [r4, #12]
 8008b1e:	3801      	subs	r0, #1
 8008b20:	e7b3      	b.n	8008a8a <__swsetup_r+0x3e>
 8008b22:	0788      	lsls	r0, r1, #30
 8008b24:	d400      	bmi.n	8008b28 <__swsetup_r+0xdc>
 8008b26:	6962      	ldr	r2, [r4, #20]
 8008b28:	60a2      	str	r2, [r4, #8]
 8008b2a:	e7ef      	b.n	8008b0c <__swsetup_r+0xc0>
 8008b2c:	2000000c 	.word	0x2000000c
 8008b30:	0800976c 	.word	0x0800976c
 8008b34:	0800978c 	.word	0x0800978c
 8008b38:	0800974c 	.word	0x0800974c

08008b3c <abort>:
 8008b3c:	2006      	movs	r0, #6
 8008b3e:	b510      	push	{r4, lr}
 8008b40:	f000 fa74 	bl	800902c <raise>
 8008b44:	2001      	movs	r0, #1
 8008b46:	f7fa fae4 	bl	8003112 <_exit>
	...

08008b4c <__sflush_r>:
 8008b4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b4e:	898b      	ldrh	r3, [r1, #12]
 8008b50:	0005      	movs	r5, r0
 8008b52:	000c      	movs	r4, r1
 8008b54:	071a      	lsls	r2, r3, #28
 8008b56:	d45f      	bmi.n	8008c18 <__sflush_r+0xcc>
 8008b58:	684a      	ldr	r2, [r1, #4]
 8008b5a:	2a00      	cmp	r2, #0
 8008b5c:	dc04      	bgt.n	8008b68 <__sflush_r+0x1c>
 8008b5e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8008b60:	2a00      	cmp	r2, #0
 8008b62:	dc01      	bgt.n	8008b68 <__sflush_r+0x1c>
 8008b64:	2000      	movs	r0, #0
 8008b66:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008b68:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008b6a:	2f00      	cmp	r7, #0
 8008b6c:	d0fa      	beq.n	8008b64 <__sflush_r+0x18>
 8008b6e:	2200      	movs	r2, #0
 8008b70:	2180      	movs	r1, #128	; 0x80
 8008b72:	682e      	ldr	r6, [r5, #0]
 8008b74:	602a      	str	r2, [r5, #0]
 8008b76:	001a      	movs	r2, r3
 8008b78:	0149      	lsls	r1, r1, #5
 8008b7a:	400a      	ands	r2, r1
 8008b7c:	420b      	tst	r3, r1
 8008b7e:	d034      	beq.n	8008bea <__sflush_r+0x9e>
 8008b80:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b82:	89a3      	ldrh	r3, [r4, #12]
 8008b84:	075b      	lsls	r3, r3, #29
 8008b86:	d506      	bpl.n	8008b96 <__sflush_r+0x4a>
 8008b88:	6863      	ldr	r3, [r4, #4]
 8008b8a:	1ac0      	subs	r0, r0, r3
 8008b8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d001      	beq.n	8008b96 <__sflush_r+0x4a>
 8008b92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b94:	1ac0      	subs	r0, r0, r3
 8008b96:	0002      	movs	r2, r0
 8008b98:	6a21      	ldr	r1, [r4, #32]
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	0028      	movs	r0, r5
 8008b9e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008ba0:	47b8      	blx	r7
 8008ba2:	89a1      	ldrh	r1, [r4, #12]
 8008ba4:	1c43      	adds	r3, r0, #1
 8008ba6:	d106      	bne.n	8008bb6 <__sflush_r+0x6a>
 8008ba8:	682b      	ldr	r3, [r5, #0]
 8008baa:	2b1d      	cmp	r3, #29
 8008bac:	d831      	bhi.n	8008c12 <__sflush_r+0xc6>
 8008bae:	4a2c      	ldr	r2, [pc, #176]	; (8008c60 <__sflush_r+0x114>)
 8008bb0:	40da      	lsrs	r2, r3
 8008bb2:	07d3      	lsls	r3, r2, #31
 8008bb4:	d52d      	bpl.n	8008c12 <__sflush_r+0xc6>
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	6063      	str	r3, [r4, #4]
 8008bba:	6923      	ldr	r3, [r4, #16]
 8008bbc:	6023      	str	r3, [r4, #0]
 8008bbe:	04cb      	lsls	r3, r1, #19
 8008bc0:	d505      	bpl.n	8008bce <__sflush_r+0x82>
 8008bc2:	1c43      	adds	r3, r0, #1
 8008bc4:	d102      	bne.n	8008bcc <__sflush_r+0x80>
 8008bc6:	682b      	ldr	r3, [r5, #0]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d100      	bne.n	8008bce <__sflush_r+0x82>
 8008bcc:	6560      	str	r0, [r4, #84]	; 0x54
 8008bce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bd0:	602e      	str	r6, [r5, #0]
 8008bd2:	2900      	cmp	r1, #0
 8008bd4:	d0c6      	beq.n	8008b64 <__sflush_r+0x18>
 8008bd6:	0023      	movs	r3, r4
 8008bd8:	3344      	adds	r3, #68	; 0x44
 8008bda:	4299      	cmp	r1, r3
 8008bdc:	d002      	beq.n	8008be4 <__sflush_r+0x98>
 8008bde:	0028      	movs	r0, r5
 8008be0:	f7ff fa86 	bl	80080f0 <_free_r>
 8008be4:	2000      	movs	r0, #0
 8008be6:	6360      	str	r0, [r4, #52]	; 0x34
 8008be8:	e7bd      	b.n	8008b66 <__sflush_r+0x1a>
 8008bea:	2301      	movs	r3, #1
 8008bec:	0028      	movs	r0, r5
 8008bee:	6a21      	ldr	r1, [r4, #32]
 8008bf0:	47b8      	blx	r7
 8008bf2:	1c43      	adds	r3, r0, #1
 8008bf4:	d1c5      	bne.n	8008b82 <__sflush_r+0x36>
 8008bf6:	682b      	ldr	r3, [r5, #0]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d0c2      	beq.n	8008b82 <__sflush_r+0x36>
 8008bfc:	2b1d      	cmp	r3, #29
 8008bfe:	d001      	beq.n	8008c04 <__sflush_r+0xb8>
 8008c00:	2b16      	cmp	r3, #22
 8008c02:	d101      	bne.n	8008c08 <__sflush_r+0xbc>
 8008c04:	602e      	str	r6, [r5, #0]
 8008c06:	e7ad      	b.n	8008b64 <__sflush_r+0x18>
 8008c08:	2340      	movs	r3, #64	; 0x40
 8008c0a:	89a2      	ldrh	r2, [r4, #12]
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	81a3      	strh	r3, [r4, #12]
 8008c10:	e7a9      	b.n	8008b66 <__sflush_r+0x1a>
 8008c12:	2340      	movs	r3, #64	; 0x40
 8008c14:	430b      	orrs	r3, r1
 8008c16:	e7fa      	b.n	8008c0e <__sflush_r+0xc2>
 8008c18:	690f      	ldr	r7, [r1, #16]
 8008c1a:	2f00      	cmp	r7, #0
 8008c1c:	d0a2      	beq.n	8008b64 <__sflush_r+0x18>
 8008c1e:	680a      	ldr	r2, [r1, #0]
 8008c20:	600f      	str	r7, [r1, #0]
 8008c22:	1bd2      	subs	r2, r2, r7
 8008c24:	9201      	str	r2, [sp, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	079b      	lsls	r3, r3, #30
 8008c2a:	d100      	bne.n	8008c2e <__sflush_r+0xe2>
 8008c2c:	694a      	ldr	r2, [r1, #20]
 8008c2e:	60a2      	str	r2, [r4, #8]
 8008c30:	9b01      	ldr	r3, [sp, #4]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	dc00      	bgt.n	8008c38 <__sflush_r+0xec>
 8008c36:	e795      	b.n	8008b64 <__sflush_r+0x18>
 8008c38:	003a      	movs	r2, r7
 8008c3a:	0028      	movs	r0, r5
 8008c3c:	9b01      	ldr	r3, [sp, #4]
 8008c3e:	6a21      	ldr	r1, [r4, #32]
 8008c40:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c42:	47b0      	blx	r6
 8008c44:	2800      	cmp	r0, #0
 8008c46:	dc06      	bgt.n	8008c56 <__sflush_r+0x10a>
 8008c48:	2340      	movs	r3, #64	; 0x40
 8008c4a:	2001      	movs	r0, #1
 8008c4c:	89a2      	ldrh	r2, [r4, #12]
 8008c4e:	4240      	negs	r0, r0
 8008c50:	4313      	orrs	r3, r2
 8008c52:	81a3      	strh	r3, [r4, #12]
 8008c54:	e787      	b.n	8008b66 <__sflush_r+0x1a>
 8008c56:	9b01      	ldr	r3, [sp, #4]
 8008c58:	183f      	adds	r7, r7, r0
 8008c5a:	1a1b      	subs	r3, r3, r0
 8008c5c:	9301      	str	r3, [sp, #4]
 8008c5e:	e7e7      	b.n	8008c30 <__sflush_r+0xe4>
 8008c60:	20400001 	.word	0x20400001

08008c64 <_fflush_r>:
 8008c64:	690b      	ldr	r3, [r1, #16]
 8008c66:	b570      	push	{r4, r5, r6, lr}
 8008c68:	0005      	movs	r5, r0
 8008c6a:	000c      	movs	r4, r1
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d102      	bne.n	8008c76 <_fflush_r+0x12>
 8008c70:	2500      	movs	r5, #0
 8008c72:	0028      	movs	r0, r5
 8008c74:	bd70      	pop	{r4, r5, r6, pc}
 8008c76:	2800      	cmp	r0, #0
 8008c78:	d004      	beq.n	8008c84 <_fflush_r+0x20>
 8008c7a:	6983      	ldr	r3, [r0, #24]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d101      	bne.n	8008c84 <_fflush_r+0x20>
 8008c80:	f000 f892 	bl	8008da8 <__sinit>
 8008c84:	4b14      	ldr	r3, [pc, #80]	; (8008cd8 <_fflush_r+0x74>)
 8008c86:	429c      	cmp	r4, r3
 8008c88:	d11b      	bne.n	8008cc2 <_fflush_r+0x5e>
 8008c8a:	686c      	ldr	r4, [r5, #4]
 8008c8c:	220c      	movs	r2, #12
 8008c8e:	5ea3      	ldrsh	r3, [r4, r2]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d0ed      	beq.n	8008c70 <_fflush_r+0xc>
 8008c94:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c96:	07d2      	lsls	r2, r2, #31
 8008c98:	d404      	bmi.n	8008ca4 <_fflush_r+0x40>
 8008c9a:	059b      	lsls	r3, r3, #22
 8008c9c:	d402      	bmi.n	8008ca4 <_fflush_r+0x40>
 8008c9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ca0:	f000 f923 	bl	8008eea <__retarget_lock_acquire_recursive>
 8008ca4:	0028      	movs	r0, r5
 8008ca6:	0021      	movs	r1, r4
 8008ca8:	f7ff ff50 	bl	8008b4c <__sflush_r>
 8008cac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008cae:	0005      	movs	r5, r0
 8008cb0:	07db      	lsls	r3, r3, #31
 8008cb2:	d4de      	bmi.n	8008c72 <_fflush_r+0xe>
 8008cb4:	89a3      	ldrh	r3, [r4, #12]
 8008cb6:	059b      	lsls	r3, r3, #22
 8008cb8:	d4db      	bmi.n	8008c72 <_fflush_r+0xe>
 8008cba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cbc:	f000 f916 	bl	8008eec <__retarget_lock_release_recursive>
 8008cc0:	e7d7      	b.n	8008c72 <_fflush_r+0xe>
 8008cc2:	4b06      	ldr	r3, [pc, #24]	; (8008cdc <_fflush_r+0x78>)
 8008cc4:	429c      	cmp	r4, r3
 8008cc6:	d101      	bne.n	8008ccc <_fflush_r+0x68>
 8008cc8:	68ac      	ldr	r4, [r5, #8]
 8008cca:	e7df      	b.n	8008c8c <_fflush_r+0x28>
 8008ccc:	4b04      	ldr	r3, [pc, #16]	; (8008ce0 <_fflush_r+0x7c>)
 8008cce:	429c      	cmp	r4, r3
 8008cd0:	d1dc      	bne.n	8008c8c <_fflush_r+0x28>
 8008cd2:	68ec      	ldr	r4, [r5, #12]
 8008cd4:	e7da      	b.n	8008c8c <_fflush_r+0x28>
 8008cd6:	46c0      	nop			; (mov r8, r8)
 8008cd8:	0800976c 	.word	0x0800976c
 8008cdc:	0800978c 	.word	0x0800978c
 8008ce0:	0800974c 	.word	0x0800974c

08008ce4 <std>:
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	b510      	push	{r4, lr}
 8008ce8:	0004      	movs	r4, r0
 8008cea:	6003      	str	r3, [r0, #0]
 8008cec:	6043      	str	r3, [r0, #4]
 8008cee:	6083      	str	r3, [r0, #8]
 8008cf0:	8181      	strh	r1, [r0, #12]
 8008cf2:	6643      	str	r3, [r0, #100]	; 0x64
 8008cf4:	0019      	movs	r1, r3
 8008cf6:	81c2      	strh	r2, [r0, #14]
 8008cf8:	6103      	str	r3, [r0, #16]
 8008cfa:	6143      	str	r3, [r0, #20]
 8008cfc:	6183      	str	r3, [r0, #24]
 8008cfe:	2208      	movs	r2, #8
 8008d00:	305c      	adds	r0, #92	; 0x5c
 8008d02:	f7fd facf 	bl	80062a4 <memset>
 8008d06:	4b05      	ldr	r3, [pc, #20]	; (8008d1c <std+0x38>)
 8008d08:	6224      	str	r4, [r4, #32]
 8008d0a:	6263      	str	r3, [r4, #36]	; 0x24
 8008d0c:	4b04      	ldr	r3, [pc, #16]	; (8008d20 <std+0x3c>)
 8008d0e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d10:	4b04      	ldr	r3, [pc, #16]	; (8008d24 <std+0x40>)
 8008d12:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d14:	4b04      	ldr	r3, [pc, #16]	; (8008d28 <std+0x44>)
 8008d16:	6323      	str	r3, [r4, #48]	; 0x30
 8008d18:	bd10      	pop	{r4, pc}
 8008d1a:	46c0      	nop			; (mov r8, r8)
 8008d1c:	0800906d 	.word	0x0800906d
 8008d20:	08009095 	.word	0x08009095
 8008d24:	080090cd 	.word	0x080090cd
 8008d28:	080090f9 	.word	0x080090f9

08008d2c <_cleanup_r>:
 8008d2c:	b510      	push	{r4, lr}
 8008d2e:	4902      	ldr	r1, [pc, #8]	; (8008d38 <_cleanup_r+0xc>)
 8008d30:	f000 f8ba 	bl	8008ea8 <_fwalk_reent>
 8008d34:	bd10      	pop	{r4, pc}
 8008d36:	46c0      	nop			; (mov r8, r8)
 8008d38:	08008c65 	.word	0x08008c65

08008d3c <__sfmoreglue>:
 8008d3c:	b570      	push	{r4, r5, r6, lr}
 8008d3e:	2568      	movs	r5, #104	; 0x68
 8008d40:	1e4a      	subs	r2, r1, #1
 8008d42:	4355      	muls	r5, r2
 8008d44:	000e      	movs	r6, r1
 8008d46:	0029      	movs	r1, r5
 8008d48:	3174      	adds	r1, #116	; 0x74
 8008d4a:	f7ff fa3d 	bl	80081c8 <_malloc_r>
 8008d4e:	1e04      	subs	r4, r0, #0
 8008d50:	d008      	beq.n	8008d64 <__sfmoreglue+0x28>
 8008d52:	2100      	movs	r1, #0
 8008d54:	002a      	movs	r2, r5
 8008d56:	6001      	str	r1, [r0, #0]
 8008d58:	6046      	str	r6, [r0, #4]
 8008d5a:	300c      	adds	r0, #12
 8008d5c:	60a0      	str	r0, [r4, #8]
 8008d5e:	3268      	adds	r2, #104	; 0x68
 8008d60:	f7fd faa0 	bl	80062a4 <memset>
 8008d64:	0020      	movs	r0, r4
 8008d66:	bd70      	pop	{r4, r5, r6, pc}

08008d68 <__sfp_lock_acquire>:
 8008d68:	b510      	push	{r4, lr}
 8008d6a:	4802      	ldr	r0, [pc, #8]	; (8008d74 <__sfp_lock_acquire+0xc>)
 8008d6c:	f000 f8bd 	bl	8008eea <__retarget_lock_acquire_recursive>
 8008d70:	bd10      	pop	{r4, pc}
 8008d72:	46c0      	nop			; (mov r8, r8)
 8008d74:	20000705 	.word	0x20000705

08008d78 <__sfp_lock_release>:
 8008d78:	b510      	push	{r4, lr}
 8008d7a:	4802      	ldr	r0, [pc, #8]	; (8008d84 <__sfp_lock_release+0xc>)
 8008d7c:	f000 f8b6 	bl	8008eec <__retarget_lock_release_recursive>
 8008d80:	bd10      	pop	{r4, pc}
 8008d82:	46c0      	nop			; (mov r8, r8)
 8008d84:	20000705 	.word	0x20000705

08008d88 <__sinit_lock_acquire>:
 8008d88:	b510      	push	{r4, lr}
 8008d8a:	4802      	ldr	r0, [pc, #8]	; (8008d94 <__sinit_lock_acquire+0xc>)
 8008d8c:	f000 f8ad 	bl	8008eea <__retarget_lock_acquire_recursive>
 8008d90:	bd10      	pop	{r4, pc}
 8008d92:	46c0      	nop			; (mov r8, r8)
 8008d94:	20000706 	.word	0x20000706

08008d98 <__sinit_lock_release>:
 8008d98:	b510      	push	{r4, lr}
 8008d9a:	4802      	ldr	r0, [pc, #8]	; (8008da4 <__sinit_lock_release+0xc>)
 8008d9c:	f000 f8a6 	bl	8008eec <__retarget_lock_release_recursive>
 8008da0:	bd10      	pop	{r4, pc}
 8008da2:	46c0      	nop			; (mov r8, r8)
 8008da4:	20000706 	.word	0x20000706

08008da8 <__sinit>:
 8008da8:	b513      	push	{r0, r1, r4, lr}
 8008daa:	0004      	movs	r4, r0
 8008dac:	f7ff ffec 	bl	8008d88 <__sinit_lock_acquire>
 8008db0:	69a3      	ldr	r3, [r4, #24]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d002      	beq.n	8008dbc <__sinit+0x14>
 8008db6:	f7ff ffef 	bl	8008d98 <__sinit_lock_release>
 8008dba:	bd13      	pop	{r0, r1, r4, pc}
 8008dbc:	64a3      	str	r3, [r4, #72]	; 0x48
 8008dbe:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008dc0:	6523      	str	r3, [r4, #80]	; 0x50
 8008dc2:	4b13      	ldr	r3, [pc, #76]	; (8008e10 <__sinit+0x68>)
 8008dc4:	4a13      	ldr	r2, [pc, #76]	; (8008e14 <__sinit+0x6c>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	62a2      	str	r2, [r4, #40]	; 0x28
 8008dca:	9301      	str	r3, [sp, #4]
 8008dcc:	42a3      	cmp	r3, r4
 8008dce:	d101      	bne.n	8008dd4 <__sinit+0x2c>
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	61a3      	str	r3, [r4, #24]
 8008dd4:	0020      	movs	r0, r4
 8008dd6:	f000 f81f 	bl	8008e18 <__sfp>
 8008dda:	6060      	str	r0, [r4, #4]
 8008ddc:	0020      	movs	r0, r4
 8008dde:	f000 f81b 	bl	8008e18 <__sfp>
 8008de2:	60a0      	str	r0, [r4, #8]
 8008de4:	0020      	movs	r0, r4
 8008de6:	f000 f817 	bl	8008e18 <__sfp>
 8008dea:	2200      	movs	r2, #0
 8008dec:	2104      	movs	r1, #4
 8008dee:	60e0      	str	r0, [r4, #12]
 8008df0:	6860      	ldr	r0, [r4, #4]
 8008df2:	f7ff ff77 	bl	8008ce4 <std>
 8008df6:	2201      	movs	r2, #1
 8008df8:	2109      	movs	r1, #9
 8008dfa:	68a0      	ldr	r0, [r4, #8]
 8008dfc:	f7ff ff72 	bl	8008ce4 <std>
 8008e00:	2202      	movs	r2, #2
 8008e02:	2112      	movs	r1, #18
 8008e04:	68e0      	ldr	r0, [r4, #12]
 8008e06:	f7ff ff6d 	bl	8008ce4 <std>
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	61a3      	str	r3, [r4, #24]
 8008e0e:	e7d2      	b.n	8008db6 <__sinit+0xe>
 8008e10:	080093d4 	.word	0x080093d4
 8008e14:	08008d2d 	.word	0x08008d2d

08008e18 <__sfp>:
 8008e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e1a:	0007      	movs	r7, r0
 8008e1c:	f7ff ffa4 	bl	8008d68 <__sfp_lock_acquire>
 8008e20:	4b1f      	ldr	r3, [pc, #124]	; (8008ea0 <__sfp+0x88>)
 8008e22:	681e      	ldr	r6, [r3, #0]
 8008e24:	69b3      	ldr	r3, [r6, #24]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d102      	bne.n	8008e30 <__sfp+0x18>
 8008e2a:	0030      	movs	r0, r6
 8008e2c:	f7ff ffbc 	bl	8008da8 <__sinit>
 8008e30:	3648      	adds	r6, #72	; 0x48
 8008e32:	68b4      	ldr	r4, [r6, #8]
 8008e34:	6873      	ldr	r3, [r6, #4]
 8008e36:	3b01      	subs	r3, #1
 8008e38:	d504      	bpl.n	8008e44 <__sfp+0x2c>
 8008e3a:	6833      	ldr	r3, [r6, #0]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d022      	beq.n	8008e86 <__sfp+0x6e>
 8008e40:	6836      	ldr	r6, [r6, #0]
 8008e42:	e7f6      	b.n	8008e32 <__sfp+0x1a>
 8008e44:	220c      	movs	r2, #12
 8008e46:	5ea5      	ldrsh	r5, [r4, r2]
 8008e48:	2d00      	cmp	r5, #0
 8008e4a:	d11a      	bne.n	8008e82 <__sfp+0x6a>
 8008e4c:	0020      	movs	r0, r4
 8008e4e:	4b15      	ldr	r3, [pc, #84]	; (8008ea4 <__sfp+0x8c>)
 8008e50:	3058      	adds	r0, #88	; 0x58
 8008e52:	60e3      	str	r3, [r4, #12]
 8008e54:	6665      	str	r5, [r4, #100]	; 0x64
 8008e56:	f000 f847 	bl	8008ee8 <__retarget_lock_init_recursive>
 8008e5a:	f7ff ff8d 	bl	8008d78 <__sfp_lock_release>
 8008e5e:	0020      	movs	r0, r4
 8008e60:	2208      	movs	r2, #8
 8008e62:	0029      	movs	r1, r5
 8008e64:	6025      	str	r5, [r4, #0]
 8008e66:	60a5      	str	r5, [r4, #8]
 8008e68:	6065      	str	r5, [r4, #4]
 8008e6a:	6125      	str	r5, [r4, #16]
 8008e6c:	6165      	str	r5, [r4, #20]
 8008e6e:	61a5      	str	r5, [r4, #24]
 8008e70:	305c      	adds	r0, #92	; 0x5c
 8008e72:	f7fd fa17 	bl	80062a4 <memset>
 8008e76:	6365      	str	r5, [r4, #52]	; 0x34
 8008e78:	63a5      	str	r5, [r4, #56]	; 0x38
 8008e7a:	64a5      	str	r5, [r4, #72]	; 0x48
 8008e7c:	64e5      	str	r5, [r4, #76]	; 0x4c
 8008e7e:	0020      	movs	r0, r4
 8008e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e82:	3468      	adds	r4, #104	; 0x68
 8008e84:	e7d7      	b.n	8008e36 <__sfp+0x1e>
 8008e86:	2104      	movs	r1, #4
 8008e88:	0038      	movs	r0, r7
 8008e8a:	f7ff ff57 	bl	8008d3c <__sfmoreglue>
 8008e8e:	1e04      	subs	r4, r0, #0
 8008e90:	6030      	str	r0, [r6, #0]
 8008e92:	d1d5      	bne.n	8008e40 <__sfp+0x28>
 8008e94:	f7ff ff70 	bl	8008d78 <__sfp_lock_release>
 8008e98:	230c      	movs	r3, #12
 8008e9a:	603b      	str	r3, [r7, #0]
 8008e9c:	e7ef      	b.n	8008e7e <__sfp+0x66>
 8008e9e:	46c0      	nop			; (mov r8, r8)
 8008ea0:	080093d4 	.word	0x080093d4
 8008ea4:	ffff0001 	.word	0xffff0001

08008ea8 <_fwalk_reent>:
 8008ea8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008eaa:	0004      	movs	r4, r0
 8008eac:	0006      	movs	r6, r0
 8008eae:	2700      	movs	r7, #0
 8008eb0:	9101      	str	r1, [sp, #4]
 8008eb2:	3448      	adds	r4, #72	; 0x48
 8008eb4:	6863      	ldr	r3, [r4, #4]
 8008eb6:	68a5      	ldr	r5, [r4, #8]
 8008eb8:	9300      	str	r3, [sp, #0]
 8008eba:	9b00      	ldr	r3, [sp, #0]
 8008ebc:	3b01      	subs	r3, #1
 8008ebe:	9300      	str	r3, [sp, #0]
 8008ec0:	d504      	bpl.n	8008ecc <_fwalk_reent+0x24>
 8008ec2:	6824      	ldr	r4, [r4, #0]
 8008ec4:	2c00      	cmp	r4, #0
 8008ec6:	d1f5      	bne.n	8008eb4 <_fwalk_reent+0xc>
 8008ec8:	0038      	movs	r0, r7
 8008eca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008ecc:	89ab      	ldrh	r3, [r5, #12]
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	d908      	bls.n	8008ee4 <_fwalk_reent+0x3c>
 8008ed2:	220e      	movs	r2, #14
 8008ed4:	5eab      	ldrsh	r3, [r5, r2]
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	d004      	beq.n	8008ee4 <_fwalk_reent+0x3c>
 8008eda:	0029      	movs	r1, r5
 8008edc:	0030      	movs	r0, r6
 8008ede:	9b01      	ldr	r3, [sp, #4]
 8008ee0:	4798      	blx	r3
 8008ee2:	4307      	orrs	r7, r0
 8008ee4:	3568      	adds	r5, #104	; 0x68
 8008ee6:	e7e8      	b.n	8008eba <_fwalk_reent+0x12>

08008ee8 <__retarget_lock_init_recursive>:
 8008ee8:	4770      	bx	lr

08008eea <__retarget_lock_acquire_recursive>:
 8008eea:	4770      	bx	lr

08008eec <__retarget_lock_release_recursive>:
 8008eec:	4770      	bx	lr
	...

08008ef0 <__swhatbuf_r>:
 8008ef0:	b570      	push	{r4, r5, r6, lr}
 8008ef2:	000e      	movs	r6, r1
 8008ef4:	001d      	movs	r5, r3
 8008ef6:	230e      	movs	r3, #14
 8008ef8:	5ec9      	ldrsh	r1, [r1, r3]
 8008efa:	0014      	movs	r4, r2
 8008efc:	b096      	sub	sp, #88	; 0x58
 8008efe:	2900      	cmp	r1, #0
 8008f00:	da08      	bge.n	8008f14 <__swhatbuf_r+0x24>
 8008f02:	220c      	movs	r2, #12
 8008f04:	5eb3      	ldrsh	r3, [r6, r2]
 8008f06:	2200      	movs	r2, #0
 8008f08:	602a      	str	r2, [r5, #0]
 8008f0a:	061b      	lsls	r3, r3, #24
 8008f0c:	d411      	bmi.n	8008f32 <__swhatbuf_r+0x42>
 8008f0e:	2380      	movs	r3, #128	; 0x80
 8008f10:	00db      	lsls	r3, r3, #3
 8008f12:	e00f      	b.n	8008f34 <__swhatbuf_r+0x44>
 8008f14:	466a      	mov	r2, sp
 8008f16:	f000 f91b 	bl	8009150 <_fstat_r>
 8008f1a:	2800      	cmp	r0, #0
 8008f1c:	dbf1      	blt.n	8008f02 <__swhatbuf_r+0x12>
 8008f1e:	23f0      	movs	r3, #240	; 0xf0
 8008f20:	9901      	ldr	r1, [sp, #4]
 8008f22:	021b      	lsls	r3, r3, #8
 8008f24:	4019      	ands	r1, r3
 8008f26:	4b05      	ldr	r3, [pc, #20]	; (8008f3c <__swhatbuf_r+0x4c>)
 8008f28:	18c9      	adds	r1, r1, r3
 8008f2a:	424b      	negs	r3, r1
 8008f2c:	4159      	adcs	r1, r3
 8008f2e:	6029      	str	r1, [r5, #0]
 8008f30:	e7ed      	b.n	8008f0e <__swhatbuf_r+0x1e>
 8008f32:	2340      	movs	r3, #64	; 0x40
 8008f34:	2000      	movs	r0, #0
 8008f36:	6023      	str	r3, [r4, #0]
 8008f38:	b016      	add	sp, #88	; 0x58
 8008f3a:	bd70      	pop	{r4, r5, r6, pc}
 8008f3c:	ffffe000 	.word	0xffffe000

08008f40 <__smakebuf_r>:
 8008f40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f42:	2602      	movs	r6, #2
 8008f44:	898b      	ldrh	r3, [r1, #12]
 8008f46:	0005      	movs	r5, r0
 8008f48:	000c      	movs	r4, r1
 8008f4a:	4233      	tst	r3, r6
 8008f4c:	d006      	beq.n	8008f5c <__smakebuf_r+0x1c>
 8008f4e:	0023      	movs	r3, r4
 8008f50:	3347      	adds	r3, #71	; 0x47
 8008f52:	6023      	str	r3, [r4, #0]
 8008f54:	6123      	str	r3, [r4, #16]
 8008f56:	2301      	movs	r3, #1
 8008f58:	6163      	str	r3, [r4, #20]
 8008f5a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008f5c:	466a      	mov	r2, sp
 8008f5e:	ab01      	add	r3, sp, #4
 8008f60:	f7ff ffc6 	bl	8008ef0 <__swhatbuf_r>
 8008f64:	9900      	ldr	r1, [sp, #0]
 8008f66:	0007      	movs	r7, r0
 8008f68:	0028      	movs	r0, r5
 8008f6a:	f7ff f92d 	bl	80081c8 <_malloc_r>
 8008f6e:	2800      	cmp	r0, #0
 8008f70:	d108      	bne.n	8008f84 <__smakebuf_r+0x44>
 8008f72:	220c      	movs	r2, #12
 8008f74:	5ea3      	ldrsh	r3, [r4, r2]
 8008f76:	059a      	lsls	r2, r3, #22
 8008f78:	d4ef      	bmi.n	8008f5a <__smakebuf_r+0x1a>
 8008f7a:	2203      	movs	r2, #3
 8008f7c:	4393      	bics	r3, r2
 8008f7e:	431e      	orrs	r6, r3
 8008f80:	81a6      	strh	r6, [r4, #12]
 8008f82:	e7e4      	b.n	8008f4e <__smakebuf_r+0xe>
 8008f84:	4b0f      	ldr	r3, [pc, #60]	; (8008fc4 <__smakebuf_r+0x84>)
 8008f86:	62ab      	str	r3, [r5, #40]	; 0x28
 8008f88:	2380      	movs	r3, #128	; 0x80
 8008f8a:	89a2      	ldrh	r2, [r4, #12]
 8008f8c:	6020      	str	r0, [r4, #0]
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	81a3      	strh	r3, [r4, #12]
 8008f92:	9b00      	ldr	r3, [sp, #0]
 8008f94:	6120      	str	r0, [r4, #16]
 8008f96:	6163      	str	r3, [r4, #20]
 8008f98:	9b01      	ldr	r3, [sp, #4]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d00d      	beq.n	8008fba <__smakebuf_r+0x7a>
 8008f9e:	0028      	movs	r0, r5
 8008fa0:	230e      	movs	r3, #14
 8008fa2:	5ee1      	ldrsh	r1, [r4, r3]
 8008fa4:	f000 f8e6 	bl	8009174 <_isatty_r>
 8008fa8:	2800      	cmp	r0, #0
 8008faa:	d006      	beq.n	8008fba <__smakebuf_r+0x7a>
 8008fac:	2203      	movs	r2, #3
 8008fae:	89a3      	ldrh	r3, [r4, #12]
 8008fb0:	4393      	bics	r3, r2
 8008fb2:	001a      	movs	r2, r3
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	81a3      	strh	r3, [r4, #12]
 8008fba:	89a0      	ldrh	r0, [r4, #12]
 8008fbc:	4307      	orrs	r7, r0
 8008fbe:	81a7      	strh	r7, [r4, #12]
 8008fc0:	e7cb      	b.n	8008f5a <__smakebuf_r+0x1a>
 8008fc2:	46c0      	nop			; (mov r8, r8)
 8008fc4:	08008d2d 	.word	0x08008d2d

08008fc8 <_malloc_usable_size_r>:
 8008fc8:	1f0b      	subs	r3, r1, #4
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	1f18      	subs	r0, r3, #4
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	da01      	bge.n	8008fd6 <_malloc_usable_size_r+0xe>
 8008fd2:	580b      	ldr	r3, [r1, r0]
 8008fd4:	18c0      	adds	r0, r0, r3
 8008fd6:	4770      	bx	lr

08008fd8 <_raise_r>:
 8008fd8:	b570      	push	{r4, r5, r6, lr}
 8008fda:	0004      	movs	r4, r0
 8008fdc:	000d      	movs	r5, r1
 8008fde:	291f      	cmp	r1, #31
 8008fe0:	d904      	bls.n	8008fec <_raise_r+0x14>
 8008fe2:	2316      	movs	r3, #22
 8008fe4:	6003      	str	r3, [r0, #0]
 8008fe6:	2001      	movs	r0, #1
 8008fe8:	4240      	negs	r0, r0
 8008fea:	bd70      	pop	{r4, r5, r6, pc}
 8008fec:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d004      	beq.n	8008ffc <_raise_r+0x24>
 8008ff2:	008a      	lsls	r2, r1, #2
 8008ff4:	189b      	adds	r3, r3, r2
 8008ff6:	681a      	ldr	r2, [r3, #0]
 8008ff8:	2a00      	cmp	r2, #0
 8008ffa:	d108      	bne.n	800900e <_raise_r+0x36>
 8008ffc:	0020      	movs	r0, r4
 8008ffe:	f000 f831 	bl	8009064 <_getpid_r>
 8009002:	002a      	movs	r2, r5
 8009004:	0001      	movs	r1, r0
 8009006:	0020      	movs	r0, r4
 8009008:	f000 f81a 	bl	8009040 <_kill_r>
 800900c:	e7ed      	b.n	8008fea <_raise_r+0x12>
 800900e:	2000      	movs	r0, #0
 8009010:	2a01      	cmp	r2, #1
 8009012:	d0ea      	beq.n	8008fea <_raise_r+0x12>
 8009014:	1c51      	adds	r1, r2, #1
 8009016:	d103      	bne.n	8009020 <_raise_r+0x48>
 8009018:	2316      	movs	r3, #22
 800901a:	3001      	adds	r0, #1
 800901c:	6023      	str	r3, [r4, #0]
 800901e:	e7e4      	b.n	8008fea <_raise_r+0x12>
 8009020:	2400      	movs	r4, #0
 8009022:	0028      	movs	r0, r5
 8009024:	601c      	str	r4, [r3, #0]
 8009026:	4790      	blx	r2
 8009028:	0020      	movs	r0, r4
 800902a:	e7de      	b.n	8008fea <_raise_r+0x12>

0800902c <raise>:
 800902c:	b510      	push	{r4, lr}
 800902e:	4b03      	ldr	r3, [pc, #12]	; (800903c <raise+0x10>)
 8009030:	0001      	movs	r1, r0
 8009032:	6818      	ldr	r0, [r3, #0]
 8009034:	f7ff ffd0 	bl	8008fd8 <_raise_r>
 8009038:	bd10      	pop	{r4, pc}
 800903a:	46c0      	nop			; (mov r8, r8)
 800903c:	2000000c 	.word	0x2000000c

08009040 <_kill_r>:
 8009040:	2300      	movs	r3, #0
 8009042:	b570      	push	{r4, r5, r6, lr}
 8009044:	4d06      	ldr	r5, [pc, #24]	; (8009060 <_kill_r+0x20>)
 8009046:	0004      	movs	r4, r0
 8009048:	0008      	movs	r0, r1
 800904a:	0011      	movs	r1, r2
 800904c:	602b      	str	r3, [r5, #0]
 800904e:	f7fa f850 	bl	80030f2 <_kill>
 8009052:	1c43      	adds	r3, r0, #1
 8009054:	d103      	bne.n	800905e <_kill_r+0x1e>
 8009056:	682b      	ldr	r3, [r5, #0]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d000      	beq.n	800905e <_kill_r+0x1e>
 800905c:	6023      	str	r3, [r4, #0]
 800905e:	bd70      	pop	{r4, r5, r6, pc}
 8009060:	20000700 	.word	0x20000700

08009064 <_getpid_r>:
 8009064:	b510      	push	{r4, lr}
 8009066:	f7fa f83e 	bl	80030e6 <_getpid>
 800906a:	bd10      	pop	{r4, pc}

0800906c <__sread>:
 800906c:	b570      	push	{r4, r5, r6, lr}
 800906e:	000c      	movs	r4, r1
 8009070:	250e      	movs	r5, #14
 8009072:	5f49      	ldrsh	r1, [r1, r5]
 8009074:	f000 f8a4 	bl	80091c0 <_read_r>
 8009078:	2800      	cmp	r0, #0
 800907a:	db03      	blt.n	8009084 <__sread+0x18>
 800907c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800907e:	181b      	adds	r3, r3, r0
 8009080:	6563      	str	r3, [r4, #84]	; 0x54
 8009082:	bd70      	pop	{r4, r5, r6, pc}
 8009084:	89a3      	ldrh	r3, [r4, #12]
 8009086:	4a02      	ldr	r2, [pc, #8]	; (8009090 <__sread+0x24>)
 8009088:	4013      	ands	r3, r2
 800908a:	81a3      	strh	r3, [r4, #12]
 800908c:	e7f9      	b.n	8009082 <__sread+0x16>
 800908e:	46c0      	nop			; (mov r8, r8)
 8009090:	ffffefff 	.word	0xffffefff

08009094 <__swrite>:
 8009094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009096:	001f      	movs	r7, r3
 8009098:	898b      	ldrh	r3, [r1, #12]
 800909a:	0005      	movs	r5, r0
 800909c:	000c      	movs	r4, r1
 800909e:	0016      	movs	r6, r2
 80090a0:	05db      	lsls	r3, r3, #23
 80090a2:	d505      	bpl.n	80090b0 <__swrite+0x1c>
 80090a4:	230e      	movs	r3, #14
 80090a6:	5ec9      	ldrsh	r1, [r1, r3]
 80090a8:	2200      	movs	r2, #0
 80090aa:	2302      	movs	r3, #2
 80090ac:	f000 f874 	bl	8009198 <_lseek_r>
 80090b0:	89a3      	ldrh	r3, [r4, #12]
 80090b2:	4a05      	ldr	r2, [pc, #20]	; (80090c8 <__swrite+0x34>)
 80090b4:	0028      	movs	r0, r5
 80090b6:	4013      	ands	r3, r2
 80090b8:	81a3      	strh	r3, [r4, #12]
 80090ba:	0032      	movs	r2, r6
 80090bc:	230e      	movs	r3, #14
 80090be:	5ee1      	ldrsh	r1, [r4, r3]
 80090c0:	003b      	movs	r3, r7
 80090c2:	f000 f81f 	bl	8009104 <_write_r>
 80090c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090c8:	ffffefff 	.word	0xffffefff

080090cc <__sseek>:
 80090cc:	b570      	push	{r4, r5, r6, lr}
 80090ce:	000c      	movs	r4, r1
 80090d0:	250e      	movs	r5, #14
 80090d2:	5f49      	ldrsh	r1, [r1, r5]
 80090d4:	f000 f860 	bl	8009198 <_lseek_r>
 80090d8:	89a3      	ldrh	r3, [r4, #12]
 80090da:	1c42      	adds	r2, r0, #1
 80090dc:	d103      	bne.n	80090e6 <__sseek+0x1a>
 80090de:	4a05      	ldr	r2, [pc, #20]	; (80090f4 <__sseek+0x28>)
 80090e0:	4013      	ands	r3, r2
 80090e2:	81a3      	strh	r3, [r4, #12]
 80090e4:	bd70      	pop	{r4, r5, r6, pc}
 80090e6:	2280      	movs	r2, #128	; 0x80
 80090e8:	0152      	lsls	r2, r2, #5
 80090ea:	4313      	orrs	r3, r2
 80090ec:	81a3      	strh	r3, [r4, #12]
 80090ee:	6560      	str	r0, [r4, #84]	; 0x54
 80090f0:	e7f8      	b.n	80090e4 <__sseek+0x18>
 80090f2:	46c0      	nop			; (mov r8, r8)
 80090f4:	ffffefff 	.word	0xffffefff

080090f8 <__sclose>:
 80090f8:	b510      	push	{r4, lr}
 80090fa:	230e      	movs	r3, #14
 80090fc:	5ec9      	ldrsh	r1, [r1, r3]
 80090fe:	f000 f815 	bl	800912c <_close_r>
 8009102:	bd10      	pop	{r4, pc}

08009104 <_write_r>:
 8009104:	b570      	push	{r4, r5, r6, lr}
 8009106:	0004      	movs	r4, r0
 8009108:	0008      	movs	r0, r1
 800910a:	0011      	movs	r1, r2
 800910c:	001a      	movs	r2, r3
 800910e:	2300      	movs	r3, #0
 8009110:	4d05      	ldr	r5, [pc, #20]	; (8009128 <_write_r+0x24>)
 8009112:	602b      	str	r3, [r5, #0]
 8009114:	f7fa f826 	bl	8003164 <_write>
 8009118:	1c43      	adds	r3, r0, #1
 800911a:	d103      	bne.n	8009124 <_write_r+0x20>
 800911c:	682b      	ldr	r3, [r5, #0]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d000      	beq.n	8009124 <_write_r+0x20>
 8009122:	6023      	str	r3, [r4, #0]
 8009124:	bd70      	pop	{r4, r5, r6, pc}
 8009126:	46c0      	nop			; (mov r8, r8)
 8009128:	20000700 	.word	0x20000700

0800912c <_close_r>:
 800912c:	2300      	movs	r3, #0
 800912e:	b570      	push	{r4, r5, r6, lr}
 8009130:	4d06      	ldr	r5, [pc, #24]	; (800914c <_close_r+0x20>)
 8009132:	0004      	movs	r4, r0
 8009134:	0008      	movs	r0, r1
 8009136:	602b      	str	r3, [r5, #0]
 8009138:	f7fa f830 	bl	800319c <_close>
 800913c:	1c43      	adds	r3, r0, #1
 800913e:	d103      	bne.n	8009148 <_close_r+0x1c>
 8009140:	682b      	ldr	r3, [r5, #0]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d000      	beq.n	8009148 <_close_r+0x1c>
 8009146:	6023      	str	r3, [r4, #0]
 8009148:	bd70      	pop	{r4, r5, r6, pc}
 800914a:	46c0      	nop			; (mov r8, r8)
 800914c:	20000700 	.word	0x20000700

08009150 <_fstat_r>:
 8009150:	2300      	movs	r3, #0
 8009152:	b570      	push	{r4, r5, r6, lr}
 8009154:	4d06      	ldr	r5, [pc, #24]	; (8009170 <_fstat_r+0x20>)
 8009156:	0004      	movs	r4, r0
 8009158:	0008      	movs	r0, r1
 800915a:	0011      	movs	r1, r2
 800915c:	602b      	str	r3, [r5, #0]
 800915e:	f7fa f827 	bl	80031b0 <_fstat>
 8009162:	1c43      	adds	r3, r0, #1
 8009164:	d103      	bne.n	800916e <_fstat_r+0x1e>
 8009166:	682b      	ldr	r3, [r5, #0]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d000      	beq.n	800916e <_fstat_r+0x1e>
 800916c:	6023      	str	r3, [r4, #0]
 800916e:	bd70      	pop	{r4, r5, r6, pc}
 8009170:	20000700 	.word	0x20000700

08009174 <_isatty_r>:
 8009174:	2300      	movs	r3, #0
 8009176:	b570      	push	{r4, r5, r6, lr}
 8009178:	4d06      	ldr	r5, [pc, #24]	; (8009194 <_isatty_r+0x20>)
 800917a:	0004      	movs	r4, r0
 800917c:	0008      	movs	r0, r1
 800917e:	602b      	str	r3, [r5, #0]
 8009180:	f7fa f824 	bl	80031cc <_isatty>
 8009184:	1c43      	adds	r3, r0, #1
 8009186:	d103      	bne.n	8009190 <_isatty_r+0x1c>
 8009188:	682b      	ldr	r3, [r5, #0]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d000      	beq.n	8009190 <_isatty_r+0x1c>
 800918e:	6023      	str	r3, [r4, #0]
 8009190:	bd70      	pop	{r4, r5, r6, pc}
 8009192:	46c0      	nop			; (mov r8, r8)
 8009194:	20000700 	.word	0x20000700

08009198 <_lseek_r>:
 8009198:	b570      	push	{r4, r5, r6, lr}
 800919a:	0004      	movs	r4, r0
 800919c:	0008      	movs	r0, r1
 800919e:	0011      	movs	r1, r2
 80091a0:	001a      	movs	r2, r3
 80091a2:	2300      	movs	r3, #0
 80091a4:	4d05      	ldr	r5, [pc, #20]	; (80091bc <_lseek_r+0x24>)
 80091a6:	602b      	str	r3, [r5, #0]
 80091a8:	f7fa f819 	bl	80031de <_lseek>
 80091ac:	1c43      	adds	r3, r0, #1
 80091ae:	d103      	bne.n	80091b8 <_lseek_r+0x20>
 80091b0:	682b      	ldr	r3, [r5, #0]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d000      	beq.n	80091b8 <_lseek_r+0x20>
 80091b6:	6023      	str	r3, [r4, #0]
 80091b8:	bd70      	pop	{r4, r5, r6, pc}
 80091ba:	46c0      	nop			; (mov r8, r8)
 80091bc:	20000700 	.word	0x20000700

080091c0 <_read_r>:
 80091c0:	b570      	push	{r4, r5, r6, lr}
 80091c2:	0004      	movs	r4, r0
 80091c4:	0008      	movs	r0, r1
 80091c6:	0011      	movs	r1, r2
 80091c8:	001a      	movs	r2, r3
 80091ca:	2300      	movs	r3, #0
 80091cc:	4d05      	ldr	r5, [pc, #20]	; (80091e4 <_read_r+0x24>)
 80091ce:	602b      	str	r3, [r5, #0]
 80091d0:	f7f9 ffab 	bl	800312a <_read>
 80091d4:	1c43      	adds	r3, r0, #1
 80091d6:	d103      	bne.n	80091e0 <_read_r+0x20>
 80091d8:	682b      	ldr	r3, [r5, #0]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d000      	beq.n	80091e0 <_read_r+0x20>
 80091de:	6023      	str	r3, [r4, #0]
 80091e0:	bd70      	pop	{r4, r5, r6, pc}
 80091e2:	46c0      	nop			; (mov r8, r8)
 80091e4:	20000700 	.word	0x20000700

080091e8 <_init>:
 80091e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ea:	46c0      	nop			; (mov r8, r8)
 80091ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ee:	bc08      	pop	{r3}
 80091f0:	469e      	mov	lr, r3
 80091f2:	4770      	bx	lr

080091f4 <_fini>:
 80091f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091f6:	46c0      	nop			; (mov r8, r8)
 80091f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091fa:	bc08      	pop	{r3}
 80091fc:	469e      	mov	lr, r3
 80091fe:	4770      	bx	lr
