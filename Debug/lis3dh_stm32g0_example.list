
lis3dh_stm32g0_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009138  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ac  080091f8  080091f8  000191f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097a4  080097a4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080097a4  080097a4  000197a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097ac  080097ac  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097ac  080097ac  000197ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097b0  080097b0  000197b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080097b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000052c  200001dc  08009990  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000708  08009990  00020708  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011cf2  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002681  00000000  00000000  00031ef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef0  00000000  00000000  00034578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd8  00000000  00000000  00035468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d7d  00000000  00000000  00036240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010bb1  00000000  00000000  0004ffbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c014  00000000  00000000  00060b6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fcb82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046e8  00000000  00000000  000fcbd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001dc 	.word	0x200001dc
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080091dc 	.word	0x080091dc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001e0 	.word	0x200001e0
 8000100:	080091dc 	.word	0x080091dc

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f95f 	bl	80016fc <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f8af 	bl	80015ac <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f951 	bl	80016fc <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f947 	bl	80016fc <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f8d7 	bl	8001630 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f8cd 	bl	8001630 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f806 	bl	80004e4 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__udivmoddi4>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	4657      	mov	r7, sl
 80004e8:	464e      	mov	r6, r9
 80004ea:	4645      	mov	r5, r8
 80004ec:	46de      	mov	lr, fp
 80004ee:	b5e0      	push	{r5, r6, r7, lr}
 80004f0:	0004      	movs	r4, r0
 80004f2:	000d      	movs	r5, r1
 80004f4:	4692      	mov	sl, r2
 80004f6:	4699      	mov	r9, r3
 80004f8:	b083      	sub	sp, #12
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d830      	bhi.n	8000560 <__udivmoddi4+0x7c>
 80004fe:	d02d      	beq.n	800055c <__udivmoddi4+0x78>
 8000500:	4649      	mov	r1, r9
 8000502:	4650      	mov	r0, sl
 8000504:	f002 f86c 	bl	80025e0 <__clzdi2>
 8000508:	0029      	movs	r1, r5
 800050a:	0006      	movs	r6, r0
 800050c:	0020      	movs	r0, r4
 800050e:	f002 f867 	bl	80025e0 <__clzdi2>
 8000512:	1a33      	subs	r3, r6, r0
 8000514:	4698      	mov	r8, r3
 8000516:	3b20      	subs	r3, #32
 8000518:	469b      	mov	fp, r3
 800051a:	d433      	bmi.n	8000584 <__udivmoddi4+0xa0>
 800051c:	465a      	mov	r2, fp
 800051e:	4653      	mov	r3, sl
 8000520:	4093      	lsls	r3, r2
 8000522:	4642      	mov	r2, r8
 8000524:	001f      	movs	r7, r3
 8000526:	4653      	mov	r3, sl
 8000528:	4093      	lsls	r3, r2
 800052a:	001e      	movs	r6, r3
 800052c:	42af      	cmp	r7, r5
 800052e:	d83a      	bhi.n	80005a6 <__udivmoddi4+0xc2>
 8000530:	42af      	cmp	r7, r5
 8000532:	d100      	bne.n	8000536 <__udivmoddi4+0x52>
 8000534:	e078      	b.n	8000628 <__udivmoddi4+0x144>
 8000536:	465b      	mov	r3, fp
 8000538:	1ba4      	subs	r4, r4, r6
 800053a:	41bd      	sbcs	r5, r7
 800053c:	2b00      	cmp	r3, #0
 800053e:	da00      	bge.n	8000542 <__udivmoddi4+0x5e>
 8000540:	e075      	b.n	800062e <__udivmoddi4+0x14a>
 8000542:	2200      	movs	r2, #0
 8000544:	2300      	movs	r3, #0
 8000546:	9200      	str	r2, [sp, #0]
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	2301      	movs	r3, #1
 800054c:	465a      	mov	r2, fp
 800054e:	4093      	lsls	r3, r2
 8000550:	9301      	str	r3, [sp, #4]
 8000552:	2301      	movs	r3, #1
 8000554:	4642      	mov	r2, r8
 8000556:	4093      	lsls	r3, r2
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	e028      	b.n	80005ae <__udivmoddi4+0xca>
 800055c:	4282      	cmp	r2, r0
 800055e:	d9cf      	bls.n	8000500 <__udivmoddi4+0x1c>
 8000560:	2200      	movs	r2, #0
 8000562:	2300      	movs	r3, #0
 8000564:	9200      	str	r2, [sp, #0]
 8000566:	9301      	str	r3, [sp, #4]
 8000568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <__udivmoddi4+0x8e>
 800056e:	601c      	str	r4, [r3, #0]
 8000570:	605d      	str	r5, [r3, #4]
 8000572:	9800      	ldr	r0, [sp, #0]
 8000574:	9901      	ldr	r1, [sp, #4]
 8000576:	b003      	add	sp, #12
 8000578:	bcf0      	pop	{r4, r5, r6, r7}
 800057a:	46bb      	mov	fp, r7
 800057c:	46b2      	mov	sl, r6
 800057e:	46a9      	mov	r9, r5
 8000580:	46a0      	mov	r8, r4
 8000582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000584:	4642      	mov	r2, r8
 8000586:	2320      	movs	r3, #32
 8000588:	1a9b      	subs	r3, r3, r2
 800058a:	4652      	mov	r2, sl
 800058c:	40da      	lsrs	r2, r3
 800058e:	4641      	mov	r1, r8
 8000590:	0013      	movs	r3, r2
 8000592:	464a      	mov	r2, r9
 8000594:	408a      	lsls	r2, r1
 8000596:	0017      	movs	r7, r2
 8000598:	4642      	mov	r2, r8
 800059a:	431f      	orrs	r7, r3
 800059c:	4653      	mov	r3, sl
 800059e:	4093      	lsls	r3, r2
 80005a0:	001e      	movs	r6, r3
 80005a2:	42af      	cmp	r7, r5
 80005a4:	d9c4      	bls.n	8000530 <__udivmoddi4+0x4c>
 80005a6:	2200      	movs	r2, #0
 80005a8:	2300      	movs	r3, #0
 80005aa:	9200      	str	r2, [sp, #0]
 80005ac:	9301      	str	r3, [sp, #4]
 80005ae:	4643      	mov	r3, r8
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d0d9      	beq.n	8000568 <__udivmoddi4+0x84>
 80005b4:	07fb      	lsls	r3, r7, #31
 80005b6:	0872      	lsrs	r2, r6, #1
 80005b8:	431a      	orrs	r2, r3
 80005ba:	4646      	mov	r6, r8
 80005bc:	087b      	lsrs	r3, r7, #1
 80005be:	e00e      	b.n	80005de <__udivmoddi4+0xfa>
 80005c0:	42ab      	cmp	r3, r5
 80005c2:	d101      	bne.n	80005c8 <__udivmoddi4+0xe4>
 80005c4:	42a2      	cmp	r2, r4
 80005c6:	d80c      	bhi.n	80005e2 <__udivmoddi4+0xfe>
 80005c8:	1aa4      	subs	r4, r4, r2
 80005ca:	419d      	sbcs	r5, r3
 80005cc:	2001      	movs	r0, #1
 80005ce:	1924      	adds	r4, r4, r4
 80005d0:	416d      	adcs	r5, r5
 80005d2:	2100      	movs	r1, #0
 80005d4:	3e01      	subs	r6, #1
 80005d6:	1824      	adds	r4, r4, r0
 80005d8:	414d      	adcs	r5, r1
 80005da:	2e00      	cmp	r6, #0
 80005dc:	d006      	beq.n	80005ec <__udivmoddi4+0x108>
 80005de:	42ab      	cmp	r3, r5
 80005e0:	d9ee      	bls.n	80005c0 <__udivmoddi4+0xdc>
 80005e2:	3e01      	subs	r6, #1
 80005e4:	1924      	adds	r4, r4, r4
 80005e6:	416d      	adcs	r5, r5
 80005e8:	2e00      	cmp	r6, #0
 80005ea:	d1f8      	bne.n	80005de <__udivmoddi4+0xfa>
 80005ec:	9800      	ldr	r0, [sp, #0]
 80005ee:	9901      	ldr	r1, [sp, #4]
 80005f0:	465b      	mov	r3, fp
 80005f2:	1900      	adds	r0, r0, r4
 80005f4:	4169      	adcs	r1, r5
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	db24      	blt.n	8000644 <__udivmoddi4+0x160>
 80005fa:	002b      	movs	r3, r5
 80005fc:	465a      	mov	r2, fp
 80005fe:	4644      	mov	r4, r8
 8000600:	40d3      	lsrs	r3, r2
 8000602:	002a      	movs	r2, r5
 8000604:	40e2      	lsrs	r2, r4
 8000606:	001c      	movs	r4, r3
 8000608:	465b      	mov	r3, fp
 800060a:	0015      	movs	r5, r2
 800060c:	2b00      	cmp	r3, #0
 800060e:	db2a      	blt.n	8000666 <__udivmoddi4+0x182>
 8000610:	0026      	movs	r6, r4
 8000612:	409e      	lsls	r6, r3
 8000614:	0033      	movs	r3, r6
 8000616:	0026      	movs	r6, r4
 8000618:	4647      	mov	r7, r8
 800061a:	40be      	lsls	r6, r7
 800061c:	0032      	movs	r2, r6
 800061e:	1a80      	subs	r0, r0, r2
 8000620:	4199      	sbcs	r1, r3
 8000622:	9000      	str	r0, [sp, #0]
 8000624:	9101      	str	r1, [sp, #4]
 8000626:	e79f      	b.n	8000568 <__udivmoddi4+0x84>
 8000628:	42a3      	cmp	r3, r4
 800062a:	d8bc      	bhi.n	80005a6 <__udivmoddi4+0xc2>
 800062c:	e783      	b.n	8000536 <__udivmoddi4+0x52>
 800062e:	4642      	mov	r2, r8
 8000630:	2320      	movs	r3, #32
 8000632:	2100      	movs	r1, #0
 8000634:	1a9b      	subs	r3, r3, r2
 8000636:	2200      	movs	r2, #0
 8000638:	9100      	str	r1, [sp, #0]
 800063a:	9201      	str	r2, [sp, #4]
 800063c:	2201      	movs	r2, #1
 800063e:	40da      	lsrs	r2, r3
 8000640:	9201      	str	r2, [sp, #4]
 8000642:	e786      	b.n	8000552 <__udivmoddi4+0x6e>
 8000644:	4642      	mov	r2, r8
 8000646:	2320      	movs	r3, #32
 8000648:	1a9b      	subs	r3, r3, r2
 800064a:	002a      	movs	r2, r5
 800064c:	4646      	mov	r6, r8
 800064e:	409a      	lsls	r2, r3
 8000650:	0023      	movs	r3, r4
 8000652:	40f3      	lsrs	r3, r6
 8000654:	4644      	mov	r4, r8
 8000656:	4313      	orrs	r3, r2
 8000658:	002a      	movs	r2, r5
 800065a:	40e2      	lsrs	r2, r4
 800065c:	001c      	movs	r4, r3
 800065e:	465b      	mov	r3, fp
 8000660:	0015      	movs	r5, r2
 8000662:	2b00      	cmp	r3, #0
 8000664:	dad4      	bge.n	8000610 <__udivmoddi4+0x12c>
 8000666:	4642      	mov	r2, r8
 8000668:	002f      	movs	r7, r5
 800066a:	2320      	movs	r3, #32
 800066c:	0026      	movs	r6, r4
 800066e:	4097      	lsls	r7, r2
 8000670:	1a9b      	subs	r3, r3, r2
 8000672:	40de      	lsrs	r6, r3
 8000674:	003b      	movs	r3, r7
 8000676:	4333      	orrs	r3, r6
 8000678:	e7cd      	b.n	8000616 <__udivmoddi4+0x132>
 800067a:	46c0      	nop			; (mov r8, r8)

0800067c <__aeabi_fdiv>:
 800067c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800067e:	464f      	mov	r7, r9
 8000680:	4646      	mov	r6, r8
 8000682:	46d6      	mov	lr, sl
 8000684:	0245      	lsls	r5, r0, #9
 8000686:	b5c0      	push	{r6, r7, lr}
 8000688:	0047      	lsls	r7, r0, #1
 800068a:	1c0c      	adds	r4, r1, #0
 800068c:	0a6d      	lsrs	r5, r5, #9
 800068e:	0e3f      	lsrs	r7, r7, #24
 8000690:	0fc6      	lsrs	r6, r0, #31
 8000692:	2f00      	cmp	r7, #0
 8000694:	d100      	bne.n	8000698 <__aeabi_fdiv+0x1c>
 8000696:	e070      	b.n	800077a <__aeabi_fdiv+0xfe>
 8000698:	2fff      	cmp	r7, #255	; 0xff
 800069a:	d100      	bne.n	800069e <__aeabi_fdiv+0x22>
 800069c:	e075      	b.n	800078a <__aeabi_fdiv+0x10e>
 800069e:	00eb      	lsls	r3, r5, #3
 80006a0:	2580      	movs	r5, #128	; 0x80
 80006a2:	04ed      	lsls	r5, r5, #19
 80006a4:	431d      	orrs	r5, r3
 80006a6:	2300      	movs	r3, #0
 80006a8:	4699      	mov	r9, r3
 80006aa:	469a      	mov	sl, r3
 80006ac:	3f7f      	subs	r7, #127	; 0x7f
 80006ae:	0260      	lsls	r0, r4, #9
 80006b0:	0a43      	lsrs	r3, r0, #9
 80006b2:	4698      	mov	r8, r3
 80006b4:	0063      	lsls	r3, r4, #1
 80006b6:	0e1b      	lsrs	r3, r3, #24
 80006b8:	0fe4      	lsrs	r4, r4, #31
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d04e      	beq.n	800075c <__aeabi_fdiv+0xe0>
 80006be:	2bff      	cmp	r3, #255	; 0xff
 80006c0:	d046      	beq.n	8000750 <__aeabi_fdiv+0xd4>
 80006c2:	4642      	mov	r2, r8
 80006c4:	00d0      	lsls	r0, r2, #3
 80006c6:	2280      	movs	r2, #128	; 0x80
 80006c8:	04d2      	lsls	r2, r2, #19
 80006ca:	4302      	orrs	r2, r0
 80006cc:	4690      	mov	r8, r2
 80006ce:	2200      	movs	r2, #0
 80006d0:	3b7f      	subs	r3, #127	; 0x7f
 80006d2:	0031      	movs	r1, r6
 80006d4:	1aff      	subs	r7, r7, r3
 80006d6:	464b      	mov	r3, r9
 80006d8:	4061      	eors	r1, r4
 80006da:	b2c9      	uxtb	r1, r1
 80006dc:	4313      	orrs	r3, r2
 80006de:	2b0f      	cmp	r3, #15
 80006e0:	d900      	bls.n	80006e4 <__aeabi_fdiv+0x68>
 80006e2:	e0b5      	b.n	8000850 <__aeabi_fdiv+0x1d4>
 80006e4:	486e      	ldr	r0, [pc, #440]	; (80008a0 <__aeabi_fdiv+0x224>)
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	58c3      	ldr	r3, [r0, r3]
 80006ea:	469f      	mov	pc, r3
 80006ec:	2300      	movs	r3, #0
 80006ee:	4698      	mov	r8, r3
 80006f0:	0026      	movs	r6, r4
 80006f2:	4645      	mov	r5, r8
 80006f4:	4692      	mov	sl, r2
 80006f6:	4653      	mov	r3, sl
 80006f8:	2b02      	cmp	r3, #2
 80006fa:	d100      	bne.n	80006fe <__aeabi_fdiv+0x82>
 80006fc:	e089      	b.n	8000812 <__aeabi_fdiv+0x196>
 80006fe:	2b03      	cmp	r3, #3
 8000700:	d100      	bne.n	8000704 <__aeabi_fdiv+0x88>
 8000702:	e09e      	b.n	8000842 <__aeabi_fdiv+0x1c6>
 8000704:	2b01      	cmp	r3, #1
 8000706:	d018      	beq.n	800073a <__aeabi_fdiv+0xbe>
 8000708:	003b      	movs	r3, r7
 800070a:	337f      	adds	r3, #127	; 0x7f
 800070c:	2b00      	cmp	r3, #0
 800070e:	dd69      	ble.n	80007e4 <__aeabi_fdiv+0x168>
 8000710:	076a      	lsls	r2, r5, #29
 8000712:	d004      	beq.n	800071e <__aeabi_fdiv+0xa2>
 8000714:	220f      	movs	r2, #15
 8000716:	402a      	ands	r2, r5
 8000718:	2a04      	cmp	r2, #4
 800071a:	d000      	beq.n	800071e <__aeabi_fdiv+0xa2>
 800071c:	3504      	adds	r5, #4
 800071e:	012a      	lsls	r2, r5, #4
 8000720:	d503      	bpl.n	800072a <__aeabi_fdiv+0xae>
 8000722:	4b60      	ldr	r3, [pc, #384]	; (80008a4 <__aeabi_fdiv+0x228>)
 8000724:	401d      	ands	r5, r3
 8000726:	003b      	movs	r3, r7
 8000728:	3380      	adds	r3, #128	; 0x80
 800072a:	2bfe      	cmp	r3, #254	; 0xfe
 800072c:	dd00      	ble.n	8000730 <__aeabi_fdiv+0xb4>
 800072e:	e070      	b.n	8000812 <__aeabi_fdiv+0x196>
 8000730:	01ad      	lsls	r5, r5, #6
 8000732:	0a6d      	lsrs	r5, r5, #9
 8000734:	b2d8      	uxtb	r0, r3
 8000736:	e002      	b.n	800073e <__aeabi_fdiv+0xc2>
 8000738:	000e      	movs	r6, r1
 800073a:	2000      	movs	r0, #0
 800073c:	2500      	movs	r5, #0
 800073e:	05c0      	lsls	r0, r0, #23
 8000740:	4328      	orrs	r0, r5
 8000742:	07f6      	lsls	r6, r6, #31
 8000744:	4330      	orrs	r0, r6
 8000746:	bce0      	pop	{r5, r6, r7}
 8000748:	46ba      	mov	sl, r7
 800074a:	46b1      	mov	r9, r6
 800074c:	46a8      	mov	r8, r5
 800074e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000750:	4643      	mov	r3, r8
 8000752:	2b00      	cmp	r3, #0
 8000754:	d13f      	bne.n	80007d6 <__aeabi_fdiv+0x15a>
 8000756:	2202      	movs	r2, #2
 8000758:	3fff      	subs	r7, #255	; 0xff
 800075a:	e003      	b.n	8000764 <__aeabi_fdiv+0xe8>
 800075c:	4643      	mov	r3, r8
 800075e:	2b00      	cmp	r3, #0
 8000760:	d12d      	bne.n	80007be <__aeabi_fdiv+0x142>
 8000762:	2201      	movs	r2, #1
 8000764:	0031      	movs	r1, r6
 8000766:	464b      	mov	r3, r9
 8000768:	4061      	eors	r1, r4
 800076a:	b2c9      	uxtb	r1, r1
 800076c:	4313      	orrs	r3, r2
 800076e:	2b0f      	cmp	r3, #15
 8000770:	d834      	bhi.n	80007dc <__aeabi_fdiv+0x160>
 8000772:	484d      	ldr	r0, [pc, #308]	; (80008a8 <__aeabi_fdiv+0x22c>)
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	58c3      	ldr	r3, [r0, r3]
 8000778:	469f      	mov	pc, r3
 800077a:	2d00      	cmp	r5, #0
 800077c:	d113      	bne.n	80007a6 <__aeabi_fdiv+0x12a>
 800077e:	2304      	movs	r3, #4
 8000780:	4699      	mov	r9, r3
 8000782:	3b03      	subs	r3, #3
 8000784:	2700      	movs	r7, #0
 8000786:	469a      	mov	sl, r3
 8000788:	e791      	b.n	80006ae <__aeabi_fdiv+0x32>
 800078a:	2d00      	cmp	r5, #0
 800078c:	d105      	bne.n	800079a <__aeabi_fdiv+0x11e>
 800078e:	2308      	movs	r3, #8
 8000790:	4699      	mov	r9, r3
 8000792:	3b06      	subs	r3, #6
 8000794:	27ff      	movs	r7, #255	; 0xff
 8000796:	469a      	mov	sl, r3
 8000798:	e789      	b.n	80006ae <__aeabi_fdiv+0x32>
 800079a:	230c      	movs	r3, #12
 800079c:	4699      	mov	r9, r3
 800079e:	3b09      	subs	r3, #9
 80007a0:	27ff      	movs	r7, #255	; 0xff
 80007a2:	469a      	mov	sl, r3
 80007a4:	e783      	b.n	80006ae <__aeabi_fdiv+0x32>
 80007a6:	0028      	movs	r0, r5
 80007a8:	f001 fefc 	bl	80025a4 <__clzsi2>
 80007ac:	2776      	movs	r7, #118	; 0x76
 80007ae:	1f43      	subs	r3, r0, #5
 80007b0:	409d      	lsls	r5, r3
 80007b2:	2300      	movs	r3, #0
 80007b4:	427f      	negs	r7, r7
 80007b6:	4699      	mov	r9, r3
 80007b8:	469a      	mov	sl, r3
 80007ba:	1a3f      	subs	r7, r7, r0
 80007bc:	e777      	b.n	80006ae <__aeabi_fdiv+0x32>
 80007be:	4640      	mov	r0, r8
 80007c0:	f001 fef0 	bl	80025a4 <__clzsi2>
 80007c4:	4642      	mov	r2, r8
 80007c6:	1f43      	subs	r3, r0, #5
 80007c8:	409a      	lsls	r2, r3
 80007ca:	2376      	movs	r3, #118	; 0x76
 80007cc:	425b      	negs	r3, r3
 80007ce:	4690      	mov	r8, r2
 80007d0:	1a1b      	subs	r3, r3, r0
 80007d2:	2200      	movs	r2, #0
 80007d4:	e77d      	b.n	80006d2 <__aeabi_fdiv+0x56>
 80007d6:	23ff      	movs	r3, #255	; 0xff
 80007d8:	2203      	movs	r2, #3
 80007da:	e77a      	b.n	80006d2 <__aeabi_fdiv+0x56>
 80007dc:	000e      	movs	r6, r1
 80007de:	20ff      	movs	r0, #255	; 0xff
 80007e0:	2500      	movs	r5, #0
 80007e2:	e7ac      	b.n	800073e <__aeabi_fdiv+0xc2>
 80007e4:	2001      	movs	r0, #1
 80007e6:	1ac0      	subs	r0, r0, r3
 80007e8:	281b      	cmp	r0, #27
 80007ea:	dca6      	bgt.n	800073a <__aeabi_fdiv+0xbe>
 80007ec:	379e      	adds	r7, #158	; 0x9e
 80007ee:	002a      	movs	r2, r5
 80007f0:	40bd      	lsls	r5, r7
 80007f2:	40c2      	lsrs	r2, r0
 80007f4:	1e6b      	subs	r3, r5, #1
 80007f6:	419d      	sbcs	r5, r3
 80007f8:	4315      	orrs	r5, r2
 80007fa:	076b      	lsls	r3, r5, #29
 80007fc:	d004      	beq.n	8000808 <__aeabi_fdiv+0x18c>
 80007fe:	230f      	movs	r3, #15
 8000800:	402b      	ands	r3, r5
 8000802:	2b04      	cmp	r3, #4
 8000804:	d000      	beq.n	8000808 <__aeabi_fdiv+0x18c>
 8000806:	3504      	adds	r5, #4
 8000808:	016b      	lsls	r3, r5, #5
 800080a:	d544      	bpl.n	8000896 <__aeabi_fdiv+0x21a>
 800080c:	2001      	movs	r0, #1
 800080e:	2500      	movs	r5, #0
 8000810:	e795      	b.n	800073e <__aeabi_fdiv+0xc2>
 8000812:	20ff      	movs	r0, #255	; 0xff
 8000814:	2500      	movs	r5, #0
 8000816:	e792      	b.n	800073e <__aeabi_fdiv+0xc2>
 8000818:	2580      	movs	r5, #128	; 0x80
 800081a:	2600      	movs	r6, #0
 800081c:	20ff      	movs	r0, #255	; 0xff
 800081e:	03ed      	lsls	r5, r5, #15
 8000820:	e78d      	b.n	800073e <__aeabi_fdiv+0xc2>
 8000822:	2300      	movs	r3, #0
 8000824:	4698      	mov	r8, r3
 8000826:	2080      	movs	r0, #128	; 0x80
 8000828:	03c0      	lsls	r0, r0, #15
 800082a:	4205      	tst	r5, r0
 800082c:	d009      	beq.n	8000842 <__aeabi_fdiv+0x1c6>
 800082e:	4643      	mov	r3, r8
 8000830:	4203      	tst	r3, r0
 8000832:	d106      	bne.n	8000842 <__aeabi_fdiv+0x1c6>
 8000834:	4645      	mov	r5, r8
 8000836:	4305      	orrs	r5, r0
 8000838:	026d      	lsls	r5, r5, #9
 800083a:	0026      	movs	r6, r4
 800083c:	20ff      	movs	r0, #255	; 0xff
 800083e:	0a6d      	lsrs	r5, r5, #9
 8000840:	e77d      	b.n	800073e <__aeabi_fdiv+0xc2>
 8000842:	2080      	movs	r0, #128	; 0x80
 8000844:	03c0      	lsls	r0, r0, #15
 8000846:	4305      	orrs	r5, r0
 8000848:	026d      	lsls	r5, r5, #9
 800084a:	20ff      	movs	r0, #255	; 0xff
 800084c:	0a6d      	lsrs	r5, r5, #9
 800084e:	e776      	b.n	800073e <__aeabi_fdiv+0xc2>
 8000850:	4642      	mov	r2, r8
 8000852:	016b      	lsls	r3, r5, #5
 8000854:	0150      	lsls	r0, r2, #5
 8000856:	4283      	cmp	r3, r0
 8000858:	d219      	bcs.n	800088e <__aeabi_fdiv+0x212>
 800085a:	221b      	movs	r2, #27
 800085c:	2500      	movs	r5, #0
 800085e:	3f01      	subs	r7, #1
 8000860:	2601      	movs	r6, #1
 8000862:	001c      	movs	r4, r3
 8000864:	006d      	lsls	r5, r5, #1
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	2c00      	cmp	r4, #0
 800086a:	db01      	blt.n	8000870 <__aeabi_fdiv+0x1f4>
 800086c:	4298      	cmp	r0, r3
 800086e:	d801      	bhi.n	8000874 <__aeabi_fdiv+0x1f8>
 8000870:	1a1b      	subs	r3, r3, r0
 8000872:	4335      	orrs	r5, r6
 8000874:	3a01      	subs	r2, #1
 8000876:	2a00      	cmp	r2, #0
 8000878:	d1f3      	bne.n	8000862 <__aeabi_fdiv+0x1e6>
 800087a:	1e5a      	subs	r2, r3, #1
 800087c:	4193      	sbcs	r3, r2
 800087e:	431d      	orrs	r5, r3
 8000880:	003b      	movs	r3, r7
 8000882:	337f      	adds	r3, #127	; 0x7f
 8000884:	000e      	movs	r6, r1
 8000886:	2b00      	cmp	r3, #0
 8000888:	dd00      	ble.n	800088c <__aeabi_fdiv+0x210>
 800088a:	e741      	b.n	8000710 <__aeabi_fdiv+0x94>
 800088c:	e7aa      	b.n	80007e4 <__aeabi_fdiv+0x168>
 800088e:	221a      	movs	r2, #26
 8000890:	2501      	movs	r5, #1
 8000892:	1a1b      	subs	r3, r3, r0
 8000894:	e7e4      	b.n	8000860 <__aeabi_fdiv+0x1e4>
 8000896:	01ad      	lsls	r5, r5, #6
 8000898:	2000      	movs	r0, #0
 800089a:	0a6d      	lsrs	r5, r5, #9
 800089c:	e74f      	b.n	800073e <__aeabi_fdiv+0xc2>
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	08009244 	.word	0x08009244
 80008a4:	f7ffffff 	.word	0xf7ffffff
 80008a8:	08009284 	.word	0x08009284

080008ac <__aeabi_i2f>:
 80008ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ae:	2800      	cmp	r0, #0
 80008b0:	d013      	beq.n	80008da <__aeabi_i2f+0x2e>
 80008b2:	17c3      	asrs	r3, r0, #31
 80008b4:	18c6      	adds	r6, r0, r3
 80008b6:	405e      	eors	r6, r3
 80008b8:	0fc4      	lsrs	r4, r0, #31
 80008ba:	0030      	movs	r0, r6
 80008bc:	f001 fe72 	bl	80025a4 <__clzsi2>
 80008c0:	239e      	movs	r3, #158	; 0x9e
 80008c2:	0005      	movs	r5, r0
 80008c4:	1a1b      	subs	r3, r3, r0
 80008c6:	2b96      	cmp	r3, #150	; 0x96
 80008c8:	dc0f      	bgt.n	80008ea <__aeabi_i2f+0x3e>
 80008ca:	2808      	cmp	r0, #8
 80008cc:	dd01      	ble.n	80008d2 <__aeabi_i2f+0x26>
 80008ce:	3d08      	subs	r5, #8
 80008d0:	40ae      	lsls	r6, r5
 80008d2:	0276      	lsls	r6, r6, #9
 80008d4:	0a76      	lsrs	r6, r6, #9
 80008d6:	b2d8      	uxtb	r0, r3
 80008d8:	e002      	b.n	80008e0 <__aeabi_i2f+0x34>
 80008da:	2400      	movs	r4, #0
 80008dc:	2000      	movs	r0, #0
 80008de:	2600      	movs	r6, #0
 80008e0:	05c0      	lsls	r0, r0, #23
 80008e2:	4330      	orrs	r0, r6
 80008e4:	07e4      	lsls	r4, r4, #31
 80008e6:	4320      	orrs	r0, r4
 80008e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008ea:	2b99      	cmp	r3, #153	; 0x99
 80008ec:	dd0c      	ble.n	8000908 <__aeabi_i2f+0x5c>
 80008ee:	2205      	movs	r2, #5
 80008f0:	0031      	movs	r1, r6
 80008f2:	1a12      	subs	r2, r2, r0
 80008f4:	40d1      	lsrs	r1, r2
 80008f6:	000a      	movs	r2, r1
 80008f8:	0001      	movs	r1, r0
 80008fa:	0030      	movs	r0, r6
 80008fc:	311b      	adds	r1, #27
 80008fe:	4088      	lsls	r0, r1
 8000900:	1e41      	subs	r1, r0, #1
 8000902:	4188      	sbcs	r0, r1
 8000904:	4302      	orrs	r2, r0
 8000906:	0016      	movs	r6, r2
 8000908:	2d05      	cmp	r5, #5
 800090a:	dc12      	bgt.n	8000932 <__aeabi_i2f+0x86>
 800090c:	0031      	movs	r1, r6
 800090e:	4f0d      	ldr	r7, [pc, #52]	; (8000944 <__aeabi_i2f+0x98>)
 8000910:	4039      	ands	r1, r7
 8000912:	0772      	lsls	r2, r6, #29
 8000914:	d009      	beq.n	800092a <__aeabi_i2f+0x7e>
 8000916:	200f      	movs	r0, #15
 8000918:	4030      	ands	r0, r6
 800091a:	2804      	cmp	r0, #4
 800091c:	d005      	beq.n	800092a <__aeabi_i2f+0x7e>
 800091e:	3104      	adds	r1, #4
 8000920:	014a      	lsls	r2, r1, #5
 8000922:	d502      	bpl.n	800092a <__aeabi_i2f+0x7e>
 8000924:	239f      	movs	r3, #159	; 0x9f
 8000926:	4039      	ands	r1, r7
 8000928:	1b5b      	subs	r3, r3, r5
 800092a:	0189      	lsls	r1, r1, #6
 800092c:	0a4e      	lsrs	r6, r1, #9
 800092e:	b2d8      	uxtb	r0, r3
 8000930:	e7d6      	b.n	80008e0 <__aeabi_i2f+0x34>
 8000932:	1f6a      	subs	r2, r5, #5
 8000934:	4096      	lsls	r6, r2
 8000936:	0031      	movs	r1, r6
 8000938:	4f02      	ldr	r7, [pc, #8]	; (8000944 <__aeabi_i2f+0x98>)
 800093a:	4039      	ands	r1, r7
 800093c:	0772      	lsls	r2, r6, #29
 800093e:	d0f4      	beq.n	800092a <__aeabi_i2f+0x7e>
 8000940:	e7e9      	b.n	8000916 <__aeabi_i2f+0x6a>
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	fbffffff 	.word	0xfbffffff

08000948 <__aeabi_dadd>:
 8000948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800094a:	464f      	mov	r7, r9
 800094c:	4646      	mov	r6, r8
 800094e:	46d6      	mov	lr, sl
 8000950:	000d      	movs	r5, r1
 8000952:	0004      	movs	r4, r0
 8000954:	b5c0      	push	{r6, r7, lr}
 8000956:	001f      	movs	r7, r3
 8000958:	0011      	movs	r1, r2
 800095a:	0328      	lsls	r0, r5, #12
 800095c:	0f62      	lsrs	r2, r4, #29
 800095e:	0a40      	lsrs	r0, r0, #9
 8000960:	4310      	orrs	r0, r2
 8000962:	007a      	lsls	r2, r7, #1
 8000964:	0d52      	lsrs	r2, r2, #21
 8000966:	00e3      	lsls	r3, r4, #3
 8000968:	033c      	lsls	r4, r7, #12
 800096a:	4691      	mov	r9, r2
 800096c:	0a64      	lsrs	r4, r4, #9
 800096e:	0ffa      	lsrs	r2, r7, #31
 8000970:	0f4f      	lsrs	r7, r1, #29
 8000972:	006e      	lsls	r6, r5, #1
 8000974:	4327      	orrs	r7, r4
 8000976:	4692      	mov	sl, r2
 8000978:	46b8      	mov	r8, r7
 800097a:	0d76      	lsrs	r6, r6, #21
 800097c:	0fed      	lsrs	r5, r5, #31
 800097e:	00c9      	lsls	r1, r1, #3
 8000980:	4295      	cmp	r5, r2
 8000982:	d100      	bne.n	8000986 <__aeabi_dadd+0x3e>
 8000984:	e099      	b.n	8000aba <__aeabi_dadd+0x172>
 8000986:	464c      	mov	r4, r9
 8000988:	1b34      	subs	r4, r6, r4
 800098a:	46a4      	mov	ip, r4
 800098c:	2c00      	cmp	r4, #0
 800098e:	dc00      	bgt.n	8000992 <__aeabi_dadd+0x4a>
 8000990:	e07c      	b.n	8000a8c <__aeabi_dadd+0x144>
 8000992:	464a      	mov	r2, r9
 8000994:	2a00      	cmp	r2, #0
 8000996:	d100      	bne.n	800099a <__aeabi_dadd+0x52>
 8000998:	e0b8      	b.n	8000b0c <__aeabi_dadd+0x1c4>
 800099a:	4ac5      	ldr	r2, [pc, #788]	; (8000cb0 <__aeabi_dadd+0x368>)
 800099c:	4296      	cmp	r6, r2
 800099e:	d100      	bne.n	80009a2 <__aeabi_dadd+0x5a>
 80009a0:	e11c      	b.n	8000bdc <__aeabi_dadd+0x294>
 80009a2:	2280      	movs	r2, #128	; 0x80
 80009a4:	003c      	movs	r4, r7
 80009a6:	0412      	lsls	r2, r2, #16
 80009a8:	4314      	orrs	r4, r2
 80009aa:	46a0      	mov	r8, r4
 80009ac:	4662      	mov	r2, ip
 80009ae:	2a38      	cmp	r2, #56	; 0x38
 80009b0:	dd00      	ble.n	80009b4 <__aeabi_dadd+0x6c>
 80009b2:	e161      	b.n	8000c78 <__aeabi_dadd+0x330>
 80009b4:	2a1f      	cmp	r2, #31
 80009b6:	dd00      	ble.n	80009ba <__aeabi_dadd+0x72>
 80009b8:	e1cc      	b.n	8000d54 <__aeabi_dadd+0x40c>
 80009ba:	4664      	mov	r4, ip
 80009bc:	2220      	movs	r2, #32
 80009be:	1b12      	subs	r2, r2, r4
 80009c0:	4644      	mov	r4, r8
 80009c2:	4094      	lsls	r4, r2
 80009c4:	000f      	movs	r7, r1
 80009c6:	46a1      	mov	r9, r4
 80009c8:	4664      	mov	r4, ip
 80009ca:	4091      	lsls	r1, r2
 80009cc:	40e7      	lsrs	r7, r4
 80009ce:	464c      	mov	r4, r9
 80009d0:	1e4a      	subs	r2, r1, #1
 80009d2:	4191      	sbcs	r1, r2
 80009d4:	433c      	orrs	r4, r7
 80009d6:	4642      	mov	r2, r8
 80009d8:	4321      	orrs	r1, r4
 80009da:	4664      	mov	r4, ip
 80009dc:	40e2      	lsrs	r2, r4
 80009de:	1a80      	subs	r0, r0, r2
 80009e0:	1a5c      	subs	r4, r3, r1
 80009e2:	42a3      	cmp	r3, r4
 80009e4:	419b      	sbcs	r3, r3
 80009e6:	425f      	negs	r7, r3
 80009e8:	1bc7      	subs	r7, r0, r7
 80009ea:	023b      	lsls	r3, r7, #8
 80009ec:	d400      	bmi.n	80009f0 <__aeabi_dadd+0xa8>
 80009ee:	e0d0      	b.n	8000b92 <__aeabi_dadd+0x24a>
 80009f0:	027f      	lsls	r7, r7, #9
 80009f2:	0a7f      	lsrs	r7, r7, #9
 80009f4:	2f00      	cmp	r7, #0
 80009f6:	d100      	bne.n	80009fa <__aeabi_dadd+0xb2>
 80009f8:	e0ff      	b.n	8000bfa <__aeabi_dadd+0x2b2>
 80009fa:	0038      	movs	r0, r7
 80009fc:	f001 fdd2 	bl	80025a4 <__clzsi2>
 8000a00:	0001      	movs	r1, r0
 8000a02:	3908      	subs	r1, #8
 8000a04:	2320      	movs	r3, #32
 8000a06:	0022      	movs	r2, r4
 8000a08:	1a5b      	subs	r3, r3, r1
 8000a0a:	408f      	lsls	r7, r1
 8000a0c:	40da      	lsrs	r2, r3
 8000a0e:	408c      	lsls	r4, r1
 8000a10:	4317      	orrs	r7, r2
 8000a12:	42b1      	cmp	r1, r6
 8000a14:	da00      	bge.n	8000a18 <__aeabi_dadd+0xd0>
 8000a16:	e0ff      	b.n	8000c18 <__aeabi_dadd+0x2d0>
 8000a18:	1b89      	subs	r1, r1, r6
 8000a1a:	1c4b      	adds	r3, r1, #1
 8000a1c:	2b1f      	cmp	r3, #31
 8000a1e:	dd00      	ble.n	8000a22 <__aeabi_dadd+0xda>
 8000a20:	e0a8      	b.n	8000b74 <__aeabi_dadd+0x22c>
 8000a22:	2220      	movs	r2, #32
 8000a24:	0039      	movs	r1, r7
 8000a26:	1ad2      	subs	r2, r2, r3
 8000a28:	0020      	movs	r0, r4
 8000a2a:	4094      	lsls	r4, r2
 8000a2c:	4091      	lsls	r1, r2
 8000a2e:	40d8      	lsrs	r0, r3
 8000a30:	1e62      	subs	r2, r4, #1
 8000a32:	4194      	sbcs	r4, r2
 8000a34:	40df      	lsrs	r7, r3
 8000a36:	2600      	movs	r6, #0
 8000a38:	4301      	orrs	r1, r0
 8000a3a:	430c      	orrs	r4, r1
 8000a3c:	0763      	lsls	r3, r4, #29
 8000a3e:	d009      	beq.n	8000a54 <__aeabi_dadd+0x10c>
 8000a40:	230f      	movs	r3, #15
 8000a42:	4023      	ands	r3, r4
 8000a44:	2b04      	cmp	r3, #4
 8000a46:	d005      	beq.n	8000a54 <__aeabi_dadd+0x10c>
 8000a48:	1d23      	adds	r3, r4, #4
 8000a4a:	42a3      	cmp	r3, r4
 8000a4c:	41a4      	sbcs	r4, r4
 8000a4e:	4264      	negs	r4, r4
 8000a50:	193f      	adds	r7, r7, r4
 8000a52:	001c      	movs	r4, r3
 8000a54:	023b      	lsls	r3, r7, #8
 8000a56:	d400      	bmi.n	8000a5a <__aeabi_dadd+0x112>
 8000a58:	e09e      	b.n	8000b98 <__aeabi_dadd+0x250>
 8000a5a:	4b95      	ldr	r3, [pc, #596]	; (8000cb0 <__aeabi_dadd+0x368>)
 8000a5c:	3601      	adds	r6, #1
 8000a5e:	429e      	cmp	r6, r3
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dadd+0x11c>
 8000a62:	e0b7      	b.n	8000bd4 <__aeabi_dadd+0x28c>
 8000a64:	4a93      	ldr	r2, [pc, #588]	; (8000cb4 <__aeabi_dadd+0x36c>)
 8000a66:	08e4      	lsrs	r4, r4, #3
 8000a68:	4017      	ands	r7, r2
 8000a6a:	077b      	lsls	r3, r7, #29
 8000a6c:	0571      	lsls	r1, r6, #21
 8000a6e:	027f      	lsls	r7, r7, #9
 8000a70:	4323      	orrs	r3, r4
 8000a72:	0b3f      	lsrs	r7, r7, #12
 8000a74:	0d4a      	lsrs	r2, r1, #21
 8000a76:	0512      	lsls	r2, r2, #20
 8000a78:	433a      	orrs	r2, r7
 8000a7a:	07ed      	lsls	r5, r5, #31
 8000a7c:	432a      	orrs	r2, r5
 8000a7e:	0018      	movs	r0, r3
 8000a80:	0011      	movs	r1, r2
 8000a82:	bce0      	pop	{r5, r6, r7}
 8000a84:	46ba      	mov	sl, r7
 8000a86:	46b1      	mov	r9, r6
 8000a88:	46a8      	mov	r8, r5
 8000a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a8c:	2c00      	cmp	r4, #0
 8000a8e:	d04b      	beq.n	8000b28 <__aeabi_dadd+0x1e0>
 8000a90:	464c      	mov	r4, r9
 8000a92:	1ba4      	subs	r4, r4, r6
 8000a94:	46a4      	mov	ip, r4
 8000a96:	2e00      	cmp	r6, #0
 8000a98:	d000      	beq.n	8000a9c <__aeabi_dadd+0x154>
 8000a9a:	e123      	b.n	8000ce4 <__aeabi_dadd+0x39c>
 8000a9c:	0004      	movs	r4, r0
 8000a9e:	431c      	orrs	r4, r3
 8000aa0:	d100      	bne.n	8000aa4 <__aeabi_dadd+0x15c>
 8000aa2:	e1af      	b.n	8000e04 <__aeabi_dadd+0x4bc>
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	1e54      	subs	r4, r2, #1
 8000aa8:	2a01      	cmp	r2, #1
 8000aaa:	d100      	bne.n	8000aae <__aeabi_dadd+0x166>
 8000aac:	e215      	b.n	8000eda <__aeabi_dadd+0x592>
 8000aae:	4d80      	ldr	r5, [pc, #512]	; (8000cb0 <__aeabi_dadd+0x368>)
 8000ab0:	45ac      	cmp	ip, r5
 8000ab2:	d100      	bne.n	8000ab6 <__aeabi_dadd+0x16e>
 8000ab4:	e1c8      	b.n	8000e48 <__aeabi_dadd+0x500>
 8000ab6:	46a4      	mov	ip, r4
 8000ab8:	e11b      	b.n	8000cf2 <__aeabi_dadd+0x3aa>
 8000aba:	464a      	mov	r2, r9
 8000abc:	1ab2      	subs	r2, r6, r2
 8000abe:	4694      	mov	ip, r2
 8000ac0:	2a00      	cmp	r2, #0
 8000ac2:	dc00      	bgt.n	8000ac6 <__aeabi_dadd+0x17e>
 8000ac4:	e0ac      	b.n	8000c20 <__aeabi_dadd+0x2d8>
 8000ac6:	464a      	mov	r2, r9
 8000ac8:	2a00      	cmp	r2, #0
 8000aca:	d043      	beq.n	8000b54 <__aeabi_dadd+0x20c>
 8000acc:	4a78      	ldr	r2, [pc, #480]	; (8000cb0 <__aeabi_dadd+0x368>)
 8000ace:	4296      	cmp	r6, r2
 8000ad0:	d100      	bne.n	8000ad4 <__aeabi_dadd+0x18c>
 8000ad2:	e1af      	b.n	8000e34 <__aeabi_dadd+0x4ec>
 8000ad4:	2280      	movs	r2, #128	; 0x80
 8000ad6:	003c      	movs	r4, r7
 8000ad8:	0412      	lsls	r2, r2, #16
 8000ada:	4314      	orrs	r4, r2
 8000adc:	46a0      	mov	r8, r4
 8000ade:	4662      	mov	r2, ip
 8000ae0:	2a38      	cmp	r2, #56	; 0x38
 8000ae2:	dc67      	bgt.n	8000bb4 <__aeabi_dadd+0x26c>
 8000ae4:	2a1f      	cmp	r2, #31
 8000ae6:	dc00      	bgt.n	8000aea <__aeabi_dadd+0x1a2>
 8000ae8:	e15f      	b.n	8000daa <__aeabi_dadd+0x462>
 8000aea:	4647      	mov	r7, r8
 8000aec:	3a20      	subs	r2, #32
 8000aee:	40d7      	lsrs	r7, r2
 8000af0:	4662      	mov	r2, ip
 8000af2:	2a20      	cmp	r2, #32
 8000af4:	d005      	beq.n	8000b02 <__aeabi_dadd+0x1ba>
 8000af6:	4664      	mov	r4, ip
 8000af8:	2240      	movs	r2, #64	; 0x40
 8000afa:	1b12      	subs	r2, r2, r4
 8000afc:	4644      	mov	r4, r8
 8000afe:	4094      	lsls	r4, r2
 8000b00:	4321      	orrs	r1, r4
 8000b02:	1e4a      	subs	r2, r1, #1
 8000b04:	4191      	sbcs	r1, r2
 8000b06:	000c      	movs	r4, r1
 8000b08:	433c      	orrs	r4, r7
 8000b0a:	e057      	b.n	8000bbc <__aeabi_dadd+0x274>
 8000b0c:	003a      	movs	r2, r7
 8000b0e:	430a      	orrs	r2, r1
 8000b10:	d100      	bne.n	8000b14 <__aeabi_dadd+0x1cc>
 8000b12:	e105      	b.n	8000d20 <__aeabi_dadd+0x3d8>
 8000b14:	0022      	movs	r2, r4
 8000b16:	3a01      	subs	r2, #1
 8000b18:	2c01      	cmp	r4, #1
 8000b1a:	d100      	bne.n	8000b1e <__aeabi_dadd+0x1d6>
 8000b1c:	e182      	b.n	8000e24 <__aeabi_dadd+0x4dc>
 8000b1e:	4c64      	ldr	r4, [pc, #400]	; (8000cb0 <__aeabi_dadd+0x368>)
 8000b20:	45a4      	cmp	ip, r4
 8000b22:	d05b      	beq.n	8000bdc <__aeabi_dadd+0x294>
 8000b24:	4694      	mov	ip, r2
 8000b26:	e741      	b.n	80009ac <__aeabi_dadd+0x64>
 8000b28:	4c63      	ldr	r4, [pc, #396]	; (8000cb8 <__aeabi_dadd+0x370>)
 8000b2a:	1c77      	adds	r7, r6, #1
 8000b2c:	4227      	tst	r7, r4
 8000b2e:	d000      	beq.n	8000b32 <__aeabi_dadd+0x1ea>
 8000b30:	e0c4      	b.n	8000cbc <__aeabi_dadd+0x374>
 8000b32:	0004      	movs	r4, r0
 8000b34:	431c      	orrs	r4, r3
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	d000      	beq.n	8000b3c <__aeabi_dadd+0x1f4>
 8000b3a:	e169      	b.n	8000e10 <__aeabi_dadd+0x4c8>
 8000b3c:	2c00      	cmp	r4, #0
 8000b3e:	d100      	bne.n	8000b42 <__aeabi_dadd+0x1fa>
 8000b40:	e1bf      	b.n	8000ec2 <__aeabi_dadd+0x57a>
 8000b42:	4644      	mov	r4, r8
 8000b44:	430c      	orrs	r4, r1
 8000b46:	d000      	beq.n	8000b4a <__aeabi_dadd+0x202>
 8000b48:	e1d0      	b.n	8000eec <__aeabi_dadd+0x5a4>
 8000b4a:	0742      	lsls	r2, r0, #29
 8000b4c:	08db      	lsrs	r3, r3, #3
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	08c0      	lsrs	r0, r0, #3
 8000b52:	e029      	b.n	8000ba8 <__aeabi_dadd+0x260>
 8000b54:	003a      	movs	r2, r7
 8000b56:	430a      	orrs	r2, r1
 8000b58:	d100      	bne.n	8000b5c <__aeabi_dadd+0x214>
 8000b5a:	e170      	b.n	8000e3e <__aeabi_dadd+0x4f6>
 8000b5c:	4662      	mov	r2, ip
 8000b5e:	4664      	mov	r4, ip
 8000b60:	3a01      	subs	r2, #1
 8000b62:	2c01      	cmp	r4, #1
 8000b64:	d100      	bne.n	8000b68 <__aeabi_dadd+0x220>
 8000b66:	e0e0      	b.n	8000d2a <__aeabi_dadd+0x3e2>
 8000b68:	4c51      	ldr	r4, [pc, #324]	; (8000cb0 <__aeabi_dadd+0x368>)
 8000b6a:	45a4      	cmp	ip, r4
 8000b6c:	d100      	bne.n	8000b70 <__aeabi_dadd+0x228>
 8000b6e:	e161      	b.n	8000e34 <__aeabi_dadd+0x4ec>
 8000b70:	4694      	mov	ip, r2
 8000b72:	e7b4      	b.n	8000ade <__aeabi_dadd+0x196>
 8000b74:	003a      	movs	r2, r7
 8000b76:	391f      	subs	r1, #31
 8000b78:	40ca      	lsrs	r2, r1
 8000b7a:	0011      	movs	r1, r2
 8000b7c:	2b20      	cmp	r3, #32
 8000b7e:	d003      	beq.n	8000b88 <__aeabi_dadd+0x240>
 8000b80:	2240      	movs	r2, #64	; 0x40
 8000b82:	1ad3      	subs	r3, r2, r3
 8000b84:	409f      	lsls	r7, r3
 8000b86:	433c      	orrs	r4, r7
 8000b88:	1e63      	subs	r3, r4, #1
 8000b8a:	419c      	sbcs	r4, r3
 8000b8c:	2700      	movs	r7, #0
 8000b8e:	2600      	movs	r6, #0
 8000b90:	430c      	orrs	r4, r1
 8000b92:	0763      	lsls	r3, r4, #29
 8000b94:	d000      	beq.n	8000b98 <__aeabi_dadd+0x250>
 8000b96:	e753      	b.n	8000a40 <__aeabi_dadd+0xf8>
 8000b98:	46b4      	mov	ip, r6
 8000b9a:	08e4      	lsrs	r4, r4, #3
 8000b9c:	077b      	lsls	r3, r7, #29
 8000b9e:	4323      	orrs	r3, r4
 8000ba0:	08f8      	lsrs	r0, r7, #3
 8000ba2:	4a43      	ldr	r2, [pc, #268]	; (8000cb0 <__aeabi_dadd+0x368>)
 8000ba4:	4594      	cmp	ip, r2
 8000ba6:	d01d      	beq.n	8000be4 <__aeabi_dadd+0x29c>
 8000ba8:	4662      	mov	r2, ip
 8000baa:	0307      	lsls	r7, r0, #12
 8000bac:	0552      	lsls	r2, r2, #21
 8000bae:	0b3f      	lsrs	r7, r7, #12
 8000bb0:	0d52      	lsrs	r2, r2, #21
 8000bb2:	e760      	b.n	8000a76 <__aeabi_dadd+0x12e>
 8000bb4:	4644      	mov	r4, r8
 8000bb6:	430c      	orrs	r4, r1
 8000bb8:	1e62      	subs	r2, r4, #1
 8000bba:	4194      	sbcs	r4, r2
 8000bbc:	18e4      	adds	r4, r4, r3
 8000bbe:	429c      	cmp	r4, r3
 8000bc0:	419b      	sbcs	r3, r3
 8000bc2:	425f      	negs	r7, r3
 8000bc4:	183f      	adds	r7, r7, r0
 8000bc6:	023b      	lsls	r3, r7, #8
 8000bc8:	d5e3      	bpl.n	8000b92 <__aeabi_dadd+0x24a>
 8000bca:	4b39      	ldr	r3, [pc, #228]	; (8000cb0 <__aeabi_dadd+0x368>)
 8000bcc:	3601      	adds	r6, #1
 8000bce:	429e      	cmp	r6, r3
 8000bd0:	d000      	beq.n	8000bd4 <__aeabi_dadd+0x28c>
 8000bd2:	e0b5      	b.n	8000d40 <__aeabi_dadd+0x3f8>
 8000bd4:	0032      	movs	r2, r6
 8000bd6:	2700      	movs	r7, #0
 8000bd8:	2300      	movs	r3, #0
 8000bda:	e74c      	b.n	8000a76 <__aeabi_dadd+0x12e>
 8000bdc:	0742      	lsls	r2, r0, #29
 8000bde:	08db      	lsrs	r3, r3, #3
 8000be0:	4313      	orrs	r3, r2
 8000be2:	08c0      	lsrs	r0, r0, #3
 8000be4:	001a      	movs	r2, r3
 8000be6:	4302      	orrs	r2, r0
 8000be8:	d100      	bne.n	8000bec <__aeabi_dadd+0x2a4>
 8000bea:	e1e1      	b.n	8000fb0 <__aeabi_dadd+0x668>
 8000bec:	2780      	movs	r7, #128	; 0x80
 8000bee:	033f      	lsls	r7, r7, #12
 8000bf0:	4307      	orrs	r7, r0
 8000bf2:	033f      	lsls	r7, r7, #12
 8000bf4:	4a2e      	ldr	r2, [pc, #184]	; (8000cb0 <__aeabi_dadd+0x368>)
 8000bf6:	0b3f      	lsrs	r7, r7, #12
 8000bf8:	e73d      	b.n	8000a76 <__aeabi_dadd+0x12e>
 8000bfa:	0020      	movs	r0, r4
 8000bfc:	f001 fcd2 	bl	80025a4 <__clzsi2>
 8000c00:	0001      	movs	r1, r0
 8000c02:	3118      	adds	r1, #24
 8000c04:	291f      	cmp	r1, #31
 8000c06:	dc00      	bgt.n	8000c0a <__aeabi_dadd+0x2c2>
 8000c08:	e6fc      	b.n	8000a04 <__aeabi_dadd+0xbc>
 8000c0a:	3808      	subs	r0, #8
 8000c0c:	4084      	lsls	r4, r0
 8000c0e:	0027      	movs	r7, r4
 8000c10:	2400      	movs	r4, #0
 8000c12:	42b1      	cmp	r1, r6
 8000c14:	db00      	blt.n	8000c18 <__aeabi_dadd+0x2d0>
 8000c16:	e6ff      	b.n	8000a18 <__aeabi_dadd+0xd0>
 8000c18:	4a26      	ldr	r2, [pc, #152]	; (8000cb4 <__aeabi_dadd+0x36c>)
 8000c1a:	1a76      	subs	r6, r6, r1
 8000c1c:	4017      	ands	r7, r2
 8000c1e:	e70d      	b.n	8000a3c <__aeabi_dadd+0xf4>
 8000c20:	2a00      	cmp	r2, #0
 8000c22:	d02f      	beq.n	8000c84 <__aeabi_dadd+0x33c>
 8000c24:	464a      	mov	r2, r9
 8000c26:	1b92      	subs	r2, r2, r6
 8000c28:	4694      	mov	ip, r2
 8000c2a:	2e00      	cmp	r6, #0
 8000c2c:	d100      	bne.n	8000c30 <__aeabi_dadd+0x2e8>
 8000c2e:	e0ad      	b.n	8000d8c <__aeabi_dadd+0x444>
 8000c30:	4a1f      	ldr	r2, [pc, #124]	; (8000cb0 <__aeabi_dadd+0x368>)
 8000c32:	4591      	cmp	r9, r2
 8000c34:	d100      	bne.n	8000c38 <__aeabi_dadd+0x2f0>
 8000c36:	e10f      	b.n	8000e58 <__aeabi_dadd+0x510>
 8000c38:	2280      	movs	r2, #128	; 0x80
 8000c3a:	0412      	lsls	r2, r2, #16
 8000c3c:	4310      	orrs	r0, r2
 8000c3e:	4662      	mov	r2, ip
 8000c40:	2a38      	cmp	r2, #56	; 0x38
 8000c42:	dd00      	ble.n	8000c46 <__aeabi_dadd+0x2fe>
 8000c44:	e10f      	b.n	8000e66 <__aeabi_dadd+0x51e>
 8000c46:	2a1f      	cmp	r2, #31
 8000c48:	dd00      	ble.n	8000c4c <__aeabi_dadd+0x304>
 8000c4a:	e180      	b.n	8000f4e <__aeabi_dadd+0x606>
 8000c4c:	4664      	mov	r4, ip
 8000c4e:	2220      	movs	r2, #32
 8000c50:	001e      	movs	r6, r3
 8000c52:	1b12      	subs	r2, r2, r4
 8000c54:	4667      	mov	r7, ip
 8000c56:	0004      	movs	r4, r0
 8000c58:	4093      	lsls	r3, r2
 8000c5a:	4094      	lsls	r4, r2
 8000c5c:	40fe      	lsrs	r6, r7
 8000c5e:	1e5a      	subs	r2, r3, #1
 8000c60:	4193      	sbcs	r3, r2
 8000c62:	40f8      	lsrs	r0, r7
 8000c64:	4334      	orrs	r4, r6
 8000c66:	431c      	orrs	r4, r3
 8000c68:	4480      	add	r8, r0
 8000c6a:	1864      	adds	r4, r4, r1
 8000c6c:	428c      	cmp	r4, r1
 8000c6e:	41bf      	sbcs	r7, r7
 8000c70:	427f      	negs	r7, r7
 8000c72:	464e      	mov	r6, r9
 8000c74:	4447      	add	r7, r8
 8000c76:	e7a6      	b.n	8000bc6 <__aeabi_dadd+0x27e>
 8000c78:	4642      	mov	r2, r8
 8000c7a:	430a      	orrs	r2, r1
 8000c7c:	0011      	movs	r1, r2
 8000c7e:	1e4a      	subs	r2, r1, #1
 8000c80:	4191      	sbcs	r1, r2
 8000c82:	e6ad      	b.n	80009e0 <__aeabi_dadd+0x98>
 8000c84:	4c0c      	ldr	r4, [pc, #48]	; (8000cb8 <__aeabi_dadd+0x370>)
 8000c86:	1c72      	adds	r2, r6, #1
 8000c88:	4222      	tst	r2, r4
 8000c8a:	d000      	beq.n	8000c8e <__aeabi_dadd+0x346>
 8000c8c:	e0a1      	b.n	8000dd2 <__aeabi_dadd+0x48a>
 8000c8e:	0002      	movs	r2, r0
 8000c90:	431a      	orrs	r2, r3
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	d000      	beq.n	8000c98 <__aeabi_dadd+0x350>
 8000c96:	e0fa      	b.n	8000e8e <__aeabi_dadd+0x546>
 8000c98:	2a00      	cmp	r2, #0
 8000c9a:	d100      	bne.n	8000c9e <__aeabi_dadd+0x356>
 8000c9c:	e145      	b.n	8000f2a <__aeabi_dadd+0x5e2>
 8000c9e:	003a      	movs	r2, r7
 8000ca0:	430a      	orrs	r2, r1
 8000ca2:	d000      	beq.n	8000ca6 <__aeabi_dadd+0x35e>
 8000ca4:	e146      	b.n	8000f34 <__aeabi_dadd+0x5ec>
 8000ca6:	0742      	lsls	r2, r0, #29
 8000ca8:	08db      	lsrs	r3, r3, #3
 8000caa:	4313      	orrs	r3, r2
 8000cac:	08c0      	lsrs	r0, r0, #3
 8000cae:	e77b      	b.n	8000ba8 <__aeabi_dadd+0x260>
 8000cb0:	000007ff 	.word	0x000007ff
 8000cb4:	ff7fffff 	.word	0xff7fffff
 8000cb8:	000007fe 	.word	0x000007fe
 8000cbc:	4647      	mov	r7, r8
 8000cbe:	1a5c      	subs	r4, r3, r1
 8000cc0:	1bc2      	subs	r2, r0, r7
 8000cc2:	42a3      	cmp	r3, r4
 8000cc4:	41bf      	sbcs	r7, r7
 8000cc6:	427f      	negs	r7, r7
 8000cc8:	46b9      	mov	r9, r7
 8000cca:	0017      	movs	r7, r2
 8000ccc:	464a      	mov	r2, r9
 8000cce:	1abf      	subs	r7, r7, r2
 8000cd0:	023a      	lsls	r2, r7, #8
 8000cd2:	d500      	bpl.n	8000cd6 <__aeabi_dadd+0x38e>
 8000cd4:	e08d      	b.n	8000df2 <__aeabi_dadd+0x4aa>
 8000cd6:	0023      	movs	r3, r4
 8000cd8:	433b      	orrs	r3, r7
 8000cda:	d000      	beq.n	8000cde <__aeabi_dadd+0x396>
 8000cdc:	e68a      	b.n	80009f4 <__aeabi_dadd+0xac>
 8000cde:	2000      	movs	r0, #0
 8000ce0:	2500      	movs	r5, #0
 8000ce2:	e761      	b.n	8000ba8 <__aeabi_dadd+0x260>
 8000ce4:	4cb4      	ldr	r4, [pc, #720]	; (8000fb8 <__aeabi_dadd+0x670>)
 8000ce6:	45a1      	cmp	r9, r4
 8000ce8:	d100      	bne.n	8000cec <__aeabi_dadd+0x3a4>
 8000cea:	e0ad      	b.n	8000e48 <__aeabi_dadd+0x500>
 8000cec:	2480      	movs	r4, #128	; 0x80
 8000cee:	0424      	lsls	r4, r4, #16
 8000cf0:	4320      	orrs	r0, r4
 8000cf2:	4664      	mov	r4, ip
 8000cf4:	2c38      	cmp	r4, #56	; 0x38
 8000cf6:	dc3d      	bgt.n	8000d74 <__aeabi_dadd+0x42c>
 8000cf8:	4662      	mov	r2, ip
 8000cfa:	2c1f      	cmp	r4, #31
 8000cfc:	dd00      	ble.n	8000d00 <__aeabi_dadd+0x3b8>
 8000cfe:	e0b7      	b.n	8000e70 <__aeabi_dadd+0x528>
 8000d00:	2520      	movs	r5, #32
 8000d02:	001e      	movs	r6, r3
 8000d04:	1b2d      	subs	r5, r5, r4
 8000d06:	0004      	movs	r4, r0
 8000d08:	40ab      	lsls	r3, r5
 8000d0a:	40ac      	lsls	r4, r5
 8000d0c:	40d6      	lsrs	r6, r2
 8000d0e:	40d0      	lsrs	r0, r2
 8000d10:	4642      	mov	r2, r8
 8000d12:	1e5d      	subs	r5, r3, #1
 8000d14:	41ab      	sbcs	r3, r5
 8000d16:	4334      	orrs	r4, r6
 8000d18:	1a12      	subs	r2, r2, r0
 8000d1a:	4690      	mov	r8, r2
 8000d1c:	4323      	orrs	r3, r4
 8000d1e:	e02c      	b.n	8000d7a <__aeabi_dadd+0x432>
 8000d20:	0742      	lsls	r2, r0, #29
 8000d22:	08db      	lsrs	r3, r3, #3
 8000d24:	4313      	orrs	r3, r2
 8000d26:	08c0      	lsrs	r0, r0, #3
 8000d28:	e73b      	b.n	8000ba2 <__aeabi_dadd+0x25a>
 8000d2a:	185c      	adds	r4, r3, r1
 8000d2c:	429c      	cmp	r4, r3
 8000d2e:	419b      	sbcs	r3, r3
 8000d30:	4440      	add	r0, r8
 8000d32:	425b      	negs	r3, r3
 8000d34:	18c7      	adds	r7, r0, r3
 8000d36:	2601      	movs	r6, #1
 8000d38:	023b      	lsls	r3, r7, #8
 8000d3a:	d400      	bmi.n	8000d3e <__aeabi_dadd+0x3f6>
 8000d3c:	e729      	b.n	8000b92 <__aeabi_dadd+0x24a>
 8000d3e:	2602      	movs	r6, #2
 8000d40:	4a9e      	ldr	r2, [pc, #632]	; (8000fbc <__aeabi_dadd+0x674>)
 8000d42:	0863      	lsrs	r3, r4, #1
 8000d44:	4017      	ands	r7, r2
 8000d46:	2201      	movs	r2, #1
 8000d48:	4014      	ands	r4, r2
 8000d4a:	431c      	orrs	r4, r3
 8000d4c:	07fb      	lsls	r3, r7, #31
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	087f      	lsrs	r7, r7, #1
 8000d52:	e673      	b.n	8000a3c <__aeabi_dadd+0xf4>
 8000d54:	4644      	mov	r4, r8
 8000d56:	3a20      	subs	r2, #32
 8000d58:	40d4      	lsrs	r4, r2
 8000d5a:	4662      	mov	r2, ip
 8000d5c:	2a20      	cmp	r2, #32
 8000d5e:	d005      	beq.n	8000d6c <__aeabi_dadd+0x424>
 8000d60:	4667      	mov	r7, ip
 8000d62:	2240      	movs	r2, #64	; 0x40
 8000d64:	1bd2      	subs	r2, r2, r7
 8000d66:	4647      	mov	r7, r8
 8000d68:	4097      	lsls	r7, r2
 8000d6a:	4339      	orrs	r1, r7
 8000d6c:	1e4a      	subs	r2, r1, #1
 8000d6e:	4191      	sbcs	r1, r2
 8000d70:	4321      	orrs	r1, r4
 8000d72:	e635      	b.n	80009e0 <__aeabi_dadd+0x98>
 8000d74:	4303      	orrs	r3, r0
 8000d76:	1e58      	subs	r0, r3, #1
 8000d78:	4183      	sbcs	r3, r0
 8000d7a:	1acc      	subs	r4, r1, r3
 8000d7c:	42a1      	cmp	r1, r4
 8000d7e:	41bf      	sbcs	r7, r7
 8000d80:	4643      	mov	r3, r8
 8000d82:	427f      	negs	r7, r7
 8000d84:	4655      	mov	r5, sl
 8000d86:	464e      	mov	r6, r9
 8000d88:	1bdf      	subs	r7, r3, r7
 8000d8a:	e62e      	b.n	80009ea <__aeabi_dadd+0xa2>
 8000d8c:	0002      	movs	r2, r0
 8000d8e:	431a      	orrs	r2, r3
 8000d90:	d100      	bne.n	8000d94 <__aeabi_dadd+0x44c>
 8000d92:	e0bd      	b.n	8000f10 <__aeabi_dadd+0x5c8>
 8000d94:	4662      	mov	r2, ip
 8000d96:	4664      	mov	r4, ip
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	2c01      	cmp	r4, #1
 8000d9c:	d100      	bne.n	8000da0 <__aeabi_dadd+0x458>
 8000d9e:	e0e5      	b.n	8000f6c <__aeabi_dadd+0x624>
 8000da0:	4c85      	ldr	r4, [pc, #532]	; (8000fb8 <__aeabi_dadd+0x670>)
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d058      	beq.n	8000e58 <__aeabi_dadd+0x510>
 8000da6:	4694      	mov	ip, r2
 8000da8:	e749      	b.n	8000c3e <__aeabi_dadd+0x2f6>
 8000daa:	4664      	mov	r4, ip
 8000dac:	2220      	movs	r2, #32
 8000dae:	1b12      	subs	r2, r2, r4
 8000db0:	4644      	mov	r4, r8
 8000db2:	4094      	lsls	r4, r2
 8000db4:	000f      	movs	r7, r1
 8000db6:	46a1      	mov	r9, r4
 8000db8:	4664      	mov	r4, ip
 8000dba:	4091      	lsls	r1, r2
 8000dbc:	40e7      	lsrs	r7, r4
 8000dbe:	464c      	mov	r4, r9
 8000dc0:	1e4a      	subs	r2, r1, #1
 8000dc2:	4191      	sbcs	r1, r2
 8000dc4:	433c      	orrs	r4, r7
 8000dc6:	4642      	mov	r2, r8
 8000dc8:	430c      	orrs	r4, r1
 8000dca:	4661      	mov	r1, ip
 8000dcc:	40ca      	lsrs	r2, r1
 8000dce:	1880      	adds	r0, r0, r2
 8000dd0:	e6f4      	b.n	8000bbc <__aeabi_dadd+0x274>
 8000dd2:	4c79      	ldr	r4, [pc, #484]	; (8000fb8 <__aeabi_dadd+0x670>)
 8000dd4:	42a2      	cmp	r2, r4
 8000dd6:	d100      	bne.n	8000dda <__aeabi_dadd+0x492>
 8000dd8:	e6fd      	b.n	8000bd6 <__aeabi_dadd+0x28e>
 8000dda:	1859      	adds	r1, r3, r1
 8000ddc:	4299      	cmp	r1, r3
 8000dde:	419b      	sbcs	r3, r3
 8000de0:	4440      	add	r0, r8
 8000de2:	425f      	negs	r7, r3
 8000de4:	19c7      	adds	r7, r0, r7
 8000de6:	07fc      	lsls	r4, r7, #31
 8000de8:	0849      	lsrs	r1, r1, #1
 8000dea:	0016      	movs	r6, r2
 8000dec:	430c      	orrs	r4, r1
 8000dee:	087f      	lsrs	r7, r7, #1
 8000df0:	e6cf      	b.n	8000b92 <__aeabi_dadd+0x24a>
 8000df2:	1acc      	subs	r4, r1, r3
 8000df4:	42a1      	cmp	r1, r4
 8000df6:	41bf      	sbcs	r7, r7
 8000df8:	4643      	mov	r3, r8
 8000dfa:	427f      	negs	r7, r7
 8000dfc:	1a18      	subs	r0, r3, r0
 8000dfe:	4655      	mov	r5, sl
 8000e00:	1bc7      	subs	r7, r0, r7
 8000e02:	e5f7      	b.n	80009f4 <__aeabi_dadd+0xac>
 8000e04:	08c9      	lsrs	r1, r1, #3
 8000e06:	077b      	lsls	r3, r7, #29
 8000e08:	4655      	mov	r5, sl
 8000e0a:	430b      	orrs	r3, r1
 8000e0c:	08f8      	lsrs	r0, r7, #3
 8000e0e:	e6c8      	b.n	8000ba2 <__aeabi_dadd+0x25a>
 8000e10:	2c00      	cmp	r4, #0
 8000e12:	d000      	beq.n	8000e16 <__aeabi_dadd+0x4ce>
 8000e14:	e081      	b.n	8000f1a <__aeabi_dadd+0x5d2>
 8000e16:	4643      	mov	r3, r8
 8000e18:	430b      	orrs	r3, r1
 8000e1a:	d115      	bne.n	8000e48 <__aeabi_dadd+0x500>
 8000e1c:	2080      	movs	r0, #128	; 0x80
 8000e1e:	2500      	movs	r5, #0
 8000e20:	0300      	lsls	r0, r0, #12
 8000e22:	e6e3      	b.n	8000bec <__aeabi_dadd+0x2a4>
 8000e24:	1a5c      	subs	r4, r3, r1
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	419b      	sbcs	r3, r3
 8000e2a:	1bc7      	subs	r7, r0, r7
 8000e2c:	425b      	negs	r3, r3
 8000e2e:	2601      	movs	r6, #1
 8000e30:	1aff      	subs	r7, r7, r3
 8000e32:	e5da      	b.n	80009ea <__aeabi_dadd+0xa2>
 8000e34:	0742      	lsls	r2, r0, #29
 8000e36:	08db      	lsrs	r3, r3, #3
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	08c0      	lsrs	r0, r0, #3
 8000e3c:	e6d2      	b.n	8000be4 <__aeabi_dadd+0x29c>
 8000e3e:	0742      	lsls	r2, r0, #29
 8000e40:	08db      	lsrs	r3, r3, #3
 8000e42:	4313      	orrs	r3, r2
 8000e44:	08c0      	lsrs	r0, r0, #3
 8000e46:	e6ac      	b.n	8000ba2 <__aeabi_dadd+0x25a>
 8000e48:	4643      	mov	r3, r8
 8000e4a:	4642      	mov	r2, r8
 8000e4c:	08c9      	lsrs	r1, r1, #3
 8000e4e:	075b      	lsls	r3, r3, #29
 8000e50:	4655      	mov	r5, sl
 8000e52:	430b      	orrs	r3, r1
 8000e54:	08d0      	lsrs	r0, r2, #3
 8000e56:	e6c5      	b.n	8000be4 <__aeabi_dadd+0x29c>
 8000e58:	4643      	mov	r3, r8
 8000e5a:	4642      	mov	r2, r8
 8000e5c:	075b      	lsls	r3, r3, #29
 8000e5e:	08c9      	lsrs	r1, r1, #3
 8000e60:	430b      	orrs	r3, r1
 8000e62:	08d0      	lsrs	r0, r2, #3
 8000e64:	e6be      	b.n	8000be4 <__aeabi_dadd+0x29c>
 8000e66:	4303      	orrs	r3, r0
 8000e68:	001c      	movs	r4, r3
 8000e6a:	1e63      	subs	r3, r4, #1
 8000e6c:	419c      	sbcs	r4, r3
 8000e6e:	e6fc      	b.n	8000c6a <__aeabi_dadd+0x322>
 8000e70:	0002      	movs	r2, r0
 8000e72:	3c20      	subs	r4, #32
 8000e74:	40e2      	lsrs	r2, r4
 8000e76:	0014      	movs	r4, r2
 8000e78:	4662      	mov	r2, ip
 8000e7a:	2a20      	cmp	r2, #32
 8000e7c:	d003      	beq.n	8000e86 <__aeabi_dadd+0x53e>
 8000e7e:	2540      	movs	r5, #64	; 0x40
 8000e80:	1aad      	subs	r5, r5, r2
 8000e82:	40a8      	lsls	r0, r5
 8000e84:	4303      	orrs	r3, r0
 8000e86:	1e58      	subs	r0, r3, #1
 8000e88:	4183      	sbcs	r3, r0
 8000e8a:	4323      	orrs	r3, r4
 8000e8c:	e775      	b.n	8000d7a <__aeabi_dadd+0x432>
 8000e8e:	2a00      	cmp	r2, #0
 8000e90:	d0e2      	beq.n	8000e58 <__aeabi_dadd+0x510>
 8000e92:	003a      	movs	r2, r7
 8000e94:	430a      	orrs	r2, r1
 8000e96:	d0cd      	beq.n	8000e34 <__aeabi_dadd+0x4ec>
 8000e98:	0742      	lsls	r2, r0, #29
 8000e9a:	08db      	lsrs	r3, r3, #3
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	2280      	movs	r2, #128	; 0x80
 8000ea0:	08c0      	lsrs	r0, r0, #3
 8000ea2:	0312      	lsls	r2, r2, #12
 8000ea4:	4210      	tst	r0, r2
 8000ea6:	d006      	beq.n	8000eb6 <__aeabi_dadd+0x56e>
 8000ea8:	08fc      	lsrs	r4, r7, #3
 8000eaa:	4214      	tst	r4, r2
 8000eac:	d103      	bne.n	8000eb6 <__aeabi_dadd+0x56e>
 8000eae:	0020      	movs	r0, r4
 8000eb0:	08cb      	lsrs	r3, r1, #3
 8000eb2:	077a      	lsls	r2, r7, #29
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	0f5a      	lsrs	r2, r3, #29
 8000eb8:	00db      	lsls	r3, r3, #3
 8000eba:	0752      	lsls	r2, r2, #29
 8000ebc:	08db      	lsrs	r3, r3, #3
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	e690      	b.n	8000be4 <__aeabi_dadd+0x29c>
 8000ec2:	4643      	mov	r3, r8
 8000ec4:	430b      	orrs	r3, r1
 8000ec6:	d100      	bne.n	8000eca <__aeabi_dadd+0x582>
 8000ec8:	e709      	b.n	8000cde <__aeabi_dadd+0x396>
 8000eca:	4643      	mov	r3, r8
 8000ecc:	4642      	mov	r2, r8
 8000ece:	08c9      	lsrs	r1, r1, #3
 8000ed0:	075b      	lsls	r3, r3, #29
 8000ed2:	4655      	mov	r5, sl
 8000ed4:	430b      	orrs	r3, r1
 8000ed6:	08d0      	lsrs	r0, r2, #3
 8000ed8:	e666      	b.n	8000ba8 <__aeabi_dadd+0x260>
 8000eda:	1acc      	subs	r4, r1, r3
 8000edc:	42a1      	cmp	r1, r4
 8000ede:	4189      	sbcs	r1, r1
 8000ee0:	1a3f      	subs	r7, r7, r0
 8000ee2:	4249      	negs	r1, r1
 8000ee4:	4655      	mov	r5, sl
 8000ee6:	2601      	movs	r6, #1
 8000ee8:	1a7f      	subs	r7, r7, r1
 8000eea:	e57e      	b.n	80009ea <__aeabi_dadd+0xa2>
 8000eec:	4642      	mov	r2, r8
 8000eee:	1a5c      	subs	r4, r3, r1
 8000ef0:	1a87      	subs	r7, r0, r2
 8000ef2:	42a3      	cmp	r3, r4
 8000ef4:	4192      	sbcs	r2, r2
 8000ef6:	4252      	negs	r2, r2
 8000ef8:	1abf      	subs	r7, r7, r2
 8000efa:	023a      	lsls	r2, r7, #8
 8000efc:	d53d      	bpl.n	8000f7a <__aeabi_dadd+0x632>
 8000efe:	1acc      	subs	r4, r1, r3
 8000f00:	42a1      	cmp	r1, r4
 8000f02:	4189      	sbcs	r1, r1
 8000f04:	4643      	mov	r3, r8
 8000f06:	4249      	negs	r1, r1
 8000f08:	1a1f      	subs	r7, r3, r0
 8000f0a:	4655      	mov	r5, sl
 8000f0c:	1a7f      	subs	r7, r7, r1
 8000f0e:	e595      	b.n	8000a3c <__aeabi_dadd+0xf4>
 8000f10:	077b      	lsls	r3, r7, #29
 8000f12:	08c9      	lsrs	r1, r1, #3
 8000f14:	430b      	orrs	r3, r1
 8000f16:	08f8      	lsrs	r0, r7, #3
 8000f18:	e643      	b.n	8000ba2 <__aeabi_dadd+0x25a>
 8000f1a:	4644      	mov	r4, r8
 8000f1c:	08db      	lsrs	r3, r3, #3
 8000f1e:	430c      	orrs	r4, r1
 8000f20:	d130      	bne.n	8000f84 <__aeabi_dadd+0x63c>
 8000f22:	0742      	lsls	r2, r0, #29
 8000f24:	4313      	orrs	r3, r2
 8000f26:	08c0      	lsrs	r0, r0, #3
 8000f28:	e65c      	b.n	8000be4 <__aeabi_dadd+0x29c>
 8000f2a:	077b      	lsls	r3, r7, #29
 8000f2c:	08c9      	lsrs	r1, r1, #3
 8000f2e:	430b      	orrs	r3, r1
 8000f30:	08f8      	lsrs	r0, r7, #3
 8000f32:	e639      	b.n	8000ba8 <__aeabi_dadd+0x260>
 8000f34:	185c      	adds	r4, r3, r1
 8000f36:	429c      	cmp	r4, r3
 8000f38:	419b      	sbcs	r3, r3
 8000f3a:	4440      	add	r0, r8
 8000f3c:	425b      	negs	r3, r3
 8000f3e:	18c7      	adds	r7, r0, r3
 8000f40:	023b      	lsls	r3, r7, #8
 8000f42:	d400      	bmi.n	8000f46 <__aeabi_dadd+0x5fe>
 8000f44:	e625      	b.n	8000b92 <__aeabi_dadd+0x24a>
 8000f46:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <__aeabi_dadd+0x674>)
 8000f48:	2601      	movs	r6, #1
 8000f4a:	401f      	ands	r7, r3
 8000f4c:	e621      	b.n	8000b92 <__aeabi_dadd+0x24a>
 8000f4e:	0004      	movs	r4, r0
 8000f50:	3a20      	subs	r2, #32
 8000f52:	40d4      	lsrs	r4, r2
 8000f54:	4662      	mov	r2, ip
 8000f56:	2a20      	cmp	r2, #32
 8000f58:	d004      	beq.n	8000f64 <__aeabi_dadd+0x61c>
 8000f5a:	2240      	movs	r2, #64	; 0x40
 8000f5c:	4666      	mov	r6, ip
 8000f5e:	1b92      	subs	r2, r2, r6
 8000f60:	4090      	lsls	r0, r2
 8000f62:	4303      	orrs	r3, r0
 8000f64:	1e5a      	subs	r2, r3, #1
 8000f66:	4193      	sbcs	r3, r2
 8000f68:	431c      	orrs	r4, r3
 8000f6a:	e67e      	b.n	8000c6a <__aeabi_dadd+0x322>
 8000f6c:	185c      	adds	r4, r3, r1
 8000f6e:	428c      	cmp	r4, r1
 8000f70:	4189      	sbcs	r1, r1
 8000f72:	4440      	add	r0, r8
 8000f74:	4249      	negs	r1, r1
 8000f76:	1847      	adds	r7, r0, r1
 8000f78:	e6dd      	b.n	8000d36 <__aeabi_dadd+0x3ee>
 8000f7a:	0023      	movs	r3, r4
 8000f7c:	433b      	orrs	r3, r7
 8000f7e:	d100      	bne.n	8000f82 <__aeabi_dadd+0x63a>
 8000f80:	e6ad      	b.n	8000cde <__aeabi_dadd+0x396>
 8000f82:	e606      	b.n	8000b92 <__aeabi_dadd+0x24a>
 8000f84:	0744      	lsls	r4, r0, #29
 8000f86:	4323      	orrs	r3, r4
 8000f88:	2480      	movs	r4, #128	; 0x80
 8000f8a:	08c0      	lsrs	r0, r0, #3
 8000f8c:	0324      	lsls	r4, r4, #12
 8000f8e:	4220      	tst	r0, r4
 8000f90:	d008      	beq.n	8000fa4 <__aeabi_dadd+0x65c>
 8000f92:	4642      	mov	r2, r8
 8000f94:	08d6      	lsrs	r6, r2, #3
 8000f96:	4226      	tst	r6, r4
 8000f98:	d104      	bne.n	8000fa4 <__aeabi_dadd+0x65c>
 8000f9a:	4655      	mov	r5, sl
 8000f9c:	0030      	movs	r0, r6
 8000f9e:	08cb      	lsrs	r3, r1, #3
 8000fa0:	0751      	lsls	r1, r2, #29
 8000fa2:	430b      	orrs	r3, r1
 8000fa4:	0f5a      	lsrs	r2, r3, #29
 8000fa6:	00db      	lsls	r3, r3, #3
 8000fa8:	08db      	lsrs	r3, r3, #3
 8000faa:	0752      	lsls	r2, r2, #29
 8000fac:	4313      	orrs	r3, r2
 8000fae:	e619      	b.n	8000be4 <__aeabi_dadd+0x29c>
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	4a01      	ldr	r2, [pc, #4]	; (8000fb8 <__aeabi_dadd+0x670>)
 8000fb4:	001f      	movs	r7, r3
 8000fb6:	e55e      	b.n	8000a76 <__aeabi_dadd+0x12e>
 8000fb8:	000007ff 	.word	0x000007ff
 8000fbc:	ff7fffff 	.word	0xff7fffff

08000fc0 <__aeabi_ddiv>:
 8000fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fc2:	4657      	mov	r7, sl
 8000fc4:	464e      	mov	r6, r9
 8000fc6:	4645      	mov	r5, r8
 8000fc8:	46de      	mov	lr, fp
 8000fca:	b5e0      	push	{r5, r6, r7, lr}
 8000fcc:	4681      	mov	r9, r0
 8000fce:	0005      	movs	r5, r0
 8000fd0:	030c      	lsls	r4, r1, #12
 8000fd2:	0048      	lsls	r0, r1, #1
 8000fd4:	4692      	mov	sl, r2
 8000fd6:	001f      	movs	r7, r3
 8000fd8:	b085      	sub	sp, #20
 8000fda:	0b24      	lsrs	r4, r4, #12
 8000fdc:	0d40      	lsrs	r0, r0, #21
 8000fde:	0fce      	lsrs	r6, r1, #31
 8000fe0:	2800      	cmp	r0, #0
 8000fe2:	d100      	bne.n	8000fe6 <__aeabi_ddiv+0x26>
 8000fe4:	e156      	b.n	8001294 <__aeabi_ddiv+0x2d4>
 8000fe6:	4bd4      	ldr	r3, [pc, #848]	; (8001338 <__aeabi_ddiv+0x378>)
 8000fe8:	4298      	cmp	r0, r3
 8000fea:	d100      	bne.n	8000fee <__aeabi_ddiv+0x2e>
 8000fec:	e172      	b.n	80012d4 <__aeabi_ddiv+0x314>
 8000fee:	0f6b      	lsrs	r3, r5, #29
 8000ff0:	00e4      	lsls	r4, r4, #3
 8000ff2:	431c      	orrs	r4, r3
 8000ff4:	2380      	movs	r3, #128	; 0x80
 8000ff6:	041b      	lsls	r3, r3, #16
 8000ff8:	4323      	orrs	r3, r4
 8000ffa:	4698      	mov	r8, r3
 8000ffc:	4bcf      	ldr	r3, [pc, #828]	; (800133c <__aeabi_ddiv+0x37c>)
 8000ffe:	00ed      	lsls	r5, r5, #3
 8001000:	469b      	mov	fp, r3
 8001002:	2300      	movs	r3, #0
 8001004:	4699      	mov	r9, r3
 8001006:	4483      	add	fp, r0
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	033c      	lsls	r4, r7, #12
 800100c:	007b      	lsls	r3, r7, #1
 800100e:	4650      	mov	r0, sl
 8001010:	0b24      	lsrs	r4, r4, #12
 8001012:	0d5b      	lsrs	r3, r3, #21
 8001014:	0fff      	lsrs	r7, r7, #31
 8001016:	2b00      	cmp	r3, #0
 8001018:	d100      	bne.n	800101c <__aeabi_ddiv+0x5c>
 800101a:	e11f      	b.n	800125c <__aeabi_ddiv+0x29c>
 800101c:	4ac6      	ldr	r2, [pc, #792]	; (8001338 <__aeabi_ddiv+0x378>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d100      	bne.n	8001024 <__aeabi_ddiv+0x64>
 8001022:	e162      	b.n	80012ea <__aeabi_ddiv+0x32a>
 8001024:	49c5      	ldr	r1, [pc, #788]	; (800133c <__aeabi_ddiv+0x37c>)
 8001026:	0f42      	lsrs	r2, r0, #29
 8001028:	468c      	mov	ip, r1
 800102a:	00e4      	lsls	r4, r4, #3
 800102c:	4659      	mov	r1, fp
 800102e:	4314      	orrs	r4, r2
 8001030:	2280      	movs	r2, #128	; 0x80
 8001032:	4463      	add	r3, ip
 8001034:	0412      	lsls	r2, r2, #16
 8001036:	1acb      	subs	r3, r1, r3
 8001038:	4314      	orrs	r4, r2
 800103a:	469b      	mov	fp, r3
 800103c:	00c2      	lsls	r2, r0, #3
 800103e:	2000      	movs	r0, #0
 8001040:	0033      	movs	r3, r6
 8001042:	407b      	eors	r3, r7
 8001044:	469a      	mov	sl, r3
 8001046:	464b      	mov	r3, r9
 8001048:	2b0f      	cmp	r3, #15
 800104a:	d827      	bhi.n	800109c <__aeabi_ddiv+0xdc>
 800104c:	49bc      	ldr	r1, [pc, #752]	; (8001340 <__aeabi_ddiv+0x380>)
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	58cb      	ldr	r3, [r1, r3]
 8001052:	469f      	mov	pc, r3
 8001054:	46b2      	mov	sl, r6
 8001056:	9b00      	ldr	r3, [sp, #0]
 8001058:	2b02      	cmp	r3, #2
 800105a:	d016      	beq.n	800108a <__aeabi_ddiv+0xca>
 800105c:	2b03      	cmp	r3, #3
 800105e:	d100      	bne.n	8001062 <__aeabi_ddiv+0xa2>
 8001060:	e28e      	b.n	8001580 <__aeabi_ddiv+0x5c0>
 8001062:	2b01      	cmp	r3, #1
 8001064:	d000      	beq.n	8001068 <__aeabi_ddiv+0xa8>
 8001066:	e0d9      	b.n	800121c <__aeabi_ddiv+0x25c>
 8001068:	2300      	movs	r3, #0
 800106a:	2400      	movs	r4, #0
 800106c:	2500      	movs	r5, #0
 800106e:	4652      	mov	r2, sl
 8001070:	051b      	lsls	r3, r3, #20
 8001072:	4323      	orrs	r3, r4
 8001074:	07d2      	lsls	r2, r2, #31
 8001076:	4313      	orrs	r3, r2
 8001078:	0028      	movs	r0, r5
 800107a:	0019      	movs	r1, r3
 800107c:	b005      	add	sp, #20
 800107e:	bcf0      	pop	{r4, r5, r6, r7}
 8001080:	46bb      	mov	fp, r7
 8001082:	46b2      	mov	sl, r6
 8001084:	46a9      	mov	r9, r5
 8001086:	46a0      	mov	r8, r4
 8001088:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800108a:	2400      	movs	r4, #0
 800108c:	2500      	movs	r5, #0
 800108e:	4baa      	ldr	r3, [pc, #680]	; (8001338 <__aeabi_ddiv+0x378>)
 8001090:	e7ed      	b.n	800106e <__aeabi_ddiv+0xae>
 8001092:	46ba      	mov	sl, r7
 8001094:	46a0      	mov	r8, r4
 8001096:	0015      	movs	r5, r2
 8001098:	9000      	str	r0, [sp, #0]
 800109a:	e7dc      	b.n	8001056 <__aeabi_ddiv+0x96>
 800109c:	4544      	cmp	r4, r8
 800109e:	d200      	bcs.n	80010a2 <__aeabi_ddiv+0xe2>
 80010a0:	e1c7      	b.n	8001432 <__aeabi_ddiv+0x472>
 80010a2:	d100      	bne.n	80010a6 <__aeabi_ddiv+0xe6>
 80010a4:	e1c2      	b.n	800142c <__aeabi_ddiv+0x46c>
 80010a6:	2301      	movs	r3, #1
 80010a8:	425b      	negs	r3, r3
 80010aa:	469c      	mov	ip, r3
 80010ac:	002e      	movs	r6, r5
 80010ae:	4640      	mov	r0, r8
 80010b0:	2500      	movs	r5, #0
 80010b2:	44e3      	add	fp, ip
 80010b4:	0223      	lsls	r3, r4, #8
 80010b6:	0e14      	lsrs	r4, r2, #24
 80010b8:	431c      	orrs	r4, r3
 80010ba:	0c1b      	lsrs	r3, r3, #16
 80010bc:	4699      	mov	r9, r3
 80010be:	0423      	lsls	r3, r4, #16
 80010c0:	0c1f      	lsrs	r7, r3, #16
 80010c2:	0212      	lsls	r2, r2, #8
 80010c4:	4649      	mov	r1, r9
 80010c6:	9200      	str	r2, [sp, #0]
 80010c8:	9701      	str	r7, [sp, #4]
 80010ca:	f7ff f8bd 	bl	8000248 <__aeabi_uidivmod>
 80010ce:	0002      	movs	r2, r0
 80010d0:	437a      	muls	r2, r7
 80010d2:	040b      	lsls	r3, r1, #16
 80010d4:	0c31      	lsrs	r1, r6, #16
 80010d6:	4680      	mov	r8, r0
 80010d8:	4319      	orrs	r1, r3
 80010da:	428a      	cmp	r2, r1
 80010dc:	d907      	bls.n	80010ee <__aeabi_ddiv+0x12e>
 80010de:	2301      	movs	r3, #1
 80010e0:	425b      	negs	r3, r3
 80010e2:	469c      	mov	ip, r3
 80010e4:	1909      	adds	r1, r1, r4
 80010e6:	44e0      	add	r8, ip
 80010e8:	428c      	cmp	r4, r1
 80010ea:	d800      	bhi.n	80010ee <__aeabi_ddiv+0x12e>
 80010ec:	e207      	b.n	80014fe <__aeabi_ddiv+0x53e>
 80010ee:	1a88      	subs	r0, r1, r2
 80010f0:	4649      	mov	r1, r9
 80010f2:	f7ff f8a9 	bl	8000248 <__aeabi_uidivmod>
 80010f6:	0409      	lsls	r1, r1, #16
 80010f8:	468c      	mov	ip, r1
 80010fa:	0431      	lsls	r1, r6, #16
 80010fc:	4666      	mov	r6, ip
 80010fe:	9a01      	ldr	r2, [sp, #4]
 8001100:	0c09      	lsrs	r1, r1, #16
 8001102:	4342      	muls	r2, r0
 8001104:	0003      	movs	r3, r0
 8001106:	4331      	orrs	r1, r6
 8001108:	428a      	cmp	r2, r1
 800110a:	d904      	bls.n	8001116 <__aeabi_ddiv+0x156>
 800110c:	1909      	adds	r1, r1, r4
 800110e:	3b01      	subs	r3, #1
 8001110:	428c      	cmp	r4, r1
 8001112:	d800      	bhi.n	8001116 <__aeabi_ddiv+0x156>
 8001114:	e1ed      	b.n	80014f2 <__aeabi_ddiv+0x532>
 8001116:	1a88      	subs	r0, r1, r2
 8001118:	4642      	mov	r2, r8
 800111a:	0412      	lsls	r2, r2, #16
 800111c:	431a      	orrs	r2, r3
 800111e:	4690      	mov	r8, r2
 8001120:	4641      	mov	r1, r8
 8001122:	9b00      	ldr	r3, [sp, #0]
 8001124:	040e      	lsls	r6, r1, #16
 8001126:	0c1b      	lsrs	r3, r3, #16
 8001128:	001f      	movs	r7, r3
 800112a:	9302      	str	r3, [sp, #8]
 800112c:	9b00      	ldr	r3, [sp, #0]
 800112e:	0c36      	lsrs	r6, r6, #16
 8001130:	041b      	lsls	r3, r3, #16
 8001132:	0c19      	lsrs	r1, r3, #16
 8001134:	000b      	movs	r3, r1
 8001136:	4373      	muls	r3, r6
 8001138:	0c12      	lsrs	r2, r2, #16
 800113a:	437e      	muls	r6, r7
 800113c:	9103      	str	r1, [sp, #12]
 800113e:	4351      	muls	r1, r2
 8001140:	437a      	muls	r2, r7
 8001142:	0c1f      	lsrs	r7, r3, #16
 8001144:	46bc      	mov	ip, r7
 8001146:	1876      	adds	r6, r6, r1
 8001148:	4466      	add	r6, ip
 800114a:	42b1      	cmp	r1, r6
 800114c:	d903      	bls.n	8001156 <__aeabi_ddiv+0x196>
 800114e:	2180      	movs	r1, #128	; 0x80
 8001150:	0249      	lsls	r1, r1, #9
 8001152:	468c      	mov	ip, r1
 8001154:	4462      	add	r2, ip
 8001156:	0c31      	lsrs	r1, r6, #16
 8001158:	188a      	adds	r2, r1, r2
 800115a:	0431      	lsls	r1, r6, #16
 800115c:	041e      	lsls	r6, r3, #16
 800115e:	0c36      	lsrs	r6, r6, #16
 8001160:	198e      	adds	r6, r1, r6
 8001162:	4290      	cmp	r0, r2
 8001164:	d302      	bcc.n	800116c <__aeabi_ddiv+0x1ac>
 8001166:	d112      	bne.n	800118e <__aeabi_ddiv+0x1ce>
 8001168:	42b5      	cmp	r5, r6
 800116a:	d210      	bcs.n	800118e <__aeabi_ddiv+0x1ce>
 800116c:	4643      	mov	r3, r8
 800116e:	1e59      	subs	r1, r3, #1
 8001170:	9b00      	ldr	r3, [sp, #0]
 8001172:	469c      	mov	ip, r3
 8001174:	4465      	add	r5, ip
 8001176:	001f      	movs	r7, r3
 8001178:	429d      	cmp	r5, r3
 800117a:	419b      	sbcs	r3, r3
 800117c:	425b      	negs	r3, r3
 800117e:	191b      	adds	r3, r3, r4
 8001180:	18c0      	adds	r0, r0, r3
 8001182:	4284      	cmp	r4, r0
 8001184:	d200      	bcs.n	8001188 <__aeabi_ddiv+0x1c8>
 8001186:	e1a0      	b.n	80014ca <__aeabi_ddiv+0x50a>
 8001188:	d100      	bne.n	800118c <__aeabi_ddiv+0x1cc>
 800118a:	e19b      	b.n	80014c4 <__aeabi_ddiv+0x504>
 800118c:	4688      	mov	r8, r1
 800118e:	1bae      	subs	r6, r5, r6
 8001190:	42b5      	cmp	r5, r6
 8001192:	41ad      	sbcs	r5, r5
 8001194:	1a80      	subs	r0, r0, r2
 8001196:	426d      	negs	r5, r5
 8001198:	1b40      	subs	r0, r0, r5
 800119a:	4284      	cmp	r4, r0
 800119c:	d100      	bne.n	80011a0 <__aeabi_ddiv+0x1e0>
 800119e:	e1d5      	b.n	800154c <__aeabi_ddiv+0x58c>
 80011a0:	4649      	mov	r1, r9
 80011a2:	f7ff f851 	bl	8000248 <__aeabi_uidivmod>
 80011a6:	9a01      	ldr	r2, [sp, #4]
 80011a8:	040b      	lsls	r3, r1, #16
 80011aa:	4342      	muls	r2, r0
 80011ac:	0c31      	lsrs	r1, r6, #16
 80011ae:	0005      	movs	r5, r0
 80011b0:	4319      	orrs	r1, r3
 80011b2:	428a      	cmp	r2, r1
 80011b4:	d900      	bls.n	80011b8 <__aeabi_ddiv+0x1f8>
 80011b6:	e16c      	b.n	8001492 <__aeabi_ddiv+0x4d2>
 80011b8:	1a88      	subs	r0, r1, r2
 80011ba:	4649      	mov	r1, r9
 80011bc:	f7ff f844 	bl	8000248 <__aeabi_uidivmod>
 80011c0:	9a01      	ldr	r2, [sp, #4]
 80011c2:	0436      	lsls	r6, r6, #16
 80011c4:	4342      	muls	r2, r0
 80011c6:	0409      	lsls	r1, r1, #16
 80011c8:	0c36      	lsrs	r6, r6, #16
 80011ca:	0003      	movs	r3, r0
 80011cc:	430e      	orrs	r6, r1
 80011ce:	42b2      	cmp	r2, r6
 80011d0:	d900      	bls.n	80011d4 <__aeabi_ddiv+0x214>
 80011d2:	e153      	b.n	800147c <__aeabi_ddiv+0x4bc>
 80011d4:	9803      	ldr	r0, [sp, #12]
 80011d6:	1ab6      	subs	r6, r6, r2
 80011d8:	0002      	movs	r2, r0
 80011da:	042d      	lsls	r5, r5, #16
 80011dc:	431d      	orrs	r5, r3
 80011de:	9f02      	ldr	r7, [sp, #8]
 80011e0:	042b      	lsls	r3, r5, #16
 80011e2:	0c1b      	lsrs	r3, r3, #16
 80011e4:	435a      	muls	r2, r3
 80011e6:	437b      	muls	r3, r7
 80011e8:	469c      	mov	ip, r3
 80011ea:	0c29      	lsrs	r1, r5, #16
 80011ec:	4348      	muls	r0, r1
 80011ee:	0c13      	lsrs	r3, r2, #16
 80011f0:	4484      	add	ip, r0
 80011f2:	4463      	add	r3, ip
 80011f4:	4379      	muls	r1, r7
 80011f6:	4298      	cmp	r0, r3
 80011f8:	d903      	bls.n	8001202 <__aeabi_ddiv+0x242>
 80011fa:	2080      	movs	r0, #128	; 0x80
 80011fc:	0240      	lsls	r0, r0, #9
 80011fe:	4684      	mov	ip, r0
 8001200:	4461      	add	r1, ip
 8001202:	0c18      	lsrs	r0, r3, #16
 8001204:	0412      	lsls	r2, r2, #16
 8001206:	041b      	lsls	r3, r3, #16
 8001208:	0c12      	lsrs	r2, r2, #16
 800120a:	1841      	adds	r1, r0, r1
 800120c:	189b      	adds	r3, r3, r2
 800120e:	428e      	cmp	r6, r1
 8001210:	d200      	bcs.n	8001214 <__aeabi_ddiv+0x254>
 8001212:	e0ff      	b.n	8001414 <__aeabi_ddiv+0x454>
 8001214:	d100      	bne.n	8001218 <__aeabi_ddiv+0x258>
 8001216:	e0fa      	b.n	800140e <__aeabi_ddiv+0x44e>
 8001218:	2301      	movs	r3, #1
 800121a:	431d      	orrs	r5, r3
 800121c:	4a49      	ldr	r2, [pc, #292]	; (8001344 <__aeabi_ddiv+0x384>)
 800121e:	445a      	add	r2, fp
 8001220:	2a00      	cmp	r2, #0
 8001222:	dc00      	bgt.n	8001226 <__aeabi_ddiv+0x266>
 8001224:	e0aa      	b.n	800137c <__aeabi_ddiv+0x3bc>
 8001226:	076b      	lsls	r3, r5, #29
 8001228:	d000      	beq.n	800122c <__aeabi_ddiv+0x26c>
 800122a:	e13d      	b.n	80014a8 <__aeabi_ddiv+0x4e8>
 800122c:	08ed      	lsrs	r5, r5, #3
 800122e:	4643      	mov	r3, r8
 8001230:	01db      	lsls	r3, r3, #7
 8001232:	d506      	bpl.n	8001242 <__aeabi_ddiv+0x282>
 8001234:	4642      	mov	r2, r8
 8001236:	4b44      	ldr	r3, [pc, #272]	; (8001348 <__aeabi_ddiv+0x388>)
 8001238:	401a      	ands	r2, r3
 800123a:	4690      	mov	r8, r2
 800123c:	2280      	movs	r2, #128	; 0x80
 800123e:	00d2      	lsls	r2, r2, #3
 8001240:	445a      	add	r2, fp
 8001242:	4b42      	ldr	r3, [pc, #264]	; (800134c <__aeabi_ddiv+0x38c>)
 8001244:	429a      	cmp	r2, r3
 8001246:	dd00      	ble.n	800124a <__aeabi_ddiv+0x28a>
 8001248:	e71f      	b.n	800108a <__aeabi_ddiv+0xca>
 800124a:	4643      	mov	r3, r8
 800124c:	075b      	lsls	r3, r3, #29
 800124e:	431d      	orrs	r5, r3
 8001250:	4643      	mov	r3, r8
 8001252:	0552      	lsls	r2, r2, #21
 8001254:	025c      	lsls	r4, r3, #9
 8001256:	0b24      	lsrs	r4, r4, #12
 8001258:	0d53      	lsrs	r3, r2, #21
 800125a:	e708      	b.n	800106e <__aeabi_ddiv+0xae>
 800125c:	4652      	mov	r2, sl
 800125e:	4322      	orrs	r2, r4
 8001260:	d100      	bne.n	8001264 <__aeabi_ddiv+0x2a4>
 8001262:	e07b      	b.n	800135c <__aeabi_ddiv+0x39c>
 8001264:	2c00      	cmp	r4, #0
 8001266:	d100      	bne.n	800126a <__aeabi_ddiv+0x2aa>
 8001268:	e0fa      	b.n	8001460 <__aeabi_ddiv+0x4a0>
 800126a:	0020      	movs	r0, r4
 800126c:	f001 f99a 	bl	80025a4 <__clzsi2>
 8001270:	0002      	movs	r2, r0
 8001272:	3a0b      	subs	r2, #11
 8001274:	231d      	movs	r3, #29
 8001276:	0001      	movs	r1, r0
 8001278:	1a9b      	subs	r3, r3, r2
 800127a:	4652      	mov	r2, sl
 800127c:	3908      	subs	r1, #8
 800127e:	40da      	lsrs	r2, r3
 8001280:	408c      	lsls	r4, r1
 8001282:	4314      	orrs	r4, r2
 8001284:	4652      	mov	r2, sl
 8001286:	408a      	lsls	r2, r1
 8001288:	4b31      	ldr	r3, [pc, #196]	; (8001350 <__aeabi_ddiv+0x390>)
 800128a:	4458      	add	r0, fp
 800128c:	469b      	mov	fp, r3
 800128e:	4483      	add	fp, r0
 8001290:	2000      	movs	r0, #0
 8001292:	e6d5      	b.n	8001040 <__aeabi_ddiv+0x80>
 8001294:	464b      	mov	r3, r9
 8001296:	4323      	orrs	r3, r4
 8001298:	4698      	mov	r8, r3
 800129a:	d044      	beq.n	8001326 <__aeabi_ddiv+0x366>
 800129c:	2c00      	cmp	r4, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_ddiv+0x2e2>
 80012a0:	e0ce      	b.n	8001440 <__aeabi_ddiv+0x480>
 80012a2:	0020      	movs	r0, r4
 80012a4:	f001 f97e 	bl	80025a4 <__clzsi2>
 80012a8:	0001      	movs	r1, r0
 80012aa:	0002      	movs	r2, r0
 80012ac:	390b      	subs	r1, #11
 80012ae:	231d      	movs	r3, #29
 80012b0:	1a5b      	subs	r3, r3, r1
 80012b2:	4649      	mov	r1, r9
 80012b4:	0010      	movs	r0, r2
 80012b6:	40d9      	lsrs	r1, r3
 80012b8:	3808      	subs	r0, #8
 80012ba:	4084      	lsls	r4, r0
 80012bc:	000b      	movs	r3, r1
 80012be:	464d      	mov	r5, r9
 80012c0:	4323      	orrs	r3, r4
 80012c2:	4698      	mov	r8, r3
 80012c4:	4085      	lsls	r5, r0
 80012c6:	4823      	ldr	r0, [pc, #140]	; (8001354 <__aeabi_ddiv+0x394>)
 80012c8:	1a83      	subs	r3, r0, r2
 80012ca:	469b      	mov	fp, r3
 80012cc:	2300      	movs	r3, #0
 80012ce:	4699      	mov	r9, r3
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	e69a      	b.n	800100a <__aeabi_ddiv+0x4a>
 80012d4:	464b      	mov	r3, r9
 80012d6:	4323      	orrs	r3, r4
 80012d8:	4698      	mov	r8, r3
 80012da:	d11d      	bne.n	8001318 <__aeabi_ddiv+0x358>
 80012dc:	2308      	movs	r3, #8
 80012de:	4699      	mov	r9, r3
 80012e0:	3b06      	subs	r3, #6
 80012e2:	2500      	movs	r5, #0
 80012e4:	4683      	mov	fp, r0
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	e68f      	b.n	800100a <__aeabi_ddiv+0x4a>
 80012ea:	4652      	mov	r2, sl
 80012ec:	4322      	orrs	r2, r4
 80012ee:	d109      	bne.n	8001304 <__aeabi_ddiv+0x344>
 80012f0:	2302      	movs	r3, #2
 80012f2:	4649      	mov	r1, r9
 80012f4:	4319      	orrs	r1, r3
 80012f6:	4b18      	ldr	r3, [pc, #96]	; (8001358 <__aeabi_ddiv+0x398>)
 80012f8:	4689      	mov	r9, r1
 80012fa:	469c      	mov	ip, r3
 80012fc:	2400      	movs	r4, #0
 80012fe:	2002      	movs	r0, #2
 8001300:	44e3      	add	fp, ip
 8001302:	e69d      	b.n	8001040 <__aeabi_ddiv+0x80>
 8001304:	2303      	movs	r3, #3
 8001306:	464a      	mov	r2, r9
 8001308:	431a      	orrs	r2, r3
 800130a:	4b13      	ldr	r3, [pc, #76]	; (8001358 <__aeabi_ddiv+0x398>)
 800130c:	4691      	mov	r9, r2
 800130e:	469c      	mov	ip, r3
 8001310:	4652      	mov	r2, sl
 8001312:	2003      	movs	r0, #3
 8001314:	44e3      	add	fp, ip
 8001316:	e693      	b.n	8001040 <__aeabi_ddiv+0x80>
 8001318:	230c      	movs	r3, #12
 800131a:	4699      	mov	r9, r3
 800131c:	3b09      	subs	r3, #9
 800131e:	46a0      	mov	r8, r4
 8001320:	4683      	mov	fp, r0
 8001322:	9300      	str	r3, [sp, #0]
 8001324:	e671      	b.n	800100a <__aeabi_ddiv+0x4a>
 8001326:	2304      	movs	r3, #4
 8001328:	4699      	mov	r9, r3
 800132a:	2300      	movs	r3, #0
 800132c:	469b      	mov	fp, r3
 800132e:	3301      	adds	r3, #1
 8001330:	2500      	movs	r5, #0
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	e669      	b.n	800100a <__aeabi_ddiv+0x4a>
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	000007ff 	.word	0x000007ff
 800133c:	fffffc01 	.word	0xfffffc01
 8001340:	080092c4 	.word	0x080092c4
 8001344:	000003ff 	.word	0x000003ff
 8001348:	feffffff 	.word	0xfeffffff
 800134c:	000007fe 	.word	0x000007fe
 8001350:	000003f3 	.word	0x000003f3
 8001354:	fffffc0d 	.word	0xfffffc0d
 8001358:	fffff801 	.word	0xfffff801
 800135c:	4649      	mov	r1, r9
 800135e:	2301      	movs	r3, #1
 8001360:	4319      	orrs	r1, r3
 8001362:	4689      	mov	r9, r1
 8001364:	2400      	movs	r4, #0
 8001366:	2001      	movs	r0, #1
 8001368:	e66a      	b.n	8001040 <__aeabi_ddiv+0x80>
 800136a:	2300      	movs	r3, #0
 800136c:	2480      	movs	r4, #128	; 0x80
 800136e:	469a      	mov	sl, r3
 8001370:	2500      	movs	r5, #0
 8001372:	4b8a      	ldr	r3, [pc, #552]	; (800159c <__aeabi_ddiv+0x5dc>)
 8001374:	0324      	lsls	r4, r4, #12
 8001376:	e67a      	b.n	800106e <__aeabi_ddiv+0xae>
 8001378:	2501      	movs	r5, #1
 800137a:	426d      	negs	r5, r5
 800137c:	2301      	movs	r3, #1
 800137e:	1a9b      	subs	r3, r3, r2
 8001380:	2b38      	cmp	r3, #56	; 0x38
 8001382:	dd00      	ble.n	8001386 <__aeabi_ddiv+0x3c6>
 8001384:	e670      	b.n	8001068 <__aeabi_ddiv+0xa8>
 8001386:	2b1f      	cmp	r3, #31
 8001388:	dc00      	bgt.n	800138c <__aeabi_ddiv+0x3cc>
 800138a:	e0bf      	b.n	800150c <__aeabi_ddiv+0x54c>
 800138c:	211f      	movs	r1, #31
 800138e:	4249      	negs	r1, r1
 8001390:	1a8a      	subs	r2, r1, r2
 8001392:	4641      	mov	r1, r8
 8001394:	40d1      	lsrs	r1, r2
 8001396:	000a      	movs	r2, r1
 8001398:	2b20      	cmp	r3, #32
 800139a:	d004      	beq.n	80013a6 <__aeabi_ddiv+0x3e6>
 800139c:	4641      	mov	r1, r8
 800139e:	4b80      	ldr	r3, [pc, #512]	; (80015a0 <__aeabi_ddiv+0x5e0>)
 80013a0:	445b      	add	r3, fp
 80013a2:	4099      	lsls	r1, r3
 80013a4:	430d      	orrs	r5, r1
 80013a6:	1e6b      	subs	r3, r5, #1
 80013a8:	419d      	sbcs	r5, r3
 80013aa:	2307      	movs	r3, #7
 80013ac:	432a      	orrs	r2, r5
 80013ae:	001d      	movs	r5, r3
 80013b0:	2400      	movs	r4, #0
 80013b2:	4015      	ands	r5, r2
 80013b4:	4213      	tst	r3, r2
 80013b6:	d100      	bne.n	80013ba <__aeabi_ddiv+0x3fa>
 80013b8:	e0d4      	b.n	8001564 <__aeabi_ddiv+0x5a4>
 80013ba:	210f      	movs	r1, #15
 80013bc:	2300      	movs	r3, #0
 80013be:	4011      	ands	r1, r2
 80013c0:	2904      	cmp	r1, #4
 80013c2:	d100      	bne.n	80013c6 <__aeabi_ddiv+0x406>
 80013c4:	e0cb      	b.n	800155e <__aeabi_ddiv+0x59e>
 80013c6:	1d11      	adds	r1, r2, #4
 80013c8:	4291      	cmp	r1, r2
 80013ca:	4192      	sbcs	r2, r2
 80013cc:	4252      	negs	r2, r2
 80013ce:	189b      	adds	r3, r3, r2
 80013d0:	000a      	movs	r2, r1
 80013d2:	0219      	lsls	r1, r3, #8
 80013d4:	d400      	bmi.n	80013d8 <__aeabi_ddiv+0x418>
 80013d6:	e0c2      	b.n	800155e <__aeabi_ddiv+0x59e>
 80013d8:	2301      	movs	r3, #1
 80013da:	2400      	movs	r4, #0
 80013dc:	2500      	movs	r5, #0
 80013de:	e646      	b.n	800106e <__aeabi_ddiv+0xae>
 80013e0:	2380      	movs	r3, #128	; 0x80
 80013e2:	4641      	mov	r1, r8
 80013e4:	031b      	lsls	r3, r3, #12
 80013e6:	4219      	tst	r1, r3
 80013e8:	d008      	beq.n	80013fc <__aeabi_ddiv+0x43c>
 80013ea:	421c      	tst	r4, r3
 80013ec:	d106      	bne.n	80013fc <__aeabi_ddiv+0x43c>
 80013ee:	431c      	orrs	r4, r3
 80013f0:	0324      	lsls	r4, r4, #12
 80013f2:	46ba      	mov	sl, r7
 80013f4:	0015      	movs	r5, r2
 80013f6:	4b69      	ldr	r3, [pc, #420]	; (800159c <__aeabi_ddiv+0x5dc>)
 80013f8:	0b24      	lsrs	r4, r4, #12
 80013fa:	e638      	b.n	800106e <__aeabi_ddiv+0xae>
 80013fc:	2480      	movs	r4, #128	; 0x80
 80013fe:	4643      	mov	r3, r8
 8001400:	0324      	lsls	r4, r4, #12
 8001402:	431c      	orrs	r4, r3
 8001404:	0324      	lsls	r4, r4, #12
 8001406:	46b2      	mov	sl, r6
 8001408:	4b64      	ldr	r3, [pc, #400]	; (800159c <__aeabi_ddiv+0x5dc>)
 800140a:	0b24      	lsrs	r4, r4, #12
 800140c:	e62f      	b.n	800106e <__aeabi_ddiv+0xae>
 800140e:	2b00      	cmp	r3, #0
 8001410:	d100      	bne.n	8001414 <__aeabi_ddiv+0x454>
 8001412:	e703      	b.n	800121c <__aeabi_ddiv+0x25c>
 8001414:	19a6      	adds	r6, r4, r6
 8001416:	1e68      	subs	r0, r5, #1
 8001418:	42a6      	cmp	r6, r4
 800141a:	d200      	bcs.n	800141e <__aeabi_ddiv+0x45e>
 800141c:	e08d      	b.n	800153a <__aeabi_ddiv+0x57a>
 800141e:	428e      	cmp	r6, r1
 8001420:	d200      	bcs.n	8001424 <__aeabi_ddiv+0x464>
 8001422:	e0a3      	b.n	800156c <__aeabi_ddiv+0x5ac>
 8001424:	d100      	bne.n	8001428 <__aeabi_ddiv+0x468>
 8001426:	e0b3      	b.n	8001590 <__aeabi_ddiv+0x5d0>
 8001428:	0005      	movs	r5, r0
 800142a:	e6f5      	b.n	8001218 <__aeabi_ddiv+0x258>
 800142c:	42aa      	cmp	r2, r5
 800142e:	d900      	bls.n	8001432 <__aeabi_ddiv+0x472>
 8001430:	e639      	b.n	80010a6 <__aeabi_ddiv+0xe6>
 8001432:	4643      	mov	r3, r8
 8001434:	07de      	lsls	r6, r3, #31
 8001436:	0858      	lsrs	r0, r3, #1
 8001438:	086b      	lsrs	r3, r5, #1
 800143a:	431e      	orrs	r6, r3
 800143c:	07ed      	lsls	r5, r5, #31
 800143e:	e639      	b.n	80010b4 <__aeabi_ddiv+0xf4>
 8001440:	4648      	mov	r0, r9
 8001442:	f001 f8af 	bl	80025a4 <__clzsi2>
 8001446:	0001      	movs	r1, r0
 8001448:	0002      	movs	r2, r0
 800144a:	3115      	adds	r1, #21
 800144c:	3220      	adds	r2, #32
 800144e:	291c      	cmp	r1, #28
 8001450:	dc00      	bgt.n	8001454 <__aeabi_ddiv+0x494>
 8001452:	e72c      	b.n	80012ae <__aeabi_ddiv+0x2ee>
 8001454:	464b      	mov	r3, r9
 8001456:	3808      	subs	r0, #8
 8001458:	4083      	lsls	r3, r0
 800145a:	2500      	movs	r5, #0
 800145c:	4698      	mov	r8, r3
 800145e:	e732      	b.n	80012c6 <__aeabi_ddiv+0x306>
 8001460:	f001 f8a0 	bl	80025a4 <__clzsi2>
 8001464:	0003      	movs	r3, r0
 8001466:	001a      	movs	r2, r3
 8001468:	3215      	adds	r2, #21
 800146a:	3020      	adds	r0, #32
 800146c:	2a1c      	cmp	r2, #28
 800146e:	dc00      	bgt.n	8001472 <__aeabi_ddiv+0x4b2>
 8001470:	e700      	b.n	8001274 <__aeabi_ddiv+0x2b4>
 8001472:	4654      	mov	r4, sl
 8001474:	3b08      	subs	r3, #8
 8001476:	2200      	movs	r2, #0
 8001478:	409c      	lsls	r4, r3
 800147a:	e705      	b.n	8001288 <__aeabi_ddiv+0x2c8>
 800147c:	1936      	adds	r6, r6, r4
 800147e:	3b01      	subs	r3, #1
 8001480:	42b4      	cmp	r4, r6
 8001482:	d900      	bls.n	8001486 <__aeabi_ddiv+0x4c6>
 8001484:	e6a6      	b.n	80011d4 <__aeabi_ddiv+0x214>
 8001486:	42b2      	cmp	r2, r6
 8001488:	d800      	bhi.n	800148c <__aeabi_ddiv+0x4cc>
 800148a:	e6a3      	b.n	80011d4 <__aeabi_ddiv+0x214>
 800148c:	1e83      	subs	r3, r0, #2
 800148e:	1936      	adds	r6, r6, r4
 8001490:	e6a0      	b.n	80011d4 <__aeabi_ddiv+0x214>
 8001492:	1909      	adds	r1, r1, r4
 8001494:	3d01      	subs	r5, #1
 8001496:	428c      	cmp	r4, r1
 8001498:	d900      	bls.n	800149c <__aeabi_ddiv+0x4dc>
 800149a:	e68d      	b.n	80011b8 <__aeabi_ddiv+0x1f8>
 800149c:	428a      	cmp	r2, r1
 800149e:	d800      	bhi.n	80014a2 <__aeabi_ddiv+0x4e2>
 80014a0:	e68a      	b.n	80011b8 <__aeabi_ddiv+0x1f8>
 80014a2:	1e85      	subs	r5, r0, #2
 80014a4:	1909      	adds	r1, r1, r4
 80014a6:	e687      	b.n	80011b8 <__aeabi_ddiv+0x1f8>
 80014a8:	230f      	movs	r3, #15
 80014aa:	402b      	ands	r3, r5
 80014ac:	2b04      	cmp	r3, #4
 80014ae:	d100      	bne.n	80014b2 <__aeabi_ddiv+0x4f2>
 80014b0:	e6bc      	b.n	800122c <__aeabi_ddiv+0x26c>
 80014b2:	2305      	movs	r3, #5
 80014b4:	425b      	negs	r3, r3
 80014b6:	42ab      	cmp	r3, r5
 80014b8:	419b      	sbcs	r3, r3
 80014ba:	3504      	adds	r5, #4
 80014bc:	425b      	negs	r3, r3
 80014be:	08ed      	lsrs	r5, r5, #3
 80014c0:	4498      	add	r8, r3
 80014c2:	e6b4      	b.n	800122e <__aeabi_ddiv+0x26e>
 80014c4:	42af      	cmp	r7, r5
 80014c6:	d900      	bls.n	80014ca <__aeabi_ddiv+0x50a>
 80014c8:	e660      	b.n	800118c <__aeabi_ddiv+0x1cc>
 80014ca:	4282      	cmp	r2, r0
 80014cc:	d804      	bhi.n	80014d8 <__aeabi_ddiv+0x518>
 80014ce:	d000      	beq.n	80014d2 <__aeabi_ddiv+0x512>
 80014d0:	e65c      	b.n	800118c <__aeabi_ddiv+0x1cc>
 80014d2:	42ae      	cmp	r6, r5
 80014d4:	d800      	bhi.n	80014d8 <__aeabi_ddiv+0x518>
 80014d6:	e659      	b.n	800118c <__aeabi_ddiv+0x1cc>
 80014d8:	2302      	movs	r3, #2
 80014da:	425b      	negs	r3, r3
 80014dc:	469c      	mov	ip, r3
 80014de:	9b00      	ldr	r3, [sp, #0]
 80014e0:	44e0      	add	r8, ip
 80014e2:	469c      	mov	ip, r3
 80014e4:	4465      	add	r5, ip
 80014e6:	429d      	cmp	r5, r3
 80014e8:	419b      	sbcs	r3, r3
 80014ea:	425b      	negs	r3, r3
 80014ec:	191b      	adds	r3, r3, r4
 80014ee:	18c0      	adds	r0, r0, r3
 80014f0:	e64d      	b.n	800118e <__aeabi_ddiv+0x1ce>
 80014f2:	428a      	cmp	r2, r1
 80014f4:	d800      	bhi.n	80014f8 <__aeabi_ddiv+0x538>
 80014f6:	e60e      	b.n	8001116 <__aeabi_ddiv+0x156>
 80014f8:	1e83      	subs	r3, r0, #2
 80014fa:	1909      	adds	r1, r1, r4
 80014fc:	e60b      	b.n	8001116 <__aeabi_ddiv+0x156>
 80014fe:	428a      	cmp	r2, r1
 8001500:	d800      	bhi.n	8001504 <__aeabi_ddiv+0x544>
 8001502:	e5f4      	b.n	80010ee <__aeabi_ddiv+0x12e>
 8001504:	1e83      	subs	r3, r0, #2
 8001506:	4698      	mov	r8, r3
 8001508:	1909      	adds	r1, r1, r4
 800150a:	e5f0      	b.n	80010ee <__aeabi_ddiv+0x12e>
 800150c:	4925      	ldr	r1, [pc, #148]	; (80015a4 <__aeabi_ddiv+0x5e4>)
 800150e:	0028      	movs	r0, r5
 8001510:	4459      	add	r1, fp
 8001512:	408d      	lsls	r5, r1
 8001514:	4642      	mov	r2, r8
 8001516:	408a      	lsls	r2, r1
 8001518:	1e69      	subs	r1, r5, #1
 800151a:	418d      	sbcs	r5, r1
 800151c:	4641      	mov	r1, r8
 800151e:	40d8      	lsrs	r0, r3
 8001520:	40d9      	lsrs	r1, r3
 8001522:	4302      	orrs	r2, r0
 8001524:	432a      	orrs	r2, r5
 8001526:	000b      	movs	r3, r1
 8001528:	0751      	lsls	r1, r2, #29
 800152a:	d100      	bne.n	800152e <__aeabi_ddiv+0x56e>
 800152c:	e751      	b.n	80013d2 <__aeabi_ddiv+0x412>
 800152e:	210f      	movs	r1, #15
 8001530:	4011      	ands	r1, r2
 8001532:	2904      	cmp	r1, #4
 8001534:	d000      	beq.n	8001538 <__aeabi_ddiv+0x578>
 8001536:	e746      	b.n	80013c6 <__aeabi_ddiv+0x406>
 8001538:	e74b      	b.n	80013d2 <__aeabi_ddiv+0x412>
 800153a:	0005      	movs	r5, r0
 800153c:	428e      	cmp	r6, r1
 800153e:	d000      	beq.n	8001542 <__aeabi_ddiv+0x582>
 8001540:	e66a      	b.n	8001218 <__aeabi_ddiv+0x258>
 8001542:	9a00      	ldr	r2, [sp, #0]
 8001544:	4293      	cmp	r3, r2
 8001546:	d000      	beq.n	800154a <__aeabi_ddiv+0x58a>
 8001548:	e666      	b.n	8001218 <__aeabi_ddiv+0x258>
 800154a:	e667      	b.n	800121c <__aeabi_ddiv+0x25c>
 800154c:	4a16      	ldr	r2, [pc, #88]	; (80015a8 <__aeabi_ddiv+0x5e8>)
 800154e:	445a      	add	r2, fp
 8001550:	2a00      	cmp	r2, #0
 8001552:	dc00      	bgt.n	8001556 <__aeabi_ddiv+0x596>
 8001554:	e710      	b.n	8001378 <__aeabi_ddiv+0x3b8>
 8001556:	2301      	movs	r3, #1
 8001558:	2500      	movs	r5, #0
 800155a:	4498      	add	r8, r3
 800155c:	e667      	b.n	800122e <__aeabi_ddiv+0x26e>
 800155e:	075d      	lsls	r5, r3, #29
 8001560:	025b      	lsls	r3, r3, #9
 8001562:	0b1c      	lsrs	r4, r3, #12
 8001564:	08d2      	lsrs	r2, r2, #3
 8001566:	2300      	movs	r3, #0
 8001568:	4315      	orrs	r5, r2
 800156a:	e580      	b.n	800106e <__aeabi_ddiv+0xae>
 800156c:	9800      	ldr	r0, [sp, #0]
 800156e:	3d02      	subs	r5, #2
 8001570:	0042      	lsls	r2, r0, #1
 8001572:	4282      	cmp	r2, r0
 8001574:	41bf      	sbcs	r7, r7
 8001576:	427f      	negs	r7, r7
 8001578:	193c      	adds	r4, r7, r4
 800157a:	1936      	adds	r6, r6, r4
 800157c:	9200      	str	r2, [sp, #0]
 800157e:	e7dd      	b.n	800153c <__aeabi_ddiv+0x57c>
 8001580:	2480      	movs	r4, #128	; 0x80
 8001582:	4643      	mov	r3, r8
 8001584:	0324      	lsls	r4, r4, #12
 8001586:	431c      	orrs	r4, r3
 8001588:	0324      	lsls	r4, r4, #12
 800158a:	4b04      	ldr	r3, [pc, #16]	; (800159c <__aeabi_ddiv+0x5dc>)
 800158c:	0b24      	lsrs	r4, r4, #12
 800158e:	e56e      	b.n	800106e <__aeabi_ddiv+0xae>
 8001590:	9a00      	ldr	r2, [sp, #0]
 8001592:	429a      	cmp	r2, r3
 8001594:	d3ea      	bcc.n	800156c <__aeabi_ddiv+0x5ac>
 8001596:	0005      	movs	r5, r0
 8001598:	e7d3      	b.n	8001542 <__aeabi_ddiv+0x582>
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	000007ff 	.word	0x000007ff
 80015a0:	0000043e 	.word	0x0000043e
 80015a4:	0000041e 	.word	0x0000041e
 80015a8:	000003ff 	.word	0x000003ff

080015ac <__eqdf2>:
 80015ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ae:	464e      	mov	r6, r9
 80015b0:	4645      	mov	r5, r8
 80015b2:	46de      	mov	lr, fp
 80015b4:	4657      	mov	r7, sl
 80015b6:	4690      	mov	r8, r2
 80015b8:	b5e0      	push	{r5, r6, r7, lr}
 80015ba:	0017      	movs	r7, r2
 80015bc:	031a      	lsls	r2, r3, #12
 80015be:	0b12      	lsrs	r2, r2, #12
 80015c0:	0005      	movs	r5, r0
 80015c2:	4684      	mov	ip, r0
 80015c4:	4819      	ldr	r0, [pc, #100]	; (800162c <__eqdf2+0x80>)
 80015c6:	030e      	lsls	r6, r1, #12
 80015c8:	004c      	lsls	r4, r1, #1
 80015ca:	4691      	mov	r9, r2
 80015cc:	005a      	lsls	r2, r3, #1
 80015ce:	0fdb      	lsrs	r3, r3, #31
 80015d0:	469b      	mov	fp, r3
 80015d2:	0b36      	lsrs	r6, r6, #12
 80015d4:	0d64      	lsrs	r4, r4, #21
 80015d6:	0fc9      	lsrs	r1, r1, #31
 80015d8:	0d52      	lsrs	r2, r2, #21
 80015da:	4284      	cmp	r4, r0
 80015dc:	d019      	beq.n	8001612 <__eqdf2+0x66>
 80015de:	4282      	cmp	r2, r0
 80015e0:	d010      	beq.n	8001604 <__eqdf2+0x58>
 80015e2:	2001      	movs	r0, #1
 80015e4:	4294      	cmp	r4, r2
 80015e6:	d10e      	bne.n	8001606 <__eqdf2+0x5a>
 80015e8:	454e      	cmp	r6, r9
 80015ea:	d10c      	bne.n	8001606 <__eqdf2+0x5a>
 80015ec:	2001      	movs	r0, #1
 80015ee:	45c4      	cmp	ip, r8
 80015f0:	d109      	bne.n	8001606 <__eqdf2+0x5a>
 80015f2:	4559      	cmp	r1, fp
 80015f4:	d017      	beq.n	8001626 <__eqdf2+0x7a>
 80015f6:	2c00      	cmp	r4, #0
 80015f8:	d105      	bne.n	8001606 <__eqdf2+0x5a>
 80015fa:	0030      	movs	r0, r6
 80015fc:	4328      	orrs	r0, r5
 80015fe:	1e43      	subs	r3, r0, #1
 8001600:	4198      	sbcs	r0, r3
 8001602:	e000      	b.n	8001606 <__eqdf2+0x5a>
 8001604:	2001      	movs	r0, #1
 8001606:	bcf0      	pop	{r4, r5, r6, r7}
 8001608:	46bb      	mov	fp, r7
 800160a:	46b2      	mov	sl, r6
 800160c:	46a9      	mov	r9, r5
 800160e:	46a0      	mov	r8, r4
 8001610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001612:	0033      	movs	r3, r6
 8001614:	2001      	movs	r0, #1
 8001616:	432b      	orrs	r3, r5
 8001618:	d1f5      	bne.n	8001606 <__eqdf2+0x5a>
 800161a:	42a2      	cmp	r2, r4
 800161c:	d1f3      	bne.n	8001606 <__eqdf2+0x5a>
 800161e:	464b      	mov	r3, r9
 8001620:	433b      	orrs	r3, r7
 8001622:	d1f0      	bne.n	8001606 <__eqdf2+0x5a>
 8001624:	e7e2      	b.n	80015ec <__eqdf2+0x40>
 8001626:	2000      	movs	r0, #0
 8001628:	e7ed      	b.n	8001606 <__eqdf2+0x5a>
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	000007ff 	.word	0x000007ff

08001630 <__gedf2>:
 8001630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001632:	4647      	mov	r7, r8
 8001634:	46ce      	mov	lr, r9
 8001636:	0004      	movs	r4, r0
 8001638:	0018      	movs	r0, r3
 800163a:	0016      	movs	r6, r2
 800163c:	031b      	lsls	r3, r3, #12
 800163e:	0b1b      	lsrs	r3, r3, #12
 8001640:	4d2d      	ldr	r5, [pc, #180]	; (80016f8 <__gedf2+0xc8>)
 8001642:	004a      	lsls	r2, r1, #1
 8001644:	4699      	mov	r9, r3
 8001646:	b580      	push	{r7, lr}
 8001648:	0043      	lsls	r3, r0, #1
 800164a:	030f      	lsls	r7, r1, #12
 800164c:	46a4      	mov	ip, r4
 800164e:	46b0      	mov	r8, r6
 8001650:	0b3f      	lsrs	r7, r7, #12
 8001652:	0d52      	lsrs	r2, r2, #21
 8001654:	0fc9      	lsrs	r1, r1, #31
 8001656:	0d5b      	lsrs	r3, r3, #21
 8001658:	0fc0      	lsrs	r0, r0, #31
 800165a:	42aa      	cmp	r2, r5
 800165c:	d021      	beq.n	80016a2 <__gedf2+0x72>
 800165e:	42ab      	cmp	r3, r5
 8001660:	d013      	beq.n	800168a <__gedf2+0x5a>
 8001662:	2a00      	cmp	r2, #0
 8001664:	d122      	bne.n	80016ac <__gedf2+0x7c>
 8001666:	433c      	orrs	r4, r7
 8001668:	2b00      	cmp	r3, #0
 800166a:	d102      	bne.n	8001672 <__gedf2+0x42>
 800166c:	464d      	mov	r5, r9
 800166e:	432e      	orrs	r6, r5
 8001670:	d022      	beq.n	80016b8 <__gedf2+0x88>
 8001672:	2c00      	cmp	r4, #0
 8001674:	d010      	beq.n	8001698 <__gedf2+0x68>
 8001676:	4281      	cmp	r1, r0
 8001678:	d022      	beq.n	80016c0 <__gedf2+0x90>
 800167a:	2002      	movs	r0, #2
 800167c:	3901      	subs	r1, #1
 800167e:	4008      	ands	r0, r1
 8001680:	3801      	subs	r0, #1
 8001682:	bcc0      	pop	{r6, r7}
 8001684:	46b9      	mov	r9, r7
 8001686:	46b0      	mov	r8, r6
 8001688:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800168a:	464d      	mov	r5, r9
 800168c:	432e      	orrs	r6, r5
 800168e:	d129      	bne.n	80016e4 <__gedf2+0xb4>
 8001690:	2a00      	cmp	r2, #0
 8001692:	d1f0      	bne.n	8001676 <__gedf2+0x46>
 8001694:	433c      	orrs	r4, r7
 8001696:	d1ee      	bne.n	8001676 <__gedf2+0x46>
 8001698:	2800      	cmp	r0, #0
 800169a:	d1f2      	bne.n	8001682 <__gedf2+0x52>
 800169c:	2001      	movs	r0, #1
 800169e:	4240      	negs	r0, r0
 80016a0:	e7ef      	b.n	8001682 <__gedf2+0x52>
 80016a2:	003d      	movs	r5, r7
 80016a4:	4325      	orrs	r5, r4
 80016a6:	d11d      	bne.n	80016e4 <__gedf2+0xb4>
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d0ee      	beq.n	800168a <__gedf2+0x5a>
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1e2      	bne.n	8001676 <__gedf2+0x46>
 80016b0:	464c      	mov	r4, r9
 80016b2:	4326      	orrs	r6, r4
 80016b4:	d1df      	bne.n	8001676 <__gedf2+0x46>
 80016b6:	e7e0      	b.n	800167a <__gedf2+0x4a>
 80016b8:	2000      	movs	r0, #0
 80016ba:	2c00      	cmp	r4, #0
 80016bc:	d0e1      	beq.n	8001682 <__gedf2+0x52>
 80016be:	e7dc      	b.n	800167a <__gedf2+0x4a>
 80016c0:	429a      	cmp	r2, r3
 80016c2:	dc0a      	bgt.n	80016da <__gedf2+0xaa>
 80016c4:	dbe8      	blt.n	8001698 <__gedf2+0x68>
 80016c6:	454f      	cmp	r7, r9
 80016c8:	d8d7      	bhi.n	800167a <__gedf2+0x4a>
 80016ca:	d00e      	beq.n	80016ea <__gedf2+0xba>
 80016cc:	2000      	movs	r0, #0
 80016ce:	454f      	cmp	r7, r9
 80016d0:	d2d7      	bcs.n	8001682 <__gedf2+0x52>
 80016d2:	2900      	cmp	r1, #0
 80016d4:	d0e2      	beq.n	800169c <__gedf2+0x6c>
 80016d6:	0008      	movs	r0, r1
 80016d8:	e7d3      	b.n	8001682 <__gedf2+0x52>
 80016da:	4243      	negs	r3, r0
 80016dc:	4158      	adcs	r0, r3
 80016de:	0040      	lsls	r0, r0, #1
 80016e0:	3801      	subs	r0, #1
 80016e2:	e7ce      	b.n	8001682 <__gedf2+0x52>
 80016e4:	2002      	movs	r0, #2
 80016e6:	4240      	negs	r0, r0
 80016e8:	e7cb      	b.n	8001682 <__gedf2+0x52>
 80016ea:	45c4      	cmp	ip, r8
 80016ec:	d8c5      	bhi.n	800167a <__gedf2+0x4a>
 80016ee:	2000      	movs	r0, #0
 80016f0:	45c4      	cmp	ip, r8
 80016f2:	d2c6      	bcs.n	8001682 <__gedf2+0x52>
 80016f4:	e7ed      	b.n	80016d2 <__gedf2+0xa2>
 80016f6:	46c0      	nop			; (mov r8, r8)
 80016f8:	000007ff 	.word	0x000007ff

080016fc <__ledf2>:
 80016fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016fe:	4647      	mov	r7, r8
 8001700:	46ce      	mov	lr, r9
 8001702:	0004      	movs	r4, r0
 8001704:	0018      	movs	r0, r3
 8001706:	0016      	movs	r6, r2
 8001708:	031b      	lsls	r3, r3, #12
 800170a:	0b1b      	lsrs	r3, r3, #12
 800170c:	4d2c      	ldr	r5, [pc, #176]	; (80017c0 <__ledf2+0xc4>)
 800170e:	004a      	lsls	r2, r1, #1
 8001710:	4699      	mov	r9, r3
 8001712:	b580      	push	{r7, lr}
 8001714:	0043      	lsls	r3, r0, #1
 8001716:	030f      	lsls	r7, r1, #12
 8001718:	46a4      	mov	ip, r4
 800171a:	46b0      	mov	r8, r6
 800171c:	0b3f      	lsrs	r7, r7, #12
 800171e:	0d52      	lsrs	r2, r2, #21
 8001720:	0fc9      	lsrs	r1, r1, #31
 8001722:	0d5b      	lsrs	r3, r3, #21
 8001724:	0fc0      	lsrs	r0, r0, #31
 8001726:	42aa      	cmp	r2, r5
 8001728:	d00d      	beq.n	8001746 <__ledf2+0x4a>
 800172a:	42ab      	cmp	r3, r5
 800172c:	d010      	beq.n	8001750 <__ledf2+0x54>
 800172e:	2a00      	cmp	r2, #0
 8001730:	d127      	bne.n	8001782 <__ledf2+0x86>
 8001732:	433c      	orrs	r4, r7
 8001734:	2b00      	cmp	r3, #0
 8001736:	d111      	bne.n	800175c <__ledf2+0x60>
 8001738:	464d      	mov	r5, r9
 800173a:	432e      	orrs	r6, r5
 800173c:	d10e      	bne.n	800175c <__ledf2+0x60>
 800173e:	2000      	movs	r0, #0
 8001740:	2c00      	cmp	r4, #0
 8001742:	d015      	beq.n	8001770 <__ledf2+0x74>
 8001744:	e00e      	b.n	8001764 <__ledf2+0x68>
 8001746:	003d      	movs	r5, r7
 8001748:	4325      	orrs	r5, r4
 800174a:	d110      	bne.n	800176e <__ledf2+0x72>
 800174c:	4293      	cmp	r3, r2
 800174e:	d118      	bne.n	8001782 <__ledf2+0x86>
 8001750:	464d      	mov	r5, r9
 8001752:	432e      	orrs	r6, r5
 8001754:	d10b      	bne.n	800176e <__ledf2+0x72>
 8001756:	2a00      	cmp	r2, #0
 8001758:	d102      	bne.n	8001760 <__ledf2+0x64>
 800175a:	433c      	orrs	r4, r7
 800175c:	2c00      	cmp	r4, #0
 800175e:	d00b      	beq.n	8001778 <__ledf2+0x7c>
 8001760:	4281      	cmp	r1, r0
 8001762:	d014      	beq.n	800178e <__ledf2+0x92>
 8001764:	2002      	movs	r0, #2
 8001766:	3901      	subs	r1, #1
 8001768:	4008      	ands	r0, r1
 800176a:	3801      	subs	r0, #1
 800176c:	e000      	b.n	8001770 <__ledf2+0x74>
 800176e:	2002      	movs	r0, #2
 8001770:	bcc0      	pop	{r6, r7}
 8001772:	46b9      	mov	r9, r7
 8001774:	46b0      	mov	r8, r6
 8001776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001778:	2800      	cmp	r0, #0
 800177a:	d1f9      	bne.n	8001770 <__ledf2+0x74>
 800177c:	2001      	movs	r0, #1
 800177e:	4240      	negs	r0, r0
 8001780:	e7f6      	b.n	8001770 <__ledf2+0x74>
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1ec      	bne.n	8001760 <__ledf2+0x64>
 8001786:	464c      	mov	r4, r9
 8001788:	4326      	orrs	r6, r4
 800178a:	d1e9      	bne.n	8001760 <__ledf2+0x64>
 800178c:	e7ea      	b.n	8001764 <__ledf2+0x68>
 800178e:	429a      	cmp	r2, r3
 8001790:	dd04      	ble.n	800179c <__ledf2+0xa0>
 8001792:	4243      	negs	r3, r0
 8001794:	4158      	adcs	r0, r3
 8001796:	0040      	lsls	r0, r0, #1
 8001798:	3801      	subs	r0, #1
 800179a:	e7e9      	b.n	8001770 <__ledf2+0x74>
 800179c:	429a      	cmp	r2, r3
 800179e:	dbeb      	blt.n	8001778 <__ledf2+0x7c>
 80017a0:	454f      	cmp	r7, r9
 80017a2:	d8df      	bhi.n	8001764 <__ledf2+0x68>
 80017a4:	d006      	beq.n	80017b4 <__ledf2+0xb8>
 80017a6:	2000      	movs	r0, #0
 80017a8:	454f      	cmp	r7, r9
 80017aa:	d2e1      	bcs.n	8001770 <__ledf2+0x74>
 80017ac:	2900      	cmp	r1, #0
 80017ae:	d0e5      	beq.n	800177c <__ledf2+0x80>
 80017b0:	0008      	movs	r0, r1
 80017b2:	e7dd      	b.n	8001770 <__ledf2+0x74>
 80017b4:	45c4      	cmp	ip, r8
 80017b6:	d8d5      	bhi.n	8001764 <__ledf2+0x68>
 80017b8:	2000      	movs	r0, #0
 80017ba:	45c4      	cmp	ip, r8
 80017bc:	d2d8      	bcs.n	8001770 <__ledf2+0x74>
 80017be:	e7f5      	b.n	80017ac <__ledf2+0xb0>
 80017c0:	000007ff 	.word	0x000007ff

080017c4 <__aeabi_dmul>:
 80017c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017c6:	4657      	mov	r7, sl
 80017c8:	464e      	mov	r6, r9
 80017ca:	4645      	mov	r5, r8
 80017cc:	46de      	mov	lr, fp
 80017ce:	b5e0      	push	{r5, r6, r7, lr}
 80017d0:	4698      	mov	r8, r3
 80017d2:	030c      	lsls	r4, r1, #12
 80017d4:	004b      	lsls	r3, r1, #1
 80017d6:	0006      	movs	r6, r0
 80017d8:	4692      	mov	sl, r2
 80017da:	b087      	sub	sp, #28
 80017dc:	0b24      	lsrs	r4, r4, #12
 80017de:	0d5b      	lsrs	r3, r3, #21
 80017e0:	0fcf      	lsrs	r7, r1, #31
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d100      	bne.n	80017e8 <__aeabi_dmul+0x24>
 80017e6:	e15c      	b.n	8001aa2 <__aeabi_dmul+0x2de>
 80017e8:	4ad9      	ldr	r2, [pc, #868]	; (8001b50 <__aeabi_dmul+0x38c>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d100      	bne.n	80017f0 <__aeabi_dmul+0x2c>
 80017ee:	e175      	b.n	8001adc <__aeabi_dmul+0x318>
 80017f0:	0f42      	lsrs	r2, r0, #29
 80017f2:	00e4      	lsls	r4, r4, #3
 80017f4:	4314      	orrs	r4, r2
 80017f6:	2280      	movs	r2, #128	; 0x80
 80017f8:	0412      	lsls	r2, r2, #16
 80017fa:	4314      	orrs	r4, r2
 80017fc:	4ad5      	ldr	r2, [pc, #852]	; (8001b54 <__aeabi_dmul+0x390>)
 80017fe:	00c5      	lsls	r5, r0, #3
 8001800:	4694      	mov	ip, r2
 8001802:	4463      	add	r3, ip
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	2300      	movs	r3, #0
 8001808:	4699      	mov	r9, r3
 800180a:	469b      	mov	fp, r3
 800180c:	4643      	mov	r3, r8
 800180e:	4642      	mov	r2, r8
 8001810:	031e      	lsls	r6, r3, #12
 8001812:	0fd2      	lsrs	r2, r2, #31
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	4650      	mov	r0, sl
 8001818:	4690      	mov	r8, r2
 800181a:	0b36      	lsrs	r6, r6, #12
 800181c:	0d5b      	lsrs	r3, r3, #21
 800181e:	d100      	bne.n	8001822 <__aeabi_dmul+0x5e>
 8001820:	e120      	b.n	8001a64 <__aeabi_dmul+0x2a0>
 8001822:	4acb      	ldr	r2, [pc, #812]	; (8001b50 <__aeabi_dmul+0x38c>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d100      	bne.n	800182a <__aeabi_dmul+0x66>
 8001828:	e162      	b.n	8001af0 <__aeabi_dmul+0x32c>
 800182a:	49ca      	ldr	r1, [pc, #808]	; (8001b54 <__aeabi_dmul+0x390>)
 800182c:	0f42      	lsrs	r2, r0, #29
 800182e:	468c      	mov	ip, r1
 8001830:	9900      	ldr	r1, [sp, #0]
 8001832:	4463      	add	r3, ip
 8001834:	00f6      	lsls	r6, r6, #3
 8001836:	468c      	mov	ip, r1
 8001838:	4316      	orrs	r6, r2
 800183a:	2280      	movs	r2, #128	; 0x80
 800183c:	449c      	add	ip, r3
 800183e:	0412      	lsls	r2, r2, #16
 8001840:	4663      	mov	r3, ip
 8001842:	4316      	orrs	r6, r2
 8001844:	00c2      	lsls	r2, r0, #3
 8001846:	2000      	movs	r0, #0
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	9900      	ldr	r1, [sp, #0]
 800184c:	4643      	mov	r3, r8
 800184e:	3101      	adds	r1, #1
 8001850:	468c      	mov	ip, r1
 8001852:	4649      	mov	r1, r9
 8001854:	407b      	eors	r3, r7
 8001856:	9301      	str	r3, [sp, #4]
 8001858:	290f      	cmp	r1, #15
 800185a:	d826      	bhi.n	80018aa <__aeabi_dmul+0xe6>
 800185c:	4bbe      	ldr	r3, [pc, #760]	; (8001b58 <__aeabi_dmul+0x394>)
 800185e:	0089      	lsls	r1, r1, #2
 8001860:	5859      	ldr	r1, [r3, r1]
 8001862:	468f      	mov	pc, r1
 8001864:	4643      	mov	r3, r8
 8001866:	9301      	str	r3, [sp, #4]
 8001868:	0034      	movs	r4, r6
 800186a:	0015      	movs	r5, r2
 800186c:	4683      	mov	fp, r0
 800186e:	465b      	mov	r3, fp
 8001870:	2b02      	cmp	r3, #2
 8001872:	d016      	beq.n	80018a2 <__aeabi_dmul+0xde>
 8001874:	2b03      	cmp	r3, #3
 8001876:	d100      	bne.n	800187a <__aeabi_dmul+0xb6>
 8001878:	e203      	b.n	8001c82 <__aeabi_dmul+0x4be>
 800187a:	2b01      	cmp	r3, #1
 800187c:	d000      	beq.n	8001880 <__aeabi_dmul+0xbc>
 800187e:	e0cd      	b.n	8001a1c <__aeabi_dmul+0x258>
 8001880:	2200      	movs	r2, #0
 8001882:	2400      	movs	r4, #0
 8001884:	2500      	movs	r5, #0
 8001886:	9b01      	ldr	r3, [sp, #4]
 8001888:	0512      	lsls	r2, r2, #20
 800188a:	4322      	orrs	r2, r4
 800188c:	07db      	lsls	r3, r3, #31
 800188e:	431a      	orrs	r2, r3
 8001890:	0028      	movs	r0, r5
 8001892:	0011      	movs	r1, r2
 8001894:	b007      	add	sp, #28
 8001896:	bcf0      	pop	{r4, r5, r6, r7}
 8001898:	46bb      	mov	fp, r7
 800189a:	46b2      	mov	sl, r6
 800189c:	46a9      	mov	r9, r5
 800189e:	46a0      	mov	r8, r4
 80018a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018a2:	2400      	movs	r4, #0
 80018a4:	2500      	movs	r5, #0
 80018a6:	4aaa      	ldr	r2, [pc, #680]	; (8001b50 <__aeabi_dmul+0x38c>)
 80018a8:	e7ed      	b.n	8001886 <__aeabi_dmul+0xc2>
 80018aa:	0c28      	lsrs	r0, r5, #16
 80018ac:	042d      	lsls	r5, r5, #16
 80018ae:	0c2d      	lsrs	r5, r5, #16
 80018b0:	002b      	movs	r3, r5
 80018b2:	0c11      	lsrs	r1, r2, #16
 80018b4:	0412      	lsls	r2, r2, #16
 80018b6:	0c12      	lsrs	r2, r2, #16
 80018b8:	4353      	muls	r3, r2
 80018ba:	4698      	mov	r8, r3
 80018bc:	0013      	movs	r3, r2
 80018be:	002f      	movs	r7, r5
 80018c0:	4343      	muls	r3, r0
 80018c2:	4699      	mov	r9, r3
 80018c4:	434f      	muls	r7, r1
 80018c6:	444f      	add	r7, r9
 80018c8:	46bb      	mov	fp, r7
 80018ca:	4647      	mov	r7, r8
 80018cc:	000b      	movs	r3, r1
 80018ce:	0c3f      	lsrs	r7, r7, #16
 80018d0:	46ba      	mov	sl, r7
 80018d2:	4343      	muls	r3, r0
 80018d4:	44da      	add	sl, fp
 80018d6:	9302      	str	r3, [sp, #8]
 80018d8:	45d1      	cmp	r9, sl
 80018da:	d904      	bls.n	80018e6 <__aeabi_dmul+0x122>
 80018dc:	2780      	movs	r7, #128	; 0x80
 80018de:	027f      	lsls	r7, r7, #9
 80018e0:	46b9      	mov	r9, r7
 80018e2:	444b      	add	r3, r9
 80018e4:	9302      	str	r3, [sp, #8]
 80018e6:	4653      	mov	r3, sl
 80018e8:	0c1b      	lsrs	r3, r3, #16
 80018ea:	469b      	mov	fp, r3
 80018ec:	4653      	mov	r3, sl
 80018ee:	041f      	lsls	r7, r3, #16
 80018f0:	4643      	mov	r3, r8
 80018f2:	041b      	lsls	r3, r3, #16
 80018f4:	0c1b      	lsrs	r3, r3, #16
 80018f6:	4698      	mov	r8, r3
 80018f8:	003b      	movs	r3, r7
 80018fa:	4443      	add	r3, r8
 80018fc:	9304      	str	r3, [sp, #16]
 80018fe:	0c33      	lsrs	r3, r6, #16
 8001900:	0436      	lsls	r6, r6, #16
 8001902:	0c36      	lsrs	r6, r6, #16
 8001904:	4698      	mov	r8, r3
 8001906:	0033      	movs	r3, r6
 8001908:	4343      	muls	r3, r0
 800190a:	4699      	mov	r9, r3
 800190c:	4643      	mov	r3, r8
 800190e:	4343      	muls	r3, r0
 8001910:	002f      	movs	r7, r5
 8001912:	469a      	mov	sl, r3
 8001914:	4643      	mov	r3, r8
 8001916:	4377      	muls	r7, r6
 8001918:	435d      	muls	r5, r3
 800191a:	0c38      	lsrs	r0, r7, #16
 800191c:	444d      	add	r5, r9
 800191e:	1945      	adds	r5, r0, r5
 8001920:	45a9      	cmp	r9, r5
 8001922:	d903      	bls.n	800192c <__aeabi_dmul+0x168>
 8001924:	2380      	movs	r3, #128	; 0x80
 8001926:	025b      	lsls	r3, r3, #9
 8001928:	4699      	mov	r9, r3
 800192a:	44ca      	add	sl, r9
 800192c:	043f      	lsls	r7, r7, #16
 800192e:	0c28      	lsrs	r0, r5, #16
 8001930:	0c3f      	lsrs	r7, r7, #16
 8001932:	042d      	lsls	r5, r5, #16
 8001934:	19ed      	adds	r5, r5, r7
 8001936:	0c27      	lsrs	r7, r4, #16
 8001938:	0424      	lsls	r4, r4, #16
 800193a:	0c24      	lsrs	r4, r4, #16
 800193c:	0003      	movs	r3, r0
 800193e:	0020      	movs	r0, r4
 8001940:	4350      	muls	r0, r2
 8001942:	437a      	muls	r2, r7
 8001944:	4691      	mov	r9, r2
 8001946:	003a      	movs	r2, r7
 8001948:	4453      	add	r3, sl
 800194a:	9305      	str	r3, [sp, #20]
 800194c:	0c03      	lsrs	r3, r0, #16
 800194e:	469a      	mov	sl, r3
 8001950:	434a      	muls	r2, r1
 8001952:	4361      	muls	r1, r4
 8001954:	4449      	add	r1, r9
 8001956:	4451      	add	r1, sl
 8001958:	44ab      	add	fp, r5
 800195a:	4589      	cmp	r9, r1
 800195c:	d903      	bls.n	8001966 <__aeabi_dmul+0x1a2>
 800195e:	2380      	movs	r3, #128	; 0x80
 8001960:	025b      	lsls	r3, r3, #9
 8001962:	4699      	mov	r9, r3
 8001964:	444a      	add	r2, r9
 8001966:	0400      	lsls	r0, r0, #16
 8001968:	0c0b      	lsrs	r3, r1, #16
 800196a:	0c00      	lsrs	r0, r0, #16
 800196c:	0409      	lsls	r1, r1, #16
 800196e:	1809      	adds	r1, r1, r0
 8001970:	0020      	movs	r0, r4
 8001972:	4699      	mov	r9, r3
 8001974:	4643      	mov	r3, r8
 8001976:	4370      	muls	r0, r6
 8001978:	435c      	muls	r4, r3
 800197a:	437e      	muls	r6, r7
 800197c:	435f      	muls	r7, r3
 800197e:	0c03      	lsrs	r3, r0, #16
 8001980:	4698      	mov	r8, r3
 8001982:	19a4      	adds	r4, r4, r6
 8001984:	4444      	add	r4, r8
 8001986:	444a      	add	r2, r9
 8001988:	9703      	str	r7, [sp, #12]
 800198a:	42a6      	cmp	r6, r4
 800198c:	d904      	bls.n	8001998 <__aeabi_dmul+0x1d4>
 800198e:	2380      	movs	r3, #128	; 0x80
 8001990:	025b      	lsls	r3, r3, #9
 8001992:	4698      	mov	r8, r3
 8001994:	4447      	add	r7, r8
 8001996:	9703      	str	r7, [sp, #12]
 8001998:	0423      	lsls	r3, r4, #16
 800199a:	9e02      	ldr	r6, [sp, #8]
 800199c:	469a      	mov	sl, r3
 800199e:	9b05      	ldr	r3, [sp, #20]
 80019a0:	445e      	add	r6, fp
 80019a2:	4698      	mov	r8, r3
 80019a4:	42ae      	cmp	r6, r5
 80019a6:	41ad      	sbcs	r5, r5
 80019a8:	1876      	adds	r6, r6, r1
 80019aa:	428e      	cmp	r6, r1
 80019ac:	4189      	sbcs	r1, r1
 80019ae:	0400      	lsls	r0, r0, #16
 80019b0:	0c00      	lsrs	r0, r0, #16
 80019b2:	4450      	add	r0, sl
 80019b4:	4440      	add	r0, r8
 80019b6:	426d      	negs	r5, r5
 80019b8:	1947      	adds	r7, r0, r5
 80019ba:	46b8      	mov	r8, r7
 80019bc:	4693      	mov	fp, r2
 80019be:	4249      	negs	r1, r1
 80019c0:	4689      	mov	r9, r1
 80019c2:	44c3      	add	fp, r8
 80019c4:	44d9      	add	r9, fp
 80019c6:	4298      	cmp	r0, r3
 80019c8:	4180      	sbcs	r0, r0
 80019ca:	45a8      	cmp	r8, r5
 80019cc:	41ad      	sbcs	r5, r5
 80019ce:	4593      	cmp	fp, r2
 80019d0:	4192      	sbcs	r2, r2
 80019d2:	4589      	cmp	r9, r1
 80019d4:	4189      	sbcs	r1, r1
 80019d6:	426d      	negs	r5, r5
 80019d8:	4240      	negs	r0, r0
 80019da:	4328      	orrs	r0, r5
 80019dc:	0c24      	lsrs	r4, r4, #16
 80019de:	4252      	negs	r2, r2
 80019e0:	4249      	negs	r1, r1
 80019e2:	430a      	orrs	r2, r1
 80019e4:	9b03      	ldr	r3, [sp, #12]
 80019e6:	1900      	adds	r0, r0, r4
 80019e8:	1880      	adds	r0, r0, r2
 80019ea:	18c7      	adds	r7, r0, r3
 80019ec:	464b      	mov	r3, r9
 80019ee:	0ddc      	lsrs	r4, r3, #23
 80019f0:	9b04      	ldr	r3, [sp, #16]
 80019f2:	0275      	lsls	r5, r6, #9
 80019f4:	431d      	orrs	r5, r3
 80019f6:	1e6a      	subs	r2, r5, #1
 80019f8:	4195      	sbcs	r5, r2
 80019fa:	464b      	mov	r3, r9
 80019fc:	0df6      	lsrs	r6, r6, #23
 80019fe:	027f      	lsls	r7, r7, #9
 8001a00:	4335      	orrs	r5, r6
 8001a02:	025a      	lsls	r2, r3, #9
 8001a04:	433c      	orrs	r4, r7
 8001a06:	4315      	orrs	r5, r2
 8001a08:	01fb      	lsls	r3, r7, #7
 8001a0a:	d400      	bmi.n	8001a0e <__aeabi_dmul+0x24a>
 8001a0c:	e11c      	b.n	8001c48 <__aeabi_dmul+0x484>
 8001a0e:	2101      	movs	r1, #1
 8001a10:	086a      	lsrs	r2, r5, #1
 8001a12:	400d      	ands	r5, r1
 8001a14:	4315      	orrs	r5, r2
 8001a16:	07e2      	lsls	r2, r4, #31
 8001a18:	4315      	orrs	r5, r2
 8001a1a:	0864      	lsrs	r4, r4, #1
 8001a1c:	494f      	ldr	r1, [pc, #316]	; (8001b5c <__aeabi_dmul+0x398>)
 8001a1e:	4461      	add	r1, ip
 8001a20:	2900      	cmp	r1, #0
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_dmul+0x262>
 8001a24:	e0b0      	b.n	8001b88 <__aeabi_dmul+0x3c4>
 8001a26:	076b      	lsls	r3, r5, #29
 8001a28:	d009      	beq.n	8001a3e <__aeabi_dmul+0x27a>
 8001a2a:	220f      	movs	r2, #15
 8001a2c:	402a      	ands	r2, r5
 8001a2e:	2a04      	cmp	r2, #4
 8001a30:	d005      	beq.n	8001a3e <__aeabi_dmul+0x27a>
 8001a32:	1d2a      	adds	r2, r5, #4
 8001a34:	42aa      	cmp	r2, r5
 8001a36:	41ad      	sbcs	r5, r5
 8001a38:	426d      	negs	r5, r5
 8001a3a:	1964      	adds	r4, r4, r5
 8001a3c:	0015      	movs	r5, r2
 8001a3e:	01e3      	lsls	r3, r4, #7
 8001a40:	d504      	bpl.n	8001a4c <__aeabi_dmul+0x288>
 8001a42:	2180      	movs	r1, #128	; 0x80
 8001a44:	4a46      	ldr	r2, [pc, #280]	; (8001b60 <__aeabi_dmul+0x39c>)
 8001a46:	00c9      	lsls	r1, r1, #3
 8001a48:	4014      	ands	r4, r2
 8001a4a:	4461      	add	r1, ip
 8001a4c:	4a45      	ldr	r2, [pc, #276]	; (8001b64 <__aeabi_dmul+0x3a0>)
 8001a4e:	4291      	cmp	r1, r2
 8001a50:	dd00      	ble.n	8001a54 <__aeabi_dmul+0x290>
 8001a52:	e726      	b.n	80018a2 <__aeabi_dmul+0xde>
 8001a54:	0762      	lsls	r2, r4, #29
 8001a56:	08ed      	lsrs	r5, r5, #3
 8001a58:	0264      	lsls	r4, r4, #9
 8001a5a:	0549      	lsls	r1, r1, #21
 8001a5c:	4315      	orrs	r5, r2
 8001a5e:	0b24      	lsrs	r4, r4, #12
 8001a60:	0d4a      	lsrs	r2, r1, #21
 8001a62:	e710      	b.n	8001886 <__aeabi_dmul+0xc2>
 8001a64:	4652      	mov	r2, sl
 8001a66:	4332      	orrs	r2, r6
 8001a68:	d100      	bne.n	8001a6c <__aeabi_dmul+0x2a8>
 8001a6a:	e07f      	b.n	8001b6c <__aeabi_dmul+0x3a8>
 8001a6c:	2e00      	cmp	r6, #0
 8001a6e:	d100      	bne.n	8001a72 <__aeabi_dmul+0x2ae>
 8001a70:	e0dc      	b.n	8001c2c <__aeabi_dmul+0x468>
 8001a72:	0030      	movs	r0, r6
 8001a74:	f000 fd96 	bl	80025a4 <__clzsi2>
 8001a78:	0002      	movs	r2, r0
 8001a7a:	3a0b      	subs	r2, #11
 8001a7c:	231d      	movs	r3, #29
 8001a7e:	0001      	movs	r1, r0
 8001a80:	1a9b      	subs	r3, r3, r2
 8001a82:	4652      	mov	r2, sl
 8001a84:	3908      	subs	r1, #8
 8001a86:	40da      	lsrs	r2, r3
 8001a88:	408e      	lsls	r6, r1
 8001a8a:	4316      	orrs	r6, r2
 8001a8c:	4652      	mov	r2, sl
 8001a8e:	408a      	lsls	r2, r1
 8001a90:	9b00      	ldr	r3, [sp, #0]
 8001a92:	4935      	ldr	r1, [pc, #212]	; (8001b68 <__aeabi_dmul+0x3a4>)
 8001a94:	1a18      	subs	r0, r3, r0
 8001a96:	0003      	movs	r3, r0
 8001a98:	468c      	mov	ip, r1
 8001a9a:	4463      	add	r3, ip
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	e6d3      	b.n	800184a <__aeabi_dmul+0x86>
 8001aa2:	0025      	movs	r5, r4
 8001aa4:	4305      	orrs	r5, r0
 8001aa6:	d04a      	beq.n	8001b3e <__aeabi_dmul+0x37a>
 8001aa8:	2c00      	cmp	r4, #0
 8001aaa:	d100      	bne.n	8001aae <__aeabi_dmul+0x2ea>
 8001aac:	e0b0      	b.n	8001c10 <__aeabi_dmul+0x44c>
 8001aae:	0020      	movs	r0, r4
 8001ab0:	f000 fd78 	bl	80025a4 <__clzsi2>
 8001ab4:	0001      	movs	r1, r0
 8001ab6:	0002      	movs	r2, r0
 8001ab8:	390b      	subs	r1, #11
 8001aba:	231d      	movs	r3, #29
 8001abc:	0010      	movs	r0, r2
 8001abe:	1a5b      	subs	r3, r3, r1
 8001ac0:	0031      	movs	r1, r6
 8001ac2:	0035      	movs	r5, r6
 8001ac4:	3808      	subs	r0, #8
 8001ac6:	4084      	lsls	r4, r0
 8001ac8:	40d9      	lsrs	r1, r3
 8001aca:	4085      	lsls	r5, r0
 8001acc:	430c      	orrs	r4, r1
 8001ace:	4826      	ldr	r0, [pc, #152]	; (8001b68 <__aeabi_dmul+0x3a4>)
 8001ad0:	1a83      	subs	r3, r0, r2
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	4699      	mov	r9, r3
 8001ad8:	469b      	mov	fp, r3
 8001ada:	e697      	b.n	800180c <__aeabi_dmul+0x48>
 8001adc:	0005      	movs	r5, r0
 8001ade:	4325      	orrs	r5, r4
 8001ae0:	d126      	bne.n	8001b30 <__aeabi_dmul+0x36c>
 8001ae2:	2208      	movs	r2, #8
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	2400      	movs	r4, #0
 8001aea:	4691      	mov	r9, r2
 8001aec:	469b      	mov	fp, r3
 8001aee:	e68d      	b.n	800180c <__aeabi_dmul+0x48>
 8001af0:	4652      	mov	r2, sl
 8001af2:	9b00      	ldr	r3, [sp, #0]
 8001af4:	4332      	orrs	r2, r6
 8001af6:	d110      	bne.n	8001b1a <__aeabi_dmul+0x356>
 8001af8:	4915      	ldr	r1, [pc, #84]	; (8001b50 <__aeabi_dmul+0x38c>)
 8001afa:	2600      	movs	r6, #0
 8001afc:	468c      	mov	ip, r1
 8001afe:	4463      	add	r3, ip
 8001b00:	4649      	mov	r1, r9
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	2302      	movs	r3, #2
 8001b06:	4319      	orrs	r1, r3
 8001b08:	4689      	mov	r9, r1
 8001b0a:	2002      	movs	r0, #2
 8001b0c:	e69d      	b.n	800184a <__aeabi_dmul+0x86>
 8001b0e:	465b      	mov	r3, fp
 8001b10:	9701      	str	r7, [sp, #4]
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d000      	beq.n	8001b18 <__aeabi_dmul+0x354>
 8001b16:	e6ad      	b.n	8001874 <__aeabi_dmul+0xb0>
 8001b18:	e6c3      	b.n	80018a2 <__aeabi_dmul+0xde>
 8001b1a:	4a0d      	ldr	r2, [pc, #52]	; (8001b50 <__aeabi_dmul+0x38c>)
 8001b1c:	2003      	movs	r0, #3
 8001b1e:	4694      	mov	ip, r2
 8001b20:	4463      	add	r3, ip
 8001b22:	464a      	mov	r2, r9
 8001b24:	9300      	str	r3, [sp, #0]
 8001b26:	2303      	movs	r3, #3
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	4691      	mov	r9, r2
 8001b2c:	4652      	mov	r2, sl
 8001b2e:	e68c      	b.n	800184a <__aeabi_dmul+0x86>
 8001b30:	220c      	movs	r2, #12
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	2303      	movs	r3, #3
 8001b36:	0005      	movs	r5, r0
 8001b38:	4691      	mov	r9, r2
 8001b3a:	469b      	mov	fp, r3
 8001b3c:	e666      	b.n	800180c <__aeabi_dmul+0x48>
 8001b3e:	2304      	movs	r3, #4
 8001b40:	4699      	mov	r9, r3
 8001b42:	2300      	movs	r3, #0
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	3301      	adds	r3, #1
 8001b48:	2400      	movs	r4, #0
 8001b4a:	469b      	mov	fp, r3
 8001b4c:	e65e      	b.n	800180c <__aeabi_dmul+0x48>
 8001b4e:	46c0      	nop			; (mov r8, r8)
 8001b50:	000007ff 	.word	0x000007ff
 8001b54:	fffffc01 	.word	0xfffffc01
 8001b58:	08009304 	.word	0x08009304
 8001b5c:	000003ff 	.word	0x000003ff
 8001b60:	feffffff 	.word	0xfeffffff
 8001b64:	000007fe 	.word	0x000007fe
 8001b68:	fffffc0d 	.word	0xfffffc0d
 8001b6c:	4649      	mov	r1, r9
 8001b6e:	2301      	movs	r3, #1
 8001b70:	4319      	orrs	r1, r3
 8001b72:	4689      	mov	r9, r1
 8001b74:	2600      	movs	r6, #0
 8001b76:	2001      	movs	r0, #1
 8001b78:	e667      	b.n	800184a <__aeabi_dmul+0x86>
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	2480      	movs	r4, #128	; 0x80
 8001b7e:	2500      	movs	r5, #0
 8001b80:	4a43      	ldr	r2, [pc, #268]	; (8001c90 <__aeabi_dmul+0x4cc>)
 8001b82:	9301      	str	r3, [sp, #4]
 8001b84:	0324      	lsls	r4, r4, #12
 8001b86:	e67e      	b.n	8001886 <__aeabi_dmul+0xc2>
 8001b88:	2001      	movs	r0, #1
 8001b8a:	1a40      	subs	r0, r0, r1
 8001b8c:	2838      	cmp	r0, #56	; 0x38
 8001b8e:	dd00      	ble.n	8001b92 <__aeabi_dmul+0x3ce>
 8001b90:	e676      	b.n	8001880 <__aeabi_dmul+0xbc>
 8001b92:	281f      	cmp	r0, #31
 8001b94:	dd5b      	ble.n	8001c4e <__aeabi_dmul+0x48a>
 8001b96:	221f      	movs	r2, #31
 8001b98:	0023      	movs	r3, r4
 8001b9a:	4252      	negs	r2, r2
 8001b9c:	1a51      	subs	r1, r2, r1
 8001b9e:	40cb      	lsrs	r3, r1
 8001ba0:	0019      	movs	r1, r3
 8001ba2:	2820      	cmp	r0, #32
 8001ba4:	d003      	beq.n	8001bae <__aeabi_dmul+0x3ea>
 8001ba6:	4a3b      	ldr	r2, [pc, #236]	; (8001c94 <__aeabi_dmul+0x4d0>)
 8001ba8:	4462      	add	r2, ip
 8001baa:	4094      	lsls	r4, r2
 8001bac:	4325      	orrs	r5, r4
 8001bae:	1e6a      	subs	r2, r5, #1
 8001bb0:	4195      	sbcs	r5, r2
 8001bb2:	002a      	movs	r2, r5
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	2107      	movs	r1, #7
 8001bb8:	000d      	movs	r5, r1
 8001bba:	2400      	movs	r4, #0
 8001bbc:	4015      	ands	r5, r2
 8001bbe:	4211      	tst	r1, r2
 8001bc0:	d05b      	beq.n	8001c7a <__aeabi_dmul+0x4b6>
 8001bc2:	210f      	movs	r1, #15
 8001bc4:	2400      	movs	r4, #0
 8001bc6:	4011      	ands	r1, r2
 8001bc8:	2904      	cmp	r1, #4
 8001bca:	d053      	beq.n	8001c74 <__aeabi_dmul+0x4b0>
 8001bcc:	1d11      	adds	r1, r2, #4
 8001bce:	4291      	cmp	r1, r2
 8001bd0:	4192      	sbcs	r2, r2
 8001bd2:	4252      	negs	r2, r2
 8001bd4:	18a4      	adds	r4, r4, r2
 8001bd6:	000a      	movs	r2, r1
 8001bd8:	0223      	lsls	r3, r4, #8
 8001bda:	d54b      	bpl.n	8001c74 <__aeabi_dmul+0x4b0>
 8001bdc:	2201      	movs	r2, #1
 8001bde:	2400      	movs	r4, #0
 8001be0:	2500      	movs	r5, #0
 8001be2:	e650      	b.n	8001886 <__aeabi_dmul+0xc2>
 8001be4:	2380      	movs	r3, #128	; 0x80
 8001be6:	031b      	lsls	r3, r3, #12
 8001be8:	421c      	tst	r4, r3
 8001bea:	d009      	beq.n	8001c00 <__aeabi_dmul+0x43c>
 8001bec:	421e      	tst	r6, r3
 8001bee:	d107      	bne.n	8001c00 <__aeabi_dmul+0x43c>
 8001bf0:	4333      	orrs	r3, r6
 8001bf2:	031c      	lsls	r4, r3, #12
 8001bf4:	4643      	mov	r3, r8
 8001bf6:	0015      	movs	r5, r2
 8001bf8:	0b24      	lsrs	r4, r4, #12
 8001bfa:	4a25      	ldr	r2, [pc, #148]	; (8001c90 <__aeabi_dmul+0x4cc>)
 8001bfc:	9301      	str	r3, [sp, #4]
 8001bfe:	e642      	b.n	8001886 <__aeabi_dmul+0xc2>
 8001c00:	2280      	movs	r2, #128	; 0x80
 8001c02:	0312      	lsls	r2, r2, #12
 8001c04:	4314      	orrs	r4, r2
 8001c06:	0324      	lsls	r4, r4, #12
 8001c08:	4a21      	ldr	r2, [pc, #132]	; (8001c90 <__aeabi_dmul+0x4cc>)
 8001c0a:	0b24      	lsrs	r4, r4, #12
 8001c0c:	9701      	str	r7, [sp, #4]
 8001c0e:	e63a      	b.n	8001886 <__aeabi_dmul+0xc2>
 8001c10:	f000 fcc8 	bl	80025a4 <__clzsi2>
 8001c14:	0001      	movs	r1, r0
 8001c16:	0002      	movs	r2, r0
 8001c18:	3115      	adds	r1, #21
 8001c1a:	3220      	adds	r2, #32
 8001c1c:	291c      	cmp	r1, #28
 8001c1e:	dc00      	bgt.n	8001c22 <__aeabi_dmul+0x45e>
 8001c20:	e74b      	b.n	8001aba <__aeabi_dmul+0x2f6>
 8001c22:	0034      	movs	r4, r6
 8001c24:	3808      	subs	r0, #8
 8001c26:	2500      	movs	r5, #0
 8001c28:	4084      	lsls	r4, r0
 8001c2a:	e750      	b.n	8001ace <__aeabi_dmul+0x30a>
 8001c2c:	f000 fcba 	bl	80025a4 <__clzsi2>
 8001c30:	0003      	movs	r3, r0
 8001c32:	001a      	movs	r2, r3
 8001c34:	3215      	adds	r2, #21
 8001c36:	3020      	adds	r0, #32
 8001c38:	2a1c      	cmp	r2, #28
 8001c3a:	dc00      	bgt.n	8001c3e <__aeabi_dmul+0x47a>
 8001c3c:	e71e      	b.n	8001a7c <__aeabi_dmul+0x2b8>
 8001c3e:	4656      	mov	r6, sl
 8001c40:	3b08      	subs	r3, #8
 8001c42:	2200      	movs	r2, #0
 8001c44:	409e      	lsls	r6, r3
 8001c46:	e723      	b.n	8001a90 <__aeabi_dmul+0x2cc>
 8001c48:	9b00      	ldr	r3, [sp, #0]
 8001c4a:	469c      	mov	ip, r3
 8001c4c:	e6e6      	b.n	8001a1c <__aeabi_dmul+0x258>
 8001c4e:	4912      	ldr	r1, [pc, #72]	; (8001c98 <__aeabi_dmul+0x4d4>)
 8001c50:	0022      	movs	r2, r4
 8001c52:	4461      	add	r1, ip
 8001c54:	002e      	movs	r6, r5
 8001c56:	408d      	lsls	r5, r1
 8001c58:	408a      	lsls	r2, r1
 8001c5a:	40c6      	lsrs	r6, r0
 8001c5c:	1e69      	subs	r1, r5, #1
 8001c5e:	418d      	sbcs	r5, r1
 8001c60:	4332      	orrs	r2, r6
 8001c62:	432a      	orrs	r2, r5
 8001c64:	40c4      	lsrs	r4, r0
 8001c66:	0753      	lsls	r3, r2, #29
 8001c68:	d0b6      	beq.n	8001bd8 <__aeabi_dmul+0x414>
 8001c6a:	210f      	movs	r1, #15
 8001c6c:	4011      	ands	r1, r2
 8001c6e:	2904      	cmp	r1, #4
 8001c70:	d1ac      	bne.n	8001bcc <__aeabi_dmul+0x408>
 8001c72:	e7b1      	b.n	8001bd8 <__aeabi_dmul+0x414>
 8001c74:	0765      	lsls	r5, r4, #29
 8001c76:	0264      	lsls	r4, r4, #9
 8001c78:	0b24      	lsrs	r4, r4, #12
 8001c7a:	08d2      	lsrs	r2, r2, #3
 8001c7c:	4315      	orrs	r5, r2
 8001c7e:	2200      	movs	r2, #0
 8001c80:	e601      	b.n	8001886 <__aeabi_dmul+0xc2>
 8001c82:	2280      	movs	r2, #128	; 0x80
 8001c84:	0312      	lsls	r2, r2, #12
 8001c86:	4314      	orrs	r4, r2
 8001c88:	0324      	lsls	r4, r4, #12
 8001c8a:	4a01      	ldr	r2, [pc, #4]	; (8001c90 <__aeabi_dmul+0x4cc>)
 8001c8c:	0b24      	lsrs	r4, r4, #12
 8001c8e:	e5fa      	b.n	8001886 <__aeabi_dmul+0xc2>
 8001c90:	000007ff 	.word	0x000007ff
 8001c94:	0000043e 	.word	0x0000043e
 8001c98:	0000041e 	.word	0x0000041e

08001c9c <__aeabi_dsub>:
 8001c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c9e:	4657      	mov	r7, sl
 8001ca0:	464e      	mov	r6, r9
 8001ca2:	4645      	mov	r5, r8
 8001ca4:	46de      	mov	lr, fp
 8001ca6:	b5e0      	push	{r5, r6, r7, lr}
 8001ca8:	001e      	movs	r6, r3
 8001caa:	0017      	movs	r7, r2
 8001cac:	004a      	lsls	r2, r1, #1
 8001cae:	030b      	lsls	r3, r1, #12
 8001cb0:	0d52      	lsrs	r2, r2, #21
 8001cb2:	0a5b      	lsrs	r3, r3, #9
 8001cb4:	4690      	mov	r8, r2
 8001cb6:	0f42      	lsrs	r2, r0, #29
 8001cb8:	431a      	orrs	r2, r3
 8001cba:	0fcd      	lsrs	r5, r1, #31
 8001cbc:	4ccd      	ldr	r4, [pc, #820]	; (8001ff4 <__aeabi_dsub+0x358>)
 8001cbe:	0331      	lsls	r1, r6, #12
 8001cc0:	00c3      	lsls	r3, r0, #3
 8001cc2:	4694      	mov	ip, r2
 8001cc4:	0070      	lsls	r0, r6, #1
 8001cc6:	0f7a      	lsrs	r2, r7, #29
 8001cc8:	0a49      	lsrs	r1, r1, #9
 8001cca:	00ff      	lsls	r7, r7, #3
 8001ccc:	469a      	mov	sl, r3
 8001cce:	46b9      	mov	r9, r7
 8001cd0:	0d40      	lsrs	r0, r0, #21
 8001cd2:	0ff6      	lsrs	r6, r6, #31
 8001cd4:	4311      	orrs	r1, r2
 8001cd6:	42a0      	cmp	r0, r4
 8001cd8:	d100      	bne.n	8001cdc <__aeabi_dsub+0x40>
 8001cda:	e0b1      	b.n	8001e40 <__aeabi_dsub+0x1a4>
 8001cdc:	2201      	movs	r2, #1
 8001cde:	4056      	eors	r6, r2
 8001ce0:	46b3      	mov	fp, r6
 8001ce2:	42b5      	cmp	r5, r6
 8001ce4:	d100      	bne.n	8001ce8 <__aeabi_dsub+0x4c>
 8001ce6:	e088      	b.n	8001dfa <__aeabi_dsub+0x15e>
 8001ce8:	4642      	mov	r2, r8
 8001cea:	1a12      	subs	r2, r2, r0
 8001cec:	2a00      	cmp	r2, #0
 8001cee:	dc00      	bgt.n	8001cf2 <__aeabi_dsub+0x56>
 8001cf0:	e0ae      	b.n	8001e50 <__aeabi_dsub+0x1b4>
 8001cf2:	2800      	cmp	r0, #0
 8001cf4:	d100      	bne.n	8001cf8 <__aeabi_dsub+0x5c>
 8001cf6:	e0c1      	b.n	8001e7c <__aeabi_dsub+0x1e0>
 8001cf8:	48be      	ldr	r0, [pc, #760]	; (8001ff4 <__aeabi_dsub+0x358>)
 8001cfa:	4580      	cmp	r8, r0
 8001cfc:	d100      	bne.n	8001d00 <__aeabi_dsub+0x64>
 8001cfe:	e151      	b.n	8001fa4 <__aeabi_dsub+0x308>
 8001d00:	2080      	movs	r0, #128	; 0x80
 8001d02:	0400      	lsls	r0, r0, #16
 8001d04:	4301      	orrs	r1, r0
 8001d06:	2a38      	cmp	r2, #56	; 0x38
 8001d08:	dd00      	ble.n	8001d0c <__aeabi_dsub+0x70>
 8001d0a:	e17b      	b.n	8002004 <__aeabi_dsub+0x368>
 8001d0c:	2a1f      	cmp	r2, #31
 8001d0e:	dd00      	ble.n	8001d12 <__aeabi_dsub+0x76>
 8001d10:	e1ee      	b.n	80020f0 <__aeabi_dsub+0x454>
 8001d12:	2020      	movs	r0, #32
 8001d14:	003e      	movs	r6, r7
 8001d16:	1a80      	subs	r0, r0, r2
 8001d18:	000c      	movs	r4, r1
 8001d1a:	40d6      	lsrs	r6, r2
 8001d1c:	40d1      	lsrs	r1, r2
 8001d1e:	4087      	lsls	r7, r0
 8001d20:	4662      	mov	r2, ip
 8001d22:	4084      	lsls	r4, r0
 8001d24:	1a52      	subs	r2, r2, r1
 8001d26:	1e78      	subs	r0, r7, #1
 8001d28:	4187      	sbcs	r7, r0
 8001d2a:	4694      	mov	ip, r2
 8001d2c:	4334      	orrs	r4, r6
 8001d2e:	4327      	orrs	r7, r4
 8001d30:	1bdc      	subs	r4, r3, r7
 8001d32:	42a3      	cmp	r3, r4
 8001d34:	419b      	sbcs	r3, r3
 8001d36:	4662      	mov	r2, ip
 8001d38:	425b      	negs	r3, r3
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	4699      	mov	r9, r3
 8001d3e:	464b      	mov	r3, r9
 8001d40:	021b      	lsls	r3, r3, #8
 8001d42:	d400      	bmi.n	8001d46 <__aeabi_dsub+0xaa>
 8001d44:	e118      	b.n	8001f78 <__aeabi_dsub+0x2dc>
 8001d46:	464b      	mov	r3, r9
 8001d48:	0258      	lsls	r0, r3, #9
 8001d4a:	0a43      	lsrs	r3, r0, #9
 8001d4c:	4699      	mov	r9, r3
 8001d4e:	464b      	mov	r3, r9
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d100      	bne.n	8001d56 <__aeabi_dsub+0xba>
 8001d54:	e137      	b.n	8001fc6 <__aeabi_dsub+0x32a>
 8001d56:	4648      	mov	r0, r9
 8001d58:	f000 fc24 	bl	80025a4 <__clzsi2>
 8001d5c:	0001      	movs	r1, r0
 8001d5e:	3908      	subs	r1, #8
 8001d60:	2320      	movs	r3, #32
 8001d62:	0022      	movs	r2, r4
 8001d64:	4648      	mov	r0, r9
 8001d66:	1a5b      	subs	r3, r3, r1
 8001d68:	40da      	lsrs	r2, r3
 8001d6a:	4088      	lsls	r0, r1
 8001d6c:	408c      	lsls	r4, r1
 8001d6e:	4643      	mov	r3, r8
 8001d70:	4310      	orrs	r0, r2
 8001d72:	4588      	cmp	r8, r1
 8001d74:	dd00      	ble.n	8001d78 <__aeabi_dsub+0xdc>
 8001d76:	e136      	b.n	8001fe6 <__aeabi_dsub+0x34a>
 8001d78:	1ac9      	subs	r1, r1, r3
 8001d7a:	1c4b      	adds	r3, r1, #1
 8001d7c:	2b1f      	cmp	r3, #31
 8001d7e:	dd00      	ble.n	8001d82 <__aeabi_dsub+0xe6>
 8001d80:	e0ea      	b.n	8001f58 <__aeabi_dsub+0x2bc>
 8001d82:	2220      	movs	r2, #32
 8001d84:	0026      	movs	r6, r4
 8001d86:	1ad2      	subs	r2, r2, r3
 8001d88:	0001      	movs	r1, r0
 8001d8a:	4094      	lsls	r4, r2
 8001d8c:	40de      	lsrs	r6, r3
 8001d8e:	40d8      	lsrs	r0, r3
 8001d90:	2300      	movs	r3, #0
 8001d92:	4091      	lsls	r1, r2
 8001d94:	1e62      	subs	r2, r4, #1
 8001d96:	4194      	sbcs	r4, r2
 8001d98:	4681      	mov	r9, r0
 8001d9a:	4698      	mov	r8, r3
 8001d9c:	4331      	orrs	r1, r6
 8001d9e:	430c      	orrs	r4, r1
 8001da0:	0763      	lsls	r3, r4, #29
 8001da2:	d009      	beq.n	8001db8 <__aeabi_dsub+0x11c>
 8001da4:	230f      	movs	r3, #15
 8001da6:	4023      	ands	r3, r4
 8001da8:	2b04      	cmp	r3, #4
 8001daa:	d005      	beq.n	8001db8 <__aeabi_dsub+0x11c>
 8001dac:	1d23      	adds	r3, r4, #4
 8001dae:	42a3      	cmp	r3, r4
 8001db0:	41a4      	sbcs	r4, r4
 8001db2:	4264      	negs	r4, r4
 8001db4:	44a1      	add	r9, r4
 8001db6:	001c      	movs	r4, r3
 8001db8:	464b      	mov	r3, r9
 8001dba:	021b      	lsls	r3, r3, #8
 8001dbc:	d400      	bmi.n	8001dc0 <__aeabi_dsub+0x124>
 8001dbe:	e0de      	b.n	8001f7e <__aeabi_dsub+0x2e2>
 8001dc0:	4641      	mov	r1, r8
 8001dc2:	4b8c      	ldr	r3, [pc, #560]	; (8001ff4 <__aeabi_dsub+0x358>)
 8001dc4:	3101      	adds	r1, #1
 8001dc6:	4299      	cmp	r1, r3
 8001dc8:	d100      	bne.n	8001dcc <__aeabi_dsub+0x130>
 8001dca:	e0e7      	b.n	8001f9c <__aeabi_dsub+0x300>
 8001dcc:	464b      	mov	r3, r9
 8001dce:	488a      	ldr	r0, [pc, #552]	; (8001ff8 <__aeabi_dsub+0x35c>)
 8001dd0:	08e4      	lsrs	r4, r4, #3
 8001dd2:	4003      	ands	r3, r0
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	0549      	lsls	r1, r1, #21
 8001dd8:	075b      	lsls	r3, r3, #29
 8001dda:	0240      	lsls	r0, r0, #9
 8001ddc:	4323      	orrs	r3, r4
 8001dde:	0d4a      	lsrs	r2, r1, #21
 8001de0:	0b04      	lsrs	r4, r0, #12
 8001de2:	0512      	lsls	r2, r2, #20
 8001de4:	07ed      	lsls	r5, r5, #31
 8001de6:	4322      	orrs	r2, r4
 8001de8:	432a      	orrs	r2, r5
 8001dea:	0018      	movs	r0, r3
 8001dec:	0011      	movs	r1, r2
 8001dee:	bcf0      	pop	{r4, r5, r6, r7}
 8001df0:	46bb      	mov	fp, r7
 8001df2:	46b2      	mov	sl, r6
 8001df4:	46a9      	mov	r9, r5
 8001df6:	46a0      	mov	r8, r4
 8001df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001dfa:	4642      	mov	r2, r8
 8001dfc:	1a12      	subs	r2, r2, r0
 8001dfe:	2a00      	cmp	r2, #0
 8001e00:	dd52      	ble.n	8001ea8 <__aeabi_dsub+0x20c>
 8001e02:	2800      	cmp	r0, #0
 8001e04:	d100      	bne.n	8001e08 <__aeabi_dsub+0x16c>
 8001e06:	e09c      	b.n	8001f42 <__aeabi_dsub+0x2a6>
 8001e08:	45a0      	cmp	r8, r4
 8001e0a:	d100      	bne.n	8001e0e <__aeabi_dsub+0x172>
 8001e0c:	e0ca      	b.n	8001fa4 <__aeabi_dsub+0x308>
 8001e0e:	2080      	movs	r0, #128	; 0x80
 8001e10:	0400      	lsls	r0, r0, #16
 8001e12:	4301      	orrs	r1, r0
 8001e14:	2a38      	cmp	r2, #56	; 0x38
 8001e16:	dd00      	ble.n	8001e1a <__aeabi_dsub+0x17e>
 8001e18:	e149      	b.n	80020ae <__aeabi_dsub+0x412>
 8001e1a:	2a1f      	cmp	r2, #31
 8001e1c:	dc00      	bgt.n	8001e20 <__aeabi_dsub+0x184>
 8001e1e:	e197      	b.n	8002150 <__aeabi_dsub+0x4b4>
 8001e20:	0010      	movs	r0, r2
 8001e22:	000e      	movs	r6, r1
 8001e24:	3820      	subs	r0, #32
 8001e26:	40c6      	lsrs	r6, r0
 8001e28:	2a20      	cmp	r2, #32
 8001e2a:	d004      	beq.n	8001e36 <__aeabi_dsub+0x19a>
 8001e2c:	2040      	movs	r0, #64	; 0x40
 8001e2e:	1a82      	subs	r2, r0, r2
 8001e30:	4091      	lsls	r1, r2
 8001e32:	430f      	orrs	r7, r1
 8001e34:	46b9      	mov	r9, r7
 8001e36:	464c      	mov	r4, r9
 8001e38:	1e62      	subs	r2, r4, #1
 8001e3a:	4194      	sbcs	r4, r2
 8001e3c:	4334      	orrs	r4, r6
 8001e3e:	e13a      	b.n	80020b6 <__aeabi_dsub+0x41a>
 8001e40:	000a      	movs	r2, r1
 8001e42:	433a      	orrs	r2, r7
 8001e44:	d028      	beq.n	8001e98 <__aeabi_dsub+0x1fc>
 8001e46:	46b3      	mov	fp, r6
 8001e48:	42b5      	cmp	r5, r6
 8001e4a:	d02b      	beq.n	8001ea4 <__aeabi_dsub+0x208>
 8001e4c:	4a6b      	ldr	r2, [pc, #428]	; (8001ffc <__aeabi_dsub+0x360>)
 8001e4e:	4442      	add	r2, r8
 8001e50:	2a00      	cmp	r2, #0
 8001e52:	d05d      	beq.n	8001f10 <__aeabi_dsub+0x274>
 8001e54:	4642      	mov	r2, r8
 8001e56:	4644      	mov	r4, r8
 8001e58:	1a82      	subs	r2, r0, r2
 8001e5a:	2c00      	cmp	r4, #0
 8001e5c:	d000      	beq.n	8001e60 <__aeabi_dsub+0x1c4>
 8001e5e:	e0f5      	b.n	800204c <__aeabi_dsub+0x3b0>
 8001e60:	4665      	mov	r5, ip
 8001e62:	431d      	orrs	r5, r3
 8001e64:	d100      	bne.n	8001e68 <__aeabi_dsub+0x1cc>
 8001e66:	e19c      	b.n	80021a2 <__aeabi_dsub+0x506>
 8001e68:	1e55      	subs	r5, r2, #1
 8001e6a:	2a01      	cmp	r2, #1
 8001e6c:	d100      	bne.n	8001e70 <__aeabi_dsub+0x1d4>
 8001e6e:	e1fb      	b.n	8002268 <__aeabi_dsub+0x5cc>
 8001e70:	4c60      	ldr	r4, [pc, #384]	; (8001ff4 <__aeabi_dsub+0x358>)
 8001e72:	42a2      	cmp	r2, r4
 8001e74:	d100      	bne.n	8001e78 <__aeabi_dsub+0x1dc>
 8001e76:	e1bd      	b.n	80021f4 <__aeabi_dsub+0x558>
 8001e78:	002a      	movs	r2, r5
 8001e7a:	e0f0      	b.n	800205e <__aeabi_dsub+0x3c2>
 8001e7c:	0008      	movs	r0, r1
 8001e7e:	4338      	orrs	r0, r7
 8001e80:	d100      	bne.n	8001e84 <__aeabi_dsub+0x1e8>
 8001e82:	e0c3      	b.n	800200c <__aeabi_dsub+0x370>
 8001e84:	1e50      	subs	r0, r2, #1
 8001e86:	2a01      	cmp	r2, #1
 8001e88:	d100      	bne.n	8001e8c <__aeabi_dsub+0x1f0>
 8001e8a:	e1a8      	b.n	80021de <__aeabi_dsub+0x542>
 8001e8c:	4c59      	ldr	r4, [pc, #356]	; (8001ff4 <__aeabi_dsub+0x358>)
 8001e8e:	42a2      	cmp	r2, r4
 8001e90:	d100      	bne.n	8001e94 <__aeabi_dsub+0x1f8>
 8001e92:	e087      	b.n	8001fa4 <__aeabi_dsub+0x308>
 8001e94:	0002      	movs	r2, r0
 8001e96:	e736      	b.n	8001d06 <__aeabi_dsub+0x6a>
 8001e98:	2201      	movs	r2, #1
 8001e9a:	4056      	eors	r6, r2
 8001e9c:	46b3      	mov	fp, r6
 8001e9e:	42b5      	cmp	r5, r6
 8001ea0:	d000      	beq.n	8001ea4 <__aeabi_dsub+0x208>
 8001ea2:	e721      	b.n	8001ce8 <__aeabi_dsub+0x4c>
 8001ea4:	4a55      	ldr	r2, [pc, #340]	; (8001ffc <__aeabi_dsub+0x360>)
 8001ea6:	4442      	add	r2, r8
 8001ea8:	2a00      	cmp	r2, #0
 8001eaa:	d100      	bne.n	8001eae <__aeabi_dsub+0x212>
 8001eac:	e0b5      	b.n	800201a <__aeabi_dsub+0x37e>
 8001eae:	4642      	mov	r2, r8
 8001eb0:	4644      	mov	r4, r8
 8001eb2:	1a82      	subs	r2, r0, r2
 8001eb4:	2c00      	cmp	r4, #0
 8001eb6:	d100      	bne.n	8001eba <__aeabi_dsub+0x21e>
 8001eb8:	e138      	b.n	800212c <__aeabi_dsub+0x490>
 8001eba:	4e4e      	ldr	r6, [pc, #312]	; (8001ff4 <__aeabi_dsub+0x358>)
 8001ebc:	42b0      	cmp	r0, r6
 8001ebe:	d100      	bne.n	8001ec2 <__aeabi_dsub+0x226>
 8001ec0:	e1de      	b.n	8002280 <__aeabi_dsub+0x5e4>
 8001ec2:	2680      	movs	r6, #128	; 0x80
 8001ec4:	4664      	mov	r4, ip
 8001ec6:	0436      	lsls	r6, r6, #16
 8001ec8:	4334      	orrs	r4, r6
 8001eca:	46a4      	mov	ip, r4
 8001ecc:	2a38      	cmp	r2, #56	; 0x38
 8001ece:	dd00      	ble.n	8001ed2 <__aeabi_dsub+0x236>
 8001ed0:	e196      	b.n	8002200 <__aeabi_dsub+0x564>
 8001ed2:	2a1f      	cmp	r2, #31
 8001ed4:	dd00      	ble.n	8001ed8 <__aeabi_dsub+0x23c>
 8001ed6:	e224      	b.n	8002322 <__aeabi_dsub+0x686>
 8001ed8:	2620      	movs	r6, #32
 8001eda:	1ab4      	subs	r4, r6, r2
 8001edc:	46a2      	mov	sl, r4
 8001ede:	4664      	mov	r4, ip
 8001ee0:	4656      	mov	r6, sl
 8001ee2:	40b4      	lsls	r4, r6
 8001ee4:	46a1      	mov	r9, r4
 8001ee6:	001c      	movs	r4, r3
 8001ee8:	464e      	mov	r6, r9
 8001eea:	40d4      	lsrs	r4, r2
 8001eec:	4326      	orrs	r6, r4
 8001eee:	0034      	movs	r4, r6
 8001ef0:	4656      	mov	r6, sl
 8001ef2:	40b3      	lsls	r3, r6
 8001ef4:	1e5e      	subs	r6, r3, #1
 8001ef6:	41b3      	sbcs	r3, r6
 8001ef8:	431c      	orrs	r4, r3
 8001efa:	4663      	mov	r3, ip
 8001efc:	40d3      	lsrs	r3, r2
 8001efe:	18c9      	adds	r1, r1, r3
 8001f00:	19e4      	adds	r4, r4, r7
 8001f02:	42bc      	cmp	r4, r7
 8001f04:	41bf      	sbcs	r7, r7
 8001f06:	427f      	negs	r7, r7
 8001f08:	46b9      	mov	r9, r7
 8001f0a:	4680      	mov	r8, r0
 8001f0c:	4489      	add	r9, r1
 8001f0e:	e0d8      	b.n	80020c2 <__aeabi_dsub+0x426>
 8001f10:	4640      	mov	r0, r8
 8001f12:	4c3b      	ldr	r4, [pc, #236]	; (8002000 <__aeabi_dsub+0x364>)
 8001f14:	3001      	adds	r0, #1
 8001f16:	4220      	tst	r0, r4
 8001f18:	d000      	beq.n	8001f1c <__aeabi_dsub+0x280>
 8001f1a:	e0b4      	b.n	8002086 <__aeabi_dsub+0x3ea>
 8001f1c:	4640      	mov	r0, r8
 8001f1e:	2800      	cmp	r0, #0
 8001f20:	d000      	beq.n	8001f24 <__aeabi_dsub+0x288>
 8001f22:	e144      	b.n	80021ae <__aeabi_dsub+0x512>
 8001f24:	4660      	mov	r0, ip
 8001f26:	4318      	orrs	r0, r3
 8001f28:	d100      	bne.n	8001f2c <__aeabi_dsub+0x290>
 8001f2a:	e190      	b.n	800224e <__aeabi_dsub+0x5b2>
 8001f2c:	0008      	movs	r0, r1
 8001f2e:	4338      	orrs	r0, r7
 8001f30:	d000      	beq.n	8001f34 <__aeabi_dsub+0x298>
 8001f32:	e1aa      	b.n	800228a <__aeabi_dsub+0x5ee>
 8001f34:	4661      	mov	r1, ip
 8001f36:	08db      	lsrs	r3, r3, #3
 8001f38:	0749      	lsls	r1, r1, #29
 8001f3a:	430b      	orrs	r3, r1
 8001f3c:	4661      	mov	r1, ip
 8001f3e:	08cc      	lsrs	r4, r1, #3
 8001f40:	e027      	b.n	8001f92 <__aeabi_dsub+0x2f6>
 8001f42:	0008      	movs	r0, r1
 8001f44:	4338      	orrs	r0, r7
 8001f46:	d061      	beq.n	800200c <__aeabi_dsub+0x370>
 8001f48:	1e50      	subs	r0, r2, #1
 8001f4a:	2a01      	cmp	r2, #1
 8001f4c:	d100      	bne.n	8001f50 <__aeabi_dsub+0x2b4>
 8001f4e:	e139      	b.n	80021c4 <__aeabi_dsub+0x528>
 8001f50:	42a2      	cmp	r2, r4
 8001f52:	d027      	beq.n	8001fa4 <__aeabi_dsub+0x308>
 8001f54:	0002      	movs	r2, r0
 8001f56:	e75d      	b.n	8001e14 <__aeabi_dsub+0x178>
 8001f58:	0002      	movs	r2, r0
 8001f5a:	391f      	subs	r1, #31
 8001f5c:	40ca      	lsrs	r2, r1
 8001f5e:	0011      	movs	r1, r2
 8001f60:	2b20      	cmp	r3, #32
 8001f62:	d003      	beq.n	8001f6c <__aeabi_dsub+0x2d0>
 8001f64:	2240      	movs	r2, #64	; 0x40
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	4098      	lsls	r0, r3
 8001f6a:	4304      	orrs	r4, r0
 8001f6c:	1e63      	subs	r3, r4, #1
 8001f6e:	419c      	sbcs	r4, r3
 8001f70:	2300      	movs	r3, #0
 8001f72:	4699      	mov	r9, r3
 8001f74:	4698      	mov	r8, r3
 8001f76:	430c      	orrs	r4, r1
 8001f78:	0763      	lsls	r3, r4, #29
 8001f7a:	d000      	beq.n	8001f7e <__aeabi_dsub+0x2e2>
 8001f7c:	e712      	b.n	8001da4 <__aeabi_dsub+0x108>
 8001f7e:	464b      	mov	r3, r9
 8001f80:	464a      	mov	r2, r9
 8001f82:	08e4      	lsrs	r4, r4, #3
 8001f84:	075b      	lsls	r3, r3, #29
 8001f86:	4323      	orrs	r3, r4
 8001f88:	08d4      	lsrs	r4, r2, #3
 8001f8a:	4642      	mov	r2, r8
 8001f8c:	4919      	ldr	r1, [pc, #100]	; (8001ff4 <__aeabi_dsub+0x358>)
 8001f8e:	428a      	cmp	r2, r1
 8001f90:	d00e      	beq.n	8001fb0 <__aeabi_dsub+0x314>
 8001f92:	0324      	lsls	r4, r4, #12
 8001f94:	0552      	lsls	r2, r2, #21
 8001f96:	0b24      	lsrs	r4, r4, #12
 8001f98:	0d52      	lsrs	r2, r2, #21
 8001f9a:	e722      	b.n	8001de2 <__aeabi_dsub+0x146>
 8001f9c:	000a      	movs	r2, r1
 8001f9e:	2400      	movs	r4, #0
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	e71e      	b.n	8001de2 <__aeabi_dsub+0x146>
 8001fa4:	08db      	lsrs	r3, r3, #3
 8001fa6:	4662      	mov	r2, ip
 8001fa8:	0752      	lsls	r2, r2, #29
 8001faa:	4313      	orrs	r3, r2
 8001fac:	4662      	mov	r2, ip
 8001fae:	08d4      	lsrs	r4, r2, #3
 8001fb0:	001a      	movs	r2, r3
 8001fb2:	4322      	orrs	r2, r4
 8001fb4:	d100      	bne.n	8001fb8 <__aeabi_dsub+0x31c>
 8001fb6:	e1fc      	b.n	80023b2 <__aeabi_dsub+0x716>
 8001fb8:	2280      	movs	r2, #128	; 0x80
 8001fba:	0312      	lsls	r2, r2, #12
 8001fbc:	4314      	orrs	r4, r2
 8001fbe:	0324      	lsls	r4, r4, #12
 8001fc0:	4a0c      	ldr	r2, [pc, #48]	; (8001ff4 <__aeabi_dsub+0x358>)
 8001fc2:	0b24      	lsrs	r4, r4, #12
 8001fc4:	e70d      	b.n	8001de2 <__aeabi_dsub+0x146>
 8001fc6:	0020      	movs	r0, r4
 8001fc8:	f000 faec 	bl	80025a4 <__clzsi2>
 8001fcc:	0001      	movs	r1, r0
 8001fce:	3118      	adds	r1, #24
 8001fd0:	291f      	cmp	r1, #31
 8001fd2:	dc00      	bgt.n	8001fd6 <__aeabi_dsub+0x33a>
 8001fd4:	e6c4      	b.n	8001d60 <__aeabi_dsub+0xc4>
 8001fd6:	3808      	subs	r0, #8
 8001fd8:	4084      	lsls	r4, r0
 8001fda:	4643      	mov	r3, r8
 8001fdc:	0020      	movs	r0, r4
 8001fde:	2400      	movs	r4, #0
 8001fe0:	4588      	cmp	r8, r1
 8001fe2:	dc00      	bgt.n	8001fe6 <__aeabi_dsub+0x34a>
 8001fe4:	e6c8      	b.n	8001d78 <__aeabi_dsub+0xdc>
 8001fe6:	4a04      	ldr	r2, [pc, #16]	; (8001ff8 <__aeabi_dsub+0x35c>)
 8001fe8:	1a5b      	subs	r3, r3, r1
 8001fea:	4010      	ands	r0, r2
 8001fec:	4698      	mov	r8, r3
 8001fee:	4681      	mov	r9, r0
 8001ff0:	e6d6      	b.n	8001da0 <__aeabi_dsub+0x104>
 8001ff2:	46c0      	nop			; (mov r8, r8)
 8001ff4:	000007ff 	.word	0x000007ff
 8001ff8:	ff7fffff 	.word	0xff7fffff
 8001ffc:	fffff801 	.word	0xfffff801
 8002000:	000007fe 	.word	0x000007fe
 8002004:	430f      	orrs	r7, r1
 8002006:	1e7a      	subs	r2, r7, #1
 8002008:	4197      	sbcs	r7, r2
 800200a:	e691      	b.n	8001d30 <__aeabi_dsub+0x94>
 800200c:	4661      	mov	r1, ip
 800200e:	08db      	lsrs	r3, r3, #3
 8002010:	0749      	lsls	r1, r1, #29
 8002012:	430b      	orrs	r3, r1
 8002014:	4661      	mov	r1, ip
 8002016:	08cc      	lsrs	r4, r1, #3
 8002018:	e7b8      	b.n	8001f8c <__aeabi_dsub+0x2f0>
 800201a:	4640      	mov	r0, r8
 800201c:	4cd3      	ldr	r4, [pc, #844]	; (800236c <__aeabi_dsub+0x6d0>)
 800201e:	3001      	adds	r0, #1
 8002020:	4220      	tst	r0, r4
 8002022:	d000      	beq.n	8002026 <__aeabi_dsub+0x38a>
 8002024:	e0a2      	b.n	800216c <__aeabi_dsub+0x4d0>
 8002026:	4640      	mov	r0, r8
 8002028:	2800      	cmp	r0, #0
 800202a:	d000      	beq.n	800202e <__aeabi_dsub+0x392>
 800202c:	e101      	b.n	8002232 <__aeabi_dsub+0x596>
 800202e:	4660      	mov	r0, ip
 8002030:	4318      	orrs	r0, r3
 8002032:	d100      	bne.n	8002036 <__aeabi_dsub+0x39a>
 8002034:	e15e      	b.n	80022f4 <__aeabi_dsub+0x658>
 8002036:	0008      	movs	r0, r1
 8002038:	4338      	orrs	r0, r7
 800203a:	d000      	beq.n	800203e <__aeabi_dsub+0x3a2>
 800203c:	e15f      	b.n	80022fe <__aeabi_dsub+0x662>
 800203e:	4661      	mov	r1, ip
 8002040:	08db      	lsrs	r3, r3, #3
 8002042:	0749      	lsls	r1, r1, #29
 8002044:	430b      	orrs	r3, r1
 8002046:	4661      	mov	r1, ip
 8002048:	08cc      	lsrs	r4, r1, #3
 800204a:	e7a2      	b.n	8001f92 <__aeabi_dsub+0x2f6>
 800204c:	4dc8      	ldr	r5, [pc, #800]	; (8002370 <__aeabi_dsub+0x6d4>)
 800204e:	42a8      	cmp	r0, r5
 8002050:	d100      	bne.n	8002054 <__aeabi_dsub+0x3b8>
 8002052:	e0cf      	b.n	80021f4 <__aeabi_dsub+0x558>
 8002054:	2580      	movs	r5, #128	; 0x80
 8002056:	4664      	mov	r4, ip
 8002058:	042d      	lsls	r5, r5, #16
 800205a:	432c      	orrs	r4, r5
 800205c:	46a4      	mov	ip, r4
 800205e:	2a38      	cmp	r2, #56	; 0x38
 8002060:	dc56      	bgt.n	8002110 <__aeabi_dsub+0x474>
 8002062:	2a1f      	cmp	r2, #31
 8002064:	dd00      	ble.n	8002068 <__aeabi_dsub+0x3cc>
 8002066:	e0d1      	b.n	800220c <__aeabi_dsub+0x570>
 8002068:	2520      	movs	r5, #32
 800206a:	001e      	movs	r6, r3
 800206c:	1aad      	subs	r5, r5, r2
 800206e:	4664      	mov	r4, ip
 8002070:	40ab      	lsls	r3, r5
 8002072:	40ac      	lsls	r4, r5
 8002074:	40d6      	lsrs	r6, r2
 8002076:	1e5d      	subs	r5, r3, #1
 8002078:	41ab      	sbcs	r3, r5
 800207a:	4334      	orrs	r4, r6
 800207c:	4323      	orrs	r3, r4
 800207e:	4664      	mov	r4, ip
 8002080:	40d4      	lsrs	r4, r2
 8002082:	1b09      	subs	r1, r1, r4
 8002084:	e049      	b.n	800211a <__aeabi_dsub+0x47e>
 8002086:	4660      	mov	r0, ip
 8002088:	1bdc      	subs	r4, r3, r7
 800208a:	1a46      	subs	r6, r0, r1
 800208c:	42a3      	cmp	r3, r4
 800208e:	4180      	sbcs	r0, r0
 8002090:	4240      	negs	r0, r0
 8002092:	4681      	mov	r9, r0
 8002094:	0030      	movs	r0, r6
 8002096:	464e      	mov	r6, r9
 8002098:	1b80      	subs	r0, r0, r6
 800209a:	4681      	mov	r9, r0
 800209c:	0200      	lsls	r0, r0, #8
 800209e:	d476      	bmi.n	800218e <__aeabi_dsub+0x4f2>
 80020a0:	464b      	mov	r3, r9
 80020a2:	4323      	orrs	r3, r4
 80020a4:	d000      	beq.n	80020a8 <__aeabi_dsub+0x40c>
 80020a6:	e652      	b.n	8001d4e <__aeabi_dsub+0xb2>
 80020a8:	2400      	movs	r4, #0
 80020aa:	2500      	movs	r5, #0
 80020ac:	e771      	b.n	8001f92 <__aeabi_dsub+0x2f6>
 80020ae:	4339      	orrs	r1, r7
 80020b0:	000c      	movs	r4, r1
 80020b2:	1e62      	subs	r2, r4, #1
 80020b4:	4194      	sbcs	r4, r2
 80020b6:	18e4      	adds	r4, r4, r3
 80020b8:	429c      	cmp	r4, r3
 80020ba:	419b      	sbcs	r3, r3
 80020bc:	425b      	negs	r3, r3
 80020be:	4463      	add	r3, ip
 80020c0:	4699      	mov	r9, r3
 80020c2:	464b      	mov	r3, r9
 80020c4:	021b      	lsls	r3, r3, #8
 80020c6:	d400      	bmi.n	80020ca <__aeabi_dsub+0x42e>
 80020c8:	e756      	b.n	8001f78 <__aeabi_dsub+0x2dc>
 80020ca:	2301      	movs	r3, #1
 80020cc:	469c      	mov	ip, r3
 80020ce:	4ba8      	ldr	r3, [pc, #672]	; (8002370 <__aeabi_dsub+0x6d4>)
 80020d0:	44e0      	add	r8, ip
 80020d2:	4598      	cmp	r8, r3
 80020d4:	d038      	beq.n	8002148 <__aeabi_dsub+0x4ac>
 80020d6:	464b      	mov	r3, r9
 80020d8:	48a6      	ldr	r0, [pc, #664]	; (8002374 <__aeabi_dsub+0x6d8>)
 80020da:	2201      	movs	r2, #1
 80020dc:	4003      	ands	r3, r0
 80020de:	0018      	movs	r0, r3
 80020e0:	0863      	lsrs	r3, r4, #1
 80020e2:	4014      	ands	r4, r2
 80020e4:	431c      	orrs	r4, r3
 80020e6:	07c3      	lsls	r3, r0, #31
 80020e8:	431c      	orrs	r4, r3
 80020ea:	0843      	lsrs	r3, r0, #1
 80020ec:	4699      	mov	r9, r3
 80020ee:	e657      	b.n	8001da0 <__aeabi_dsub+0x104>
 80020f0:	0010      	movs	r0, r2
 80020f2:	000e      	movs	r6, r1
 80020f4:	3820      	subs	r0, #32
 80020f6:	40c6      	lsrs	r6, r0
 80020f8:	2a20      	cmp	r2, #32
 80020fa:	d004      	beq.n	8002106 <__aeabi_dsub+0x46a>
 80020fc:	2040      	movs	r0, #64	; 0x40
 80020fe:	1a82      	subs	r2, r0, r2
 8002100:	4091      	lsls	r1, r2
 8002102:	430f      	orrs	r7, r1
 8002104:	46b9      	mov	r9, r7
 8002106:	464f      	mov	r7, r9
 8002108:	1e7a      	subs	r2, r7, #1
 800210a:	4197      	sbcs	r7, r2
 800210c:	4337      	orrs	r7, r6
 800210e:	e60f      	b.n	8001d30 <__aeabi_dsub+0x94>
 8002110:	4662      	mov	r2, ip
 8002112:	431a      	orrs	r2, r3
 8002114:	0013      	movs	r3, r2
 8002116:	1e5a      	subs	r2, r3, #1
 8002118:	4193      	sbcs	r3, r2
 800211a:	1afc      	subs	r4, r7, r3
 800211c:	42a7      	cmp	r7, r4
 800211e:	41bf      	sbcs	r7, r7
 8002120:	427f      	negs	r7, r7
 8002122:	1bcb      	subs	r3, r1, r7
 8002124:	4699      	mov	r9, r3
 8002126:	465d      	mov	r5, fp
 8002128:	4680      	mov	r8, r0
 800212a:	e608      	b.n	8001d3e <__aeabi_dsub+0xa2>
 800212c:	4666      	mov	r6, ip
 800212e:	431e      	orrs	r6, r3
 8002130:	d100      	bne.n	8002134 <__aeabi_dsub+0x498>
 8002132:	e0be      	b.n	80022b2 <__aeabi_dsub+0x616>
 8002134:	1e56      	subs	r6, r2, #1
 8002136:	2a01      	cmp	r2, #1
 8002138:	d100      	bne.n	800213c <__aeabi_dsub+0x4a0>
 800213a:	e109      	b.n	8002350 <__aeabi_dsub+0x6b4>
 800213c:	4c8c      	ldr	r4, [pc, #560]	; (8002370 <__aeabi_dsub+0x6d4>)
 800213e:	42a2      	cmp	r2, r4
 8002140:	d100      	bne.n	8002144 <__aeabi_dsub+0x4a8>
 8002142:	e119      	b.n	8002378 <__aeabi_dsub+0x6dc>
 8002144:	0032      	movs	r2, r6
 8002146:	e6c1      	b.n	8001ecc <__aeabi_dsub+0x230>
 8002148:	4642      	mov	r2, r8
 800214a:	2400      	movs	r4, #0
 800214c:	2300      	movs	r3, #0
 800214e:	e648      	b.n	8001de2 <__aeabi_dsub+0x146>
 8002150:	2020      	movs	r0, #32
 8002152:	000c      	movs	r4, r1
 8002154:	1a80      	subs	r0, r0, r2
 8002156:	003e      	movs	r6, r7
 8002158:	4087      	lsls	r7, r0
 800215a:	4084      	lsls	r4, r0
 800215c:	40d6      	lsrs	r6, r2
 800215e:	1e78      	subs	r0, r7, #1
 8002160:	4187      	sbcs	r7, r0
 8002162:	40d1      	lsrs	r1, r2
 8002164:	4334      	orrs	r4, r6
 8002166:	433c      	orrs	r4, r7
 8002168:	448c      	add	ip, r1
 800216a:	e7a4      	b.n	80020b6 <__aeabi_dsub+0x41a>
 800216c:	4a80      	ldr	r2, [pc, #512]	; (8002370 <__aeabi_dsub+0x6d4>)
 800216e:	4290      	cmp	r0, r2
 8002170:	d100      	bne.n	8002174 <__aeabi_dsub+0x4d8>
 8002172:	e0e9      	b.n	8002348 <__aeabi_dsub+0x6ac>
 8002174:	19df      	adds	r7, r3, r7
 8002176:	429f      	cmp	r7, r3
 8002178:	419b      	sbcs	r3, r3
 800217a:	4461      	add	r1, ip
 800217c:	425b      	negs	r3, r3
 800217e:	18c9      	adds	r1, r1, r3
 8002180:	07cc      	lsls	r4, r1, #31
 8002182:	087f      	lsrs	r7, r7, #1
 8002184:	084b      	lsrs	r3, r1, #1
 8002186:	4699      	mov	r9, r3
 8002188:	4680      	mov	r8, r0
 800218a:	433c      	orrs	r4, r7
 800218c:	e6f4      	b.n	8001f78 <__aeabi_dsub+0x2dc>
 800218e:	1afc      	subs	r4, r7, r3
 8002190:	42a7      	cmp	r7, r4
 8002192:	41bf      	sbcs	r7, r7
 8002194:	4663      	mov	r3, ip
 8002196:	427f      	negs	r7, r7
 8002198:	1ac9      	subs	r1, r1, r3
 800219a:	1bcb      	subs	r3, r1, r7
 800219c:	4699      	mov	r9, r3
 800219e:	465d      	mov	r5, fp
 80021a0:	e5d5      	b.n	8001d4e <__aeabi_dsub+0xb2>
 80021a2:	08ff      	lsrs	r7, r7, #3
 80021a4:	074b      	lsls	r3, r1, #29
 80021a6:	465d      	mov	r5, fp
 80021a8:	433b      	orrs	r3, r7
 80021aa:	08cc      	lsrs	r4, r1, #3
 80021ac:	e6ee      	b.n	8001f8c <__aeabi_dsub+0x2f0>
 80021ae:	4662      	mov	r2, ip
 80021b0:	431a      	orrs	r2, r3
 80021b2:	d000      	beq.n	80021b6 <__aeabi_dsub+0x51a>
 80021b4:	e082      	b.n	80022bc <__aeabi_dsub+0x620>
 80021b6:	000b      	movs	r3, r1
 80021b8:	433b      	orrs	r3, r7
 80021ba:	d11b      	bne.n	80021f4 <__aeabi_dsub+0x558>
 80021bc:	2480      	movs	r4, #128	; 0x80
 80021be:	2500      	movs	r5, #0
 80021c0:	0324      	lsls	r4, r4, #12
 80021c2:	e6f9      	b.n	8001fb8 <__aeabi_dsub+0x31c>
 80021c4:	19dc      	adds	r4, r3, r7
 80021c6:	429c      	cmp	r4, r3
 80021c8:	419b      	sbcs	r3, r3
 80021ca:	4461      	add	r1, ip
 80021cc:	4689      	mov	r9, r1
 80021ce:	425b      	negs	r3, r3
 80021d0:	4499      	add	r9, r3
 80021d2:	464b      	mov	r3, r9
 80021d4:	021b      	lsls	r3, r3, #8
 80021d6:	d444      	bmi.n	8002262 <__aeabi_dsub+0x5c6>
 80021d8:	2301      	movs	r3, #1
 80021da:	4698      	mov	r8, r3
 80021dc:	e6cc      	b.n	8001f78 <__aeabi_dsub+0x2dc>
 80021de:	1bdc      	subs	r4, r3, r7
 80021e0:	4662      	mov	r2, ip
 80021e2:	42a3      	cmp	r3, r4
 80021e4:	419b      	sbcs	r3, r3
 80021e6:	1a51      	subs	r1, r2, r1
 80021e8:	425b      	negs	r3, r3
 80021ea:	1acb      	subs	r3, r1, r3
 80021ec:	4699      	mov	r9, r3
 80021ee:	2301      	movs	r3, #1
 80021f0:	4698      	mov	r8, r3
 80021f2:	e5a4      	b.n	8001d3e <__aeabi_dsub+0xa2>
 80021f4:	08ff      	lsrs	r7, r7, #3
 80021f6:	074b      	lsls	r3, r1, #29
 80021f8:	465d      	mov	r5, fp
 80021fa:	433b      	orrs	r3, r7
 80021fc:	08cc      	lsrs	r4, r1, #3
 80021fe:	e6d7      	b.n	8001fb0 <__aeabi_dsub+0x314>
 8002200:	4662      	mov	r2, ip
 8002202:	431a      	orrs	r2, r3
 8002204:	0014      	movs	r4, r2
 8002206:	1e63      	subs	r3, r4, #1
 8002208:	419c      	sbcs	r4, r3
 800220a:	e679      	b.n	8001f00 <__aeabi_dsub+0x264>
 800220c:	0015      	movs	r5, r2
 800220e:	4664      	mov	r4, ip
 8002210:	3d20      	subs	r5, #32
 8002212:	40ec      	lsrs	r4, r5
 8002214:	46a0      	mov	r8, r4
 8002216:	2a20      	cmp	r2, #32
 8002218:	d005      	beq.n	8002226 <__aeabi_dsub+0x58a>
 800221a:	2540      	movs	r5, #64	; 0x40
 800221c:	4664      	mov	r4, ip
 800221e:	1aaa      	subs	r2, r5, r2
 8002220:	4094      	lsls	r4, r2
 8002222:	4323      	orrs	r3, r4
 8002224:	469a      	mov	sl, r3
 8002226:	4654      	mov	r4, sl
 8002228:	1e63      	subs	r3, r4, #1
 800222a:	419c      	sbcs	r4, r3
 800222c:	4643      	mov	r3, r8
 800222e:	4323      	orrs	r3, r4
 8002230:	e773      	b.n	800211a <__aeabi_dsub+0x47e>
 8002232:	4662      	mov	r2, ip
 8002234:	431a      	orrs	r2, r3
 8002236:	d023      	beq.n	8002280 <__aeabi_dsub+0x5e4>
 8002238:	000a      	movs	r2, r1
 800223a:	433a      	orrs	r2, r7
 800223c:	d000      	beq.n	8002240 <__aeabi_dsub+0x5a4>
 800223e:	e0a0      	b.n	8002382 <__aeabi_dsub+0x6e6>
 8002240:	4662      	mov	r2, ip
 8002242:	08db      	lsrs	r3, r3, #3
 8002244:	0752      	lsls	r2, r2, #29
 8002246:	4313      	orrs	r3, r2
 8002248:	4662      	mov	r2, ip
 800224a:	08d4      	lsrs	r4, r2, #3
 800224c:	e6b0      	b.n	8001fb0 <__aeabi_dsub+0x314>
 800224e:	000b      	movs	r3, r1
 8002250:	433b      	orrs	r3, r7
 8002252:	d100      	bne.n	8002256 <__aeabi_dsub+0x5ba>
 8002254:	e728      	b.n	80020a8 <__aeabi_dsub+0x40c>
 8002256:	08ff      	lsrs	r7, r7, #3
 8002258:	074b      	lsls	r3, r1, #29
 800225a:	465d      	mov	r5, fp
 800225c:	433b      	orrs	r3, r7
 800225e:	08cc      	lsrs	r4, r1, #3
 8002260:	e697      	b.n	8001f92 <__aeabi_dsub+0x2f6>
 8002262:	2302      	movs	r3, #2
 8002264:	4698      	mov	r8, r3
 8002266:	e736      	b.n	80020d6 <__aeabi_dsub+0x43a>
 8002268:	1afc      	subs	r4, r7, r3
 800226a:	42a7      	cmp	r7, r4
 800226c:	41bf      	sbcs	r7, r7
 800226e:	4663      	mov	r3, ip
 8002270:	427f      	negs	r7, r7
 8002272:	1ac9      	subs	r1, r1, r3
 8002274:	1bcb      	subs	r3, r1, r7
 8002276:	4699      	mov	r9, r3
 8002278:	2301      	movs	r3, #1
 800227a:	465d      	mov	r5, fp
 800227c:	4698      	mov	r8, r3
 800227e:	e55e      	b.n	8001d3e <__aeabi_dsub+0xa2>
 8002280:	074b      	lsls	r3, r1, #29
 8002282:	08ff      	lsrs	r7, r7, #3
 8002284:	433b      	orrs	r3, r7
 8002286:	08cc      	lsrs	r4, r1, #3
 8002288:	e692      	b.n	8001fb0 <__aeabi_dsub+0x314>
 800228a:	1bdc      	subs	r4, r3, r7
 800228c:	4660      	mov	r0, ip
 800228e:	42a3      	cmp	r3, r4
 8002290:	41b6      	sbcs	r6, r6
 8002292:	1a40      	subs	r0, r0, r1
 8002294:	4276      	negs	r6, r6
 8002296:	1b80      	subs	r0, r0, r6
 8002298:	4681      	mov	r9, r0
 800229a:	0200      	lsls	r0, r0, #8
 800229c:	d560      	bpl.n	8002360 <__aeabi_dsub+0x6c4>
 800229e:	1afc      	subs	r4, r7, r3
 80022a0:	42a7      	cmp	r7, r4
 80022a2:	41bf      	sbcs	r7, r7
 80022a4:	4663      	mov	r3, ip
 80022a6:	427f      	negs	r7, r7
 80022a8:	1ac9      	subs	r1, r1, r3
 80022aa:	1bcb      	subs	r3, r1, r7
 80022ac:	4699      	mov	r9, r3
 80022ae:	465d      	mov	r5, fp
 80022b0:	e576      	b.n	8001da0 <__aeabi_dsub+0x104>
 80022b2:	08ff      	lsrs	r7, r7, #3
 80022b4:	074b      	lsls	r3, r1, #29
 80022b6:	433b      	orrs	r3, r7
 80022b8:	08cc      	lsrs	r4, r1, #3
 80022ba:	e667      	b.n	8001f8c <__aeabi_dsub+0x2f0>
 80022bc:	000a      	movs	r2, r1
 80022be:	08db      	lsrs	r3, r3, #3
 80022c0:	433a      	orrs	r2, r7
 80022c2:	d100      	bne.n	80022c6 <__aeabi_dsub+0x62a>
 80022c4:	e66f      	b.n	8001fa6 <__aeabi_dsub+0x30a>
 80022c6:	4662      	mov	r2, ip
 80022c8:	0752      	lsls	r2, r2, #29
 80022ca:	4313      	orrs	r3, r2
 80022cc:	4662      	mov	r2, ip
 80022ce:	08d4      	lsrs	r4, r2, #3
 80022d0:	2280      	movs	r2, #128	; 0x80
 80022d2:	0312      	lsls	r2, r2, #12
 80022d4:	4214      	tst	r4, r2
 80022d6:	d007      	beq.n	80022e8 <__aeabi_dsub+0x64c>
 80022d8:	08c8      	lsrs	r0, r1, #3
 80022da:	4210      	tst	r0, r2
 80022dc:	d104      	bne.n	80022e8 <__aeabi_dsub+0x64c>
 80022de:	465d      	mov	r5, fp
 80022e0:	0004      	movs	r4, r0
 80022e2:	08fb      	lsrs	r3, r7, #3
 80022e4:	0749      	lsls	r1, r1, #29
 80022e6:	430b      	orrs	r3, r1
 80022e8:	0f5a      	lsrs	r2, r3, #29
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	08db      	lsrs	r3, r3, #3
 80022ee:	0752      	lsls	r2, r2, #29
 80022f0:	4313      	orrs	r3, r2
 80022f2:	e65d      	b.n	8001fb0 <__aeabi_dsub+0x314>
 80022f4:	074b      	lsls	r3, r1, #29
 80022f6:	08ff      	lsrs	r7, r7, #3
 80022f8:	433b      	orrs	r3, r7
 80022fa:	08cc      	lsrs	r4, r1, #3
 80022fc:	e649      	b.n	8001f92 <__aeabi_dsub+0x2f6>
 80022fe:	19dc      	adds	r4, r3, r7
 8002300:	429c      	cmp	r4, r3
 8002302:	419b      	sbcs	r3, r3
 8002304:	4461      	add	r1, ip
 8002306:	4689      	mov	r9, r1
 8002308:	425b      	negs	r3, r3
 800230a:	4499      	add	r9, r3
 800230c:	464b      	mov	r3, r9
 800230e:	021b      	lsls	r3, r3, #8
 8002310:	d400      	bmi.n	8002314 <__aeabi_dsub+0x678>
 8002312:	e631      	b.n	8001f78 <__aeabi_dsub+0x2dc>
 8002314:	464a      	mov	r2, r9
 8002316:	4b17      	ldr	r3, [pc, #92]	; (8002374 <__aeabi_dsub+0x6d8>)
 8002318:	401a      	ands	r2, r3
 800231a:	2301      	movs	r3, #1
 800231c:	4691      	mov	r9, r2
 800231e:	4698      	mov	r8, r3
 8002320:	e62a      	b.n	8001f78 <__aeabi_dsub+0x2dc>
 8002322:	0016      	movs	r6, r2
 8002324:	4664      	mov	r4, ip
 8002326:	3e20      	subs	r6, #32
 8002328:	40f4      	lsrs	r4, r6
 800232a:	46a0      	mov	r8, r4
 800232c:	2a20      	cmp	r2, #32
 800232e:	d005      	beq.n	800233c <__aeabi_dsub+0x6a0>
 8002330:	2640      	movs	r6, #64	; 0x40
 8002332:	4664      	mov	r4, ip
 8002334:	1ab2      	subs	r2, r6, r2
 8002336:	4094      	lsls	r4, r2
 8002338:	4323      	orrs	r3, r4
 800233a:	469a      	mov	sl, r3
 800233c:	4654      	mov	r4, sl
 800233e:	1e63      	subs	r3, r4, #1
 8002340:	419c      	sbcs	r4, r3
 8002342:	4643      	mov	r3, r8
 8002344:	431c      	orrs	r4, r3
 8002346:	e5db      	b.n	8001f00 <__aeabi_dsub+0x264>
 8002348:	0002      	movs	r2, r0
 800234a:	2400      	movs	r4, #0
 800234c:	2300      	movs	r3, #0
 800234e:	e548      	b.n	8001de2 <__aeabi_dsub+0x146>
 8002350:	19dc      	adds	r4, r3, r7
 8002352:	42bc      	cmp	r4, r7
 8002354:	41bf      	sbcs	r7, r7
 8002356:	4461      	add	r1, ip
 8002358:	4689      	mov	r9, r1
 800235a:	427f      	negs	r7, r7
 800235c:	44b9      	add	r9, r7
 800235e:	e738      	b.n	80021d2 <__aeabi_dsub+0x536>
 8002360:	464b      	mov	r3, r9
 8002362:	4323      	orrs	r3, r4
 8002364:	d100      	bne.n	8002368 <__aeabi_dsub+0x6cc>
 8002366:	e69f      	b.n	80020a8 <__aeabi_dsub+0x40c>
 8002368:	e606      	b.n	8001f78 <__aeabi_dsub+0x2dc>
 800236a:	46c0      	nop			; (mov r8, r8)
 800236c:	000007fe 	.word	0x000007fe
 8002370:	000007ff 	.word	0x000007ff
 8002374:	ff7fffff 	.word	0xff7fffff
 8002378:	08ff      	lsrs	r7, r7, #3
 800237a:	074b      	lsls	r3, r1, #29
 800237c:	433b      	orrs	r3, r7
 800237e:	08cc      	lsrs	r4, r1, #3
 8002380:	e616      	b.n	8001fb0 <__aeabi_dsub+0x314>
 8002382:	4662      	mov	r2, ip
 8002384:	08db      	lsrs	r3, r3, #3
 8002386:	0752      	lsls	r2, r2, #29
 8002388:	4313      	orrs	r3, r2
 800238a:	4662      	mov	r2, ip
 800238c:	08d4      	lsrs	r4, r2, #3
 800238e:	2280      	movs	r2, #128	; 0x80
 8002390:	0312      	lsls	r2, r2, #12
 8002392:	4214      	tst	r4, r2
 8002394:	d007      	beq.n	80023a6 <__aeabi_dsub+0x70a>
 8002396:	08c8      	lsrs	r0, r1, #3
 8002398:	4210      	tst	r0, r2
 800239a:	d104      	bne.n	80023a6 <__aeabi_dsub+0x70a>
 800239c:	465d      	mov	r5, fp
 800239e:	0004      	movs	r4, r0
 80023a0:	08fb      	lsrs	r3, r7, #3
 80023a2:	0749      	lsls	r1, r1, #29
 80023a4:	430b      	orrs	r3, r1
 80023a6:	0f5a      	lsrs	r2, r3, #29
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	0752      	lsls	r2, r2, #29
 80023ac:	08db      	lsrs	r3, r3, #3
 80023ae:	4313      	orrs	r3, r2
 80023b0:	e5fe      	b.n	8001fb0 <__aeabi_dsub+0x314>
 80023b2:	2300      	movs	r3, #0
 80023b4:	4a01      	ldr	r2, [pc, #4]	; (80023bc <__aeabi_dsub+0x720>)
 80023b6:	001c      	movs	r4, r3
 80023b8:	e513      	b.n	8001de2 <__aeabi_dsub+0x146>
 80023ba:	46c0      	nop			; (mov r8, r8)
 80023bc:	000007ff 	.word	0x000007ff

080023c0 <__aeabi_dcmpun>:
 80023c0:	b570      	push	{r4, r5, r6, lr}
 80023c2:	0005      	movs	r5, r0
 80023c4:	480c      	ldr	r0, [pc, #48]	; (80023f8 <__aeabi_dcmpun+0x38>)
 80023c6:	031c      	lsls	r4, r3, #12
 80023c8:	0016      	movs	r6, r2
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	030a      	lsls	r2, r1, #12
 80023ce:	0049      	lsls	r1, r1, #1
 80023d0:	0b12      	lsrs	r2, r2, #12
 80023d2:	0d49      	lsrs	r1, r1, #21
 80023d4:	0b24      	lsrs	r4, r4, #12
 80023d6:	0d5b      	lsrs	r3, r3, #21
 80023d8:	4281      	cmp	r1, r0
 80023da:	d008      	beq.n	80023ee <__aeabi_dcmpun+0x2e>
 80023dc:	4a06      	ldr	r2, [pc, #24]	; (80023f8 <__aeabi_dcmpun+0x38>)
 80023de:	2000      	movs	r0, #0
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d103      	bne.n	80023ec <__aeabi_dcmpun+0x2c>
 80023e4:	0020      	movs	r0, r4
 80023e6:	4330      	orrs	r0, r6
 80023e8:	1e43      	subs	r3, r0, #1
 80023ea:	4198      	sbcs	r0, r3
 80023ec:	bd70      	pop	{r4, r5, r6, pc}
 80023ee:	2001      	movs	r0, #1
 80023f0:	432a      	orrs	r2, r5
 80023f2:	d1fb      	bne.n	80023ec <__aeabi_dcmpun+0x2c>
 80023f4:	e7f2      	b.n	80023dc <__aeabi_dcmpun+0x1c>
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	000007ff 	.word	0x000007ff

080023fc <__aeabi_d2iz>:
 80023fc:	000a      	movs	r2, r1
 80023fe:	b530      	push	{r4, r5, lr}
 8002400:	4c13      	ldr	r4, [pc, #76]	; (8002450 <__aeabi_d2iz+0x54>)
 8002402:	0053      	lsls	r3, r2, #1
 8002404:	0309      	lsls	r1, r1, #12
 8002406:	0005      	movs	r5, r0
 8002408:	0b09      	lsrs	r1, r1, #12
 800240a:	2000      	movs	r0, #0
 800240c:	0d5b      	lsrs	r3, r3, #21
 800240e:	0fd2      	lsrs	r2, r2, #31
 8002410:	42a3      	cmp	r3, r4
 8002412:	dd04      	ble.n	800241e <__aeabi_d2iz+0x22>
 8002414:	480f      	ldr	r0, [pc, #60]	; (8002454 <__aeabi_d2iz+0x58>)
 8002416:	4283      	cmp	r3, r0
 8002418:	dd02      	ble.n	8002420 <__aeabi_d2iz+0x24>
 800241a:	4b0f      	ldr	r3, [pc, #60]	; (8002458 <__aeabi_d2iz+0x5c>)
 800241c:	18d0      	adds	r0, r2, r3
 800241e:	bd30      	pop	{r4, r5, pc}
 8002420:	2080      	movs	r0, #128	; 0x80
 8002422:	0340      	lsls	r0, r0, #13
 8002424:	4301      	orrs	r1, r0
 8002426:	480d      	ldr	r0, [pc, #52]	; (800245c <__aeabi_d2iz+0x60>)
 8002428:	1ac0      	subs	r0, r0, r3
 800242a:	281f      	cmp	r0, #31
 800242c:	dd08      	ble.n	8002440 <__aeabi_d2iz+0x44>
 800242e:	480c      	ldr	r0, [pc, #48]	; (8002460 <__aeabi_d2iz+0x64>)
 8002430:	1ac3      	subs	r3, r0, r3
 8002432:	40d9      	lsrs	r1, r3
 8002434:	000b      	movs	r3, r1
 8002436:	4258      	negs	r0, r3
 8002438:	2a00      	cmp	r2, #0
 800243a:	d1f0      	bne.n	800241e <__aeabi_d2iz+0x22>
 800243c:	0018      	movs	r0, r3
 800243e:	e7ee      	b.n	800241e <__aeabi_d2iz+0x22>
 8002440:	4c08      	ldr	r4, [pc, #32]	; (8002464 <__aeabi_d2iz+0x68>)
 8002442:	40c5      	lsrs	r5, r0
 8002444:	46a4      	mov	ip, r4
 8002446:	4463      	add	r3, ip
 8002448:	4099      	lsls	r1, r3
 800244a:	000b      	movs	r3, r1
 800244c:	432b      	orrs	r3, r5
 800244e:	e7f2      	b.n	8002436 <__aeabi_d2iz+0x3a>
 8002450:	000003fe 	.word	0x000003fe
 8002454:	0000041d 	.word	0x0000041d
 8002458:	7fffffff 	.word	0x7fffffff
 800245c:	00000433 	.word	0x00000433
 8002460:	00000413 	.word	0x00000413
 8002464:	fffffbed 	.word	0xfffffbed

08002468 <__aeabi_i2d>:
 8002468:	b570      	push	{r4, r5, r6, lr}
 800246a:	2800      	cmp	r0, #0
 800246c:	d016      	beq.n	800249c <__aeabi_i2d+0x34>
 800246e:	17c3      	asrs	r3, r0, #31
 8002470:	18c5      	adds	r5, r0, r3
 8002472:	405d      	eors	r5, r3
 8002474:	0fc4      	lsrs	r4, r0, #31
 8002476:	0028      	movs	r0, r5
 8002478:	f000 f894 	bl	80025a4 <__clzsi2>
 800247c:	4a11      	ldr	r2, [pc, #68]	; (80024c4 <__aeabi_i2d+0x5c>)
 800247e:	1a12      	subs	r2, r2, r0
 8002480:	280a      	cmp	r0, #10
 8002482:	dc16      	bgt.n	80024b2 <__aeabi_i2d+0x4a>
 8002484:	0003      	movs	r3, r0
 8002486:	002e      	movs	r6, r5
 8002488:	3315      	adds	r3, #21
 800248a:	409e      	lsls	r6, r3
 800248c:	230b      	movs	r3, #11
 800248e:	1a18      	subs	r0, r3, r0
 8002490:	40c5      	lsrs	r5, r0
 8002492:	0552      	lsls	r2, r2, #21
 8002494:	032d      	lsls	r5, r5, #12
 8002496:	0b2d      	lsrs	r5, r5, #12
 8002498:	0d53      	lsrs	r3, r2, #21
 800249a:	e003      	b.n	80024a4 <__aeabi_i2d+0x3c>
 800249c:	2400      	movs	r4, #0
 800249e:	2300      	movs	r3, #0
 80024a0:	2500      	movs	r5, #0
 80024a2:	2600      	movs	r6, #0
 80024a4:	051b      	lsls	r3, r3, #20
 80024a6:	432b      	orrs	r3, r5
 80024a8:	07e4      	lsls	r4, r4, #31
 80024aa:	4323      	orrs	r3, r4
 80024ac:	0030      	movs	r0, r6
 80024ae:	0019      	movs	r1, r3
 80024b0:	bd70      	pop	{r4, r5, r6, pc}
 80024b2:	380b      	subs	r0, #11
 80024b4:	4085      	lsls	r5, r0
 80024b6:	0552      	lsls	r2, r2, #21
 80024b8:	032d      	lsls	r5, r5, #12
 80024ba:	2600      	movs	r6, #0
 80024bc:	0b2d      	lsrs	r5, r5, #12
 80024be:	0d53      	lsrs	r3, r2, #21
 80024c0:	e7f0      	b.n	80024a4 <__aeabi_i2d+0x3c>
 80024c2:	46c0      	nop			; (mov r8, r8)
 80024c4:	0000041e 	.word	0x0000041e

080024c8 <__aeabi_ui2d>:
 80024c8:	b510      	push	{r4, lr}
 80024ca:	1e04      	subs	r4, r0, #0
 80024cc:	d010      	beq.n	80024f0 <__aeabi_ui2d+0x28>
 80024ce:	f000 f869 	bl	80025a4 <__clzsi2>
 80024d2:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <__aeabi_ui2d+0x48>)
 80024d4:	1a1b      	subs	r3, r3, r0
 80024d6:	280a      	cmp	r0, #10
 80024d8:	dc11      	bgt.n	80024fe <__aeabi_ui2d+0x36>
 80024da:	220b      	movs	r2, #11
 80024dc:	0021      	movs	r1, r4
 80024de:	1a12      	subs	r2, r2, r0
 80024e0:	40d1      	lsrs	r1, r2
 80024e2:	3015      	adds	r0, #21
 80024e4:	030a      	lsls	r2, r1, #12
 80024e6:	055b      	lsls	r3, r3, #21
 80024e8:	4084      	lsls	r4, r0
 80024ea:	0b12      	lsrs	r2, r2, #12
 80024ec:	0d5b      	lsrs	r3, r3, #21
 80024ee:	e001      	b.n	80024f4 <__aeabi_ui2d+0x2c>
 80024f0:	2300      	movs	r3, #0
 80024f2:	2200      	movs	r2, #0
 80024f4:	051b      	lsls	r3, r3, #20
 80024f6:	4313      	orrs	r3, r2
 80024f8:	0020      	movs	r0, r4
 80024fa:	0019      	movs	r1, r3
 80024fc:	bd10      	pop	{r4, pc}
 80024fe:	0022      	movs	r2, r4
 8002500:	380b      	subs	r0, #11
 8002502:	4082      	lsls	r2, r0
 8002504:	055b      	lsls	r3, r3, #21
 8002506:	0312      	lsls	r2, r2, #12
 8002508:	2400      	movs	r4, #0
 800250a:	0b12      	lsrs	r2, r2, #12
 800250c:	0d5b      	lsrs	r3, r3, #21
 800250e:	e7f1      	b.n	80024f4 <__aeabi_ui2d+0x2c>
 8002510:	0000041e 	.word	0x0000041e

08002514 <__aeabi_f2d>:
 8002514:	b570      	push	{r4, r5, r6, lr}
 8002516:	0043      	lsls	r3, r0, #1
 8002518:	0246      	lsls	r6, r0, #9
 800251a:	0fc4      	lsrs	r4, r0, #31
 800251c:	20fe      	movs	r0, #254	; 0xfe
 800251e:	0e1b      	lsrs	r3, r3, #24
 8002520:	1c59      	adds	r1, r3, #1
 8002522:	0a75      	lsrs	r5, r6, #9
 8002524:	4208      	tst	r0, r1
 8002526:	d00c      	beq.n	8002542 <__aeabi_f2d+0x2e>
 8002528:	22e0      	movs	r2, #224	; 0xe0
 800252a:	0092      	lsls	r2, r2, #2
 800252c:	4694      	mov	ip, r2
 800252e:	076d      	lsls	r5, r5, #29
 8002530:	0b36      	lsrs	r6, r6, #12
 8002532:	4463      	add	r3, ip
 8002534:	051b      	lsls	r3, r3, #20
 8002536:	4333      	orrs	r3, r6
 8002538:	07e4      	lsls	r4, r4, #31
 800253a:	4323      	orrs	r3, r4
 800253c:	0028      	movs	r0, r5
 800253e:	0019      	movs	r1, r3
 8002540:	bd70      	pop	{r4, r5, r6, pc}
 8002542:	2b00      	cmp	r3, #0
 8002544:	d114      	bne.n	8002570 <__aeabi_f2d+0x5c>
 8002546:	2d00      	cmp	r5, #0
 8002548:	d01b      	beq.n	8002582 <__aeabi_f2d+0x6e>
 800254a:	0028      	movs	r0, r5
 800254c:	f000 f82a 	bl	80025a4 <__clzsi2>
 8002550:	280a      	cmp	r0, #10
 8002552:	dc1c      	bgt.n	800258e <__aeabi_f2d+0x7a>
 8002554:	230b      	movs	r3, #11
 8002556:	002e      	movs	r6, r5
 8002558:	1a1b      	subs	r3, r3, r0
 800255a:	40de      	lsrs	r6, r3
 800255c:	0003      	movs	r3, r0
 800255e:	3315      	adds	r3, #21
 8002560:	409d      	lsls	r5, r3
 8002562:	4a0e      	ldr	r2, [pc, #56]	; (800259c <__aeabi_f2d+0x88>)
 8002564:	0336      	lsls	r6, r6, #12
 8002566:	1a12      	subs	r2, r2, r0
 8002568:	0552      	lsls	r2, r2, #21
 800256a:	0b36      	lsrs	r6, r6, #12
 800256c:	0d53      	lsrs	r3, r2, #21
 800256e:	e7e1      	b.n	8002534 <__aeabi_f2d+0x20>
 8002570:	2d00      	cmp	r5, #0
 8002572:	d009      	beq.n	8002588 <__aeabi_f2d+0x74>
 8002574:	2280      	movs	r2, #128	; 0x80
 8002576:	0b36      	lsrs	r6, r6, #12
 8002578:	0312      	lsls	r2, r2, #12
 800257a:	4b09      	ldr	r3, [pc, #36]	; (80025a0 <__aeabi_f2d+0x8c>)
 800257c:	076d      	lsls	r5, r5, #29
 800257e:	4316      	orrs	r6, r2
 8002580:	e7d8      	b.n	8002534 <__aeabi_f2d+0x20>
 8002582:	2300      	movs	r3, #0
 8002584:	2600      	movs	r6, #0
 8002586:	e7d5      	b.n	8002534 <__aeabi_f2d+0x20>
 8002588:	2600      	movs	r6, #0
 800258a:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <__aeabi_f2d+0x8c>)
 800258c:	e7d2      	b.n	8002534 <__aeabi_f2d+0x20>
 800258e:	0003      	movs	r3, r0
 8002590:	3b0b      	subs	r3, #11
 8002592:	409d      	lsls	r5, r3
 8002594:	002e      	movs	r6, r5
 8002596:	2500      	movs	r5, #0
 8002598:	e7e3      	b.n	8002562 <__aeabi_f2d+0x4e>
 800259a:	46c0      	nop			; (mov r8, r8)
 800259c:	00000389 	.word	0x00000389
 80025a0:	000007ff 	.word	0x000007ff

080025a4 <__clzsi2>:
 80025a4:	211c      	movs	r1, #28
 80025a6:	2301      	movs	r3, #1
 80025a8:	041b      	lsls	r3, r3, #16
 80025aa:	4298      	cmp	r0, r3
 80025ac:	d301      	bcc.n	80025b2 <__clzsi2+0xe>
 80025ae:	0c00      	lsrs	r0, r0, #16
 80025b0:	3910      	subs	r1, #16
 80025b2:	0a1b      	lsrs	r3, r3, #8
 80025b4:	4298      	cmp	r0, r3
 80025b6:	d301      	bcc.n	80025bc <__clzsi2+0x18>
 80025b8:	0a00      	lsrs	r0, r0, #8
 80025ba:	3908      	subs	r1, #8
 80025bc:	091b      	lsrs	r3, r3, #4
 80025be:	4298      	cmp	r0, r3
 80025c0:	d301      	bcc.n	80025c6 <__clzsi2+0x22>
 80025c2:	0900      	lsrs	r0, r0, #4
 80025c4:	3904      	subs	r1, #4
 80025c6:	a202      	add	r2, pc, #8	; (adr r2, 80025d0 <__clzsi2+0x2c>)
 80025c8:	5c10      	ldrb	r0, [r2, r0]
 80025ca:	1840      	adds	r0, r0, r1
 80025cc:	4770      	bx	lr
 80025ce:	46c0      	nop			; (mov r8, r8)
 80025d0:	02020304 	.word	0x02020304
 80025d4:	01010101 	.word	0x01010101
	...

080025e0 <__clzdi2>:
 80025e0:	b510      	push	{r4, lr}
 80025e2:	2900      	cmp	r1, #0
 80025e4:	d103      	bne.n	80025ee <__clzdi2+0xe>
 80025e6:	f7ff ffdd 	bl	80025a4 <__clzsi2>
 80025ea:	3020      	adds	r0, #32
 80025ec:	e002      	b.n	80025f4 <__clzdi2+0x14>
 80025ee:	0008      	movs	r0, r1
 80025f0:	f7ff ffd8 	bl	80025a4 <__clzsi2>
 80025f4:	bd10      	pop	{r4, pc}
 80025f6:	46c0      	nop			; (mov r8, r8)

080025f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80025f8:	b590      	push	{r4, r7, lr}
 80025fa:	b08b      	sub	sp, #44	; 0x2c
 80025fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025fe:	2414      	movs	r4, #20
 8002600:	193b      	adds	r3, r7, r4
 8002602:	0018      	movs	r0, r3
 8002604:	2314      	movs	r3, #20
 8002606:	001a      	movs	r2, r3
 8002608:	2100      	movs	r1, #0
 800260a:	f003 fe45 	bl	8006298 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800260e:	4b33      	ldr	r3, [pc, #204]	; (80026dc <MX_GPIO_Init+0xe4>)
 8002610:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002612:	4b32      	ldr	r3, [pc, #200]	; (80026dc <MX_GPIO_Init+0xe4>)
 8002614:	2104      	movs	r1, #4
 8002616:	430a      	orrs	r2, r1
 8002618:	635a      	str	r2, [r3, #52]	; 0x34
 800261a:	4b30      	ldr	r3, [pc, #192]	; (80026dc <MX_GPIO_Init+0xe4>)
 800261c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800261e:	2204      	movs	r2, #4
 8002620:	4013      	ands	r3, r2
 8002622:	613b      	str	r3, [r7, #16]
 8002624:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002626:	4b2d      	ldr	r3, [pc, #180]	; (80026dc <MX_GPIO_Init+0xe4>)
 8002628:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800262a:	4b2c      	ldr	r3, [pc, #176]	; (80026dc <MX_GPIO_Init+0xe4>)
 800262c:	2120      	movs	r1, #32
 800262e:	430a      	orrs	r2, r1
 8002630:	635a      	str	r2, [r3, #52]	; 0x34
 8002632:	4b2a      	ldr	r3, [pc, #168]	; (80026dc <MX_GPIO_Init+0xe4>)
 8002634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002636:	2220      	movs	r2, #32
 8002638:	4013      	ands	r3, r2
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800263e:	4b27      	ldr	r3, [pc, #156]	; (80026dc <MX_GPIO_Init+0xe4>)
 8002640:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002642:	4b26      	ldr	r3, [pc, #152]	; (80026dc <MX_GPIO_Init+0xe4>)
 8002644:	2101      	movs	r1, #1
 8002646:	430a      	orrs	r2, r1
 8002648:	635a      	str	r2, [r3, #52]	; 0x34
 800264a:	4b24      	ldr	r3, [pc, #144]	; (80026dc <MX_GPIO_Init+0xe4>)
 800264c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800264e:	2201      	movs	r2, #1
 8002650:	4013      	ands	r3, r2
 8002652:	60bb      	str	r3, [r7, #8]
 8002654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002656:	4b21      	ldr	r3, [pc, #132]	; (80026dc <MX_GPIO_Init+0xe4>)
 8002658:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800265a:	4b20      	ldr	r3, [pc, #128]	; (80026dc <MX_GPIO_Init+0xe4>)
 800265c:	2102      	movs	r1, #2
 800265e:	430a      	orrs	r2, r1
 8002660:	635a      	str	r2, [r3, #52]	; 0x34
 8002662:	4b1e      	ldr	r3, [pc, #120]	; (80026dc <MX_GPIO_Init+0xe4>)
 8002664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002666:	2202      	movs	r2, #2
 8002668:	4013      	ands	r3, r2
 800266a:	607b      	str	r3, [r7, #4]
 800266c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800266e:	23a0      	movs	r3, #160	; 0xa0
 8002670:	05db      	lsls	r3, r3, #23
 8002672:	2200      	movs	r2, #0
 8002674:	2120      	movs	r1, #32
 8002676:	0018      	movs	r0, r3
 8002678:	f001 f968 	bl	800394c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800267c:	4b18      	ldr	r3, [pc, #96]	; (80026e0 <MX_GPIO_Init+0xe8>)
 800267e:	2201      	movs	r2, #1
 8002680:	2101      	movs	r1, #1
 8002682:	0018      	movs	r0, r3
 8002684:	f001 f962 	bl	800394c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8002688:	193b      	adds	r3, r7, r4
 800268a:	2220      	movs	r2, #32
 800268c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800268e:	193b      	adds	r3, r7, r4
 8002690:	2201      	movs	r2, #1
 8002692:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002694:	193b      	adds	r3, r7, r4
 8002696:	2200      	movs	r2, #0
 8002698:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800269a:	193b      	adds	r3, r7, r4
 800269c:	2202      	movs	r2, #2
 800269e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80026a0:	193a      	adds	r2, r7, r4
 80026a2:	23a0      	movs	r3, #160	; 0xa0
 80026a4:	05db      	lsls	r3, r3, #23
 80026a6:	0011      	movs	r1, r2
 80026a8:	0018      	movs	r0, r3
 80026aa:	f000 ffeb 	bl	8003684 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80026ae:	0021      	movs	r1, r4
 80026b0:	187b      	adds	r3, r7, r1
 80026b2:	2201      	movs	r2, #1
 80026b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026b6:	187b      	adds	r3, r7, r1
 80026b8:	2201      	movs	r2, #1
 80026ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026bc:	187b      	adds	r3, r7, r1
 80026be:	2200      	movs	r2, #0
 80026c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c2:	187b      	adds	r3, r7, r1
 80026c4:	2203      	movs	r2, #3
 80026c6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80026c8:	187b      	adds	r3, r7, r1
 80026ca:	4a05      	ldr	r2, [pc, #20]	; (80026e0 <MX_GPIO_Init+0xe8>)
 80026cc:	0019      	movs	r1, r3
 80026ce:	0010      	movs	r0, r2
 80026d0:	f000 ffd8 	bl	8003684 <HAL_GPIO_Init>

}
 80026d4:	46c0      	nop			; (mov r8, r8)
 80026d6:	46bd      	mov	sp, r7
 80026d8:	b00b      	add	sp, #44	; 0x2c
 80026da:	bd90      	pop	{r4, r7, pc}
 80026dc:	40021000 	.word	0x40021000
 80026e0:	50000400 	.word	0x50000400

080026e4 <lis3dh_read_fifo>:
                             uint16_t len);
static void tx_com(uint8_t *tx_buffer, uint16_t len);

/* Main Example --------------------------------------------------------------*/
void lis3dh_read_fifo(void)
{
 80026e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026e6:	b08d      	sub	sp, #52	; 0x34
 80026e8:	af04      	add	r7, sp, #16
  /* Initialize mems driver interface */
  stmdev_ctx_t dev_ctx;
  dev_ctx.write_reg = platform_write;
 80026ea:	2108      	movs	r1, #8
 80026ec:	2008      	movs	r0, #8
 80026ee:	180b      	adds	r3, r1, r0
 80026f0:	19db      	adds	r3, r3, r7
 80026f2:	4a64      	ldr	r2, [pc, #400]	; (8002884 <lis3dh_read_fifo+0x1a0>)
 80026f4:	601a      	str	r2, [r3, #0]
  dev_ctx.read_reg = platform_read;
 80026f6:	180b      	adds	r3, r1, r0
 80026f8:	19db      	adds	r3, r3, r7
 80026fa:	4a63      	ldr	r2, [pc, #396]	; (8002888 <lis3dh_read_fifo+0x1a4>)
 80026fc:	605a      	str	r2, [r3, #4]
  dev_ctx.handle = &SENSOR_BUS;
 80026fe:	180b      	adds	r3, r1, r0
 8002700:	19db      	adds	r3, r3, r7
 8002702:	4a62      	ldr	r2, [pc, #392]	; (800288c <lis3dh_read_fifo+0x1a8>)
 8002704:	60da      	str	r2, [r3, #12]
  /* Check device ID */
  lis3dh_device_id_get(&dev_ctx, &whoamI);
 8002706:	4a62      	ldr	r2, [pc, #392]	; (8002890 <lis3dh_read_fifo+0x1ac>)
 8002708:	180b      	adds	r3, r1, r0
 800270a:	19db      	adds	r3, r3, r7
 800270c:	0011      	movs	r1, r2
 800270e:	0018      	movs	r0, r3
 8002710:	f000 faed 	bl	8002cee <lis3dh_device_id_get>

  if (whoamI != LIS3DH_ID)
 8002714:	4b5e      	ldr	r3, [pc, #376]	; (8002890 <lis3dh_read_fifo+0x1ac>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2b33      	cmp	r3, #51	; 0x33
 800271a:	d013      	beq.n	8002744 <lis3dh_read_fifo+0x60>
  {
    sprintf((char *)tx_buffer, "ERROR! Accelerometer not found %d\n", whoamI);
 800271c:	4b5c      	ldr	r3, [pc, #368]	; (8002890 <lis3dh_read_fifo+0x1ac>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	001a      	movs	r2, r3
 8002722:	495c      	ldr	r1, [pc, #368]	; (8002894 <lis3dh_read_fifo+0x1b0>)
 8002724:	4b5c      	ldr	r3, [pc, #368]	; (8002898 <lis3dh_read_fifo+0x1b4>)
 8002726:	0018      	movs	r0, r3
 8002728:	f004 fa2c 	bl	8006b84 <siprintf>
    tx_com(tx_buffer, strlen((char const *)tx_buffer));
 800272c:	4b5a      	ldr	r3, [pc, #360]	; (8002898 <lis3dh_read_fifo+0x1b4>)
 800272e:	0018      	movs	r0, r3
 8002730:	f7fd fce8 	bl	8000104 <strlen>
 8002734:	0003      	movs	r3, r0
 8002736:	b29a      	uxth	r2, r3
 8002738:	4b57      	ldr	r3, [pc, #348]	; (8002898 <lis3dh_read_fifo+0x1b4>)
 800273a:	0011      	movs	r1, r2
 800273c:	0018      	movs	r0, r3
 800273e:	f000 f91f 	bl	8002980 <tx_com>
    while (1)
 8002742:	e7fe      	b.n	8002742 <lis3dh_read_fifo+0x5e>
      /* manage here device not found */
    }
  }

  /*  Enable Block Data Update */
  lis3dh_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 8002744:	2408      	movs	r4, #8
 8002746:	2508      	movs	r5, #8
 8002748:	1963      	adds	r3, r4, r5
 800274a:	19db      	adds	r3, r3, r7
 800274c:	2101      	movs	r1, #1
 800274e:	0018      	movs	r0, r3
 8002750:	f000 fa4c 	bl	8002bec <lis3dh_block_data_update_set>
  /* Set Output Data Rate to 10 hz */
  lis3dh_data_rate_set(&dev_ctx, LIS3DH_ODR_10Hz);
 8002754:	1963      	adds	r3, r4, r5
 8002756:	19db      	adds	r3, r3, r7
 8002758:	2102      	movs	r1, #2
 800275a:	0018      	movs	r0, r3
 800275c:	f000 f9e8 	bl	8002b30 <lis3dh_data_rate_set>
  /* Set full scale to 2 g */
  lis3dh_full_scale_set(&dev_ctx, LIS3DH_2g);
 8002760:	1963      	adds	r3, r4, r5
 8002762:	19db      	adds	r3, r3, r7
 8002764:	2100      	movs	r1, #0
 8002766:	0018      	movs	r0, r3
 8002768:	f000 fa10 	bl	8002b8c <lis3dh_full_scale_set>
  /* Set operating mode to high resolution */
  lis3dh_operating_mode_set(&dev_ctx, LIS3DH_HR_12bit);
 800276c:	1963      	adds	r3, r4, r5
 800276e:	19db      	adds	r3, r3, r7
 8002770:	2100      	movs	r1, #0
 8002772:	0018      	movs	r0, r3
 8002774:	f000 f973 	bl	8002a5e <lis3dh_operating_mode_set>
  /* Set FIFO watermark to 25 samples */
  lis3dh_fifo_watermark_set(&dev_ctx, 25);
 8002778:	1963      	adds	r3, r4, r5
 800277a:	19db      	adds	r3, r3, r7
 800277c:	2119      	movs	r1, #25
 800277e:	0018      	movs	r0, r3
 8002780:	f000 faf7 	bl	8002d72 <lis3dh_fifo_watermark_set>
  /* Set FIFO mode to Stream mode: Accumulate samples and
   * override old data */
  lis3dh_fifo_mode_set(&dev_ctx, LIS3DH_DYNAMIC_STREAM_MODE);
 8002784:	1963      	adds	r3, r4, r5
 8002786:	19db      	adds	r3, r3, r7
 8002788:	2102      	movs	r1, #2
 800278a:	0018      	movs	r0, r3
 800278c:	f000 fb21 	bl	8002dd2 <lis3dh_fifo_mode_set>
  /* Enable FIFO */
  lis3dh_fifo_set(&dev_ctx, PROPERTY_ENABLE);
 8002790:	1963      	adds	r3, r4, r5
 8002792:	19db      	adds	r3, r3, r7
 8002794:	2101      	movs	r1, #1
 8002796:	0018      	movs	r0, r3
 8002798:	f000 fabb 	bl	8002d12 <lis3dh_fifo_set>

  while (1)
  {
    uint8_t flags;
    uint8_t num = 0;
 800279c:	230e      	movs	r3, #14
 800279e:	18fb      	adds	r3, r7, r3
 80027a0:	2200      	movs	r2, #0
 80027a2:	701a      	strb	r2, [r3, #0]
    /* Check if FIFO level over threshold */
    lis3dh_fifo_fth_flag_get(&dev_ctx, &flags);
 80027a4:	260f      	movs	r6, #15
 80027a6:	19ba      	adds	r2, r7, r6
 80027a8:	2408      	movs	r4, #8
 80027aa:	2508      	movs	r5, #8
 80027ac:	1961      	adds	r1, r4, r5
 80027ae:	19cb      	adds	r3, r1, r7
 80027b0:	0011      	movs	r1, r2
 80027b2:	0018      	movs	r0, r3
 80027b4:	f000 fb56 	bl	8002e64 <lis3dh_fifo_fth_flag_get>

    if (flags)
 80027b8:	19bb      	adds	r3, r7, r6
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d0ed      	beq.n	800279c <lis3dh_read_fifo+0xb8>
    {
      /* Read number of sample in FIFO */
      lis3dh_fifo_data_level_get(&dev_ctx, &num);
 80027c0:	230e      	movs	r3, #14
 80027c2:	18fa      	adds	r2, r7, r3
 80027c4:	1963      	adds	r3, r4, r5
 80027c6:	19db      	adds	r3, r3, r7
 80027c8:	0011      	movs	r1, r2
 80027ca:	0018      	movs	r0, r3
 80027cc:	f000 fb2f 	bl	8002e2e <lis3dh_fifo_data_level_get>

      while (num-- > 0)
 80027d0:	e04d      	b.n	800286e <lis3dh_read_fifo+0x18a>
      {
        /* Read XL samples */
        lis3dh_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 80027d2:	4a32      	ldr	r2, [pc, #200]	; (800289c <lis3dh_read_fifo+0x1b8>)
 80027d4:	2308      	movs	r3, #8
 80027d6:	2108      	movs	r1, #8
 80027d8:	185b      	adds	r3, r3, r1
 80027da:	19db      	adds	r3, r3, r7
 80027dc:	0011      	movs	r1, r2
 80027de:	0018      	movs	r0, r3
 80027e0:	f000 fa32 	bl	8002c48 <lis3dh_acceleration_raw_get>
        acceleration_mg[0] =
            lis3dh_from_fs2_hr_to_mg(data_raw_acceleration[0]);
 80027e4:	4b2d      	ldr	r3, [pc, #180]	; (800289c <lis3dh_read_fifo+0x1b8>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	5e9b      	ldrsh	r3, [r3, r2]
 80027ea:	0018      	movs	r0, r3
 80027ec:	f000 f920 	bl	8002a30 <lis3dh_from_fs2_hr_to_mg>
 80027f0:	1c02      	adds	r2, r0, #0
        acceleration_mg[0] =
 80027f2:	4b2b      	ldr	r3, [pc, #172]	; (80028a0 <lis3dh_read_fifo+0x1bc>)
 80027f4:	601a      	str	r2, [r3, #0]
        acceleration_mg[1] =
            lis3dh_from_fs2_hr_to_mg(data_raw_acceleration[1]);
 80027f6:	4b29      	ldr	r3, [pc, #164]	; (800289c <lis3dh_read_fifo+0x1b8>)
 80027f8:	2202      	movs	r2, #2
 80027fa:	5e9b      	ldrsh	r3, [r3, r2]
 80027fc:	0018      	movs	r0, r3
 80027fe:	f000 f917 	bl	8002a30 <lis3dh_from_fs2_hr_to_mg>
 8002802:	1c02      	adds	r2, r0, #0
        acceleration_mg[1] =
 8002804:	4b26      	ldr	r3, [pc, #152]	; (80028a0 <lis3dh_read_fifo+0x1bc>)
 8002806:	605a      	str	r2, [r3, #4]
        acceleration_mg[2] =
            lis3dh_from_fs2_hr_to_mg(data_raw_acceleration[2]);
 8002808:	4b24      	ldr	r3, [pc, #144]	; (800289c <lis3dh_read_fifo+0x1b8>)
 800280a:	2204      	movs	r2, #4
 800280c:	5e9b      	ldrsh	r3, [r3, r2]
 800280e:	0018      	movs	r0, r3
 8002810:	f000 f90e 	bl	8002a30 <lis3dh_from_fs2_hr_to_mg>
 8002814:	1c02      	adds	r2, r0, #0
        acceleration_mg[2] =
 8002816:	4b22      	ldr	r3, [pc, #136]	; (80028a0 <lis3dh_read_fifo+0x1bc>)
 8002818:	609a      	str	r2, [r3, #8]
        sprintf((char *)tx_buffer,
                "Acceleration [mg]:%5.0f\t%5.0f\t%5.0f\r\n",
                acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 800281a:	4b21      	ldr	r3, [pc, #132]	; (80028a0 <lis3dh_read_fifo+0x1bc>)
 800281c:	681b      	ldr	r3, [r3, #0]
        sprintf((char *)tx_buffer,
 800281e:	1c18      	adds	r0, r3, #0
 8002820:	f7ff fe78 	bl	8002514 <__aeabi_f2d>
 8002824:	6038      	str	r0, [r7, #0]
 8002826:	6079      	str	r1, [r7, #4]
                acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 8002828:	4b1d      	ldr	r3, [pc, #116]	; (80028a0 <lis3dh_read_fifo+0x1bc>)
 800282a:	685b      	ldr	r3, [r3, #4]
        sprintf((char *)tx_buffer,
 800282c:	1c18      	adds	r0, r3, #0
 800282e:	f7ff fe71 	bl	8002514 <__aeabi_f2d>
 8002832:	0004      	movs	r4, r0
 8002834:	000d      	movs	r5, r1
                acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 8002836:	4b1a      	ldr	r3, [pc, #104]	; (80028a0 <lis3dh_read_fifo+0x1bc>)
 8002838:	689b      	ldr	r3, [r3, #8]
        sprintf((char *)tx_buffer,
 800283a:	1c18      	adds	r0, r3, #0
 800283c:	f7ff fe6a 	bl	8002514 <__aeabi_f2d>
 8002840:	0002      	movs	r2, r0
 8002842:	000b      	movs	r3, r1
 8002844:	4917      	ldr	r1, [pc, #92]	; (80028a4 <lis3dh_read_fifo+0x1c0>)
 8002846:	4814      	ldr	r0, [pc, #80]	; (8002898 <lis3dh_read_fifo+0x1b4>)
 8002848:	9202      	str	r2, [sp, #8]
 800284a:	9303      	str	r3, [sp, #12]
 800284c:	9400      	str	r4, [sp, #0]
 800284e:	9501      	str	r5, [sp, #4]
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f004 f996 	bl	8006b84 <siprintf>
        tx_com(tx_buffer, strlen((char const *)tx_buffer));
 8002858:	4b0f      	ldr	r3, [pc, #60]	; (8002898 <lis3dh_read_fifo+0x1b4>)
 800285a:	0018      	movs	r0, r3
 800285c:	f7fd fc52 	bl	8000104 <strlen>
 8002860:	0003      	movs	r3, r0
 8002862:	b29a      	uxth	r2, r3
 8002864:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <lis3dh_read_fifo+0x1b4>)
 8002866:	0011      	movs	r1, r2
 8002868:	0018      	movs	r0, r3
 800286a:	f000 f889 	bl	8002980 <tx_com>
      while (num-- > 0)
 800286e:	200e      	movs	r0, #14
 8002870:	183b      	adds	r3, r7, r0
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	1e5a      	subs	r2, r3, #1
 8002876:	b2d1      	uxtb	r1, r2
 8002878:	183a      	adds	r2, r7, r0
 800287a:	7011      	strb	r1, [r2, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1a8      	bne.n	80027d2 <lis3dh_read_fifo+0xee>
  {
 8002880:	e78c      	b.n	800279c <lis3dh_read_fifo+0xb8>
 8002882:	46c0      	nop			; (mov r8, r8)
 8002884:	080028a9 	.word	0x080028a9
 8002888:	0800290d 	.word	0x0800290d
 800288c:	200005f8 	.word	0x200005f8
 8002890:	2000020c 	.word	0x2000020c
 8002894:	080091f8 	.word	0x080091f8
 8002898:	20000210 	.word	0x20000210
 800289c:	200001f8 	.word	0x200001f8
 80028a0:	20000200 	.word	0x20000200
 80028a4:	0800921c 	.word	0x0800921c

080028a8 <platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp,
                              uint16_t len)
{
 80028a8:	b5b0      	push	{r4, r5, r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	0008      	movs	r0, r1
 80028b2:	607a      	str	r2, [r7, #4]
 80028b4:	0019      	movs	r1, r3
 80028b6:	240b      	movs	r4, #11
 80028b8:	193b      	adds	r3, r7, r4
 80028ba:	1c02      	adds	r2, r0, #0
 80028bc:	701a      	strb	r2, [r3, #0]
 80028be:	2508      	movs	r5, #8
 80028c0:	197b      	adds	r3, r7, r5
 80028c2:	1c0a      	adds	r2, r1, #0
 80028c4:	801a      	strh	r2, [r3, #0]
  HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_RESET);
 80028c6:	4b10      	ldr	r3, [pc, #64]	; (8002908 <platform_write+0x60>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	2101      	movs	r1, #1
 80028cc:	0018      	movs	r0, r3
 80028ce:	f001 f83d 	bl	800394c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(handle, &reg, 1, 1000);
 80028d2:	23fa      	movs	r3, #250	; 0xfa
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	1939      	adds	r1, r7, r4
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	2201      	movs	r2, #1
 80028dc:	f001 ffd4 	bl	8004888 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(handle, bufp, len, 1000);
 80028e0:	23fa      	movs	r3, #250	; 0xfa
 80028e2:	009c      	lsls	r4, r3, #2
 80028e4:	197b      	adds	r3, r7, r5
 80028e6:	881a      	ldrh	r2, [r3, #0]
 80028e8:	6879      	ldr	r1, [r7, #4]
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	0023      	movs	r3, r4
 80028ee:	f001 ffcb 	bl	8004888 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_SET);
 80028f2:	4b05      	ldr	r3, [pc, #20]	; (8002908 <platform_write+0x60>)
 80028f4:	2201      	movs	r2, #1
 80028f6:	2101      	movs	r1, #1
 80028f8:	0018      	movs	r0, r3
 80028fa:	f001 f827 	bl	800394c <HAL_GPIO_WritePin>

  return 0;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	0018      	movs	r0, r3
 8002902:	46bd      	mov	sp, r7
 8002904:	b004      	add	sp, #16
 8002906:	bdb0      	pop	{r4, r5, r7, pc}
 8002908:	50000400 	.word	0x50000400

0800290c <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 800290c:	b5b0      	push	{r4, r5, r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	0008      	movs	r0, r1
 8002916:	607a      	str	r2, [r7, #4]
 8002918:	0019      	movs	r1, r3
 800291a:	240b      	movs	r4, #11
 800291c:	193b      	adds	r3, r7, r4
 800291e:	1c02      	adds	r2, r0, #0
 8002920:	701a      	strb	r2, [r3, #0]
 8002922:	2508      	movs	r5, #8
 8002924:	197b      	adds	r3, r7, r5
 8002926:	1c0a      	adds	r2, r1, #0
 8002928:	801a      	strh	r2, [r3, #0]
  reg |= 0xC0;
 800292a:	193b      	adds	r3, r7, r4
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	2240      	movs	r2, #64	; 0x40
 8002930:	4252      	negs	r2, r2
 8002932:	4313      	orrs	r3, r2
 8002934:	b2da      	uxtb	r2, r3
 8002936:	193b      	adds	r3, r7, r4
 8002938:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_RESET);
 800293a:	4b10      	ldr	r3, [pc, #64]	; (800297c <platform_read+0x70>)
 800293c:	2200      	movs	r2, #0
 800293e:	2101      	movs	r1, #1
 8002940:	0018      	movs	r0, r3
 8002942:	f001 f803 	bl	800394c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8002946:	23fa      	movs	r3, #250	; 0xfa
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	1939      	adds	r1, r7, r4
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	2201      	movs	r2, #1
 8002950:	f001 ff9a 	bl	8004888 <HAL_SPI_Transmit>
  HAL_SPI_Receive(handle, bufp, len, 1000);
 8002954:	23fa      	movs	r3, #250	; 0xfa
 8002956:	009c      	lsls	r4, r3, #2
 8002958:	197b      	adds	r3, r7, r5
 800295a:	881a      	ldrh	r2, [r3, #0]
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	0023      	movs	r3, r4
 8002962:	f002 f8e9 	bl	8004b38 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_SET);
 8002966:	4b05      	ldr	r3, [pc, #20]	; (800297c <platform_read+0x70>)
 8002968:	2201      	movs	r2, #1
 800296a:	2101      	movs	r1, #1
 800296c:	0018      	movs	r0, r3
 800296e:	f000 ffed 	bl	800394c <HAL_GPIO_WritePin>
  return 0;
 8002972:	2300      	movs	r3, #0
}
 8002974:	0018      	movs	r0, r3
 8002976:	46bd      	mov	sp, r7
 8002978:	b004      	add	sp, #16
 800297a:	bdb0      	pop	{r4, r5, r7, pc}
 800297c:	50000400 	.word	0x50000400

08002980 <tx_com>:
 * @param  tx_buffer     buffer to transmit
 * @param  len           number of byte to send
 *
 */
static void tx_com(uint8_t *tx_buffer, uint16_t len)
{
 8002980:	b590      	push	{r4, r7, lr}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	000a      	movs	r2, r1
 800298a:	1cbb      	adds	r3, r7, #2
 800298c:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, tx_buffer, len, 1000);
 800298e:	23fa      	movs	r3, #250	; 0xfa
 8002990:	009c      	lsls	r4, r3, #2
 8002992:	1cbb      	adds	r3, r7, #2
 8002994:	881a      	ldrh	r2, [r3, #0]
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	4803      	ldr	r0, [pc, #12]	; (80029a8 <tx_com+0x28>)
 800299a:	0023      	movs	r3, r4
 800299c:	f002 fe14 	bl	80055c8 <HAL_UART_Transmit>
 80029a0:	46c0      	nop			; (mov r8, r8)
 80029a2:	46bd      	mov	sp, r7
 80029a4:	b003      	add	sp, #12
 80029a6:	bd90      	pop	{r4, r7, pc}
 80029a8:	20000660 	.word	0x20000660

080029ac <lis3dh_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lis3dh_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 80029ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ae:	b087      	sub	sp, #28
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	0008      	movs	r0, r1
 80029b6:	607a      	str	r2, [r7, #4]
 80029b8:	0019      	movs	r1, r3
 80029ba:	260b      	movs	r6, #11
 80029bc:	19bb      	adds	r3, r7, r6
 80029be:	1c02      	adds	r2, r0, #0
 80029c0:	701a      	strb	r2, [r3, #0]
 80029c2:	2508      	movs	r5, #8
 80029c4:	197b      	adds	r3, r7, r5
 80029c6:	1c0a      	adds	r2, r1, #0
 80029c8:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	685c      	ldr	r4, [r3, #4]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	68d8      	ldr	r0, [r3, #12]
 80029d2:	197b      	adds	r3, r7, r5
 80029d4:	881d      	ldrh	r5, [r3, #0]
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	19bb      	adds	r3, r7, r6
 80029da:	7819      	ldrb	r1, [r3, #0]
 80029dc:	002b      	movs	r3, r5
 80029de:	47a0      	blx	r4
 80029e0:	0003      	movs	r3, r0
 80029e2:	617b      	str	r3, [r7, #20]

  return ret;
 80029e4:	697b      	ldr	r3, [r7, #20]
}
 80029e6:	0018      	movs	r0, r3
 80029e8:	46bd      	mov	sp, r7
 80029ea:	b007      	add	sp, #28
 80029ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029ee <lis3dh_write_reg>:
  *
  */
int32_t __weak lis3dh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80029ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029f0:	b087      	sub	sp, #28
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	60f8      	str	r0, [r7, #12]
 80029f6:	0008      	movs	r0, r1
 80029f8:	607a      	str	r2, [r7, #4]
 80029fa:	0019      	movs	r1, r3
 80029fc:	260b      	movs	r6, #11
 80029fe:	19bb      	adds	r3, r7, r6
 8002a00:	1c02      	adds	r2, r0, #0
 8002a02:	701a      	strb	r2, [r3, #0]
 8002a04:	2508      	movs	r5, #8
 8002a06:	197b      	adds	r3, r7, r5
 8002a08:	1c0a      	adds	r2, r1, #0
 8002a0a:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681c      	ldr	r4, [r3, #0]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	68d8      	ldr	r0, [r3, #12]
 8002a14:	197b      	adds	r3, r7, r5
 8002a16:	881d      	ldrh	r5, [r3, #0]
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	19bb      	adds	r3, r7, r6
 8002a1c:	7819      	ldrb	r1, [r3, #0]
 8002a1e:	002b      	movs	r3, r5
 8002a20:	47a0      	blx	r4
 8002a22:	0003      	movs	r3, r0
 8002a24:	617b      	str	r3, [r7, #20]

  return ret;
 8002a26:	697b      	ldr	r3, [r7, #20]
}
 8002a28:	0018      	movs	r0, r3
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	b007      	add	sp, #28
 8002a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a30 <lis3dh_from_fs2_hr_to_mg>:
  * @{
  *
  */

float_t lis3dh_from_fs2_hr_to_mg(int16_t lsb)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	0002      	movs	r2, r0
 8002a38:	1dbb      	adds	r3, r7, #6
 8002a3a:	801a      	strh	r2, [r3, #0]
  return ((float_t)lsb / 16.0f) * 1.0f;
 8002a3c:	1dbb      	adds	r3, r7, #6
 8002a3e:	2200      	movs	r2, #0
 8002a40:	5e9b      	ldrsh	r3, [r3, r2]
 8002a42:	0018      	movs	r0, r3
 8002a44:	f7fd ff32 	bl	80008ac <__aeabi_i2f>
 8002a48:	1c03      	adds	r3, r0, #0
 8002a4a:	2183      	movs	r1, #131	; 0x83
 8002a4c:	05c9      	lsls	r1, r1, #23
 8002a4e:	1c18      	adds	r0, r3, #0
 8002a50:	f7fd fe14 	bl	800067c <__aeabi_fdiv>
 8002a54:	1c03      	adds	r3, r0, #0
}
 8002a56:	1c18      	adds	r0, r3, #0
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	b002      	add	sp, #8
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <lis3dh_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_operating_mode_set(stmdev_ctx_t *ctx,
                                  lis3dh_op_md_t val)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b086      	sub	sp, #24
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
 8002a66:	000a      	movs	r2, r1
 8002a68:	1cfb      	adds	r3, r7, #3
 8002a6a:	701a      	strb	r2, [r3, #0]
  lis3dh_ctrl_reg1_t ctrl_reg1;
  lis3dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG1,
 8002a6c:	2310      	movs	r3, #16
 8002a6e:	18fa      	adds	r2, r7, r3
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	2301      	movs	r3, #1
 8002a74:	2120      	movs	r1, #32
 8002a76:	f7ff ff99 	bl	80029ac <lis3dh_read_reg>
 8002a7a:	0003      	movs	r3, r0
 8002a7c:	617b      	str	r3, [r7, #20]
                        (uint8_t *)&ctrl_reg1, 1);

  if (ret == 0)
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d108      	bne.n	8002a96 <lis3dh_operating_mode_set+0x38>
  {
    ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG4,
 8002a84:	230c      	movs	r3, #12
 8002a86:	18fa      	adds	r2, r7, r3
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	2123      	movs	r1, #35	; 0x23
 8002a8e:	f7ff ff8d 	bl	80029ac <lis3dh_read_reg>
 8002a92:	0003      	movs	r3, r0
 8002a94:	617b      	str	r3, [r7, #20]
                          (uint8_t *)&ctrl_reg4, 1);
  }

  if (ret == 0)
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d138      	bne.n	8002b0e <lis3dh_operating_mode_set+0xb0>
  {
    if (val == LIS3DH_HR_12bit)
 8002a9c:	1cfb      	adds	r3, r7, #3
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10b      	bne.n	8002abc <lis3dh_operating_mode_set+0x5e>
    {
      ctrl_reg1.lpen = 0;
 8002aa4:	2310      	movs	r3, #16
 8002aa6:	18fb      	adds	r3, r7, r3
 8002aa8:	781a      	ldrb	r2, [r3, #0]
 8002aaa:	2108      	movs	r1, #8
 8002aac:	438a      	bics	r2, r1
 8002aae:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 1;
 8002ab0:	230c      	movs	r3, #12
 8002ab2:	18fb      	adds	r3, r7, r3
 8002ab4:	781a      	ldrb	r2, [r3, #0]
 8002ab6:	2108      	movs	r1, #8
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	701a      	strb	r2, [r3, #0]
    }

    if (val == LIS3DH_NM_10bit)
 8002abc:	1cfb      	adds	r3, r7, #3
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d10b      	bne.n	8002adc <lis3dh_operating_mode_set+0x7e>
    {
      ctrl_reg1.lpen = 0;
 8002ac4:	2310      	movs	r3, #16
 8002ac6:	18fb      	adds	r3, r7, r3
 8002ac8:	781a      	ldrb	r2, [r3, #0]
 8002aca:	2108      	movs	r1, #8
 8002acc:	438a      	bics	r2, r1
 8002ace:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 0;
 8002ad0:	230c      	movs	r3, #12
 8002ad2:	18fb      	adds	r3, r7, r3
 8002ad4:	781a      	ldrb	r2, [r3, #0]
 8002ad6:	2108      	movs	r1, #8
 8002ad8:	438a      	bics	r2, r1
 8002ada:	701a      	strb	r2, [r3, #0]
    }

    if (val == LIS3DH_LP_8bit)
 8002adc:	1cfb      	adds	r3, r7, #3
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d10b      	bne.n	8002afc <lis3dh_operating_mode_set+0x9e>
    {
      ctrl_reg1.lpen = 1;
 8002ae4:	2310      	movs	r3, #16
 8002ae6:	18fb      	adds	r3, r7, r3
 8002ae8:	781a      	ldrb	r2, [r3, #0]
 8002aea:	2108      	movs	r1, #8
 8002aec:	430a      	orrs	r2, r1
 8002aee:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 0;
 8002af0:	230c      	movs	r3, #12
 8002af2:	18fb      	adds	r3, r7, r3
 8002af4:	781a      	ldrb	r2, [r3, #0]
 8002af6:	2108      	movs	r1, #8
 8002af8:	438a      	bics	r2, r1
 8002afa:	701a      	strb	r2, [r3, #0]
    }

    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8002afc:	2310      	movs	r3, #16
 8002afe:	18fa      	adds	r2, r7, r3
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	2301      	movs	r3, #1
 8002b04:	2120      	movs	r1, #32
 8002b06:	f7ff ff72 	bl	80029ee <lis3dh_write_reg>
 8002b0a:	0003      	movs	r3, r0
 8002b0c:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d108      	bne.n	8002b26 <lis3dh_operating_mode_set+0xc8>
  {
    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8002b14:	230c      	movs	r3, #12
 8002b16:	18fa      	adds	r2, r7, r3
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	2123      	movs	r1, #35	; 0x23
 8002b1e:	f7ff ff66 	bl	80029ee <lis3dh_write_reg>
 8002b22:	0003      	movs	r3, r0
 8002b24:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8002b26:	697b      	ldr	r3, [r7, #20]
}
 8002b28:	0018      	movs	r0, r3
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	b006      	add	sp, #24
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <lis3dh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_data_rate_set(stmdev_ctx_t *ctx, lis3dh_odr_t val)
{
 8002b30:	b590      	push	{r4, r7, lr}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	000a      	movs	r2, r1
 8002b3a:	1cfb      	adds	r3, r7, #3
 8002b3c:	701a      	strb	r2, [r3, #0]
  lis3dh_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8002b3e:	2408      	movs	r4, #8
 8002b40:	193a      	adds	r2, r7, r4
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	2301      	movs	r3, #1
 8002b46:	2120      	movs	r1, #32
 8002b48:	f7ff ff30 	bl	80029ac <lis3dh_read_reg>
 8002b4c:	0003      	movs	r3, r0
 8002b4e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d115      	bne.n	8002b82 <lis3dh_data_rate_set+0x52>
  {
    ctrl_reg1.odr = (uint8_t)val;
 8002b56:	1cfb      	adds	r3, r7, #3
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	220f      	movs	r2, #15
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	b2da      	uxtb	r2, r3
 8002b60:	193b      	adds	r3, r7, r4
 8002b62:	0110      	lsls	r0, r2, #4
 8002b64:	781a      	ldrb	r2, [r3, #0]
 8002b66:	210f      	movs	r1, #15
 8002b68:	400a      	ands	r2, r1
 8002b6a:	1c11      	adds	r1, r2, #0
 8002b6c:	1c02      	adds	r2, r0, #0
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	701a      	strb	r2, [r3, #0]
    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8002b72:	193a      	adds	r2, r7, r4
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	2301      	movs	r3, #1
 8002b78:	2120      	movs	r1, #32
 8002b7a:	f7ff ff38 	bl	80029ee <lis3dh_write_reg>
 8002b7e:	0003      	movs	r3, r0
 8002b80:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002b82:	68fb      	ldr	r3, [r7, #12]
}
 8002b84:	0018      	movs	r0, r3
 8002b86:	46bd      	mov	sp, r7
 8002b88:	b005      	add	sp, #20
 8002b8a:	bd90      	pop	{r4, r7, pc}

08002b8c <lis3dh_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_full_scale_set(stmdev_ctx_t *ctx, lis3dh_fs_t val)
{
 8002b8c:	b590      	push	{r4, r7, lr}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	000a      	movs	r2, r1
 8002b96:	1cfb      	adds	r3, r7, #3
 8002b98:	701a      	strb	r2, [r3, #0]
  lis3dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8002b9a:	2408      	movs	r4, #8
 8002b9c:	193a      	adds	r2, r7, r4
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	2123      	movs	r1, #35	; 0x23
 8002ba4:	f7ff ff02 	bl	80029ac <lis3dh_read_reg>
 8002ba8:	0003      	movs	r3, r0
 8002baa:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d117      	bne.n	8002be2 <lis3dh_full_scale_set+0x56>
  {
    ctrl_reg4.fs = (uint8_t)val;
 8002bb2:	1cfb      	adds	r3, r7, #3
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	2203      	movs	r2, #3
 8002bb8:	4013      	ands	r3, r2
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	193b      	adds	r3, r7, r4
 8002bbe:	2103      	movs	r1, #3
 8002bc0:	400a      	ands	r2, r1
 8002bc2:	0110      	lsls	r0, r2, #4
 8002bc4:	781a      	ldrb	r2, [r3, #0]
 8002bc6:	2130      	movs	r1, #48	; 0x30
 8002bc8:	438a      	bics	r2, r1
 8002bca:	1c11      	adds	r1, r2, #0
 8002bcc:	1c02      	adds	r2, r0, #0
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	701a      	strb	r2, [r3, #0]
    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8002bd2:	193a      	adds	r2, r7, r4
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	2123      	movs	r1, #35	; 0x23
 8002bda:	f7ff ff08 	bl	80029ee <lis3dh_write_reg>
 8002bde:	0003      	movs	r3, r0
 8002be0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002be2:	68fb      	ldr	r3, [r7, #12]
}
 8002be4:	0018      	movs	r0, r3
 8002be6:	46bd      	mov	sp, r7
 8002be8:	b005      	add	sp, #20
 8002bea:	bd90      	pop	{r4, r7, pc}

08002bec <lis3dh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002bec:	b590      	push	{r4, r7, lr}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	000a      	movs	r2, r1
 8002bf6:	1cfb      	adds	r3, r7, #3
 8002bf8:	701a      	strb	r2, [r3, #0]
  lis3dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8002bfa:	2408      	movs	r4, #8
 8002bfc:	193a      	adds	r2, r7, r4
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	2301      	movs	r3, #1
 8002c02:	2123      	movs	r1, #35	; 0x23
 8002c04:	f7ff fed2 	bl	80029ac <lis3dh_read_reg>
 8002c08:	0003      	movs	r3, r0
 8002c0a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d115      	bne.n	8002c3e <lis3dh_block_data_update_set+0x52>
  {
    ctrl_reg4.bdu = val;
 8002c12:	1cfb      	adds	r3, r7, #3
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	2201      	movs	r2, #1
 8002c18:	4013      	ands	r3, r2
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	193b      	adds	r3, r7, r4
 8002c1e:	01d0      	lsls	r0, r2, #7
 8002c20:	781a      	ldrb	r2, [r3, #0]
 8002c22:	217f      	movs	r1, #127	; 0x7f
 8002c24:	400a      	ands	r2, r1
 8002c26:	1c11      	adds	r1, r2, #0
 8002c28:	1c02      	adds	r2, r0, #0
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	701a      	strb	r2, [r3, #0]
    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8002c2e:	193a      	adds	r2, r7, r4
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	2301      	movs	r3, #1
 8002c34:	2123      	movs	r1, #35	; 0x23
 8002c36:	f7ff feda 	bl	80029ee <lis3dh_write_reg>
 8002c3a:	0003      	movs	r3, r0
 8002c3c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
}
 8002c40:	0018      	movs	r0, r3
 8002c42:	46bd      	mov	sp, r7
 8002c44:	b005      	add	sp, #20
 8002c46:	bd90      	pop	{r4, r7, pc}

08002c48 <lis3dh_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002c48:	b590      	push	{r4, r7, lr}
 8002c4a:	b087      	sub	sp, #28
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_OUT_X_L, buff, 6);
 8002c52:	240c      	movs	r4, #12
 8002c54:	193a      	adds	r2, r7, r4
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	2306      	movs	r3, #6
 8002c5a:	2128      	movs	r1, #40	; 0x28
 8002c5c:	f7ff fea6 	bl	80029ac <lis3dh_read_reg>
 8002c60:	0003      	movs	r3, r0
 8002c62:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002c64:	0021      	movs	r1, r4
 8002c66:	187b      	adds	r3, r7, r1
 8002c68:	785b      	ldrb	r3, [r3, #1]
 8002c6a:	b21a      	sxth	r2, r3
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	2200      	movs	r2, #0
 8002c74:	5e9b      	ldrsh	r3, [r3, r2]
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	021b      	lsls	r3, r3, #8
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	187b      	adds	r3, r7, r1
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	18d3      	adds	r3, r2, r3
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	b21a      	sxth	r2, r3
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002c8c:	187b      	adds	r3, r7, r1
 8002c8e:	78da      	ldrb	r2, [r3, #3]
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	3302      	adds	r3, #2
 8002c94:	b212      	sxth	r2, r2
 8002c96:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	3302      	adds	r3, #2
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	5e9b      	ldrsh	r3, [r3, r2]
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	021b      	lsls	r3, r3, #8
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	187b      	adds	r3, r7, r1
 8002ca8:	789b      	ldrb	r3, [r3, #2]
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	18d3      	adds	r3, r2, r3
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	3302      	adds	r3, #2
 8002cb4:	b212      	sxth	r2, r2
 8002cb6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002cb8:	187b      	adds	r3, r7, r1
 8002cba:	795a      	ldrb	r2, [r3, #5]
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	3304      	adds	r3, #4
 8002cc0:	b212      	sxth	r2, r2
 8002cc2:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	3304      	adds	r3, #4
 8002cc8:	2200      	movs	r2, #0
 8002cca:	5e9b      	ldrsh	r3, [r3, r2]
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	021b      	lsls	r3, r3, #8
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	187b      	adds	r3, r7, r1
 8002cd4:	791b      	ldrb	r3, [r3, #4]
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	18d3      	adds	r3, r2, r3
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	3304      	adds	r3, #4
 8002ce0:	b212      	sxth	r2, r2
 8002ce2:	801a      	strh	r2, [r3, #0]

  return ret;
 8002ce4:	697b      	ldr	r3, [r7, #20]
}
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	b007      	add	sp, #28
 8002cec:	bd90      	pop	{r4, r7, pc}

08002cee <lis3dh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b084      	sub	sp, #16
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
 8002cf6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_WHO_AM_I, buff, 1);
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	210f      	movs	r1, #15
 8002d00:	f7ff fe54 	bl	80029ac <lis3dh_read_reg>
 8002d04:	0003      	movs	r3, r0
 8002d06:	60fb      	str	r3, [r7, #12]

  return ret;
 8002d08:	68fb      	ldr	r3, [r7, #12]
}
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	b004      	add	sp, #16
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <lis3dh_fifo_set>:
  * @param  val      change the values of fifo_en in reg CTRL_REG5
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_fifo_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002d12:	b590      	push	{r4, r7, lr}
 8002d14:	b085      	sub	sp, #20
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
 8002d1a:	000a      	movs	r2, r1
 8002d1c:	1cfb      	adds	r3, r7, #3
 8002d1e:	701a      	strb	r2, [r3, #0]
  lis3dh_ctrl_reg5_t ctrl_reg5;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG5, (uint8_t *)&ctrl_reg5, 1);
 8002d20:	2408      	movs	r4, #8
 8002d22:	193a      	adds	r2, r7, r4
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	2301      	movs	r3, #1
 8002d28:	2124      	movs	r1, #36	; 0x24
 8002d2a:	f7ff fe3f 	bl	80029ac <lis3dh_read_reg>
 8002d2e:	0003      	movs	r3, r0
 8002d30:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d117      	bne.n	8002d68 <lis3dh_fifo_set+0x56>
  {
    ctrl_reg5.fifo_en = val;
 8002d38:	1cfb      	adds	r3, r7, #3
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	4013      	ands	r3, r2
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	193b      	adds	r3, r7, r4
 8002d44:	2101      	movs	r1, #1
 8002d46:	400a      	ands	r2, r1
 8002d48:	0190      	lsls	r0, r2, #6
 8002d4a:	781a      	ldrb	r2, [r3, #0]
 8002d4c:	2140      	movs	r1, #64	; 0x40
 8002d4e:	438a      	bics	r2, r1
 8002d50:	1c11      	adds	r1, r2, #0
 8002d52:	1c02      	adds	r2, r0, #0
 8002d54:	430a      	orrs	r2, r1
 8002d56:	701a      	strb	r2, [r3, #0]
    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG5, (uint8_t *)&ctrl_reg5, 1);
 8002d58:	193a      	adds	r2, r7, r4
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	2124      	movs	r1, #36	; 0x24
 8002d60:	f7ff fe45 	bl	80029ee <lis3dh_write_reg>
 8002d64:	0003      	movs	r3, r0
 8002d66:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002d68:	68fb      	ldr	r3, [r7, #12]
}
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	b005      	add	sp, #20
 8002d70:	bd90      	pop	{r4, r7, pc}

08002d72 <lis3dh_fifo_watermark_set>:
  * @param  val      change the values of fth in reg FIFO_CTRL_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_fifo_watermark_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002d72:	b590      	push	{r4, r7, lr}
 8002d74:	b085      	sub	sp, #20
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
 8002d7a:	000a      	movs	r2, r1
 8002d7c:	1cfb      	adds	r3, r7, #3
 8002d7e:	701a      	strb	r2, [r3, #0]
  lis3dh_fifo_ctrl_reg_t fifo_ctrl_reg;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_FIFO_CTRL_REG,
 8002d80:	2408      	movs	r4, #8
 8002d82:	193a      	adds	r2, r7, r4
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	2301      	movs	r3, #1
 8002d88:	212e      	movs	r1, #46	; 0x2e
 8002d8a:	f7ff fe0f 	bl	80029ac <lis3dh_read_reg>
 8002d8e:	0003      	movs	r3, r0
 8002d90:	60fb      	str	r3, [r7, #12]
                        (uint8_t *)&fifo_ctrl_reg, 1);

  if (ret == 0)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d117      	bne.n	8002dc8 <lis3dh_fifo_watermark_set+0x56>
  {
    fifo_ctrl_reg.fth = val;
 8002d98:	1cfb      	adds	r3, r7, #3
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	221f      	movs	r2, #31
 8002d9e:	4013      	ands	r3, r2
 8002da0:	b2da      	uxtb	r2, r3
 8002da2:	193b      	adds	r3, r7, r4
 8002da4:	211f      	movs	r1, #31
 8002da6:	400a      	ands	r2, r1
 8002da8:	0010      	movs	r0, r2
 8002daa:	781a      	ldrb	r2, [r3, #0]
 8002dac:	211f      	movs	r1, #31
 8002dae:	438a      	bics	r2, r1
 8002db0:	1c11      	adds	r1, r2, #0
 8002db2:	1c02      	adds	r2, r0, #0
 8002db4:	430a      	orrs	r2, r1
 8002db6:	701a      	strb	r2, [r3, #0]
    ret = lis3dh_write_reg(ctx, LIS3DH_FIFO_CTRL_REG,
 8002db8:	193a      	adds	r2, r7, r4
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	212e      	movs	r1, #46	; 0x2e
 8002dc0:	f7ff fe15 	bl	80029ee <lis3dh_write_reg>
 8002dc4:	0003      	movs	r3, r0
 8002dc6:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg, 1);
  }

  return ret;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
}
 8002dca:	0018      	movs	r0, r3
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	b005      	add	sp, #20
 8002dd0:	bd90      	pop	{r4, r7, pc}

08002dd2 <lis3dh_fifo_mode_set>:
  * @param  val      change the values of fm in reg FIFO_CTRL_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_fifo_mode_set(stmdev_ctx_t *ctx, lis3dh_fm_t val)
{
 8002dd2:	b590      	push	{r4, r7, lr}
 8002dd4:	b085      	sub	sp, #20
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
 8002dda:	000a      	movs	r2, r1
 8002ddc:	1cfb      	adds	r3, r7, #3
 8002dde:	701a      	strb	r2, [r3, #0]
  lis3dh_fifo_ctrl_reg_t fifo_ctrl_reg;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_FIFO_CTRL_REG,
 8002de0:	2408      	movs	r4, #8
 8002de2:	193a      	adds	r2, r7, r4
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	2301      	movs	r3, #1
 8002de8:	212e      	movs	r1, #46	; 0x2e
 8002dea:	f7ff fddf 	bl	80029ac <lis3dh_read_reg>
 8002dee:	0003      	movs	r3, r0
 8002df0:	60fb      	str	r3, [r7, #12]
                        (uint8_t *)&fifo_ctrl_reg, 1);

  if (ret == 0)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d115      	bne.n	8002e24 <lis3dh_fifo_mode_set+0x52>
  {
    fifo_ctrl_reg.fm = (uint8_t)val;
 8002df8:	1cfb      	adds	r3, r7, #3
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	2203      	movs	r2, #3
 8002dfe:	4013      	ands	r3, r2
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	193b      	adds	r3, r7, r4
 8002e04:	0190      	lsls	r0, r2, #6
 8002e06:	781a      	ldrb	r2, [r3, #0]
 8002e08:	213f      	movs	r1, #63	; 0x3f
 8002e0a:	400a      	ands	r2, r1
 8002e0c:	1c11      	adds	r1, r2, #0
 8002e0e:	1c02      	adds	r2, r0, #0
 8002e10:	430a      	orrs	r2, r1
 8002e12:	701a      	strb	r2, [r3, #0]
    ret = lis3dh_write_reg(ctx, LIS3DH_FIFO_CTRL_REG,
 8002e14:	193a      	adds	r2, r7, r4
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	2301      	movs	r3, #1
 8002e1a:	212e      	movs	r1, #46	; 0x2e
 8002e1c:	f7ff fde7 	bl	80029ee <lis3dh_write_reg>
 8002e20:	0003      	movs	r3, r0
 8002e22:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg, 1);
  }

  return ret;
 8002e24:	68fb      	ldr	r3, [r7, #12]
}
 8002e26:	0018      	movs	r0, r3
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	b005      	add	sp, #20
 8002e2c:	bd90      	pop	{r4, r7, pc}

08002e2e <lis3dh_fifo_data_level_get>:
  * @param  val      change the values of fss in reg FIFO_SRC_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_fifo_data_level_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8002e2e:	b590      	push	{r4, r7, lr}
 8002e30:	b085      	sub	sp, #20
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
 8002e36:	6039      	str	r1, [r7, #0]
  lis3dh_fifo_src_reg_t fifo_src_reg;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_FIFO_SRC_REG,
 8002e38:	2408      	movs	r4, #8
 8002e3a:	193a      	adds	r2, r7, r4
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	2301      	movs	r3, #1
 8002e40:	212f      	movs	r1, #47	; 0x2f
 8002e42:	f7ff fdb3 	bl	80029ac <lis3dh_read_reg>
 8002e46:	0003      	movs	r3, r0
 8002e48:	60fb      	str	r3, [r7, #12]
                        (uint8_t *)&fifo_src_reg, 1);
  *val = (uint8_t)fifo_src_reg.fss;
 8002e4a:	193b      	adds	r3, r7, r4
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	06db      	lsls	r3, r3, #27
 8002e50:	0edb      	lsrs	r3, r3, #27
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	001a      	movs	r2, r3
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	701a      	strb	r2, [r3, #0]

  return ret;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
}
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	b005      	add	sp, #20
 8002e62:	bd90      	pop	{r4, r7, pc}

08002e64 <lis3dh_fifo_fth_flag_get>:
  * @param  val      change the values of wtm in reg FIFO_SRC_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_fifo_fth_flag_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8002e64:	b590      	push	{r4, r7, lr}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  lis3dh_fifo_src_reg_t fifo_src_reg;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_FIFO_SRC_REG,
 8002e6e:	2408      	movs	r4, #8
 8002e70:	193a      	adds	r2, r7, r4
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	2301      	movs	r3, #1
 8002e76:	212f      	movs	r1, #47	; 0x2f
 8002e78:	f7ff fd98 	bl	80029ac <lis3dh_read_reg>
 8002e7c:	0003      	movs	r3, r0
 8002e7e:	60fb      	str	r3, [r7, #12]
                        (uint8_t *)&fifo_src_reg, 1);
  *val = (uint8_t)fifo_src_reg.wtm;
 8002e80:	193b      	adds	r3, r7, r4
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	061b      	lsls	r3, r3, #24
 8002e86:	0fdb      	lsrs	r3, r3, #31
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	001a      	movs	r2, r3
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	701a      	strb	r2, [r3, #0]

  return ret;
 8002e90:	68fb      	ldr	r3, [r7, #12]
}
 8002e92:	0018      	movs	r0, r3
 8002e94:	46bd      	mov	sp, r7
 8002e96:	b005      	add	sp, #20
 8002e98:	bd90      	pop	{r4, r7, pc}

08002e9a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e9e:	f000 fab7 	bl	8003410 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ea2:	f000 f809 	bl	8002eb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ea6:	f7ff fba7 	bl	80025f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002eaa:	f000 f9d9 	bl	8003260 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8002eae:	f000 f851 	bl	8002f54 <MX_SPI1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    lis3dh_read_fifo();
 8002eb2:	f7ff fc17 	bl	80026e4 <lis3dh_read_fifo>
 8002eb6:	e7fc      	b.n	8002eb2 <main+0x18>

08002eb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002eb8:	b590      	push	{r4, r7, lr}
 8002eba:	b093      	sub	sp, #76	; 0x4c
 8002ebc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ebe:	2410      	movs	r4, #16
 8002ec0:	193b      	adds	r3, r7, r4
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	2338      	movs	r3, #56	; 0x38
 8002ec6:	001a      	movs	r2, r3
 8002ec8:	2100      	movs	r1, #0
 8002eca:	f003 f9e5 	bl	8006298 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ece:	003b      	movs	r3, r7
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	2310      	movs	r3, #16
 8002ed4:	001a      	movs	r2, r3
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	f003 f9de 	bl	8006298 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002edc:	2380      	movs	r3, #128	; 0x80
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	f000 fd51 	bl	8003988 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ee6:	193b      	adds	r3, r7, r4
 8002ee8:	2202      	movs	r2, #2
 8002eea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002eec:	193b      	adds	r3, r7, r4
 8002eee:	2280      	movs	r2, #128	; 0x80
 8002ef0:	0052      	lsls	r2, r2, #1
 8002ef2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002ef4:	193b      	adds	r3, r7, r4
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002efa:	193b      	adds	r3, r7, r4
 8002efc:	2240      	movs	r2, #64	; 0x40
 8002efe:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002f00:	193b      	adds	r3, r7, r4
 8002f02:	2200      	movs	r2, #0
 8002f04:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f06:	193b      	adds	r3, r7, r4
 8002f08:	0018      	movs	r0, r3
 8002f0a:	f000 fd89 	bl	8003a20 <HAL_RCC_OscConfig>
 8002f0e:	1e03      	subs	r3, r0, #0
 8002f10:	d001      	beq.n	8002f16 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002f12:	f000 f819 	bl	8002f48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f16:	003b      	movs	r3, r7
 8002f18:	2207      	movs	r2, #7
 8002f1a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002f1c:	003b      	movs	r3, r7
 8002f1e:	2200      	movs	r2, #0
 8002f20:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f22:	003b      	movs	r3, r7
 8002f24:	2200      	movs	r2, #0
 8002f26:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f28:	003b      	movs	r3, r7
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002f2e:	003b      	movs	r3, r7
 8002f30:	2100      	movs	r1, #0
 8002f32:	0018      	movs	r0, r3
 8002f34:	f001 f88e 	bl	8004054 <HAL_RCC_ClockConfig>
 8002f38:	1e03      	subs	r3, r0, #0
 8002f3a:	d001      	beq.n	8002f40 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002f3c:	f000 f804 	bl	8002f48 <Error_Handler>
  }
}
 8002f40:	46c0      	nop			; (mov r8, r8)
 8002f42:	46bd      	mov	sp, r7
 8002f44:	b013      	add	sp, #76	; 0x4c
 8002f46:	bd90      	pop	{r4, r7, pc}

08002f48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f4c:	b672      	cpsid	i
}
 8002f4e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f50:	e7fe      	b.n	8002f50 <Error_Handler+0x8>
	...

08002f54 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002f58:	4b1b      	ldr	r3, [pc, #108]	; (8002fc8 <MX_SPI1_Init+0x74>)
 8002f5a:	4a1c      	ldr	r2, [pc, #112]	; (8002fcc <MX_SPI1_Init+0x78>)
 8002f5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002f5e:	4b1a      	ldr	r3, [pc, #104]	; (8002fc8 <MX_SPI1_Init+0x74>)
 8002f60:	2282      	movs	r2, #130	; 0x82
 8002f62:	0052      	lsls	r2, r2, #1
 8002f64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002f66:	4b18      	ldr	r3, [pc, #96]	; (8002fc8 <MX_SPI1_Init+0x74>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f6c:	4b16      	ldr	r3, [pc, #88]	; (8002fc8 <MX_SPI1_Init+0x74>)
 8002f6e:	22e0      	movs	r2, #224	; 0xe0
 8002f70:	00d2      	lsls	r2, r2, #3
 8002f72:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002f74:	4b14      	ldr	r3, [pc, #80]	; (8002fc8 <MX_SPI1_Init+0x74>)
 8002f76:	2202      	movs	r2, #2
 8002f78:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002f7a:	4b13      	ldr	r3, [pc, #76]	; (8002fc8 <MX_SPI1_Init+0x74>)
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002f80:	4b11      	ldr	r3, [pc, #68]	; (8002fc8 <MX_SPI1_Init+0x74>)
 8002f82:	2280      	movs	r2, #128	; 0x80
 8002f84:	0092      	lsls	r2, r2, #2
 8002f86:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f88:	4b0f      	ldr	r3, [pc, #60]	; (8002fc8 <MX_SPI1_Init+0x74>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f8e:	4b0e      	ldr	r3, [pc, #56]	; (8002fc8 <MX_SPI1_Init+0x74>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f94:	4b0c      	ldr	r3, [pc, #48]	; (8002fc8 <MX_SPI1_Init+0x74>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f9a:	4b0b      	ldr	r3, [pc, #44]	; (8002fc8 <MX_SPI1_Init+0x74>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002fa0:	4b09      	ldr	r3, [pc, #36]	; (8002fc8 <MX_SPI1_Init+0x74>)
 8002fa2:	2207      	movs	r2, #7
 8002fa4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002fa6:	4b08      	ldr	r3, [pc, #32]	; (8002fc8 <MX_SPI1_Init+0x74>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002fac:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <MX_SPI1_Init+0x74>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002fb2:	4b05      	ldr	r3, [pc, #20]	; (8002fc8 <MX_SPI1_Init+0x74>)
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	f001 fbaf 	bl	8004718 <HAL_SPI_Init>
 8002fba:	1e03      	subs	r3, r0, #0
 8002fbc:	d001      	beq.n	8002fc2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002fbe:	f7ff ffc3 	bl	8002f48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	200005f8 	.word	0x200005f8
 8002fcc:	40013000 	.word	0x40013000

08002fd0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002fd0:	b590      	push	{r4, r7, lr}
 8002fd2:	b08b      	sub	sp, #44	; 0x2c
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd8:	2414      	movs	r4, #20
 8002fda:	193b      	adds	r3, r7, r4
 8002fdc:	0018      	movs	r0, r3
 8002fde:	2314      	movs	r3, #20
 8002fe0:	001a      	movs	r2, r3
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	f003 f958 	bl	8006298 <memset>
  if(spiHandle->Instance==SPI1)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a1b      	ldr	r2, [pc, #108]	; (800305c <HAL_SPI_MspInit+0x8c>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d130      	bne.n	8003054 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ff2:	4b1b      	ldr	r3, [pc, #108]	; (8003060 <HAL_SPI_MspInit+0x90>)
 8002ff4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ff6:	4b1a      	ldr	r3, [pc, #104]	; (8003060 <HAL_SPI_MspInit+0x90>)
 8002ff8:	2180      	movs	r1, #128	; 0x80
 8002ffa:	0149      	lsls	r1, r1, #5
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	641a      	str	r2, [r3, #64]	; 0x40
 8003000:	4b17      	ldr	r3, [pc, #92]	; (8003060 <HAL_SPI_MspInit+0x90>)
 8003002:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003004:	2380      	movs	r3, #128	; 0x80
 8003006:	015b      	lsls	r3, r3, #5
 8003008:	4013      	ands	r3, r2
 800300a:	613b      	str	r3, [r7, #16]
 800300c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800300e:	4b14      	ldr	r3, [pc, #80]	; (8003060 <HAL_SPI_MspInit+0x90>)
 8003010:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003012:	4b13      	ldr	r3, [pc, #76]	; (8003060 <HAL_SPI_MspInit+0x90>)
 8003014:	2101      	movs	r1, #1
 8003016:	430a      	orrs	r2, r1
 8003018:	635a      	str	r2, [r3, #52]	; 0x34
 800301a:	4b11      	ldr	r3, [pc, #68]	; (8003060 <HAL_SPI_MspInit+0x90>)
 800301c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800301e:	2201      	movs	r2, #1
 8003020:	4013      	ands	r3, r2
 8003022:	60fb      	str	r3, [r7, #12]
 8003024:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8003026:	0021      	movs	r1, r4
 8003028:	187b      	adds	r3, r7, r1
 800302a:	22c2      	movs	r2, #194	; 0xc2
 800302c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800302e:	187b      	adds	r3, r7, r1
 8003030:	2202      	movs	r2, #2
 8003032:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003034:	187b      	adds	r3, r7, r1
 8003036:	2200      	movs	r2, #0
 8003038:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800303a:	187b      	adds	r3, r7, r1
 800303c:	2200      	movs	r2, #0
 800303e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003040:	187b      	adds	r3, r7, r1
 8003042:	2200      	movs	r2, #0
 8003044:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003046:	187a      	adds	r2, r7, r1
 8003048:	23a0      	movs	r3, #160	; 0xa0
 800304a:	05db      	lsls	r3, r3, #23
 800304c:	0011      	movs	r1, r2
 800304e:	0018      	movs	r0, r3
 8003050:	f000 fb18 	bl	8003684 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003054:	46c0      	nop			; (mov r8, r8)
 8003056:	46bd      	mov	sp, r7
 8003058:	b00b      	add	sp, #44	; 0x2c
 800305a:	bd90      	pop	{r4, r7, pc}
 800305c:	40013000 	.word	0x40013000
 8003060:	40021000 	.word	0x40021000

08003064 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800306a:	4b0f      	ldr	r3, [pc, #60]	; (80030a8 <HAL_MspInit+0x44>)
 800306c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800306e:	4b0e      	ldr	r3, [pc, #56]	; (80030a8 <HAL_MspInit+0x44>)
 8003070:	2101      	movs	r1, #1
 8003072:	430a      	orrs	r2, r1
 8003074:	641a      	str	r2, [r3, #64]	; 0x40
 8003076:	4b0c      	ldr	r3, [pc, #48]	; (80030a8 <HAL_MspInit+0x44>)
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	2201      	movs	r2, #1
 800307c:	4013      	ands	r3, r2
 800307e:	607b      	str	r3, [r7, #4]
 8003080:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003082:	4b09      	ldr	r3, [pc, #36]	; (80030a8 <HAL_MspInit+0x44>)
 8003084:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003086:	4b08      	ldr	r3, [pc, #32]	; (80030a8 <HAL_MspInit+0x44>)
 8003088:	2180      	movs	r1, #128	; 0x80
 800308a:	0549      	lsls	r1, r1, #21
 800308c:	430a      	orrs	r2, r1
 800308e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003090:	4b05      	ldr	r3, [pc, #20]	; (80030a8 <HAL_MspInit+0x44>)
 8003092:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003094:	2380      	movs	r3, #128	; 0x80
 8003096:	055b      	lsls	r3, r3, #21
 8003098:	4013      	ands	r3, r2
 800309a:	603b      	str	r3, [r7, #0]
 800309c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800309e:	46c0      	nop			; (mov r8, r8)
 80030a0:	46bd      	mov	sp, r7
 80030a2:	b002      	add	sp, #8
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	46c0      	nop			; (mov r8, r8)
 80030a8:	40021000 	.word	0x40021000

080030ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030b0:	e7fe      	b.n	80030b0 <NMI_Handler+0x4>

080030b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030b6:	e7fe      	b.n	80030b6 <HardFault_Handler+0x4>

080030b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80030bc:	46c0      	nop			; (mov r8, r8)
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030c6:	46c0      	nop			; (mov r8, r8)
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030d0:	f000 fa08 	bl	80034e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030d4:	46c0      	nop			; (mov r8, r8)
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	af00      	add	r7, sp, #0
  return 1;
 80030de:	2301      	movs	r3, #1
}
 80030e0:	0018      	movs	r0, r3
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <_kill>:

int _kill(int pid, int sig)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b082      	sub	sp, #8
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
 80030ee:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80030f0:	f003 f8a8 	bl	8006244 <__errno>
 80030f4:	0003      	movs	r3, r0
 80030f6:	2216      	movs	r2, #22
 80030f8:	601a      	str	r2, [r3, #0]
  return -1;
 80030fa:	2301      	movs	r3, #1
 80030fc:	425b      	negs	r3, r3
}
 80030fe:	0018      	movs	r0, r3
 8003100:	46bd      	mov	sp, r7
 8003102:	b002      	add	sp, #8
 8003104:	bd80      	pop	{r7, pc}

08003106 <_exit>:

void _exit (int status)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b082      	sub	sp, #8
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800310e:	2301      	movs	r3, #1
 8003110:	425a      	negs	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	0011      	movs	r1, r2
 8003116:	0018      	movs	r0, r3
 8003118:	f7ff ffe5 	bl	80030e6 <_kill>
  while (1) {}    /* Make sure we hang here */
 800311c:	e7fe      	b.n	800311c <_exit+0x16>

0800311e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b086      	sub	sp, #24
 8003122:	af00      	add	r7, sp, #0
 8003124:	60f8      	str	r0, [r7, #12]
 8003126:	60b9      	str	r1, [r7, #8]
 8003128:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800312a:	2300      	movs	r3, #0
 800312c:	617b      	str	r3, [r7, #20]
 800312e:	e00a      	b.n	8003146 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003130:	e000      	b.n	8003134 <_read+0x16>
 8003132:	bf00      	nop
 8003134:	0001      	movs	r1, r0
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	1c5a      	adds	r2, r3, #1
 800313a:	60ba      	str	r2, [r7, #8]
 800313c:	b2ca      	uxtb	r2, r1
 800313e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	3301      	adds	r3, #1
 8003144:	617b      	str	r3, [r7, #20]
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	429a      	cmp	r2, r3
 800314c:	dbf0      	blt.n	8003130 <_read+0x12>
  }

  return len;
 800314e:	687b      	ldr	r3, [r7, #4]
}
 8003150:	0018      	movs	r0, r3
 8003152:	46bd      	mov	sp, r7
 8003154:	b006      	add	sp, #24
 8003156:	bd80      	pop	{r7, pc}

08003158 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003164:	2300      	movs	r3, #0
 8003166:	617b      	str	r3, [r7, #20]
 8003168:	e009      	b.n	800317e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	1c5a      	adds	r2, r3, #1
 800316e:	60ba      	str	r2, [r7, #8]
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	0018      	movs	r0, r3
 8003174:	e000      	b.n	8003178 <_write+0x20>
 8003176:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	3301      	adds	r3, #1
 800317c:	617b      	str	r3, [r7, #20]
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	429a      	cmp	r2, r3
 8003184:	dbf1      	blt.n	800316a <_write+0x12>
  }
  return len;
 8003186:	687b      	ldr	r3, [r7, #4]
}
 8003188:	0018      	movs	r0, r3
 800318a:	46bd      	mov	sp, r7
 800318c:	b006      	add	sp, #24
 800318e:	bd80      	pop	{r7, pc}

08003190 <_close>:

int _close(int file)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003198:	2301      	movs	r3, #1
 800319a:	425b      	negs	r3, r3
}
 800319c:	0018      	movs	r0, r3
 800319e:	46bd      	mov	sp, r7
 80031a0:	b002      	add	sp, #8
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	2280      	movs	r2, #128	; 0x80
 80031b2:	0192      	lsls	r2, r2, #6
 80031b4:	605a      	str	r2, [r3, #4]
  return 0;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	0018      	movs	r0, r3
 80031ba:	46bd      	mov	sp, r7
 80031bc:	b002      	add	sp, #8
 80031be:	bd80      	pop	{r7, pc}

080031c0 <_isatty>:

int _isatty(int file)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80031c8:	2301      	movs	r3, #1
}
 80031ca:	0018      	movs	r0, r3
 80031cc:	46bd      	mov	sp, r7
 80031ce:	b002      	add	sp, #8
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b084      	sub	sp, #16
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	60f8      	str	r0, [r7, #12]
 80031da:	60b9      	str	r1, [r7, #8]
 80031dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	0018      	movs	r0, r3
 80031e2:	46bd      	mov	sp, r7
 80031e4:	b004      	add	sp, #16
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031f0:	4a14      	ldr	r2, [pc, #80]	; (8003244 <_sbrk+0x5c>)
 80031f2:	4b15      	ldr	r3, [pc, #84]	; (8003248 <_sbrk+0x60>)
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031fc:	4b13      	ldr	r3, [pc, #76]	; (800324c <_sbrk+0x64>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d102      	bne.n	800320a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003204:	4b11      	ldr	r3, [pc, #68]	; (800324c <_sbrk+0x64>)
 8003206:	4a12      	ldr	r2, [pc, #72]	; (8003250 <_sbrk+0x68>)
 8003208:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800320a:	4b10      	ldr	r3, [pc, #64]	; (800324c <_sbrk+0x64>)
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	18d3      	adds	r3, r2, r3
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	429a      	cmp	r2, r3
 8003216:	d207      	bcs.n	8003228 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003218:	f003 f814 	bl	8006244 <__errno>
 800321c:	0003      	movs	r3, r0
 800321e:	220c      	movs	r2, #12
 8003220:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003222:	2301      	movs	r3, #1
 8003224:	425b      	negs	r3, r3
 8003226:	e009      	b.n	800323c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003228:	4b08      	ldr	r3, [pc, #32]	; (800324c <_sbrk+0x64>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800322e:	4b07      	ldr	r3, [pc, #28]	; (800324c <_sbrk+0x64>)
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	18d2      	adds	r2, r2, r3
 8003236:	4b05      	ldr	r3, [pc, #20]	; (800324c <_sbrk+0x64>)
 8003238:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800323a:	68fb      	ldr	r3, [r7, #12]
}
 800323c:	0018      	movs	r0, r3
 800323e:	46bd      	mov	sp, r7
 8003240:	b006      	add	sp, #24
 8003242:	bd80      	pop	{r7, pc}
 8003244:	20009000 	.word	0x20009000
 8003248:	00000400 	.word	0x00000400
 800324c:	2000065c 	.word	0x2000065c
 8003250:	20000708 	.word	0x20000708

08003254 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003258:	46c0      	nop			; (mov r8, r8)
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
	...

08003260 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003264:	4b23      	ldr	r3, [pc, #140]	; (80032f4 <MX_USART2_UART_Init+0x94>)
 8003266:	4a24      	ldr	r2, [pc, #144]	; (80032f8 <MX_USART2_UART_Init+0x98>)
 8003268:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800326a:	4b22      	ldr	r3, [pc, #136]	; (80032f4 <MX_USART2_UART_Init+0x94>)
 800326c:	22e1      	movs	r2, #225	; 0xe1
 800326e:	0252      	lsls	r2, r2, #9
 8003270:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003272:	4b20      	ldr	r3, [pc, #128]	; (80032f4 <MX_USART2_UART_Init+0x94>)
 8003274:	2200      	movs	r2, #0
 8003276:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003278:	4b1e      	ldr	r3, [pc, #120]	; (80032f4 <MX_USART2_UART_Init+0x94>)
 800327a:	2200      	movs	r2, #0
 800327c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800327e:	4b1d      	ldr	r3, [pc, #116]	; (80032f4 <MX_USART2_UART_Init+0x94>)
 8003280:	2200      	movs	r2, #0
 8003282:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003284:	4b1b      	ldr	r3, [pc, #108]	; (80032f4 <MX_USART2_UART_Init+0x94>)
 8003286:	220c      	movs	r2, #12
 8003288:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800328a:	4b1a      	ldr	r3, [pc, #104]	; (80032f4 <MX_USART2_UART_Init+0x94>)
 800328c:	2200      	movs	r2, #0
 800328e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003290:	4b18      	ldr	r3, [pc, #96]	; (80032f4 <MX_USART2_UART_Init+0x94>)
 8003292:	2200      	movs	r2, #0
 8003294:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003296:	4b17      	ldr	r3, [pc, #92]	; (80032f4 <MX_USART2_UART_Init+0x94>)
 8003298:	2200      	movs	r2, #0
 800329a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800329c:	4b15      	ldr	r3, [pc, #84]	; (80032f4 <MX_USART2_UART_Init+0x94>)
 800329e:	2200      	movs	r2, #0
 80032a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80032a2:	4b14      	ldr	r3, [pc, #80]	; (80032f4 <MX_USART2_UART_Init+0x94>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80032a8:	4b12      	ldr	r3, [pc, #72]	; (80032f4 <MX_USART2_UART_Init+0x94>)
 80032aa:	0018      	movs	r0, r3
 80032ac:	f002 f936 	bl	800551c <HAL_UART_Init>
 80032b0:	1e03      	subs	r3, r0, #0
 80032b2:	d001      	beq.n	80032b8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80032b4:	f7ff fe48 	bl	8002f48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032b8:	4b0e      	ldr	r3, [pc, #56]	; (80032f4 <MX_USART2_UART_Init+0x94>)
 80032ba:	2100      	movs	r1, #0
 80032bc:	0018      	movs	r0, r3
 80032be:	f002 fee1 	bl	8006084 <HAL_UARTEx_SetTxFifoThreshold>
 80032c2:	1e03      	subs	r3, r0, #0
 80032c4:	d001      	beq.n	80032ca <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80032c6:	f7ff fe3f 	bl	8002f48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032ca:	4b0a      	ldr	r3, [pc, #40]	; (80032f4 <MX_USART2_UART_Init+0x94>)
 80032cc:	2100      	movs	r1, #0
 80032ce:	0018      	movs	r0, r3
 80032d0:	f002 ff18 	bl	8006104 <HAL_UARTEx_SetRxFifoThreshold>
 80032d4:	1e03      	subs	r3, r0, #0
 80032d6:	d001      	beq.n	80032dc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80032d8:	f7ff fe36 	bl	8002f48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80032dc:	4b05      	ldr	r3, [pc, #20]	; (80032f4 <MX_USART2_UART_Init+0x94>)
 80032de:	0018      	movs	r0, r3
 80032e0:	f002 fe96 	bl	8006010 <HAL_UARTEx_DisableFifoMode>
 80032e4:	1e03      	subs	r3, r0, #0
 80032e6:	d001      	beq.n	80032ec <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80032e8:	f7ff fe2e 	bl	8002f48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80032ec:	46c0      	nop			; (mov r8, r8)
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	46c0      	nop			; (mov r8, r8)
 80032f4:	20000660 	.word	0x20000660
 80032f8:	40004400 	.word	0x40004400

080032fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80032fc:	b590      	push	{r4, r7, lr}
 80032fe:	b097      	sub	sp, #92	; 0x5c
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003304:	2344      	movs	r3, #68	; 0x44
 8003306:	18fb      	adds	r3, r7, r3
 8003308:	0018      	movs	r0, r3
 800330a:	2314      	movs	r3, #20
 800330c:	001a      	movs	r2, r3
 800330e:	2100      	movs	r1, #0
 8003310:	f002 ffc2 	bl	8006298 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003314:	2410      	movs	r4, #16
 8003316:	193b      	adds	r3, r7, r4
 8003318:	0018      	movs	r0, r3
 800331a:	2334      	movs	r3, #52	; 0x34
 800331c:	001a      	movs	r2, r3
 800331e:	2100      	movs	r1, #0
 8003320:	f002 ffba 	bl	8006298 <memset>
  if(uartHandle->Instance==USART2)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a22      	ldr	r2, [pc, #136]	; (80033b4 <HAL_UART_MspInit+0xb8>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d13e      	bne.n	80033ac <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800332e:	193b      	adds	r3, r7, r4
 8003330:	2202      	movs	r2, #2
 8003332:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003334:	193b      	adds	r3, r7, r4
 8003336:	2200      	movs	r2, #0
 8003338:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800333a:	193b      	adds	r3, r7, r4
 800333c:	0018      	movs	r0, r3
 800333e:	f001 f833 	bl	80043a8 <HAL_RCCEx_PeriphCLKConfig>
 8003342:	1e03      	subs	r3, r0, #0
 8003344:	d001      	beq.n	800334a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003346:	f7ff fdff 	bl	8002f48 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800334a:	4b1b      	ldr	r3, [pc, #108]	; (80033b8 <HAL_UART_MspInit+0xbc>)
 800334c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800334e:	4b1a      	ldr	r3, [pc, #104]	; (80033b8 <HAL_UART_MspInit+0xbc>)
 8003350:	2180      	movs	r1, #128	; 0x80
 8003352:	0289      	lsls	r1, r1, #10
 8003354:	430a      	orrs	r2, r1
 8003356:	63da      	str	r2, [r3, #60]	; 0x3c
 8003358:	4b17      	ldr	r3, [pc, #92]	; (80033b8 <HAL_UART_MspInit+0xbc>)
 800335a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800335c:	2380      	movs	r3, #128	; 0x80
 800335e:	029b      	lsls	r3, r3, #10
 8003360:	4013      	ands	r3, r2
 8003362:	60fb      	str	r3, [r7, #12]
 8003364:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003366:	4b14      	ldr	r3, [pc, #80]	; (80033b8 <HAL_UART_MspInit+0xbc>)
 8003368:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800336a:	4b13      	ldr	r3, [pc, #76]	; (80033b8 <HAL_UART_MspInit+0xbc>)
 800336c:	2101      	movs	r1, #1
 800336e:	430a      	orrs	r2, r1
 8003370:	635a      	str	r2, [r3, #52]	; 0x34
 8003372:	4b11      	ldr	r3, [pc, #68]	; (80033b8 <HAL_UART_MspInit+0xbc>)
 8003374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003376:	2201      	movs	r2, #1
 8003378:	4013      	ands	r3, r2
 800337a:	60bb      	str	r3, [r7, #8]
 800337c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800337e:	2144      	movs	r1, #68	; 0x44
 8003380:	187b      	adds	r3, r7, r1
 8003382:	220c      	movs	r2, #12
 8003384:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003386:	187b      	adds	r3, r7, r1
 8003388:	2202      	movs	r2, #2
 800338a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800338c:	187b      	adds	r3, r7, r1
 800338e:	2201      	movs	r2, #1
 8003390:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003392:	187b      	adds	r3, r7, r1
 8003394:	2200      	movs	r2, #0
 8003396:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003398:	187b      	adds	r3, r7, r1
 800339a:	2201      	movs	r2, #1
 800339c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800339e:	187a      	adds	r2, r7, r1
 80033a0:	23a0      	movs	r3, #160	; 0xa0
 80033a2:	05db      	lsls	r3, r3, #23
 80033a4:	0011      	movs	r1, r2
 80033a6:	0018      	movs	r0, r3
 80033a8:	f000 f96c 	bl	8003684 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80033ac:	46c0      	nop			; (mov r8, r8)
 80033ae:	46bd      	mov	sp, r7
 80033b0:	b017      	add	sp, #92	; 0x5c
 80033b2:	bd90      	pop	{r4, r7, pc}
 80033b4:	40004400 	.word	0x40004400
 80033b8:	40021000 	.word	0x40021000

080033bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80033bc:	480d      	ldr	r0, [pc, #52]	; (80033f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80033be:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80033c0:	f7ff ff48 	bl	8003254 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033c4:	480c      	ldr	r0, [pc, #48]	; (80033f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80033c6:	490d      	ldr	r1, [pc, #52]	; (80033fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80033c8:	4a0d      	ldr	r2, [pc, #52]	; (8003400 <LoopForever+0xe>)
  movs r3, #0
 80033ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033cc:	e002      	b.n	80033d4 <LoopCopyDataInit>

080033ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033d2:	3304      	adds	r3, #4

080033d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033d8:	d3f9      	bcc.n	80033ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033da:	4a0a      	ldr	r2, [pc, #40]	; (8003404 <LoopForever+0x12>)
  ldr r4, =_ebss
 80033dc:	4c0a      	ldr	r4, [pc, #40]	; (8003408 <LoopForever+0x16>)
  movs r3, #0
 80033de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033e0:	e001      	b.n	80033e6 <LoopFillZerobss>

080033e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033e4:	3204      	adds	r2, #4

080033e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033e8:	d3fb      	bcc.n	80033e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80033ea:	f002 ff31 	bl	8006250 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80033ee:	f7ff fd54 	bl	8002e9a <main>

080033f2 <LoopForever>:

LoopForever:
  b LoopForever
 80033f2:	e7fe      	b.n	80033f2 <LoopForever>
  ldr   r0, =_estack
 80033f4:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80033f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033fc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003400:	080097b4 	.word	0x080097b4
  ldr r2, =_sbss
 8003404:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8003408:	20000708 	.word	0x20000708

0800340c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800340c:	e7fe      	b.n	800340c <ADC1_COMP_IRQHandler>
	...

08003410 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003416:	1dfb      	adds	r3, r7, #7
 8003418:	2200      	movs	r2, #0
 800341a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800341c:	4b0b      	ldr	r3, [pc, #44]	; (800344c <HAL_Init+0x3c>)
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	4b0a      	ldr	r3, [pc, #40]	; (800344c <HAL_Init+0x3c>)
 8003422:	2180      	movs	r1, #128	; 0x80
 8003424:	0049      	lsls	r1, r1, #1
 8003426:	430a      	orrs	r2, r1
 8003428:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800342a:	2000      	movs	r0, #0
 800342c:	f000 f810 	bl	8003450 <HAL_InitTick>
 8003430:	1e03      	subs	r3, r0, #0
 8003432:	d003      	beq.n	800343c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003434:	1dfb      	adds	r3, r7, #7
 8003436:	2201      	movs	r2, #1
 8003438:	701a      	strb	r2, [r3, #0]
 800343a:	e001      	b.n	8003440 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800343c:	f7ff fe12 	bl	8003064 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003440:	1dfb      	adds	r3, r7, #7
 8003442:	781b      	ldrb	r3, [r3, #0]
}
 8003444:	0018      	movs	r0, r3
 8003446:	46bd      	mov	sp, r7
 8003448:	b002      	add	sp, #8
 800344a:	bd80      	pop	{r7, pc}
 800344c:	40022000 	.word	0x40022000

08003450 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003450:	b590      	push	{r4, r7, lr}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003458:	230f      	movs	r3, #15
 800345a:	18fb      	adds	r3, r7, r3
 800345c:	2200      	movs	r2, #0
 800345e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003460:	4b1d      	ldr	r3, [pc, #116]	; (80034d8 <HAL_InitTick+0x88>)
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d02b      	beq.n	80034c0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003468:	4b1c      	ldr	r3, [pc, #112]	; (80034dc <HAL_InitTick+0x8c>)
 800346a:	681c      	ldr	r4, [r3, #0]
 800346c:	4b1a      	ldr	r3, [pc, #104]	; (80034d8 <HAL_InitTick+0x88>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	0019      	movs	r1, r3
 8003472:	23fa      	movs	r3, #250	; 0xfa
 8003474:	0098      	lsls	r0, r3, #2
 8003476:	f7fc fe61 	bl	800013c <__udivsi3>
 800347a:	0003      	movs	r3, r0
 800347c:	0019      	movs	r1, r3
 800347e:	0020      	movs	r0, r4
 8003480:	f7fc fe5c 	bl	800013c <__udivsi3>
 8003484:	0003      	movs	r3, r0
 8003486:	0018      	movs	r0, r3
 8003488:	f000 f8ef 	bl	800366a <HAL_SYSTICK_Config>
 800348c:	1e03      	subs	r3, r0, #0
 800348e:	d112      	bne.n	80034b6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b03      	cmp	r3, #3
 8003494:	d80a      	bhi.n	80034ac <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003496:	6879      	ldr	r1, [r7, #4]
 8003498:	2301      	movs	r3, #1
 800349a:	425b      	negs	r3, r3
 800349c:	2200      	movs	r2, #0
 800349e:	0018      	movs	r0, r3
 80034a0:	f000 f8ce 	bl	8003640 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80034a4:	4b0e      	ldr	r3, [pc, #56]	; (80034e0 <HAL_InitTick+0x90>)
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	e00d      	b.n	80034c8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80034ac:	230f      	movs	r3, #15
 80034ae:	18fb      	adds	r3, r7, r3
 80034b0:	2201      	movs	r2, #1
 80034b2:	701a      	strb	r2, [r3, #0]
 80034b4:	e008      	b.n	80034c8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80034b6:	230f      	movs	r3, #15
 80034b8:	18fb      	adds	r3, r7, r3
 80034ba:	2201      	movs	r2, #1
 80034bc:	701a      	strb	r2, [r3, #0]
 80034be:	e003      	b.n	80034c8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80034c0:	230f      	movs	r3, #15
 80034c2:	18fb      	adds	r3, r7, r3
 80034c4:	2201      	movs	r2, #1
 80034c6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80034c8:	230f      	movs	r3, #15
 80034ca:	18fb      	adds	r3, r7, r3
 80034cc:	781b      	ldrb	r3, [r3, #0]
}
 80034ce:	0018      	movs	r0, r3
 80034d0:	46bd      	mov	sp, r7
 80034d2:	b005      	add	sp, #20
 80034d4:	bd90      	pop	{r4, r7, pc}
 80034d6:	46c0      	nop			; (mov r8, r8)
 80034d8:	20000008 	.word	0x20000008
 80034dc:	20000000 	.word	0x20000000
 80034e0:	20000004 	.word	0x20000004

080034e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80034e8:	4b05      	ldr	r3, [pc, #20]	; (8003500 <HAL_IncTick+0x1c>)
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	001a      	movs	r2, r3
 80034ee:	4b05      	ldr	r3, [pc, #20]	; (8003504 <HAL_IncTick+0x20>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	18d2      	adds	r2, r2, r3
 80034f4:	4b03      	ldr	r3, [pc, #12]	; (8003504 <HAL_IncTick+0x20>)
 80034f6:	601a      	str	r2, [r3, #0]
}
 80034f8:	46c0      	nop			; (mov r8, r8)
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	46c0      	nop			; (mov r8, r8)
 8003500:	20000008 	.word	0x20000008
 8003504:	200006f4 	.word	0x200006f4

08003508 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  return uwTick;
 800350c:	4b02      	ldr	r3, [pc, #8]	; (8003518 <HAL_GetTick+0x10>)
 800350e:	681b      	ldr	r3, [r3, #0]
}
 8003510:	0018      	movs	r0, r3
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	46c0      	nop			; (mov r8, r8)
 8003518:	200006f4 	.word	0x200006f4

0800351c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800351c:	b590      	push	{r4, r7, lr}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	0002      	movs	r2, r0
 8003524:	6039      	str	r1, [r7, #0]
 8003526:	1dfb      	adds	r3, r7, #7
 8003528:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800352a:	1dfb      	adds	r3, r7, #7
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	2b7f      	cmp	r3, #127	; 0x7f
 8003530:	d828      	bhi.n	8003584 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003532:	4a2f      	ldr	r2, [pc, #188]	; (80035f0 <__NVIC_SetPriority+0xd4>)
 8003534:	1dfb      	adds	r3, r7, #7
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	b25b      	sxtb	r3, r3
 800353a:	089b      	lsrs	r3, r3, #2
 800353c:	33c0      	adds	r3, #192	; 0xc0
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	589b      	ldr	r3, [r3, r2]
 8003542:	1dfa      	adds	r2, r7, #7
 8003544:	7812      	ldrb	r2, [r2, #0]
 8003546:	0011      	movs	r1, r2
 8003548:	2203      	movs	r2, #3
 800354a:	400a      	ands	r2, r1
 800354c:	00d2      	lsls	r2, r2, #3
 800354e:	21ff      	movs	r1, #255	; 0xff
 8003550:	4091      	lsls	r1, r2
 8003552:	000a      	movs	r2, r1
 8003554:	43d2      	mvns	r2, r2
 8003556:	401a      	ands	r2, r3
 8003558:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	019b      	lsls	r3, r3, #6
 800355e:	22ff      	movs	r2, #255	; 0xff
 8003560:	401a      	ands	r2, r3
 8003562:	1dfb      	adds	r3, r7, #7
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	0018      	movs	r0, r3
 8003568:	2303      	movs	r3, #3
 800356a:	4003      	ands	r3, r0
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003570:	481f      	ldr	r0, [pc, #124]	; (80035f0 <__NVIC_SetPriority+0xd4>)
 8003572:	1dfb      	adds	r3, r7, #7
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	b25b      	sxtb	r3, r3
 8003578:	089b      	lsrs	r3, r3, #2
 800357a:	430a      	orrs	r2, r1
 800357c:	33c0      	adds	r3, #192	; 0xc0
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003582:	e031      	b.n	80035e8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003584:	4a1b      	ldr	r2, [pc, #108]	; (80035f4 <__NVIC_SetPriority+0xd8>)
 8003586:	1dfb      	adds	r3, r7, #7
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	0019      	movs	r1, r3
 800358c:	230f      	movs	r3, #15
 800358e:	400b      	ands	r3, r1
 8003590:	3b08      	subs	r3, #8
 8003592:	089b      	lsrs	r3, r3, #2
 8003594:	3306      	adds	r3, #6
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	18d3      	adds	r3, r2, r3
 800359a:	3304      	adds	r3, #4
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	1dfa      	adds	r2, r7, #7
 80035a0:	7812      	ldrb	r2, [r2, #0]
 80035a2:	0011      	movs	r1, r2
 80035a4:	2203      	movs	r2, #3
 80035a6:	400a      	ands	r2, r1
 80035a8:	00d2      	lsls	r2, r2, #3
 80035aa:	21ff      	movs	r1, #255	; 0xff
 80035ac:	4091      	lsls	r1, r2
 80035ae:	000a      	movs	r2, r1
 80035b0:	43d2      	mvns	r2, r2
 80035b2:	401a      	ands	r2, r3
 80035b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	019b      	lsls	r3, r3, #6
 80035ba:	22ff      	movs	r2, #255	; 0xff
 80035bc:	401a      	ands	r2, r3
 80035be:	1dfb      	adds	r3, r7, #7
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	0018      	movs	r0, r3
 80035c4:	2303      	movs	r3, #3
 80035c6:	4003      	ands	r3, r0
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80035cc:	4809      	ldr	r0, [pc, #36]	; (80035f4 <__NVIC_SetPriority+0xd8>)
 80035ce:	1dfb      	adds	r3, r7, #7
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	001c      	movs	r4, r3
 80035d4:	230f      	movs	r3, #15
 80035d6:	4023      	ands	r3, r4
 80035d8:	3b08      	subs	r3, #8
 80035da:	089b      	lsrs	r3, r3, #2
 80035dc:	430a      	orrs	r2, r1
 80035de:	3306      	adds	r3, #6
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	18c3      	adds	r3, r0, r3
 80035e4:	3304      	adds	r3, #4
 80035e6:	601a      	str	r2, [r3, #0]
}
 80035e8:	46c0      	nop			; (mov r8, r8)
 80035ea:	46bd      	mov	sp, r7
 80035ec:	b003      	add	sp, #12
 80035ee:	bd90      	pop	{r4, r7, pc}
 80035f0:	e000e100 	.word	0xe000e100
 80035f4:	e000ed00 	.word	0xe000ed00

080035f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	1e5a      	subs	r2, r3, #1
 8003604:	2380      	movs	r3, #128	; 0x80
 8003606:	045b      	lsls	r3, r3, #17
 8003608:	429a      	cmp	r2, r3
 800360a:	d301      	bcc.n	8003610 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800360c:	2301      	movs	r3, #1
 800360e:	e010      	b.n	8003632 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003610:	4b0a      	ldr	r3, [pc, #40]	; (800363c <SysTick_Config+0x44>)
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	3a01      	subs	r2, #1
 8003616:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003618:	2301      	movs	r3, #1
 800361a:	425b      	negs	r3, r3
 800361c:	2103      	movs	r1, #3
 800361e:	0018      	movs	r0, r3
 8003620:	f7ff ff7c 	bl	800351c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003624:	4b05      	ldr	r3, [pc, #20]	; (800363c <SysTick_Config+0x44>)
 8003626:	2200      	movs	r2, #0
 8003628:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800362a:	4b04      	ldr	r3, [pc, #16]	; (800363c <SysTick_Config+0x44>)
 800362c:	2207      	movs	r2, #7
 800362e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003630:	2300      	movs	r3, #0
}
 8003632:	0018      	movs	r0, r3
 8003634:	46bd      	mov	sp, r7
 8003636:	b002      	add	sp, #8
 8003638:	bd80      	pop	{r7, pc}
 800363a:	46c0      	nop			; (mov r8, r8)
 800363c:	e000e010 	.word	0xe000e010

08003640 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	60b9      	str	r1, [r7, #8]
 8003648:	607a      	str	r2, [r7, #4]
 800364a:	210f      	movs	r1, #15
 800364c:	187b      	adds	r3, r7, r1
 800364e:	1c02      	adds	r2, r0, #0
 8003650:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	187b      	adds	r3, r7, r1
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	b25b      	sxtb	r3, r3
 800365a:	0011      	movs	r1, r2
 800365c:	0018      	movs	r0, r3
 800365e:	f7ff ff5d 	bl	800351c <__NVIC_SetPriority>
}
 8003662:	46c0      	nop			; (mov r8, r8)
 8003664:	46bd      	mov	sp, r7
 8003666:	b004      	add	sp, #16
 8003668:	bd80      	pop	{r7, pc}

0800366a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b082      	sub	sp, #8
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	0018      	movs	r0, r3
 8003676:	f7ff ffbf 	bl	80035f8 <SysTick_Config>
 800367a:	0003      	movs	r3, r0
}
 800367c:	0018      	movs	r0, r3
 800367e:	46bd      	mov	sp, r7
 8003680:	b002      	add	sp, #8
 8003682:	bd80      	pop	{r7, pc}

08003684 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800368e:	2300      	movs	r3, #0
 8003690:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003692:	e147      	b.n	8003924 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2101      	movs	r1, #1
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	4091      	lsls	r1, r2
 800369e:	000a      	movs	r2, r1
 80036a0:	4013      	ands	r3, r2
 80036a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d100      	bne.n	80036ac <HAL_GPIO_Init+0x28>
 80036aa:	e138      	b.n	800391e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	2203      	movs	r2, #3
 80036b2:	4013      	ands	r3, r2
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d005      	beq.n	80036c4 <HAL_GPIO_Init+0x40>
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	2203      	movs	r2, #3
 80036be:	4013      	ands	r3, r2
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d130      	bne.n	8003726 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	2203      	movs	r2, #3
 80036d0:	409a      	lsls	r2, r3
 80036d2:	0013      	movs	r3, r2
 80036d4:	43da      	mvns	r2, r3
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	4013      	ands	r3, r2
 80036da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	68da      	ldr	r2, [r3, #12]
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	409a      	lsls	r2, r3
 80036e6:	0013      	movs	r3, r2
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80036fa:	2201      	movs	r2, #1
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	409a      	lsls	r2, r3
 8003700:	0013      	movs	r3, r2
 8003702:	43da      	mvns	r2, r3
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	4013      	ands	r3, r2
 8003708:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	091b      	lsrs	r3, r3, #4
 8003710:	2201      	movs	r2, #1
 8003712:	401a      	ands	r2, r3
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	409a      	lsls	r2, r3
 8003718:	0013      	movs	r3, r2
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	4313      	orrs	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2203      	movs	r2, #3
 800372c:	4013      	ands	r3, r2
 800372e:	2b03      	cmp	r3, #3
 8003730:	d017      	beq.n	8003762 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	2203      	movs	r2, #3
 800373e:	409a      	lsls	r2, r3
 8003740:	0013      	movs	r3, r2
 8003742:	43da      	mvns	r2, r3
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	4013      	ands	r3, r2
 8003748:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	689a      	ldr	r2, [r3, #8]
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	409a      	lsls	r2, r3
 8003754:	0013      	movs	r3, r2
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	4313      	orrs	r3, r2
 800375a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	2203      	movs	r2, #3
 8003768:	4013      	ands	r3, r2
 800376a:	2b02      	cmp	r3, #2
 800376c:	d123      	bne.n	80037b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	08da      	lsrs	r2, r3, #3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	3208      	adds	r2, #8
 8003776:	0092      	lsls	r2, r2, #2
 8003778:	58d3      	ldr	r3, [r2, r3]
 800377a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	2207      	movs	r2, #7
 8003780:	4013      	ands	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	220f      	movs	r2, #15
 8003786:	409a      	lsls	r2, r3
 8003788:	0013      	movs	r3, r2
 800378a:	43da      	mvns	r2, r3
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	4013      	ands	r3, r2
 8003790:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	691a      	ldr	r2, [r3, #16]
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	2107      	movs	r1, #7
 800379a:	400b      	ands	r3, r1
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	409a      	lsls	r2, r3
 80037a0:	0013      	movs	r3, r2
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	08da      	lsrs	r2, r3, #3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	3208      	adds	r2, #8
 80037b0:	0092      	lsls	r2, r2, #2
 80037b2:	6939      	ldr	r1, [r7, #16]
 80037b4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	2203      	movs	r2, #3
 80037c2:	409a      	lsls	r2, r3
 80037c4:	0013      	movs	r3, r2
 80037c6:	43da      	mvns	r2, r3
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	4013      	ands	r3, r2
 80037cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	2203      	movs	r2, #3
 80037d4:	401a      	ands	r2, r3
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	409a      	lsls	r2, r3
 80037dc:	0013      	movs	r3, r2
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	23c0      	movs	r3, #192	; 0xc0
 80037f0:	029b      	lsls	r3, r3, #10
 80037f2:	4013      	ands	r3, r2
 80037f4:	d100      	bne.n	80037f8 <HAL_GPIO_Init+0x174>
 80037f6:	e092      	b.n	800391e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80037f8:	4a50      	ldr	r2, [pc, #320]	; (800393c <HAL_GPIO_Init+0x2b8>)
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	089b      	lsrs	r3, r3, #2
 80037fe:	3318      	adds	r3, #24
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	589b      	ldr	r3, [r3, r2]
 8003804:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	2203      	movs	r2, #3
 800380a:	4013      	ands	r3, r2
 800380c:	00db      	lsls	r3, r3, #3
 800380e:	220f      	movs	r2, #15
 8003810:	409a      	lsls	r2, r3
 8003812:	0013      	movs	r3, r2
 8003814:	43da      	mvns	r2, r3
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	4013      	ands	r3, r2
 800381a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	23a0      	movs	r3, #160	; 0xa0
 8003820:	05db      	lsls	r3, r3, #23
 8003822:	429a      	cmp	r2, r3
 8003824:	d013      	beq.n	800384e <HAL_GPIO_Init+0x1ca>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a45      	ldr	r2, [pc, #276]	; (8003940 <HAL_GPIO_Init+0x2bc>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d00d      	beq.n	800384a <HAL_GPIO_Init+0x1c6>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a44      	ldr	r2, [pc, #272]	; (8003944 <HAL_GPIO_Init+0x2c0>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d007      	beq.n	8003846 <HAL_GPIO_Init+0x1c2>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a43      	ldr	r2, [pc, #268]	; (8003948 <HAL_GPIO_Init+0x2c4>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d101      	bne.n	8003842 <HAL_GPIO_Init+0x1be>
 800383e:	2303      	movs	r3, #3
 8003840:	e006      	b.n	8003850 <HAL_GPIO_Init+0x1cc>
 8003842:	2305      	movs	r3, #5
 8003844:	e004      	b.n	8003850 <HAL_GPIO_Init+0x1cc>
 8003846:	2302      	movs	r3, #2
 8003848:	e002      	b.n	8003850 <HAL_GPIO_Init+0x1cc>
 800384a:	2301      	movs	r3, #1
 800384c:	e000      	b.n	8003850 <HAL_GPIO_Init+0x1cc>
 800384e:	2300      	movs	r3, #0
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	2103      	movs	r1, #3
 8003854:	400a      	ands	r2, r1
 8003856:	00d2      	lsls	r2, r2, #3
 8003858:	4093      	lsls	r3, r2
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	4313      	orrs	r3, r2
 800385e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003860:	4936      	ldr	r1, [pc, #216]	; (800393c <HAL_GPIO_Init+0x2b8>)
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	089b      	lsrs	r3, r3, #2
 8003866:	3318      	adds	r3, #24
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800386e:	4b33      	ldr	r3, [pc, #204]	; (800393c <HAL_GPIO_Init+0x2b8>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	43da      	mvns	r2, r3
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	4013      	ands	r3, r2
 800387c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	2380      	movs	r3, #128	; 0x80
 8003884:	035b      	lsls	r3, r3, #13
 8003886:	4013      	ands	r3, r2
 8003888:	d003      	beq.n	8003892 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	4313      	orrs	r3, r2
 8003890:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003892:	4b2a      	ldr	r3, [pc, #168]	; (800393c <HAL_GPIO_Init+0x2b8>)
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003898:	4b28      	ldr	r3, [pc, #160]	; (800393c <HAL_GPIO_Init+0x2b8>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	43da      	mvns	r2, r3
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	4013      	ands	r3, r2
 80038a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	2380      	movs	r3, #128	; 0x80
 80038ae:	039b      	lsls	r3, r3, #14
 80038b0:	4013      	ands	r3, r2
 80038b2:	d003      	beq.n	80038bc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80038bc:	4b1f      	ldr	r3, [pc, #124]	; (800393c <HAL_GPIO_Init+0x2b8>)
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80038c2:	4a1e      	ldr	r2, [pc, #120]	; (800393c <HAL_GPIO_Init+0x2b8>)
 80038c4:	2384      	movs	r3, #132	; 0x84
 80038c6:	58d3      	ldr	r3, [r2, r3]
 80038c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	43da      	mvns	r2, r3
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	4013      	ands	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	2380      	movs	r3, #128	; 0x80
 80038da:	029b      	lsls	r3, r3, #10
 80038dc:	4013      	ands	r3, r2
 80038de:	d003      	beq.n	80038e8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80038e8:	4914      	ldr	r1, [pc, #80]	; (800393c <HAL_GPIO_Init+0x2b8>)
 80038ea:	2284      	movs	r2, #132	; 0x84
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80038f0:	4a12      	ldr	r2, [pc, #72]	; (800393c <HAL_GPIO_Init+0x2b8>)
 80038f2:	2380      	movs	r3, #128	; 0x80
 80038f4:	58d3      	ldr	r3, [r2, r3]
 80038f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	43da      	mvns	r2, r3
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	4013      	ands	r3, r2
 8003900:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685a      	ldr	r2, [r3, #4]
 8003906:	2380      	movs	r3, #128	; 0x80
 8003908:	025b      	lsls	r3, r3, #9
 800390a:	4013      	ands	r3, r2
 800390c:	d003      	beq.n	8003916 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	4313      	orrs	r3, r2
 8003914:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003916:	4909      	ldr	r1, [pc, #36]	; (800393c <HAL_GPIO_Init+0x2b8>)
 8003918:	2280      	movs	r2, #128	; 0x80
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	3301      	adds	r3, #1
 8003922:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	40da      	lsrs	r2, r3
 800392c:	1e13      	subs	r3, r2, #0
 800392e:	d000      	beq.n	8003932 <HAL_GPIO_Init+0x2ae>
 8003930:	e6b0      	b.n	8003694 <HAL_GPIO_Init+0x10>
  }
}
 8003932:	46c0      	nop			; (mov r8, r8)
 8003934:	46c0      	nop			; (mov r8, r8)
 8003936:	46bd      	mov	sp, r7
 8003938:	b006      	add	sp, #24
 800393a:	bd80      	pop	{r7, pc}
 800393c:	40021800 	.word	0x40021800
 8003940:	50000400 	.word	0x50000400
 8003944:	50000800 	.word	0x50000800
 8003948:	50000c00 	.word	0x50000c00

0800394c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	0008      	movs	r0, r1
 8003956:	0011      	movs	r1, r2
 8003958:	1cbb      	adds	r3, r7, #2
 800395a:	1c02      	adds	r2, r0, #0
 800395c:	801a      	strh	r2, [r3, #0]
 800395e:	1c7b      	adds	r3, r7, #1
 8003960:	1c0a      	adds	r2, r1, #0
 8003962:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003964:	1c7b      	adds	r3, r7, #1
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d004      	beq.n	8003976 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800396c:	1cbb      	adds	r3, r7, #2
 800396e:	881a      	ldrh	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003974:	e003      	b.n	800397e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003976:	1cbb      	adds	r3, r7, #2
 8003978:	881a      	ldrh	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800397e:	46c0      	nop			; (mov r8, r8)
 8003980:	46bd      	mov	sp, r7
 8003982:	b002      	add	sp, #8
 8003984:	bd80      	pop	{r7, pc}
	...

08003988 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003990:	4b19      	ldr	r3, [pc, #100]	; (80039f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a19      	ldr	r2, [pc, #100]	; (80039fc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003996:	4013      	ands	r3, r2
 8003998:	0019      	movs	r1, r3
 800399a:	4b17      	ldr	r3, [pc, #92]	; (80039f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	430a      	orrs	r2, r1
 80039a0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	2380      	movs	r3, #128	; 0x80
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d11f      	bne.n	80039ec <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80039ac:	4b14      	ldr	r3, [pc, #80]	; (8003a00 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	0013      	movs	r3, r2
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	189b      	adds	r3, r3, r2
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	4912      	ldr	r1, [pc, #72]	; (8003a04 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80039ba:	0018      	movs	r0, r3
 80039bc:	f7fc fbbe 	bl	800013c <__udivsi3>
 80039c0:	0003      	movs	r3, r0
 80039c2:	3301      	adds	r3, #1
 80039c4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039c6:	e008      	b.n	80039da <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	3b01      	subs	r3, #1
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	e001      	b.n	80039da <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e009      	b.n	80039ee <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039da:	4b07      	ldr	r3, [pc, #28]	; (80039f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80039dc:	695a      	ldr	r2, [r3, #20]
 80039de:	2380      	movs	r3, #128	; 0x80
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	401a      	ands	r2, r3
 80039e4:	2380      	movs	r3, #128	; 0x80
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d0ed      	beq.n	80039c8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	0018      	movs	r0, r3
 80039f0:	46bd      	mov	sp, r7
 80039f2:	b004      	add	sp, #16
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	46c0      	nop			; (mov r8, r8)
 80039f8:	40007000 	.word	0x40007000
 80039fc:	fffff9ff 	.word	0xfffff9ff
 8003a00:	20000000 	.word	0x20000000
 8003a04:	000f4240 	.word	0x000f4240

08003a08 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003a0c:	4b03      	ldr	r3, [pc, #12]	; (8003a1c <LL_RCC_GetAPB1Prescaler+0x14>)
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	23e0      	movs	r3, #224	; 0xe0
 8003a12:	01db      	lsls	r3, r3, #7
 8003a14:	4013      	ands	r3, r2
}
 8003a16:	0018      	movs	r0, r3
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40021000 	.word	0x40021000

08003a20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b088      	sub	sp, #32
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e2fe      	b.n	8004030 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2201      	movs	r2, #1
 8003a38:	4013      	ands	r3, r2
 8003a3a:	d100      	bne.n	8003a3e <HAL_RCC_OscConfig+0x1e>
 8003a3c:	e07c      	b.n	8003b38 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a3e:	4bc3      	ldr	r3, [pc, #780]	; (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	2238      	movs	r2, #56	; 0x38
 8003a44:	4013      	ands	r3, r2
 8003a46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a48:	4bc0      	ldr	r3, [pc, #768]	; (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	2203      	movs	r2, #3
 8003a4e:	4013      	ands	r3, r2
 8003a50:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	2b10      	cmp	r3, #16
 8003a56:	d102      	bne.n	8003a5e <HAL_RCC_OscConfig+0x3e>
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	2b03      	cmp	r3, #3
 8003a5c:	d002      	beq.n	8003a64 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	2b08      	cmp	r3, #8
 8003a62:	d10b      	bne.n	8003a7c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a64:	4bb9      	ldr	r3, [pc, #740]	; (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	2380      	movs	r3, #128	; 0x80
 8003a6a:	029b      	lsls	r3, r3, #10
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	d062      	beq.n	8003b36 <HAL_RCC_OscConfig+0x116>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d15e      	bne.n	8003b36 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e2d9      	b.n	8004030 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	2380      	movs	r3, #128	; 0x80
 8003a82:	025b      	lsls	r3, r3, #9
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d107      	bne.n	8003a98 <HAL_RCC_OscConfig+0x78>
 8003a88:	4bb0      	ldr	r3, [pc, #704]	; (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	4baf      	ldr	r3, [pc, #700]	; (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003a8e:	2180      	movs	r1, #128	; 0x80
 8003a90:	0249      	lsls	r1, r1, #9
 8003a92:	430a      	orrs	r2, r1
 8003a94:	601a      	str	r2, [r3, #0]
 8003a96:	e020      	b.n	8003ada <HAL_RCC_OscConfig+0xba>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	23a0      	movs	r3, #160	; 0xa0
 8003a9e:	02db      	lsls	r3, r3, #11
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d10e      	bne.n	8003ac2 <HAL_RCC_OscConfig+0xa2>
 8003aa4:	4ba9      	ldr	r3, [pc, #676]	; (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	4ba8      	ldr	r3, [pc, #672]	; (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003aaa:	2180      	movs	r1, #128	; 0x80
 8003aac:	02c9      	lsls	r1, r1, #11
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	4ba6      	ldr	r3, [pc, #664]	; (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	4ba5      	ldr	r3, [pc, #660]	; (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003ab8:	2180      	movs	r1, #128	; 0x80
 8003aba:	0249      	lsls	r1, r1, #9
 8003abc:	430a      	orrs	r2, r1
 8003abe:	601a      	str	r2, [r3, #0]
 8003ac0:	e00b      	b.n	8003ada <HAL_RCC_OscConfig+0xba>
 8003ac2:	4ba2      	ldr	r3, [pc, #648]	; (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	4ba1      	ldr	r3, [pc, #644]	; (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003ac8:	49a1      	ldr	r1, [pc, #644]	; (8003d50 <HAL_RCC_OscConfig+0x330>)
 8003aca:	400a      	ands	r2, r1
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	4b9f      	ldr	r3, [pc, #636]	; (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	4b9e      	ldr	r3, [pc, #632]	; (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003ad4:	499f      	ldr	r1, [pc, #636]	; (8003d54 <HAL_RCC_OscConfig+0x334>)
 8003ad6:	400a      	ands	r2, r1
 8003ad8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d014      	beq.n	8003b0c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae2:	f7ff fd11 	bl	8003508 <HAL_GetTick>
 8003ae6:	0003      	movs	r3, r0
 8003ae8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aec:	f7ff fd0c 	bl	8003508 <HAL_GetTick>
 8003af0:	0002      	movs	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b64      	cmp	r3, #100	; 0x64
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e298      	b.n	8004030 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003afe:	4b93      	ldr	r3, [pc, #588]	; (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	2380      	movs	r3, #128	; 0x80
 8003b04:	029b      	lsls	r3, r3, #10
 8003b06:	4013      	ands	r3, r2
 8003b08:	d0f0      	beq.n	8003aec <HAL_RCC_OscConfig+0xcc>
 8003b0a:	e015      	b.n	8003b38 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0c:	f7ff fcfc 	bl	8003508 <HAL_GetTick>
 8003b10:	0003      	movs	r3, r0
 8003b12:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b14:	e008      	b.n	8003b28 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b16:	f7ff fcf7 	bl	8003508 <HAL_GetTick>
 8003b1a:	0002      	movs	r2, r0
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b64      	cmp	r3, #100	; 0x64
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e283      	b.n	8004030 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b28:	4b88      	ldr	r3, [pc, #544]	; (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	2380      	movs	r3, #128	; 0x80
 8003b2e:	029b      	lsls	r3, r3, #10
 8003b30:	4013      	ands	r3, r2
 8003b32:	d1f0      	bne.n	8003b16 <HAL_RCC_OscConfig+0xf6>
 8003b34:	e000      	b.n	8003b38 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b36:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2202      	movs	r2, #2
 8003b3e:	4013      	ands	r3, r2
 8003b40:	d100      	bne.n	8003b44 <HAL_RCC_OscConfig+0x124>
 8003b42:	e099      	b.n	8003c78 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b44:	4b81      	ldr	r3, [pc, #516]	; (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	2238      	movs	r2, #56	; 0x38
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b4e:	4b7f      	ldr	r3, [pc, #508]	; (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	2203      	movs	r2, #3
 8003b54:	4013      	ands	r3, r2
 8003b56:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	2b10      	cmp	r3, #16
 8003b5c:	d102      	bne.n	8003b64 <HAL_RCC_OscConfig+0x144>
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d002      	beq.n	8003b6a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d135      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b6a:	4b78      	ldr	r3, [pc, #480]	; (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	2380      	movs	r3, #128	; 0x80
 8003b70:	00db      	lsls	r3, r3, #3
 8003b72:	4013      	ands	r3, r2
 8003b74:	d005      	beq.n	8003b82 <HAL_RCC_OscConfig+0x162>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e256      	b.n	8004030 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b82:	4b72      	ldr	r3, [pc, #456]	; (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	4a74      	ldr	r2, [pc, #464]	; (8003d58 <HAL_RCC_OscConfig+0x338>)
 8003b88:	4013      	ands	r3, r2
 8003b8a:	0019      	movs	r1, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	695b      	ldr	r3, [r3, #20]
 8003b90:	021a      	lsls	r2, r3, #8
 8003b92:	4b6e      	ldr	r3, [pc, #440]	; (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003b94:	430a      	orrs	r2, r1
 8003b96:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d112      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003b9e:	4b6b      	ldr	r3, [pc, #428]	; (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a6e      	ldr	r2, [pc, #440]	; (8003d5c <HAL_RCC_OscConfig+0x33c>)
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	0019      	movs	r1, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	691a      	ldr	r2, [r3, #16]
 8003bac:	4b67      	ldr	r3, [pc, #412]	; (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003bb2:	4b66      	ldr	r3, [pc, #408]	; (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	0adb      	lsrs	r3, r3, #11
 8003bb8:	2207      	movs	r2, #7
 8003bba:	4013      	ands	r3, r2
 8003bbc:	4a68      	ldr	r2, [pc, #416]	; (8003d60 <HAL_RCC_OscConfig+0x340>)
 8003bbe:	40da      	lsrs	r2, r3
 8003bc0:	4b68      	ldr	r3, [pc, #416]	; (8003d64 <HAL_RCC_OscConfig+0x344>)
 8003bc2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003bc4:	4b68      	ldr	r3, [pc, #416]	; (8003d68 <HAL_RCC_OscConfig+0x348>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	0018      	movs	r0, r3
 8003bca:	f7ff fc41 	bl	8003450 <HAL_InitTick>
 8003bce:	1e03      	subs	r3, r0, #0
 8003bd0:	d051      	beq.n	8003c76 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e22c      	b.n	8004030 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d030      	beq.n	8003c40 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003bde:	4b5b      	ldr	r3, [pc, #364]	; (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a5e      	ldr	r2, [pc, #376]	; (8003d5c <HAL_RCC_OscConfig+0x33c>)
 8003be4:	4013      	ands	r3, r2
 8003be6:	0019      	movs	r1, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	691a      	ldr	r2, [r3, #16]
 8003bec:	4b57      	ldr	r3, [pc, #348]	; (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003bf2:	4b56      	ldr	r3, [pc, #344]	; (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	4b55      	ldr	r3, [pc, #340]	; (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003bf8:	2180      	movs	r1, #128	; 0x80
 8003bfa:	0049      	lsls	r1, r1, #1
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c00:	f7ff fc82 	bl	8003508 <HAL_GetTick>
 8003c04:	0003      	movs	r3, r0
 8003c06:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c08:	e008      	b.n	8003c1c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c0a:	f7ff fc7d 	bl	8003508 <HAL_GetTick>
 8003c0e:	0002      	movs	r2, r0
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e209      	b.n	8004030 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c1c:	4b4b      	ldr	r3, [pc, #300]	; (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	2380      	movs	r3, #128	; 0x80
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	4013      	ands	r3, r2
 8003c26:	d0f0      	beq.n	8003c0a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c28:	4b48      	ldr	r3, [pc, #288]	; (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	4a4a      	ldr	r2, [pc, #296]	; (8003d58 <HAL_RCC_OscConfig+0x338>)
 8003c2e:	4013      	ands	r3, r2
 8003c30:	0019      	movs	r1, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	021a      	lsls	r2, r3, #8
 8003c38:	4b44      	ldr	r3, [pc, #272]	; (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	605a      	str	r2, [r3, #4]
 8003c3e:	e01b      	b.n	8003c78 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003c40:	4b42      	ldr	r3, [pc, #264]	; (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	4b41      	ldr	r3, [pc, #260]	; (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003c46:	4949      	ldr	r1, [pc, #292]	; (8003d6c <HAL_RCC_OscConfig+0x34c>)
 8003c48:	400a      	ands	r2, r1
 8003c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c4c:	f7ff fc5c 	bl	8003508 <HAL_GetTick>
 8003c50:	0003      	movs	r3, r0
 8003c52:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c54:	e008      	b.n	8003c68 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c56:	f7ff fc57 	bl	8003508 <HAL_GetTick>
 8003c5a:	0002      	movs	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e1e3      	b.n	8004030 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c68:	4b38      	ldr	r3, [pc, #224]	; (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	2380      	movs	r3, #128	; 0x80
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	4013      	ands	r3, r2
 8003c72:	d1f0      	bne.n	8003c56 <HAL_RCC_OscConfig+0x236>
 8003c74:	e000      	b.n	8003c78 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c76:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2208      	movs	r2, #8
 8003c7e:	4013      	ands	r3, r2
 8003c80:	d047      	beq.n	8003d12 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003c82:	4b32      	ldr	r3, [pc, #200]	; (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	2238      	movs	r2, #56	; 0x38
 8003c88:	4013      	ands	r3, r2
 8003c8a:	2b18      	cmp	r3, #24
 8003c8c:	d10a      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003c8e:	4b2f      	ldr	r3, [pc, #188]	; (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c92:	2202      	movs	r2, #2
 8003c94:	4013      	ands	r3, r2
 8003c96:	d03c      	beq.n	8003d12 <HAL_RCC_OscConfig+0x2f2>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d138      	bne.n	8003d12 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e1c5      	b.n	8004030 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d019      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003cac:	4b27      	ldr	r3, [pc, #156]	; (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003cae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003cb0:	4b26      	ldr	r3, [pc, #152]	; (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb8:	f7ff fc26 	bl	8003508 <HAL_GetTick>
 8003cbc:	0003      	movs	r3, r0
 8003cbe:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cc0:	e008      	b.n	8003cd4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cc2:	f7ff fc21 	bl	8003508 <HAL_GetTick>
 8003cc6:	0002      	movs	r2, r0
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e1ad      	b.n	8004030 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cd4:	4b1d      	ldr	r3, [pc, #116]	; (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003cd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cd8:	2202      	movs	r2, #2
 8003cda:	4013      	ands	r3, r2
 8003cdc:	d0f1      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x2a2>
 8003cde:	e018      	b.n	8003d12 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003ce0:	4b1a      	ldr	r3, [pc, #104]	; (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003ce2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ce4:	4b19      	ldr	r3, [pc, #100]	; (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	438a      	bics	r2, r1
 8003cea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cec:	f7ff fc0c 	bl	8003508 <HAL_GetTick>
 8003cf0:	0003      	movs	r3, r0
 8003cf2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cf4:	e008      	b.n	8003d08 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cf6:	f7ff fc07 	bl	8003508 <HAL_GetTick>
 8003cfa:	0002      	movs	r2, r0
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d901      	bls.n	8003d08 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e193      	b.n	8004030 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d08:	4b10      	ldr	r3, [pc, #64]	; (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003d0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d0c:	2202      	movs	r2, #2
 8003d0e:	4013      	ands	r3, r2
 8003d10:	d1f1      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2204      	movs	r2, #4
 8003d18:	4013      	ands	r3, r2
 8003d1a:	d100      	bne.n	8003d1e <HAL_RCC_OscConfig+0x2fe>
 8003d1c:	e0c6      	b.n	8003eac <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d1e:	231f      	movs	r3, #31
 8003d20:	18fb      	adds	r3, r7, r3
 8003d22:	2200      	movs	r2, #0
 8003d24:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003d26:	4b09      	ldr	r3, [pc, #36]	; (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	2238      	movs	r2, #56	; 0x38
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	2b20      	cmp	r3, #32
 8003d30:	d11e      	bne.n	8003d70 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003d32:	4b06      	ldr	r3, [pc, #24]	; (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d36:	2202      	movs	r2, #2
 8003d38:	4013      	ands	r3, r2
 8003d3a:	d100      	bne.n	8003d3e <HAL_RCC_OscConfig+0x31e>
 8003d3c:	e0b6      	b.n	8003eac <HAL_RCC_OscConfig+0x48c>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d000      	beq.n	8003d48 <HAL_RCC_OscConfig+0x328>
 8003d46:	e0b1      	b.n	8003eac <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e171      	b.n	8004030 <HAL_RCC_OscConfig+0x610>
 8003d4c:	40021000 	.word	0x40021000
 8003d50:	fffeffff 	.word	0xfffeffff
 8003d54:	fffbffff 	.word	0xfffbffff
 8003d58:	ffff80ff 	.word	0xffff80ff
 8003d5c:	ffffc7ff 	.word	0xffffc7ff
 8003d60:	00f42400 	.word	0x00f42400
 8003d64:	20000000 	.word	0x20000000
 8003d68:	20000004 	.word	0x20000004
 8003d6c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d70:	4bb1      	ldr	r3, [pc, #708]	; (8004038 <HAL_RCC_OscConfig+0x618>)
 8003d72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d74:	2380      	movs	r3, #128	; 0x80
 8003d76:	055b      	lsls	r3, r3, #21
 8003d78:	4013      	ands	r3, r2
 8003d7a:	d101      	bne.n	8003d80 <HAL_RCC_OscConfig+0x360>
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e000      	b.n	8003d82 <HAL_RCC_OscConfig+0x362>
 8003d80:	2300      	movs	r3, #0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d011      	beq.n	8003daa <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003d86:	4bac      	ldr	r3, [pc, #688]	; (8004038 <HAL_RCC_OscConfig+0x618>)
 8003d88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d8a:	4bab      	ldr	r3, [pc, #684]	; (8004038 <HAL_RCC_OscConfig+0x618>)
 8003d8c:	2180      	movs	r1, #128	; 0x80
 8003d8e:	0549      	lsls	r1, r1, #21
 8003d90:	430a      	orrs	r2, r1
 8003d92:	63da      	str	r2, [r3, #60]	; 0x3c
 8003d94:	4ba8      	ldr	r3, [pc, #672]	; (8004038 <HAL_RCC_OscConfig+0x618>)
 8003d96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d98:	2380      	movs	r3, #128	; 0x80
 8003d9a:	055b      	lsls	r3, r3, #21
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003da2:	231f      	movs	r3, #31
 8003da4:	18fb      	adds	r3, r7, r3
 8003da6:	2201      	movs	r2, #1
 8003da8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003daa:	4ba4      	ldr	r3, [pc, #656]	; (800403c <HAL_RCC_OscConfig+0x61c>)
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	2380      	movs	r3, #128	; 0x80
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	4013      	ands	r3, r2
 8003db4:	d11a      	bne.n	8003dec <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003db6:	4ba1      	ldr	r3, [pc, #644]	; (800403c <HAL_RCC_OscConfig+0x61c>)
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	4ba0      	ldr	r3, [pc, #640]	; (800403c <HAL_RCC_OscConfig+0x61c>)
 8003dbc:	2180      	movs	r1, #128	; 0x80
 8003dbe:	0049      	lsls	r1, r1, #1
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003dc4:	f7ff fba0 	bl	8003508 <HAL_GetTick>
 8003dc8:	0003      	movs	r3, r0
 8003dca:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dcc:	e008      	b.n	8003de0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dce:	f7ff fb9b 	bl	8003508 <HAL_GetTick>
 8003dd2:	0002      	movs	r2, r0
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e127      	b.n	8004030 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003de0:	4b96      	ldr	r3, [pc, #600]	; (800403c <HAL_RCC_OscConfig+0x61c>)
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	2380      	movs	r3, #128	; 0x80
 8003de6:	005b      	lsls	r3, r3, #1
 8003de8:	4013      	ands	r3, r2
 8003dea:	d0f0      	beq.n	8003dce <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d106      	bne.n	8003e02 <HAL_RCC_OscConfig+0x3e2>
 8003df4:	4b90      	ldr	r3, [pc, #576]	; (8004038 <HAL_RCC_OscConfig+0x618>)
 8003df6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003df8:	4b8f      	ldr	r3, [pc, #572]	; (8004038 <HAL_RCC_OscConfig+0x618>)
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	65da      	str	r2, [r3, #92]	; 0x5c
 8003e00:	e01c      	b.n	8003e3c <HAL_RCC_OscConfig+0x41c>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	2b05      	cmp	r3, #5
 8003e08:	d10c      	bne.n	8003e24 <HAL_RCC_OscConfig+0x404>
 8003e0a:	4b8b      	ldr	r3, [pc, #556]	; (8004038 <HAL_RCC_OscConfig+0x618>)
 8003e0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e0e:	4b8a      	ldr	r3, [pc, #552]	; (8004038 <HAL_RCC_OscConfig+0x618>)
 8003e10:	2104      	movs	r1, #4
 8003e12:	430a      	orrs	r2, r1
 8003e14:	65da      	str	r2, [r3, #92]	; 0x5c
 8003e16:	4b88      	ldr	r3, [pc, #544]	; (8004038 <HAL_RCC_OscConfig+0x618>)
 8003e18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e1a:	4b87      	ldr	r3, [pc, #540]	; (8004038 <HAL_RCC_OscConfig+0x618>)
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	65da      	str	r2, [r3, #92]	; 0x5c
 8003e22:	e00b      	b.n	8003e3c <HAL_RCC_OscConfig+0x41c>
 8003e24:	4b84      	ldr	r3, [pc, #528]	; (8004038 <HAL_RCC_OscConfig+0x618>)
 8003e26:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e28:	4b83      	ldr	r3, [pc, #524]	; (8004038 <HAL_RCC_OscConfig+0x618>)
 8003e2a:	2101      	movs	r1, #1
 8003e2c:	438a      	bics	r2, r1
 8003e2e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003e30:	4b81      	ldr	r3, [pc, #516]	; (8004038 <HAL_RCC_OscConfig+0x618>)
 8003e32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e34:	4b80      	ldr	r3, [pc, #512]	; (8004038 <HAL_RCC_OscConfig+0x618>)
 8003e36:	2104      	movs	r1, #4
 8003e38:	438a      	bics	r2, r1
 8003e3a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d014      	beq.n	8003e6e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e44:	f7ff fb60 	bl	8003508 <HAL_GetTick>
 8003e48:	0003      	movs	r3, r0
 8003e4a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e4c:	e009      	b.n	8003e62 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e4e:	f7ff fb5b 	bl	8003508 <HAL_GetTick>
 8003e52:	0002      	movs	r2, r0
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	4a79      	ldr	r2, [pc, #484]	; (8004040 <HAL_RCC_OscConfig+0x620>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e0e6      	b.n	8004030 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e62:	4b75      	ldr	r3, [pc, #468]	; (8004038 <HAL_RCC_OscConfig+0x618>)
 8003e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e66:	2202      	movs	r2, #2
 8003e68:	4013      	ands	r3, r2
 8003e6a:	d0f0      	beq.n	8003e4e <HAL_RCC_OscConfig+0x42e>
 8003e6c:	e013      	b.n	8003e96 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e6e:	f7ff fb4b 	bl	8003508 <HAL_GetTick>
 8003e72:	0003      	movs	r3, r0
 8003e74:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e76:	e009      	b.n	8003e8c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e78:	f7ff fb46 	bl	8003508 <HAL_GetTick>
 8003e7c:	0002      	movs	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	4a6f      	ldr	r2, [pc, #444]	; (8004040 <HAL_RCC_OscConfig+0x620>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e0d1      	b.n	8004030 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e8c:	4b6a      	ldr	r3, [pc, #424]	; (8004038 <HAL_RCC_OscConfig+0x618>)
 8003e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e90:	2202      	movs	r2, #2
 8003e92:	4013      	ands	r3, r2
 8003e94:	d1f0      	bne.n	8003e78 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003e96:	231f      	movs	r3, #31
 8003e98:	18fb      	adds	r3, r7, r3
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d105      	bne.n	8003eac <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003ea0:	4b65      	ldr	r3, [pc, #404]	; (8004038 <HAL_RCC_OscConfig+0x618>)
 8003ea2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ea4:	4b64      	ldr	r3, [pc, #400]	; (8004038 <HAL_RCC_OscConfig+0x618>)
 8003ea6:	4967      	ldr	r1, [pc, #412]	; (8004044 <HAL_RCC_OscConfig+0x624>)
 8003ea8:	400a      	ands	r2, r1
 8003eaa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	69db      	ldr	r3, [r3, #28]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d100      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x496>
 8003eb4:	e0bb      	b.n	800402e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003eb6:	4b60      	ldr	r3, [pc, #384]	; (8004038 <HAL_RCC_OscConfig+0x618>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	2238      	movs	r2, #56	; 0x38
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	2b10      	cmp	r3, #16
 8003ec0:	d100      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x4a4>
 8003ec2:	e07b      	b.n	8003fbc <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	69db      	ldr	r3, [r3, #28]
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d156      	bne.n	8003f7a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ecc:	4b5a      	ldr	r3, [pc, #360]	; (8004038 <HAL_RCC_OscConfig+0x618>)
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	4b59      	ldr	r3, [pc, #356]	; (8004038 <HAL_RCC_OscConfig+0x618>)
 8003ed2:	495d      	ldr	r1, [pc, #372]	; (8004048 <HAL_RCC_OscConfig+0x628>)
 8003ed4:	400a      	ands	r2, r1
 8003ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed8:	f7ff fb16 	bl	8003508 <HAL_GetTick>
 8003edc:	0003      	movs	r3, r0
 8003ede:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ee0:	e008      	b.n	8003ef4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee2:	f7ff fb11 	bl	8003508 <HAL_GetTick>
 8003ee6:	0002      	movs	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e09d      	b.n	8004030 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ef4:	4b50      	ldr	r3, [pc, #320]	; (8004038 <HAL_RCC_OscConfig+0x618>)
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	2380      	movs	r3, #128	; 0x80
 8003efa:	049b      	lsls	r3, r3, #18
 8003efc:	4013      	ands	r3, r2
 8003efe:	d1f0      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f00:	4b4d      	ldr	r3, [pc, #308]	; (8004038 <HAL_RCC_OscConfig+0x618>)
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	4a51      	ldr	r2, [pc, #324]	; (800404c <HAL_RCC_OscConfig+0x62c>)
 8003f06:	4013      	ands	r3, r2
 8003f08:	0019      	movs	r1, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1a      	ldr	r2, [r3, #32]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f12:	431a      	orrs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f18:	021b      	lsls	r3, r3, #8
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f20:	431a      	orrs	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	4b42      	ldr	r3, [pc, #264]	; (8004038 <HAL_RCC_OscConfig+0x618>)
 8003f30:	430a      	orrs	r2, r1
 8003f32:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f34:	4b40      	ldr	r3, [pc, #256]	; (8004038 <HAL_RCC_OscConfig+0x618>)
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	4b3f      	ldr	r3, [pc, #252]	; (8004038 <HAL_RCC_OscConfig+0x618>)
 8003f3a:	2180      	movs	r1, #128	; 0x80
 8003f3c:	0449      	lsls	r1, r1, #17
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003f42:	4b3d      	ldr	r3, [pc, #244]	; (8004038 <HAL_RCC_OscConfig+0x618>)
 8003f44:	68da      	ldr	r2, [r3, #12]
 8003f46:	4b3c      	ldr	r3, [pc, #240]	; (8004038 <HAL_RCC_OscConfig+0x618>)
 8003f48:	2180      	movs	r1, #128	; 0x80
 8003f4a:	0549      	lsls	r1, r1, #21
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f50:	f7ff fada 	bl	8003508 <HAL_GetTick>
 8003f54:	0003      	movs	r3, r0
 8003f56:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f5a:	f7ff fad5 	bl	8003508 <HAL_GetTick>
 8003f5e:	0002      	movs	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e061      	b.n	8004030 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f6c:	4b32      	ldr	r3, [pc, #200]	; (8004038 <HAL_RCC_OscConfig+0x618>)
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	2380      	movs	r3, #128	; 0x80
 8003f72:	049b      	lsls	r3, r3, #18
 8003f74:	4013      	ands	r3, r2
 8003f76:	d0f0      	beq.n	8003f5a <HAL_RCC_OscConfig+0x53a>
 8003f78:	e059      	b.n	800402e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f7a:	4b2f      	ldr	r3, [pc, #188]	; (8004038 <HAL_RCC_OscConfig+0x618>)
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	4b2e      	ldr	r3, [pc, #184]	; (8004038 <HAL_RCC_OscConfig+0x618>)
 8003f80:	4931      	ldr	r1, [pc, #196]	; (8004048 <HAL_RCC_OscConfig+0x628>)
 8003f82:	400a      	ands	r2, r1
 8003f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f86:	f7ff fabf 	bl	8003508 <HAL_GetTick>
 8003f8a:	0003      	movs	r3, r0
 8003f8c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f90:	f7ff faba 	bl	8003508 <HAL_GetTick>
 8003f94:	0002      	movs	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e046      	b.n	8004030 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fa2:	4b25      	ldr	r3, [pc, #148]	; (8004038 <HAL_RCC_OscConfig+0x618>)
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	2380      	movs	r3, #128	; 0x80
 8003fa8:	049b      	lsls	r3, r3, #18
 8003faa:	4013      	ands	r3, r2
 8003fac:	d1f0      	bne.n	8003f90 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003fae:	4b22      	ldr	r3, [pc, #136]	; (8004038 <HAL_RCC_OscConfig+0x618>)
 8003fb0:	68da      	ldr	r2, [r3, #12]
 8003fb2:	4b21      	ldr	r3, [pc, #132]	; (8004038 <HAL_RCC_OscConfig+0x618>)
 8003fb4:	4926      	ldr	r1, [pc, #152]	; (8004050 <HAL_RCC_OscConfig+0x630>)
 8003fb6:	400a      	ands	r2, r1
 8003fb8:	60da      	str	r2, [r3, #12]
 8003fba:	e038      	b.n	800402e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	69db      	ldr	r3, [r3, #28]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d101      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e033      	b.n	8004030 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003fc8:	4b1b      	ldr	r3, [pc, #108]	; (8004038 <HAL_RCC_OscConfig+0x618>)
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	2203      	movs	r2, #3
 8003fd2:	401a      	ands	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d126      	bne.n	800402a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	2270      	movs	r2, #112	; 0x70
 8003fe0:	401a      	ands	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d11f      	bne.n	800402a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	23fe      	movs	r3, #254	; 0xfe
 8003fee:	01db      	lsls	r3, r3, #7
 8003ff0:	401a      	ands	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d116      	bne.n	800402a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	23f8      	movs	r3, #248	; 0xf8
 8004000:	039b      	lsls	r3, r3, #14
 8004002:	401a      	ands	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004008:	429a      	cmp	r2, r3
 800400a:	d10e      	bne.n	800402a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	23e0      	movs	r3, #224	; 0xe0
 8004010:	051b      	lsls	r3, r3, #20
 8004012:	401a      	ands	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004018:	429a      	cmp	r2, r3
 800401a:	d106      	bne.n	800402a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	0f5b      	lsrs	r3, r3, #29
 8004020:	075a      	lsls	r2, r3, #29
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004026:	429a      	cmp	r2, r3
 8004028:	d001      	beq.n	800402e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e000      	b.n	8004030 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	0018      	movs	r0, r3
 8004032:	46bd      	mov	sp, r7
 8004034:	b008      	add	sp, #32
 8004036:	bd80      	pop	{r7, pc}
 8004038:	40021000 	.word	0x40021000
 800403c:	40007000 	.word	0x40007000
 8004040:	00001388 	.word	0x00001388
 8004044:	efffffff 	.word	0xefffffff
 8004048:	feffffff 	.word	0xfeffffff
 800404c:	11c1808c 	.word	0x11c1808c
 8004050:	eefefffc 	.word	0xeefefffc

08004054 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d101      	bne.n	8004068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e0e9      	b.n	800423c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004068:	4b76      	ldr	r3, [pc, #472]	; (8004244 <HAL_RCC_ClockConfig+0x1f0>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2207      	movs	r2, #7
 800406e:	4013      	ands	r3, r2
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	429a      	cmp	r2, r3
 8004074:	d91e      	bls.n	80040b4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004076:	4b73      	ldr	r3, [pc, #460]	; (8004244 <HAL_RCC_ClockConfig+0x1f0>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2207      	movs	r2, #7
 800407c:	4393      	bics	r3, r2
 800407e:	0019      	movs	r1, r3
 8004080:	4b70      	ldr	r3, [pc, #448]	; (8004244 <HAL_RCC_ClockConfig+0x1f0>)
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004088:	f7ff fa3e 	bl	8003508 <HAL_GetTick>
 800408c:	0003      	movs	r3, r0
 800408e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004090:	e009      	b.n	80040a6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004092:	f7ff fa39 	bl	8003508 <HAL_GetTick>
 8004096:	0002      	movs	r2, r0
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	4a6a      	ldr	r2, [pc, #424]	; (8004248 <HAL_RCC_ClockConfig+0x1f4>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e0ca      	b.n	800423c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80040a6:	4b67      	ldr	r3, [pc, #412]	; (8004244 <HAL_RCC_ClockConfig+0x1f0>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2207      	movs	r2, #7
 80040ac:	4013      	ands	r3, r2
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d1ee      	bne.n	8004092 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2202      	movs	r2, #2
 80040ba:	4013      	ands	r3, r2
 80040bc:	d015      	beq.n	80040ea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2204      	movs	r2, #4
 80040c4:	4013      	ands	r3, r2
 80040c6:	d006      	beq.n	80040d6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80040c8:	4b60      	ldr	r3, [pc, #384]	; (800424c <HAL_RCC_ClockConfig+0x1f8>)
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	4b5f      	ldr	r3, [pc, #380]	; (800424c <HAL_RCC_ClockConfig+0x1f8>)
 80040ce:	21e0      	movs	r1, #224	; 0xe0
 80040d0:	01c9      	lsls	r1, r1, #7
 80040d2:	430a      	orrs	r2, r1
 80040d4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040d6:	4b5d      	ldr	r3, [pc, #372]	; (800424c <HAL_RCC_ClockConfig+0x1f8>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	4a5d      	ldr	r2, [pc, #372]	; (8004250 <HAL_RCC_ClockConfig+0x1fc>)
 80040dc:	4013      	ands	r3, r2
 80040de:	0019      	movs	r1, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689a      	ldr	r2, [r3, #8]
 80040e4:	4b59      	ldr	r3, [pc, #356]	; (800424c <HAL_RCC_ClockConfig+0x1f8>)
 80040e6:	430a      	orrs	r2, r1
 80040e8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2201      	movs	r2, #1
 80040f0:	4013      	ands	r3, r2
 80040f2:	d057      	beq.n	80041a4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d107      	bne.n	800410c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040fc:	4b53      	ldr	r3, [pc, #332]	; (800424c <HAL_RCC_ClockConfig+0x1f8>)
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	2380      	movs	r3, #128	; 0x80
 8004102:	029b      	lsls	r3, r3, #10
 8004104:	4013      	ands	r3, r2
 8004106:	d12b      	bne.n	8004160 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e097      	b.n	800423c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	2b02      	cmp	r3, #2
 8004112:	d107      	bne.n	8004124 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004114:	4b4d      	ldr	r3, [pc, #308]	; (800424c <HAL_RCC_ClockConfig+0x1f8>)
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	2380      	movs	r3, #128	; 0x80
 800411a:	049b      	lsls	r3, r3, #18
 800411c:	4013      	ands	r3, r2
 800411e:	d11f      	bne.n	8004160 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e08b      	b.n	800423c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d107      	bne.n	800413c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800412c:	4b47      	ldr	r3, [pc, #284]	; (800424c <HAL_RCC_ClockConfig+0x1f8>)
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	2380      	movs	r3, #128	; 0x80
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	4013      	ands	r3, r2
 8004136:	d113      	bne.n	8004160 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e07f      	b.n	800423c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	2b03      	cmp	r3, #3
 8004142:	d106      	bne.n	8004152 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004144:	4b41      	ldr	r3, [pc, #260]	; (800424c <HAL_RCC_ClockConfig+0x1f8>)
 8004146:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004148:	2202      	movs	r2, #2
 800414a:	4013      	ands	r3, r2
 800414c:	d108      	bne.n	8004160 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e074      	b.n	800423c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004152:	4b3e      	ldr	r3, [pc, #248]	; (800424c <HAL_RCC_ClockConfig+0x1f8>)
 8004154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004156:	2202      	movs	r2, #2
 8004158:	4013      	ands	r3, r2
 800415a:	d101      	bne.n	8004160 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e06d      	b.n	800423c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004160:	4b3a      	ldr	r3, [pc, #232]	; (800424c <HAL_RCC_ClockConfig+0x1f8>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	2207      	movs	r2, #7
 8004166:	4393      	bics	r3, r2
 8004168:	0019      	movs	r1, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	4b37      	ldr	r3, [pc, #220]	; (800424c <HAL_RCC_ClockConfig+0x1f8>)
 8004170:	430a      	orrs	r2, r1
 8004172:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004174:	f7ff f9c8 	bl	8003508 <HAL_GetTick>
 8004178:	0003      	movs	r3, r0
 800417a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800417c:	e009      	b.n	8004192 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800417e:	f7ff f9c3 	bl	8003508 <HAL_GetTick>
 8004182:	0002      	movs	r2, r0
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	4a2f      	ldr	r2, [pc, #188]	; (8004248 <HAL_RCC_ClockConfig+0x1f4>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e054      	b.n	800423c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004192:	4b2e      	ldr	r3, [pc, #184]	; (800424c <HAL_RCC_ClockConfig+0x1f8>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	2238      	movs	r2, #56	; 0x38
 8004198:	401a      	ands	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d1ec      	bne.n	800417e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041a4:	4b27      	ldr	r3, [pc, #156]	; (8004244 <HAL_RCC_ClockConfig+0x1f0>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2207      	movs	r2, #7
 80041aa:	4013      	ands	r3, r2
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d21e      	bcs.n	80041f0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041b2:	4b24      	ldr	r3, [pc, #144]	; (8004244 <HAL_RCC_ClockConfig+0x1f0>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2207      	movs	r2, #7
 80041b8:	4393      	bics	r3, r2
 80041ba:	0019      	movs	r1, r3
 80041bc:	4b21      	ldr	r3, [pc, #132]	; (8004244 <HAL_RCC_ClockConfig+0x1f0>)
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	430a      	orrs	r2, r1
 80041c2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80041c4:	f7ff f9a0 	bl	8003508 <HAL_GetTick>
 80041c8:	0003      	movs	r3, r0
 80041ca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80041cc:	e009      	b.n	80041e2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041ce:	f7ff f99b 	bl	8003508 <HAL_GetTick>
 80041d2:	0002      	movs	r2, r0
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	4a1b      	ldr	r2, [pc, #108]	; (8004248 <HAL_RCC_ClockConfig+0x1f4>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e02c      	b.n	800423c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80041e2:	4b18      	ldr	r3, [pc, #96]	; (8004244 <HAL_RCC_ClockConfig+0x1f0>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2207      	movs	r2, #7
 80041e8:	4013      	ands	r3, r2
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d1ee      	bne.n	80041ce <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2204      	movs	r2, #4
 80041f6:	4013      	ands	r3, r2
 80041f8:	d009      	beq.n	800420e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80041fa:	4b14      	ldr	r3, [pc, #80]	; (800424c <HAL_RCC_ClockConfig+0x1f8>)
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	4a15      	ldr	r2, [pc, #84]	; (8004254 <HAL_RCC_ClockConfig+0x200>)
 8004200:	4013      	ands	r3, r2
 8004202:	0019      	movs	r1, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68da      	ldr	r2, [r3, #12]
 8004208:	4b10      	ldr	r3, [pc, #64]	; (800424c <HAL_RCC_ClockConfig+0x1f8>)
 800420a:	430a      	orrs	r2, r1
 800420c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800420e:	f000 f829 	bl	8004264 <HAL_RCC_GetSysClockFreq>
 8004212:	0001      	movs	r1, r0
 8004214:	4b0d      	ldr	r3, [pc, #52]	; (800424c <HAL_RCC_ClockConfig+0x1f8>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	0a1b      	lsrs	r3, r3, #8
 800421a:	220f      	movs	r2, #15
 800421c:	401a      	ands	r2, r3
 800421e:	4b0e      	ldr	r3, [pc, #56]	; (8004258 <HAL_RCC_ClockConfig+0x204>)
 8004220:	0092      	lsls	r2, r2, #2
 8004222:	58d3      	ldr	r3, [r2, r3]
 8004224:	221f      	movs	r2, #31
 8004226:	4013      	ands	r3, r2
 8004228:	000a      	movs	r2, r1
 800422a:	40da      	lsrs	r2, r3
 800422c:	4b0b      	ldr	r3, [pc, #44]	; (800425c <HAL_RCC_ClockConfig+0x208>)
 800422e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004230:	4b0b      	ldr	r3, [pc, #44]	; (8004260 <HAL_RCC_ClockConfig+0x20c>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	0018      	movs	r0, r3
 8004236:	f7ff f90b 	bl	8003450 <HAL_InitTick>
 800423a:	0003      	movs	r3, r0
}
 800423c:	0018      	movs	r0, r3
 800423e:	46bd      	mov	sp, r7
 8004240:	b004      	add	sp, #16
 8004242:	bd80      	pop	{r7, pc}
 8004244:	40022000 	.word	0x40022000
 8004248:	00001388 	.word	0x00001388
 800424c:	40021000 	.word	0x40021000
 8004250:	fffff0ff 	.word	0xfffff0ff
 8004254:	ffff8fff 	.word	0xffff8fff
 8004258:	08009344 	.word	0x08009344
 800425c:	20000000 	.word	0x20000000
 8004260:	20000004 	.word	0x20000004

08004264 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800426a:	4b3c      	ldr	r3, [pc, #240]	; (800435c <HAL_RCC_GetSysClockFreq+0xf8>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	2238      	movs	r2, #56	; 0x38
 8004270:	4013      	ands	r3, r2
 8004272:	d10f      	bne.n	8004294 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004274:	4b39      	ldr	r3, [pc, #228]	; (800435c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	0adb      	lsrs	r3, r3, #11
 800427a:	2207      	movs	r2, #7
 800427c:	4013      	ands	r3, r2
 800427e:	2201      	movs	r2, #1
 8004280:	409a      	lsls	r2, r3
 8004282:	0013      	movs	r3, r2
 8004284:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004286:	6839      	ldr	r1, [r7, #0]
 8004288:	4835      	ldr	r0, [pc, #212]	; (8004360 <HAL_RCC_GetSysClockFreq+0xfc>)
 800428a:	f7fb ff57 	bl	800013c <__udivsi3>
 800428e:	0003      	movs	r3, r0
 8004290:	613b      	str	r3, [r7, #16]
 8004292:	e05d      	b.n	8004350 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004294:	4b31      	ldr	r3, [pc, #196]	; (800435c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	2238      	movs	r2, #56	; 0x38
 800429a:	4013      	ands	r3, r2
 800429c:	2b08      	cmp	r3, #8
 800429e:	d102      	bne.n	80042a6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80042a0:	4b30      	ldr	r3, [pc, #192]	; (8004364 <HAL_RCC_GetSysClockFreq+0x100>)
 80042a2:	613b      	str	r3, [r7, #16]
 80042a4:	e054      	b.n	8004350 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042a6:	4b2d      	ldr	r3, [pc, #180]	; (800435c <HAL_RCC_GetSysClockFreq+0xf8>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	2238      	movs	r2, #56	; 0x38
 80042ac:	4013      	ands	r3, r2
 80042ae:	2b10      	cmp	r3, #16
 80042b0:	d138      	bne.n	8004324 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80042b2:	4b2a      	ldr	r3, [pc, #168]	; (800435c <HAL_RCC_GetSysClockFreq+0xf8>)
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	2203      	movs	r2, #3
 80042b8:	4013      	ands	r3, r2
 80042ba:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042bc:	4b27      	ldr	r3, [pc, #156]	; (800435c <HAL_RCC_GetSysClockFreq+0xf8>)
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	091b      	lsrs	r3, r3, #4
 80042c2:	2207      	movs	r2, #7
 80042c4:	4013      	ands	r3, r2
 80042c6:	3301      	adds	r3, #1
 80042c8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2b03      	cmp	r3, #3
 80042ce:	d10d      	bne.n	80042ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042d0:	68b9      	ldr	r1, [r7, #8]
 80042d2:	4824      	ldr	r0, [pc, #144]	; (8004364 <HAL_RCC_GetSysClockFreq+0x100>)
 80042d4:	f7fb ff32 	bl	800013c <__udivsi3>
 80042d8:	0003      	movs	r3, r0
 80042da:	0019      	movs	r1, r3
 80042dc:	4b1f      	ldr	r3, [pc, #124]	; (800435c <HAL_RCC_GetSysClockFreq+0xf8>)
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	0a1b      	lsrs	r3, r3, #8
 80042e2:	227f      	movs	r2, #127	; 0x7f
 80042e4:	4013      	ands	r3, r2
 80042e6:	434b      	muls	r3, r1
 80042e8:	617b      	str	r3, [r7, #20]
        break;
 80042ea:	e00d      	b.n	8004308 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80042ec:	68b9      	ldr	r1, [r7, #8]
 80042ee:	481c      	ldr	r0, [pc, #112]	; (8004360 <HAL_RCC_GetSysClockFreq+0xfc>)
 80042f0:	f7fb ff24 	bl	800013c <__udivsi3>
 80042f4:	0003      	movs	r3, r0
 80042f6:	0019      	movs	r1, r3
 80042f8:	4b18      	ldr	r3, [pc, #96]	; (800435c <HAL_RCC_GetSysClockFreq+0xf8>)
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	0a1b      	lsrs	r3, r3, #8
 80042fe:	227f      	movs	r2, #127	; 0x7f
 8004300:	4013      	ands	r3, r2
 8004302:	434b      	muls	r3, r1
 8004304:	617b      	str	r3, [r7, #20]
        break;
 8004306:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004308:	4b14      	ldr	r3, [pc, #80]	; (800435c <HAL_RCC_GetSysClockFreq+0xf8>)
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	0f5b      	lsrs	r3, r3, #29
 800430e:	2207      	movs	r2, #7
 8004310:	4013      	ands	r3, r2
 8004312:	3301      	adds	r3, #1
 8004314:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004316:	6879      	ldr	r1, [r7, #4]
 8004318:	6978      	ldr	r0, [r7, #20]
 800431a:	f7fb ff0f 	bl	800013c <__udivsi3>
 800431e:	0003      	movs	r3, r0
 8004320:	613b      	str	r3, [r7, #16]
 8004322:	e015      	b.n	8004350 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004324:	4b0d      	ldr	r3, [pc, #52]	; (800435c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	2238      	movs	r2, #56	; 0x38
 800432a:	4013      	ands	r3, r2
 800432c:	2b20      	cmp	r3, #32
 800432e:	d103      	bne.n	8004338 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004330:	2380      	movs	r3, #128	; 0x80
 8004332:	021b      	lsls	r3, r3, #8
 8004334:	613b      	str	r3, [r7, #16]
 8004336:	e00b      	b.n	8004350 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004338:	4b08      	ldr	r3, [pc, #32]	; (800435c <HAL_RCC_GetSysClockFreq+0xf8>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	2238      	movs	r2, #56	; 0x38
 800433e:	4013      	ands	r3, r2
 8004340:	2b18      	cmp	r3, #24
 8004342:	d103      	bne.n	800434c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004344:	23fa      	movs	r3, #250	; 0xfa
 8004346:	01db      	lsls	r3, r3, #7
 8004348:	613b      	str	r3, [r7, #16]
 800434a:	e001      	b.n	8004350 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800434c:	2300      	movs	r3, #0
 800434e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004350:	693b      	ldr	r3, [r7, #16]
}
 8004352:	0018      	movs	r0, r3
 8004354:	46bd      	mov	sp, r7
 8004356:	b006      	add	sp, #24
 8004358:	bd80      	pop	{r7, pc}
 800435a:	46c0      	nop			; (mov r8, r8)
 800435c:	40021000 	.word	0x40021000
 8004360:	00f42400 	.word	0x00f42400
 8004364:	007a1200 	.word	0x007a1200

08004368 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800436c:	4b02      	ldr	r3, [pc, #8]	; (8004378 <HAL_RCC_GetHCLKFreq+0x10>)
 800436e:	681b      	ldr	r3, [r3, #0]
}
 8004370:	0018      	movs	r0, r3
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	46c0      	nop			; (mov r8, r8)
 8004378:	20000000 	.word	0x20000000

0800437c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800437c:	b5b0      	push	{r4, r5, r7, lr}
 800437e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004380:	f7ff fff2 	bl	8004368 <HAL_RCC_GetHCLKFreq>
 8004384:	0004      	movs	r4, r0
 8004386:	f7ff fb3f 	bl	8003a08 <LL_RCC_GetAPB1Prescaler>
 800438a:	0003      	movs	r3, r0
 800438c:	0b1a      	lsrs	r2, r3, #12
 800438e:	4b05      	ldr	r3, [pc, #20]	; (80043a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004390:	0092      	lsls	r2, r2, #2
 8004392:	58d3      	ldr	r3, [r2, r3]
 8004394:	221f      	movs	r2, #31
 8004396:	4013      	ands	r3, r2
 8004398:	40dc      	lsrs	r4, r3
 800439a:	0023      	movs	r3, r4
}
 800439c:	0018      	movs	r0, r3
 800439e:	46bd      	mov	sp, r7
 80043a0:	bdb0      	pop	{r4, r5, r7, pc}
 80043a2:	46c0      	nop			; (mov r8, r8)
 80043a4:	08009384 	.word	0x08009384

080043a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80043b0:	2313      	movs	r3, #19
 80043b2:	18fb      	adds	r3, r7, r3
 80043b4:	2200      	movs	r2, #0
 80043b6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043b8:	2312      	movs	r3, #18
 80043ba:	18fb      	adds	r3, r7, r3
 80043bc:	2200      	movs	r2, #0
 80043be:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	2380      	movs	r3, #128	; 0x80
 80043c6:	029b      	lsls	r3, r3, #10
 80043c8:	4013      	ands	r3, r2
 80043ca:	d100      	bne.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x26>
 80043cc:	e0a3      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043ce:	2011      	movs	r0, #17
 80043d0:	183b      	adds	r3, r7, r0
 80043d2:	2200      	movs	r2, #0
 80043d4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043d6:	4bc3      	ldr	r3, [pc, #780]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80043d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043da:	2380      	movs	r3, #128	; 0x80
 80043dc:	055b      	lsls	r3, r3, #21
 80043de:	4013      	ands	r3, r2
 80043e0:	d110      	bne.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043e2:	4bc0      	ldr	r3, [pc, #768]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80043e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043e6:	4bbf      	ldr	r3, [pc, #764]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80043e8:	2180      	movs	r1, #128	; 0x80
 80043ea:	0549      	lsls	r1, r1, #21
 80043ec:	430a      	orrs	r2, r1
 80043ee:	63da      	str	r2, [r3, #60]	; 0x3c
 80043f0:	4bbc      	ldr	r3, [pc, #752]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80043f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043f4:	2380      	movs	r3, #128	; 0x80
 80043f6:	055b      	lsls	r3, r3, #21
 80043f8:	4013      	ands	r3, r2
 80043fa:	60bb      	str	r3, [r7, #8]
 80043fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043fe:	183b      	adds	r3, r7, r0
 8004400:	2201      	movs	r2, #1
 8004402:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004404:	4bb8      	ldr	r3, [pc, #736]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	4bb7      	ldr	r3, [pc, #732]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800440a:	2180      	movs	r1, #128	; 0x80
 800440c:	0049      	lsls	r1, r1, #1
 800440e:	430a      	orrs	r2, r1
 8004410:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004412:	f7ff f879 	bl	8003508 <HAL_GetTick>
 8004416:	0003      	movs	r3, r0
 8004418:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800441a:	e00b      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800441c:	f7ff f874 	bl	8003508 <HAL_GetTick>
 8004420:	0002      	movs	r2, r0
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d904      	bls.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800442a:	2313      	movs	r3, #19
 800442c:	18fb      	adds	r3, r7, r3
 800442e:	2203      	movs	r2, #3
 8004430:	701a      	strb	r2, [r3, #0]
        break;
 8004432:	e005      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004434:	4bac      	ldr	r3, [pc, #688]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	2380      	movs	r3, #128	; 0x80
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	4013      	ands	r3, r2
 800443e:	d0ed      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004440:	2313      	movs	r3, #19
 8004442:	18fb      	adds	r3, r7, r3
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d154      	bne.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800444a:	4ba6      	ldr	r3, [pc, #664]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800444c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800444e:	23c0      	movs	r3, #192	; 0xc0
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4013      	ands	r3, r2
 8004454:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d019      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	429a      	cmp	r2, r3
 8004464:	d014      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004466:	4b9f      	ldr	r3, [pc, #636]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800446a:	4aa0      	ldr	r2, [pc, #640]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800446c:	4013      	ands	r3, r2
 800446e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004470:	4b9c      	ldr	r3, [pc, #624]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004472:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004474:	4b9b      	ldr	r3, [pc, #620]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004476:	2180      	movs	r1, #128	; 0x80
 8004478:	0249      	lsls	r1, r1, #9
 800447a:	430a      	orrs	r2, r1
 800447c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800447e:	4b99      	ldr	r3, [pc, #612]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004480:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004482:	4b98      	ldr	r3, [pc, #608]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004484:	499a      	ldr	r1, [pc, #616]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004486:	400a      	ands	r2, r1
 8004488:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800448a:	4b96      	ldr	r3, [pc, #600]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	2201      	movs	r2, #1
 8004494:	4013      	ands	r3, r2
 8004496:	d016      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004498:	f7ff f836 	bl	8003508 <HAL_GetTick>
 800449c:	0003      	movs	r3, r0
 800449e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044a0:	e00c      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044a2:	f7ff f831 	bl	8003508 <HAL_GetTick>
 80044a6:	0002      	movs	r2, r0
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	4a91      	ldr	r2, [pc, #580]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d904      	bls.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80044b2:	2313      	movs	r3, #19
 80044b4:	18fb      	adds	r3, r7, r3
 80044b6:	2203      	movs	r2, #3
 80044b8:	701a      	strb	r2, [r3, #0]
            break;
 80044ba:	e004      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044bc:	4b89      	ldr	r3, [pc, #548]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80044be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c0:	2202      	movs	r2, #2
 80044c2:	4013      	ands	r3, r2
 80044c4:	d0ed      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80044c6:	2313      	movs	r3, #19
 80044c8:	18fb      	adds	r3, r7, r3
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d10a      	bne.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044d0:	4b84      	ldr	r3, [pc, #528]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80044d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044d4:	4a85      	ldr	r2, [pc, #532]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80044d6:	4013      	ands	r3, r2
 80044d8:	0019      	movs	r1, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044de:	4b81      	ldr	r3, [pc, #516]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80044e0:	430a      	orrs	r2, r1
 80044e2:	65da      	str	r2, [r3, #92]	; 0x5c
 80044e4:	e00c      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044e6:	2312      	movs	r3, #18
 80044e8:	18fb      	adds	r3, r7, r3
 80044ea:	2213      	movs	r2, #19
 80044ec:	18ba      	adds	r2, r7, r2
 80044ee:	7812      	ldrb	r2, [r2, #0]
 80044f0:	701a      	strb	r2, [r3, #0]
 80044f2:	e005      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f4:	2312      	movs	r3, #18
 80044f6:	18fb      	adds	r3, r7, r3
 80044f8:	2213      	movs	r2, #19
 80044fa:	18ba      	adds	r2, r7, r2
 80044fc:	7812      	ldrb	r2, [r2, #0]
 80044fe:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004500:	2311      	movs	r3, #17
 8004502:	18fb      	adds	r3, r7, r3
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d105      	bne.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800450a:	4b76      	ldr	r3, [pc, #472]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800450c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800450e:	4b75      	ldr	r3, [pc, #468]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004510:	4979      	ldr	r1, [pc, #484]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004512:	400a      	ands	r2, r1
 8004514:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2201      	movs	r2, #1
 800451c:	4013      	ands	r3, r2
 800451e:	d009      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004520:	4b70      	ldr	r3, [pc, #448]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004524:	2203      	movs	r2, #3
 8004526:	4393      	bics	r3, r2
 8004528:	0019      	movs	r1, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685a      	ldr	r2, [r3, #4]
 800452e:	4b6d      	ldr	r3, [pc, #436]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004530:	430a      	orrs	r2, r1
 8004532:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2202      	movs	r2, #2
 800453a:	4013      	ands	r3, r2
 800453c:	d009      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800453e:	4b69      	ldr	r3, [pc, #420]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004542:	220c      	movs	r2, #12
 8004544:	4393      	bics	r3, r2
 8004546:	0019      	movs	r1, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689a      	ldr	r2, [r3, #8]
 800454c:	4b65      	ldr	r3, [pc, #404]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800454e:	430a      	orrs	r2, r1
 8004550:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2210      	movs	r2, #16
 8004558:	4013      	ands	r3, r2
 800455a:	d009      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800455c:	4b61      	ldr	r3, [pc, #388]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800455e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004560:	4a66      	ldr	r2, [pc, #408]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8004562:	4013      	ands	r3, r2
 8004564:	0019      	movs	r1, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68da      	ldr	r2, [r3, #12]
 800456a:	4b5e      	ldr	r3, [pc, #376]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800456c:	430a      	orrs	r2, r1
 800456e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	2380      	movs	r3, #128	; 0x80
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4013      	ands	r3, r2
 800457a:	d009      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800457c:	4b59      	ldr	r3, [pc, #356]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800457e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004580:	4a5f      	ldr	r2, [pc, #380]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004582:	4013      	ands	r3, r2
 8004584:	0019      	movs	r1, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	699a      	ldr	r2, [r3, #24]
 800458a:	4b56      	ldr	r3, [pc, #344]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800458c:	430a      	orrs	r2, r1
 800458e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	2380      	movs	r3, #128	; 0x80
 8004596:	00db      	lsls	r3, r3, #3
 8004598:	4013      	ands	r3, r2
 800459a:	d009      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800459c:	4b51      	ldr	r3, [pc, #324]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800459e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a0:	4a58      	ldr	r2, [pc, #352]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045a2:	4013      	ands	r3, r2
 80045a4:	0019      	movs	r1, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	69da      	ldr	r2, [r3, #28]
 80045aa:	4b4e      	ldr	r3, [pc, #312]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045ac:	430a      	orrs	r2, r1
 80045ae:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2220      	movs	r2, #32
 80045b6:	4013      	ands	r3, r2
 80045b8:	d009      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045ba:	4b4a      	ldr	r3, [pc, #296]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045be:	4a52      	ldr	r2, [pc, #328]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80045c0:	4013      	ands	r3, r2
 80045c2:	0019      	movs	r1, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	691a      	ldr	r2, [r3, #16]
 80045c8:	4b46      	ldr	r3, [pc, #280]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045ca:	430a      	orrs	r2, r1
 80045cc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	2380      	movs	r3, #128	; 0x80
 80045d4:	01db      	lsls	r3, r3, #7
 80045d6:	4013      	ands	r3, r2
 80045d8:	d015      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045da:	4b42      	ldr	r3, [pc, #264]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	0899      	lsrs	r1, r3, #2
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a1a      	ldr	r2, [r3, #32]
 80045e6:	4b3f      	ldr	r3, [pc, #252]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045e8:	430a      	orrs	r2, r1
 80045ea:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a1a      	ldr	r2, [r3, #32]
 80045f0:	2380      	movs	r3, #128	; 0x80
 80045f2:	05db      	lsls	r3, r3, #23
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d106      	bne.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80045f8:	4b3a      	ldr	r3, [pc, #232]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045fa:	68da      	ldr	r2, [r3, #12]
 80045fc:	4b39      	ldr	r3, [pc, #228]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045fe:	2180      	movs	r1, #128	; 0x80
 8004600:	0249      	lsls	r1, r1, #9
 8004602:	430a      	orrs	r2, r1
 8004604:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	2380      	movs	r3, #128	; 0x80
 800460c:	031b      	lsls	r3, r3, #12
 800460e:	4013      	ands	r3, r2
 8004610:	d009      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004612:	4b34      	ldr	r3, [pc, #208]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004616:	2240      	movs	r2, #64	; 0x40
 8004618:	4393      	bics	r3, r2
 800461a:	0019      	movs	r1, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004620:	4b30      	ldr	r3, [pc, #192]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004622:	430a      	orrs	r2, r1
 8004624:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	2380      	movs	r3, #128	; 0x80
 800462c:	039b      	lsls	r3, r3, #14
 800462e:	4013      	ands	r3, r2
 8004630:	d016      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004632:	4b2c      	ldr	r3, [pc, #176]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004636:	4a35      	ldr	r2, [pc, #212]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004638:	4013      	ands	r3, r2
 800463a:	0019      	movs	r1, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004640:	4b28      	ldr	r3, [pc, #160]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004642:	430a      	orrs	r2, r1
 8004644:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800464a:	2380      	movs	r3, #128	; 0x80
 800464c:	03db      	lsls	r3, r3, #15
 800464e:	429a      	cmp	r2, r3
 8004650:	d106      	bne.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004652:	4b24      	ldr	r3, [pc, #144]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004654:	68da      	ldr	r2, [r3, #12]
 8004656:	4b23      	ldr	r3, [pc, #140]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004658:	2180      	movs	r1, #128	; 0x80
 800465a:	0449      	lsls	r1, r1, #17
 800465c:	430a      	orrs	r2, r1
 800465e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	2380      	movs	r3, #128	; 0x80
 8004666:	03db      	lsls	r3, r3, #15
 8004668:	4013      	ands	r3, r2
 800466a:	d016      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800466c:	4b1d      	ldr	r3, [pc, #116]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800466e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004670:	4a27      	ldr	r2, [pc, #156]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8004672:	4013      	ands	r3, r2
 8004674:	0019      	movs	r1, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800467a:	4b1a      	ldr	r3, [pc, #104]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800467c:	430a      	orrs	r2, r1
 800467e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004684:	2380      	movs	r3, #128	; 0x80
 8004686:	045b      	lsls	r3, r3, #17
 8004688:	429a      	cmp	r2, r3
 800468a:	d106      	bne.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800468c:	4b15      	ldr	r3, [pc, #84]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800468e:	68da      	ldr	r2, [r3, #12]
 8004690:	4b14      	ldr	r3, [pc, #80]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004692:	2180      	movs	r1, #128	; 0x80
 8004694:	0449      	lsls	r1, r1, #17
 8004696:	430a      	orrs	r2, r1
 8004698:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	2380      	movs	r3, #128	; 0x80
 80046a0:	011b      	lsls	r3, r3, #4
 80046a2:	4013      	ands	r3, r2
 80046a4:	d016      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80046a6:	4b0f      	ldr	r3, [pc, #60]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80046a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046aa:	4a1a      	ldr	r2, [pc, #104]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80046ac:	4013      	ands	r3, r2
 80046ae:	0019      	movs	r1, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	695a      	ldr	r2, [r3, #20]
 80046b4:	4b0b      	ldr	r3, [pc, #44]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80046b6:	430a      	orrs	r2, r1
 80046b8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	695a      	ldr	r2, [r3, #20]
 80046be:	2380      	movs	r3, #128	; 0x80
 80046c0:	01db      	lsls	r3, r3, #7
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d106      	bne.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80046c6:	4b07      	ldr	r3, [pc, #28]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80046c8:	68da      	ldr	r2, [r3, #12]
 80046ca:	4b06      	ldr	r3, [pc, #24]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80046cc:	2180      	movs	r1, #128	; 0x80
 80046ce:	0249      	lsls	r1, r1, #9
 80046d0:	430a      	orrs	r2, r1
 80046d2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80046d4:	2312      	movs	r3, #18
 80046d6:	18fb      	adds	r3, r7, r3
 80046d8:	781b      	ldrb	r3, [r3, #0]
}
 80046da:	0018      	movs	r0, r3
 80046dc:	46bd      	mov	sp, r7
 80046de:	b006      	add	sp, #24
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	46c0      	nop			; (mov r8, r8)
 80046e4:	40021000 	.word	0x40021000
 80046e8:	40007000 	.word	0x40007000
 80046ec:	fffffcff 	.word	0xfffffcff
 80046f0:	fffeffff 	.word	0xfffeffff
 80046f4:	00001388 	.word	0x00001388
 80046f8:	efffffff 	.word	0xefffffff
 80046fc:	fffff3ff 	.word	0xfffff3ff
 8004700:	fff3ffff 	.word	0xfff3ffff
 8004704:	ffcfffff 	.word	0xffcfffff
 8004708:	ffffcfff 	.word	0xffffcfff
 800470c:	ffbfffff 	.word	0xffbfffff
 8004710:	feffffff 	.word	0xfeffffff
 8004714:	ffff3fff 	.word	0xffff3fff

08004718 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e0a8      	b.n	800487c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472e:	2b00      	cmp	r3, #0
 8004730:	d109      	bne.n	8004746 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685a      	ldr	r2, [r3, #4]
 8004736:	2382      	movs	r3, #130	; 0x82
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	429a      	cmp	r2, r3
 800473c:	d009      	beq.n	8004752 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	61da      	str	r2, [r3, #28]
 8004744:	e005      	b.n	8004752 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	225d      	movs	r2, #93	; 0x5d
 800475c:	5c9b      	ldrb	r3, [r3, r2]
 800475e:	b2db      	uxtb	r3, r3
 8004760:	2b00      	cmp	r3, #0
 8004762:	d107      	bne.n	8004774 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	225c      	movs	r2, #92	; 0x5c
 8004768:	2100      	movs	r1, #0
 800476a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	0018      	movs	r0, r3
 8004770:	f7fe fc2e 	bl	8002fd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	225d      	movs	r2, #93	; 0x5d
 8004778:	2102      	movs	r1, #2
 800477a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2140      	movs	r1, #64	; 0x40
 8004788:	438a      	bics	r2, r1
 800478a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68da      	ldr	r2, [r3, #12]
 8004790:	23e0      	movs	r3, #224	; 0xe0
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	429a      	cmp	r2, r3
 8004796:	d902      	bls.n	800479e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004798:	2300      	movs	r3, #0
 800479a:	60fb      	str	r3, [r7, #12]
 800479c:	e002      	b.n	80047a4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800479e:	2380      	movs	r3, #128	; 0x80
 80047a0:	015b      	lsls	r3, r3, #5
 80047a2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68da      	ldr	r2, [r3, #12]
 80047a8:	23f0      	movs	r3, #240	; 0xf0
 80047aa:	011b      	lsls	r3, r3, #4
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d008      	beq.n	80047c2 <HAL_SPI_Init+0xaa>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68da      	ldr	r2, [r3, #12]
 80047b4:	23e0      	movs	r3, #224	; 0xe0
 80047b6:	00db      	lsls	r3, r3, #3
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d002      	beq.n	80047c2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	2382      	movs	r3, #130	; 0x82
 80047c8:	005b      	lsls	r3, r3, #1
 80047ca:	401a      	ands	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6899      	ldr	r1, [r3, #8]
 80047d0:	2384      	movs	r3, #132	; 0x84
 80047d2:	021b      	lsls	r3, r3, #8
 80047d4:	400b      	ands	r3, r1
 80047d6:	431a      	orrs	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	2102      	movs	r1, #2
 80047de:	400b      	ands	r3, r1
 80047e0:	431a      	orrs	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	2101      	movs	r1, #1
 80047e8:	400b      	ands	r3, r1
 80047ea:	431a      	orrs	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6999      	ldr	r1, [r3, #24]
 80047f0:	2380      	movs	r3, #128	; 0x80
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	400b      	ands	r3, r1
 80047f6:	431a      	orrs	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	2138      	movs	r1, #56	; 0x38
 80047fe:	400b      	ands	r3, r1
 8004800:	431a      	orrs	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	2180      	movs	r1, #128	; 0x80
 8004808:	400b      	ands	r3, r1
 800480a:	431a      	orrs	r2, r3
 800480c:	0011      	movs	r1, r2
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004812:	2380      	movs	r3, #128	; 0x80
 8004814:	019b      	lsls	r3, r3, #6
 8004816:	401a      	ands	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	430a      	orrs	r2, r1
 800481e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	0c1b      	lsrs	r3, r3, #16
 8004826:	2204      	movs	r2, #4
 8004828:	401a      	ands	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482e:	2110      	movs	r1, #16
 8004830:	400b      	ands	r3, r1
 8004832:	431a      	orrs	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004838:	2108      	movs	r1, #8
 800483a:	400b      	ands	r3, r1
 800483c:	431a      	orrs	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68d9      	ldr	r1, [r3, #12]
 8004842:	23f0      	movs	r3, #240	; 0xf0
 8004844:	011b      	lsls	r3, r3, #4
 8004846:	400b      	ands	r3, r1
 8004848:	431a      	orrs	r2, r3
 800484a:	0011      	movs	r1, r2
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	2380      	movs	r3, #128	; 0x80
 8004850:	015b      	lsls	r3, r3, #5
 8004852:	401a      	ands	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	430a      	orrs	r2, r1
 800485a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	69da      	ldr	r2, [r3, #28]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4907      	ldr	r1, [pc, #28]	; (8004884 <HAL_SPI_Init+0x16c>)
 8004868:	400a      	ands	r2, r1
 800486a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	225d      	movs	r2, #93	; 0x5d
 8004876:	2101      	movs	r1, #1
 8004878:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	0018      	movs	r0, r3
 800487e:	46bd      	mov	sp, r7
 8004880:	b004      	add	sp, #16
 8004882:	bd80      	pop	{r7, pc}
 8004884:	fffff7ff 	.word	0xfffff7ff

08004888 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b088      	sub	sp, #32
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	603b      	str	r3, [r7, #0]
 8004894:	1dbb      	adds	r3, r7, #6
 8004896:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004898:	231f      	movs	r3, #31
 800489a:	18fb      	adds	r3, r7, r3
 800489c:	2200      	movs	r2, #0
 800489e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	225c      	movs	r2, #92	; 0x5c
 80048a4:	5c9b      	ldrb	r3, [r3, r2]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d101      	bne.n	80048ae <HAL_SPI_Transmit+0x26>
 80048aa:	2302      	movs	r3, #2
 80048ac:	e140      	b.n	8004b30 <HAL_SPI_Transmit+0x2a8>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	225c      	movs	r2, #92	; 0x5c
 80048b2:	2101      	movs	r1, #1
 80048b4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048b6:	f7fe fe27 	bl	8003508 <HAL_GetTick>
 80048ba:	0003      	movs	r3, r0
 80048bc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80048be:	2316      	movs	r3, #22
 80048c0:	18fb      	adds	r3, r7, r3
 80048c2:	1dba      	adds	r2, r7, #6
 80048c4:	8812      	ldrh	r2, [r2, #0]
 80048c6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	225d      	movs	r2, #93	; 0x5d
 80048cc:	5c9b      	ldrb	r3, [r3, r2]
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d004      	beq.n	80048de <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80048d4:	231f      	movs	r3, #31
 80048d6:	18fb      	adds	r3, r7, r3
 80048d8:	2202      	movs	r2, #2
 80048da:	701a      	strb	r2, [r3, #0]
    goto error;
 80048dc:	e11d      	b.n	8004b1a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d003      	beq.n	80048ec <HAL_SPI_Transmit+0x64>
 80048e4:	1dbb      	adds	r3, r7, #6
 80048e6:	881b      	ldrh	r3, [r3, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d104      	bne.n	80048f6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80048ec:	231f      	movs	r3, #31
 80048ee:	18fb      	adds	r3, r7, r3
 80048f0:	2201      	movs	r2, #1
 80048f2:	701a      	strb	r2, [r3, #0]
    goto error;
 80048f4:	e111      	b.n	8004b1a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	225d      	movs	r2, #93	; 0x5d
 80048fa:	2103      	movs	r1, #3
 80048fc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	68ba      	ldr	r2, [r7, #8]
 8004908:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	1dba      	adds	r2, r7, #6
 800490e:	8812      	ldrh	r2, [r2, #0]
 8004910:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	1dba      	adds	r2, r7, #6
 8004916:	8812      	ldrh	r2, [r2, #0]
 8004918:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2244      	movs	r2, #68	; 0x44
 8004924:	2100      	movs	r1, #0
 8004926:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2246      	movs	r2, #70	; 0x46
 800492c:	2100      	movs	r1, #0
 800492e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	689a      	ldr	r2, [r3, #8]
 8004940:	2380      	movs	r3, #128	; 0x80
 8004942:	021b      	lsls	r3, r3, #8
 8004944:	429a      	cmp	r2, r3
 8004946:	d110      	bne.n	800496a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2140      	movs	r1, #64	; 0x40
 8004954:	438a      	bics	r2, r1
 8004956:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2180      	movs	r1, #128	; 0x80
 8004964:	01c9      	lsls	r1, r1, #7
 8004966:	430a      	orrs	r2, r1
 8004968:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2240      	movs	r2, #64	; 0x40
 8004972:	4013      	ands	r3, r2
 8004974:	2b40      	cmp	r3, #64	; 0x40
 8004976:	d007      	beq.n	8004988 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2140      	movs	r1, #64	; 0x40
 8004984:	430a      	orrs	r2, r1
 8004986:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	68da      	ldr	r2, [r3, #12]
 800498c:	23e0      	movs	r3, #224	; 0xe0
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	429a      	cmp	r2, r3
 8004992:	d94e      	bls.n	8004a32 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d004      	beq.n	80049a6 <HAL_SPI_Transmit+0x11e>
 800499c:	2316      	movs	r3, #22
 800499e:	18fb      	adds	r3, r7, r3
 80049a0:	881b      	ldrh	r3, [r3, #0]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d13f      	bne.n	8004a26 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049aa:	881a      	ldrh	r2, [r3, #0]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b6:	1c9a      	adds	r2, r3, #2
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	3b01      	subs	r3, #1
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80049ca:	e02c      	b.n	8004a26 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	2202      	movs	r2, #2
 80049d4:	4013      	ands	r3, r2
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d112      	bne.n	8004a00 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049de:	881a      	ldrh	r2, [r3, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ea:	1c9a      	adds	r2, r3, #2
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	3b01      	subs	r3, #1
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049fe:	e012      	b.n	8004a26 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a00:	f7fe fd82 	bl	8003508 <HAL_GetTick>
 8004a04:	0002      	movs	r2, r0
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	683a      	ldr	r2, [r7, #0]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d802      	bhi.n	8004a16 <HAL_SPI_Transmit+0x18e>
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	3301      	adds	r3, #1
 8004a14:	d102      	bne.n	8004a1c <HAL_SPI_Transmit+0x194>
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d104      	bne.n	8004a26 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8004a1c:	231f      	movs	r3, #31
 8004a1e:	18fb      	adds	r3, r7, r3
 8004a20:	2203      	movs	r2, #3
 8004a22:	701a      	strb	r2, [r3, #0]
          goto error;
 8004a24:	e079      	b.n	8004b1a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1cd      	bne.n	80049cc <HAL_SPI_Transmit+0x144>
 8004a30:	e04f      	b.n	8004ad2 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d004      	beq.n	8004a44 <HAL_SPI_Transmit+0x1bc>
 8004a3a:	2316      	movs	r3, #22
 8004a3c:	18fb      	adds	r3, r7, r3
 8004a3e:	881b      	ldrh	r3, [r3, #0]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d141      	bne.n	8004ac8 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	330c      	adds	r3, #12
 8004a4e:	7812      	ldrb	r2, [r2, #0]
 8004a50:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a56:	1c5a      	adds	r2, r3, #1
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	3b01      	subs	r3, #1
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8004a6a:	e02d      	b.n	8004ac8 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	2202      	movs	r2, #2
 8004a74:	4013      	ands	r3, r2
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d113      	bne.n	8004aa2 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	330c      	adds	r3, #12
 8004a84:	7812      	ldrb	r2, [r2, #0]
 8004a86:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8c:	1c5a      	adds	r2, r3, #1
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004aa0:	e012      	b.n	8004ac8 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004aa2:	f7fe fd31 	bl	8003508 <HAL_GetTick>
 8004aa6:	0002      	movs	r2, r0
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d802      	bhi.n	8004ab8 <HAL_SPI_Transmit+0x230>
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	d102      	bne.n	8004abe <HAL_SPI_Transmit+0x236>
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d104      	bne.n	8004ac8 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8004abe:	231f      	movs	r3, #31
 8004ac0:	18fb      	adds	r3, r7, r3
 8004ac2:	2203      	movs	r2, #3
 8004ac4:	701a      	strb	r2, [r3, #0]
          goto error;
 8004ac6:	e028      	b.n	8004b1a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1cc      	bne.n	8004a6c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ad2:	69ba      	ldr	r2, [r7, #24]
 8004ad4:	6839      	ldr	r1, [r7, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	0018      	movs	r0, r3
 8004ada:	f000 fcd9 	bl	8005490 <SPI_EndRxTxTransaction>
 8004ade:	1e03      	subs	r3, r0, #0
 8004ae0:	d002      	beq.n	8004ae8 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10a      	bne.n	8004b06 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004af0:	2300      	movs	r3, #0
 8004af2:	613b      	str	r3, [r7, #16]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	613b      	str	r3, [r7, #16]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	613b      	str	r3, [r7, #16]
 8004b04:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d004      	beq.n	8004b18 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8004b0e:	231f      	movs	r3, #31
 8004b10:	18fb      	adds	r3, r7, r3
 8004b12:	2201      	movs	r2, #1
 8004b14:	701a      	strb	r2, [r3, #0]
 8004b16:	e000      	b.n	8004b1a <HAL_SPI_Transmit+0x292>
  }

error:
 8004b18:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	225d      	movs	r2, #93	; 0x5d
 8004b1e:	2101      	movs	r1, #1
 8004b20:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	225c      	movs	r2, #92	; 0x5c
 8004b26:	2100      	movs	r1, #0
 8004b28:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004b2a:	231f      	movs	r3, #31
 8004b2c:	18fb      	adds	r3, r7, r3
 8004b2e:	781b      	ldrb	r3, [r3, #0]
}
 8004b30:	0018      	movs	r0, r3
 8004b32:	46bd      	mov	sp, r7
 8004b34:	b008      	add	sp, #32
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b38:	b590      	push	{r4, r7, lr}
 8004b3a:	b089      	sub	sp, #36	; 0x24
 8004b3c:	af02      	add	r7, sp, #8
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	603b      	str	r3, [r7, #0]
 8004b44:	1dbb      	adds	r3, r7, #6
 8004b46:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b48:	2317      	movs	r3, #23
 8004b4a:	18fb      	adds	r3, r7, r3
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	2382      	movs	r3, #130	; 0x82
 8004b56:	005b      	lsls	r3, r3, #1
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d113      	bne.n	8004b84 <HAL_SPI_Receive+0x4c>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d10f      	bne.n	8004b84 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	225d      	movs	r2, #93	; 0x5d
 8004b68:	2104      	movs	r1, #4
 8004b6a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004b6c:	1dbb      	adds	r3, r7, #6
 8004b6e:	881c      	ldrh	r4, [r3, #0]
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	68b9      	ldr	r1, [r7, #8]
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	0023      	movs	r3, r4
 8004b7c:	f000 f928 	bl	8004dd0 <HAL_SPI_TransmitReceive>
 8004b80:	0003      	movs	r3, r0
 8004b82:	e11c      	b.n	8004dbe <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	225c      	movs	r2, #92	; 0x5c
 8004b88:	5c9b      	ldrb	r3, [r3, r2]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d101      	bne.n	8004b92 <HAL_SPI_Receive+0x5a>
 8004b8e:	2302      	movs	r3, #2
 8004b90:	e115      	b.n	8004dbe <HAL_SPI_Receive+0x286>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	225c      	movs	r2, #92	; 0x5c
 8004b96:	2101      	movs	r1, #1
 8004b98:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b9a:	f7fe fcb5 	bl	8003508 <HAL_GetTick>
 8004b9e:	0003      	movs	r3, r0
 8004ba0:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	225d      	movs	r2, #93	; 0x5d
 8004ba6:	5c9b      	ldrb	r3, [r3, r2]
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d004      	beq.n	8004bb8 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8004bae:	2317      	movs	r3, #23
 8004bb0:	18fb      	adds	r3, r7, r3
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	701a      	strb	r2, [r3, #0]
    goto error;
 8004bb6:	e0f7      	b.n	8004da8 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d003      	beq.n	8004bc6 <HAL_SPI_Receive+0x8e>
 8004bbe:	1dbb      	adds	r3, r7, #6
 8004bc0:	881b      	ldrh	r3, [r3, #0]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d104      	bne.n	8004bd0 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8004bc6:	2317      	movs	r3, #23
 8004bc8:	18fb      	adds	r3, r7, r3
 8004bca:	2201      	movs	r2, #1
 8004bcc:	701a      	strb	r2, [r3, #0]
    goto error;
 8004bce:	e0eb      	b.n	8004da8 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	225d      	movs	r2, #93	; 0x5d
 8004bd4:	2104      	movs	r1, #4
 8004bd6:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	68ba      	ldr	r2, [r7, #8]
 8004be2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	1dba      	adds	r2, r7, #6
 8004be8:	2144      	movs	r1, #68	; 0x44
 8004bea:	8812      	ldrh	r2, [r2, #0]
 8004bec:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	1dba      	adds	r2, r7, #6
 8004bf2:	2146      	movs	r1, #70	; 0x46
 8004bf4:	8812      	ldrh	r2, [r2, #0]
 8004bf6:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	68da      	ldr	r2, [r3, #12]
 8004c1a:	23e0      	movs	r3, #224	; 0xe0
 8004c1c:	00db      	lsls	r3, r3, #3
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d908      	bls.n	8004c34 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	685a      	ldr	r2, [r3, #4]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4966      	ldr	r1, [pc, #408]	; (8004dc8 <HAL_SPI_Receive+0x290>)
 8004c2e:	400a      	ands	r2, r1
 8004c30:	605a      	str	r2, [r3, #4]
 8004c32:	e008      	b.n	8004c46 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	685a      	ldr	r2, [r3, #4]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2180      	movs	r1, #128	; 0x80
 8004c40:	0149      	lsls	r1, r1, #5
 8004c42:	430a      	orrs	r2, r1
 8004c44:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	689a      	ldr	r2, [r3, #8]
 8004c4a:	2380      	movs	r3, #128	; 0x80
 8004c4c:	021b      	lsls	r3, r3, #8
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d10f      	bne.n	8004c72 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2140      	movs	r1, #64	; 0x40
 8004c5e:	438a      	bics	r2, r1
 8004c60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4957      	ldr	r1, [pc, #348]	; (8004dcc <HAL_SPI_Receive+0x294>)
 8004c6e:	400a      	ands	r2, r1
 8004c70:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2240      	movs	r2, #64	; 0x40
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	2b40      	cmp	r3, #64	; 0x40
 8004c7e:	d007      	beq.n	8004c90 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2140      	movs	r1, #64	; 0x40
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	68da      	ldr	r2, [r3, #12]
 8004c94:	23e0      	movs	r3, #224	; 0xe0
 8004c96:	00db      	lsls	r3, r3, #3
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d900      	bls.n	8004c9e <HAL_SPI_Receive+0x166>
 8004c9c:	e069      	b.n	8004d72 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004c9e:	e031      	b.n	8004d04 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	4013      	ands	r3, r2
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d117      	bne.n	8004cde <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	330c      	adds	r3, #12
 8004cb4:	001a      	movs	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cba:	7812      	ldrb	r2, [r2, #0]
 8004cbc:	b2d2      	uxtb	r2, r2
 8004cbe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc4:	1c5a      	adds	r2, r3, #1
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2246      	movs	r2, #70	; 0x46
 8004cce:	5a9b      	ldrh	r3, [r3, r2]
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	b299      	uxth	r1, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2246      	movs	r2, #70	; 0x46
 8004cda:	5299      	strh	r1, [r3, r2]
 8004cdc:	e012      	b.n	8004d04 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cde:	f7fe fc13 	bl	8003508 <HAL_GetTick>
 8004ce2:	0002      	movs	r2, r0
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	683a      	ldr	r2, [r7, #0]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d802      	bhi.n	8004cf4 <HAL_SPI_Receive+0x1bc>
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	d102      	bne.n	8004cfa <HAL_SPI_Receive+0x1c2>
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d104      	bne.n	8004d04 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8004cfa:	2317      	movs	r3, #23
 8004cfc:	18fb      	adds	r3, r7, r3
 8004cfe:	2203      	movs	r2, #3
 8004d00:	701a      	strb	r2, [r3, #0]
          goto error;
 8004d02:	e051      	b.n	8004da8 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2246      	movs	r2, #70	; 0x46
 8004d08:	5a9b      	ldrh	r3, [r3, r2]
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1c7      	bne.n	8004ca0 <HAL_SPI_Receive+0x168>
 8004d10:	e035      	b.n	8004d7e <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d115      	bne.n	8004d4c <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68da      	ldr	r2, [r3, #12]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2a:	b292      	uxth	r2, r2
 8004d2c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d32:	1c9a      	adds	r2, r3, #2
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2246      	movs	r2, #70	; 0x46
 8004d3c:	5a9b      	ldrh	r3, [r3, r2]
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	3b01      	subs	r3, #1
 8004d42:	b299      	uxth	r1, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2246      	movs	r2, #70	; 0x46
 8004d48:	5299      	strh	r1, [r3, r2]
 8004d4a:	e012      	b.n	8004d72 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d4c:	f7fe fbdc 	bl	8003508 <HAL_GetTick>
 8004d50:	0002      	movs	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	683a      	ldr	r2, [r7, #0]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d802      	bhi.n	8004d62 <HAL_SPI_Receive+0x22a>
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	3301      	adds	r3, #1
 8004d60:	d102      	bne.n	8004d68 <HAL_SPI_Receive+0x230>
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d104      	bne.n	8004d72 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8004d68:	2317      	movs	r3, #23
 8004d6a:	18fb      	adds	r3, r7, r3
 8004d6c:	2203      	movs	r2, #3
 8004d6e:	701a      	strb	r2, [r3, #0]
          goto error;
 8004d70:	e01a      	b.n	8004da8 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2246      	movs	r2, #70	; 0x46
 8004d76:	5a9b      	ldrh	r3, [r3, r2]
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1c9      	bne.n	8004d12 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	6839      	ldr	r1, [r7, #0]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	0018      	movs	r0, r3
 8004d86:	f000 fb25 	bl	80053d4 <SPI_EndRxTransaction>
 8004d8a:	1e03      	subs	r3, r0, #0
 8004d8c:	d002      	beq.n	8004d94 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2220      	movs	r2, #32
 8004d92:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d004      	beq.n	8004da6 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8004d9c:	2317      	movs	r3, #23
 8004d9e:	18fb      	adds	r3, r7, r3
 8004da0:	2201      	movs	r2, #1
 8004da2:	701a      	strb	r2, [r3, #0]
 8004da4:	e000      	b.n	8004da8 <HAL_SPI_Receive+0x270>
  }

error :
 8004da6:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	225d      	movs	r2, #93	; 0x5d
 8004dac:	2101      	movs	r1, #1
 8004dae:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	225c      	movs	r2, #92	; 0x5c
 8004db4:	2100      	movs	r1, #0
 8004db6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004db8:	2317      	movs	r3, #23
 8004dba:	18fb      	adds	r3, r7, r3
 8004dbc:	781b      	ldrb	r3, [r3, #0]
}
 8004dbe:	0018      	movs	r0, r3
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	b007      	add	sp, #28
 8004dc4:	bd90      	pop	{r4, r7, pc}
 8004dc6:	46c0      	nop			; (mov r8, r8)
 8004dc8:	ffffefff 	.word	0xffffefff
 8004dcc:	ffffbfff 	.word	0xffffbfff

08004dd0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b08a      	sub	sp, #40	; 0x28
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
 8004ddc:	001a      	movs	r2, r3
 8004dde:	1cbb      	adds	r3, r7, #2
 8004de0:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004de2:	2301      	movs	r3, #1
 8004de4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004de6:	2323      	movs	r3, #35	; 0x23
 8004de8:	18fb      	adds	r3, r7, r3
 8004dea:	2200      	movs	r2, #0
 8004dec:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	225c      	movs	r2, #92	; 0x5c
 8004df2:	5c9b      	ldrb	r3, [r3, r2]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d101      	bne.n	8004dfc <HAL_SPI_TransmitReceive+0x2c>
 8004df8:	2302      	movs	r3, #2
 8004dfa:	e1b5      	b.n	8005168 <HAL_SPI_TransmitReceive+0x398>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	225c      	movs	r2, #92	; 0x5c
 8004e00:	2101      	movs	r1, #1
 8004e02:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e04:	f7fe fb80 	bl	8003508 <HAL_GetTick>
 8004e08:	0003      	movs	r3, r0
 8004e0a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004e0c:	201b      	movs	r0, #27
 8004e0e:	183b      	adds	r3, r7, r0
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	215d      	movs	r1, #93	; 0x5d
 8004e14:	5c52      	ldrb	r2, [r2, r1]
 8004e16:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004e1e:	2312      	movs	r3, #18
 8004e20:	18fb      	adds	r3, r7, r3
 8004e22:	1cba      	adds	r2, r7, #2
 8004e24:	8812      	ldrh	r2, [r2, #0]
 8004e26:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e28:	183b      	adds	r3, r7, r0
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d011      	beq.n	8004e54 <HAL_SPI_TransmitReceive+0x84>
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	2382      	movs	r3, #130	; 0x82
 8004e34:	005b      	lsls	r3, r3, #1
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d107      	bne.n	8004e4a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d103      	bne.n	8004e4a <HAL_SPI_TransmitReceive+0x7a>
 8004e42:	183b      	adds	r3, r7, r0
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	2b04      	cmp	r3, #4
 8004e48:	d004      	beq.n	8004e54 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8004e4a:	2323      	movs	r3, #35	; 0x23
 8004e4c:	18fb      	adds	r3, r7, r3
 8004e4e:	2202      	movs	r2, #2
 8004e50:	701a      	strb	r2, [r3, #0]
    goto error;
 8004e52:	e17e      	b.n	8005152 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d006      	beq.n	8004e68 <HAL_SPI_TransmitReceive+0x98>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d003      	beq.n	8004e68 <HAL_SPI_TransmitReceive+0x98>
 8004e60:	1cbb      	adds	r3, r7, #2
 8004e62:	881b      	ldrh	r3, [r3, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d104      	bne.n	8004e72 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8004e68:	2323      	movs	r3, #35	; 0x23
 8004e6a:	18fb      	adds	r3, r7, r3
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	701a      	strb	r2, [r3, #0]
    goto error;
 8004e70:	e16f      	b.n	8005152 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	225d      	movs	r2, #93	; 0x5d
 8004e76:	5c9b      	ldrb	r3, [r3, r2]
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b04      	cmp	r3, #4
 8004e7c:	d003      	beq.n	8004e86 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	225d      	movs	r2, #93	; 0x5d
 8004e82:	2105      	movs	r1, #5
 8004e84:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	1cba      	adds	r2, r7, #2
 8004e96:	2146      	movs	r1, #70	; 0x46
 8004e98:	8812      	ldrh	r2, [r2, #0]
 8004e9a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	1cba      	adds	r2, r7, #2
 8004ea0:	2144      	movs	r1, #68	; 0x44
 8004ea2:	8812      	ldrh	r2, [r2, #0]
 8004ea4:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	1cba      	adds	r2, r7, #2
 8004eb0:	8812      	ldrh	r2, [r2, #0]
 8004eb2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	1cba      	adds	r2, r7, #2
 8004eb8:	8812      	ldrh	r2, [r2, #0]
 8004eba:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	68da      	ldr	r2, [r3, #12]
 8004ecc:	23e0      	movs	r3, #224	; 0xe0
 8004ece:	00db      	lsls	r3, r3, #3
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d908      	bls.n	8004ee6 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	49a4      	ldr	r1, [pc, #656]	; (8005170 <HAL_SPI_TransmitReceive+0x3a0>)
 8004ee0:	400a      	ands	r2, r1
 8004ee2:	605a      	str	r2, [r3, #4]
 8004ee4:	e008      	b.n	8004ef8 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	685a      	ldr	r2, [r3, #4]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2180      	movs	r1, #128	; 0x80
 8004ef2:	0149      	lsls	r1, r1, #5
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2240      	movs	r2, #64	; 0x40
 8004f00:	4013      	ands	r3, r2
 8004f02:	2b40      	cmp	r3, #64	; 0x40
 8004f04:	d007      	beq.n	8004f16 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2140      	movs	r1, #64	; 0x40
 8004f12:	430a      	orrs	r2, r1
 8004f14:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	68da      	ldr	r2, [r3, #12]
 8004f1a:	23e0      	movs	r3, #224	; 0xe0
 8004f1c:	00db      	lsls	r3, r3, #3
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d800      	bhi.n	8004f24 <HAL_SPI_TransmitReceive+0x154>
 8004f22:	e07f      	b.n	8005024 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d005      	beq.n	8004f38 <HAL_SPI_TransmitReceive+0x168>
 8004f2c:	2312      	movs	r3, #18
 8004f2e:	18fb      	adds	r3, r7, r3
 8004f30:	881b      	ldrh	r3, [r3, #0]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d000      	beq.n	8004f38 <HAL_SPI_TransmitReceive+0x168>
 8004f36:	e069      	b.n	800500c <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3c:	881a      	ldrh	r2, [r3, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f48:	1c9a      	adds	r2, r3, #2
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	3b01      	subs	r3, #1
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f5c:	e056      	b.n	800500c <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	2202      	movs	r2, #2
 8004f66:	4013      	ands	r3, r2
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d11b      	bne.n	8004fa4 <HAL_SPI_TransmitReceive+0x1d4>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d016      	beq.n	8004fa4 <HAL_SPI_TransmitReceive+0x1d4>
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d113      	bne.n	8004fa4 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f80:	881a      	ldrh	r2, [r3, #0]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8c:	1c9a      	adds	r2, r3, #2
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	2201      	movs	r2, #1
 8004fac:	4013      	ands	r3, r2
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d11c      	bne.n	8004fec <HAL_SPI_TransmitReceive+0x21c>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2246      	movs	r2, #70	; 0x46
 8004fb6:	5a9b      	ldrh	r3, [r3, r2]
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d016      	beq.n	8004fec <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68da      	ldr	r2, [r3, #12]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc8:	b292      	uxth	r2, r2
 8004fca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd0:	1c9a      	adds	r2, r3, #2
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2246      	movs	r2, #70	; 0x46
 8004fda:	5a9b      	ldrh	r3, [r3, r2]
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	b299      	uxth	r1, r3
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2246      	movs	r2, #70	; 0x46
 8004fe6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004fec:	f7fe fa8c 	bl	8003508 <HAL_GetTick>
 8004ff0:	0002      	movs	r2, r0
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d807      	bhi.n	800500c <HAL_SPI_TransmitReceive+0x23c>
 8004ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffe:	3301      	adds	r3, #1
 8005000:	d004      	beq.n	800500c <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8005002:	2323      	movs	r3, #35	; 0x23
 8005004:	18fb      	adds	r3, r7, r3
 8005006:	2203      	movs	r2, #3
 8005008:	701a      	strb	r2, [r3, #0]
        goto error;
 800500a:	e0a2      	b.n	8005152 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005010:	b29b      	uxth	r3, r3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1a3      	bne.n	8004f5e <HAL_SPI_TransmitReceive+0x18e>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2246      	movs	r2, #70	; 0x46
 800501a:	5a9b      	ldrh	r3, [r3, r2]
 800501c:	b29b      	uxth	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d19d      	bne.n	8004f5e <HAL_SPI_TransmitReceive+0x18e>
 8005022:	e085      	b.n	8005130 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d005      	beq.n	8005038 <HAL_SPI_TransmitReceive+0x268>
 800502c:	2312      	movs	r3, #18
 800502e:	18fb      	adds	r3, r7, r3
 8005030:	881b      	ldrh	r3, [r3, #0]
 8005032:	2b01      	cmp	r3, #1
 8005034:	d000      	beq.n	8005038 <HAL_SPI_TransmitReceive+0x268>
 8005036:	e070      	b.n	800511a <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	330c      	adds	r3, #12
 8005042:	7812      	ldrb	r2, [r2, #0]
 8005044:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504a:	1c5a      	adds	r2, r3, #1
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005054:	b29b      	uxth	r3, r3
 8005056:	3b01      	subs	r3, #1
 8005058:	b29a      	uxth	r2, r3
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800505e:	e05c      	b.n	800511a <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	2202      	movs	r2, #2
 8005068:	4013      	ands	r3, r2
 800506a:	2b02      	cmp	r3, #2
 800506c:	d11c      	bne.n	80050a8 <HAL_SPI_TransmitReceive+0x2d8>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005072:	b29b      	uxth	r3, r3
 8005074:	2b00      	cmp	r3, #0
 8005076:	d017      	beq.n	80050a8 <HAL_SPI_TransmitReceive+0x2d8>
 8005078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507a:	2b01      	cmp	r3, #1
 800507c:	d114      	bne.n	80050a8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	330c      	adds	r3, #12
 8005088:	7812      	ldrb	r2, [r2, #0]
 800508a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005090:	1c5a      	adds	r2, r3, #1
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800509a:	b29b      	uxth	r3, r3
 800509c:	3b01      	subs	r3, #1
 800509e:	b29a      	uxth	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050a4:	2300      	movs	r3, #0
 80050a6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	2201      	movs	r2, #1
 80050b0:	4013      	ands	r3, r2
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d11e      	bne.n	80050f4 <HAL_SPI_TransmitReceive+0x324>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2246      	movs	r2, #70	; 0x46
 80050ba:	5a9b      	ldrh	r3, [r3, r2]
 80050bc:	b29b      	uxth	r3, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d018      	beq.n	80050f4 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	330c      	adds	r3, #12
 80050c8:	001a      	movs	r2, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ce:	7812      	ldrb	r2, [r2, #0]
 80050d0:	b2d2      	uxtb	r2, r2
 80050d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d8:	1c5a      	adds	r2, r3, #1
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2246      	movs	r2, #70	; 0x46
 80050e2:	5a9b      	ldrh	r3, [r3, r2]
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	3b01      	subs	r3, #1
 80050e8:	b299      	uxth	r1, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2246      	movs	r2, #70	; 0x46
 80050ee:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050f0:	2301      	movs	r3, #1
 80050f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80050f4:	f7fe fa08 	bl	8003508 <HAL_GetTick>
 80050f8:	0002      	movs	r2, r0
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005100:	429a      	cmp	r2, r3
 8005102:	d802      	bhi.n	800510a <HAL_SPI_TransmitReceive+0x33a>
 8005104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005106:	3301      	adds	r3, #1
 8005108:	d102      	bne.n	8005110 <HAL_SPI_TransmitReceive+0x340>
 800510a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510c:	2b00      	cmp	r3, #0
 800510e:	d104      	bne.n	800511a <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8005110:	2323      	movs	r3, #35	; 0x23
 8005112:	18fb      	adds	r3, r7, r3
 8005114:	2203      	movs	r2, #3
 8005116:	701a      	strb	r2, [r3, #0]
        goto error;
 8005118:	e01b      	b.n	8005152 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800511e:	b29b      	uxth	r3, r3
 8005120:	2b00      	cmp	r3, #0
 8005122:	d19d      	bne.n	8005060 <HAL_SPI_TransmitReceive+0x290>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2246      	movs	r2, #70	; 0x46
 8005128:	5a9b      	ldrh	r3, [r3, r2]
 800512a:	b29b      	uxth	r3, r3
 800512c:	2b00      	cmp	r3, #0
 800512e:	d197      	bne.n	8005060 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005130:	69fa      	ldr	r2, [r7, #28]
 8005132:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	0018      	movs	r0, r3
 8005138:	f000 f9aa 	bl	8005490 <SPI_EndRxTxTransaction>
 800513c:	1e03      	subs	r3, r0, #0
 800513e:	d007      	beq.n	8005150 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8005140:	2323      	movs	r3, #35	; 0x23
 8005142:	18fb      	adds	r3, r7, r3
 8005144:	2201      	movs	r2, #1
 8005146:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2220      	movs	r2, #32
 800514c:	661a      	str	r2, [r3, #96]	; 0x60
 800514e:	e000      	b.n	8005152 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8005150:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	225d      	movs	r2, #93	; 0x5d
 8005156:	2101      	movs	r1, #1
 8005158:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	225c      	movs	r2, #92	; 0x5c
 800515e:	2100      	movs	r1, #0
 8005160:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005162:	2323      	movs	r3, #35	; 0x23
 8005164:	18fb      	adds	r3, r7, r3
 8005166:	781b      	ldrb	r3, [r3, #0]
}
 8005168:	0018      	movs	r0, r3
 800516a:	46bd      	mov	sp, r7
 800516c:	b00a      	add	sp, #40	; 0x28
 800516e:	bd80      	pop	{r7, pc}
 8005170:	ffffefff 	.word	0xffffefff

08005174 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b088      	sub	sp, #32
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	603b      	str	r3, [r7, #0]
 8005180:	1dfb      	adds	r3, r7, #7
 8005182:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005184:	f7fe f9c0 	bl	8003508 <HAL_GetTick>
 8005188:	0002      	movs	r2, r0
 800518a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518c:	1a9b      	subs	r3, r3, r2
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	18d3      	adds	r3, r2, r3
 8005192:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005194:	f7fe f9b8 	bl	8003508 <HAL_GetTick>
 8005198:	0003      	movs	r3, r0
 800519a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800519c:	4b3a      	ldr	r3, [pc, #232]	; (8005288 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	015b      	lsls	r3, r3, #5
 80051a2:	0d1b      	lsrs	r3, r3, #20
 80051a4:	69fa      	ldr	r2, [r7, #28]
 80051a6:	4353      	muls	r3, r2
 80051a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051aa:	e058      	b.n	800525e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	3301      	adds	r3, #1
 80051b0:	d055      	beq.n	800525e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051b2:	f7fe f9a9 	bl	8003508 <HAL_GetTick>
 80051b6:	0002      	movs	r2, r0
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	69fa      	ldr	r2, [r7, #28]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d902      	bls.n	80051c8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d142      	bne.n	800524e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	685a      	ldr	r2, [r3, #4]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	21e0      	movs	r1, #224	; 0xe0
 80051d4:	438a      	bics	r2, r1
 80051d6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	2382      	movs	r3, #130	; 0x82
 80051de:	005b      	lsls	r3, r3, #1
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d113      	bne.n	800520c <SPI_WaitFlagStateUntilTimeout+0x98>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	689a      	ldr	r2, [r3, #8]
 80051e8:	2380      	movs	r3, #128	; 0x80
 80051ea:	021b      	lsls	r3, r3, #8
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d005      	beq.n	80051fc <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	689a      	ldr	r2, [r3, #8]
 80051f4:	2380      	movs	r3, #128	; 0x80
 80051f6:	00db      	lsls	r3, r3, #3
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d107      	bne.n	800520c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2140      	movs	r1, #64	; 0x40
 8005208:	438a      	bics	r2, r1
 800520a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005210:	2380      	movs	r3, #128	; 0x80
 8005212:	019b      	lsls	r3, r3, #6
 8005214:	429a      	cmp	r2, r3
 8005216:	d110      	bne.n	800523a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	491a      	ldr	r1, [pc, #104]	; (800528c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005224:	400a      	ands	r2, r1
 8005226:	601a      	str	r2, [r3, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2180      	movs	r1, #128	; 0x80
 8005234:	0189      	lsls	r1, r1, #6
 8005236:	430a      	orrs	r2, r1
 8005238:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	225d      	movs	r2, #93	; 0x5d
 800523e:	2101      	movs	r1, #1
 8005240:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	225c      	movs	r2, #92	; 0x5c
 8005246:	2100      	movs	r1, #0
 8005248:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e017      	b.n	800527e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d101      	bne.n	8005258 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005254:	2300      	movs	r3, #0
 8005256:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	3b01      	subs	r3, #1
 800525c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	4013      	ands	r3, r2
 8005268:	68ba      	ldr	r2, [r7, #8]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	425a      	negs	r2, r3
 800526e:	4153      	adcs	r3, r2
 8005270:	b2db      	uxtb	r3, r3
 8005272:	001a      	movs	r2, r3
 8005274:	1dfb      	adds	r3, r7, #7
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	429a      	cmp	r2, r3
 800527a:	d197      	bne.n	80051ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	0018      	movs	r0, r3
 8005280:	46bd      	mov	sp, r7
 8005282:	b008      	add	sp, #32
 8005284:	bd80      	pop	{r7, pc}
 8005286:	46c0      	nop			; (mov r8, r8)
 8005288:	20000000 	.word	0x20000000
 800528c:	ffffdfff 	.word	0xffffdfff

08005290 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b08a      	sub	sp, #40	; 0x28
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
 800529c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800529e:	2317      	movs	r3, #23
 80052a0:	18fb      	adds	r3, r7, r3
 80052a2:	2200      	movs	r2, #0
 80052a4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80052a6:	f7fe f92f 	bl	8003508 <HAL_GetTick>
 80052aa:	0002      	movs	r2, r0
 80052ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ae:	1a9b      	subs	r3, r3, r2
 80052b0:	683a      	ldr	r2, [r7, #0]
 80052b2:	18d3      	adds	r3, r2, r3
 80052b4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80052b6:	f7fe f927 	bl	8003508 <HAL_GetTick>
 80052ba:	0003      	movs	r3, r0
 80052bc:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	330c      	adds	r3, #12
 80052c4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80052c6:	4b41      	ldr	r3, [pc, #260]	; (80053cc <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	0013      	movs	r3, r2
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	189b      	adds	r3, r3, r2
 80052d0:	00da      	lsls	r2, r3, #3
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	0d1b      	lsrs	r3, r3, #20
 80052d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052d8:	4353      	muls	r3, r2
 80052da:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80052dc:	e068      	b.n	80053b0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80052de:	68ba      	ldr	r2, [r7, #8]
 80052e0:	23c0      	movs	r3, #192	; 0xc0
 80052e2:	00db      	lsls	r3, r3, #3
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d10a      	bne.n	80052fe <SPI_WaitFifoStateUntilTimeout+0x6e>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d107      	bne.n	80052fe <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	b2da      	uxtb	r2, r3
 80052f4:	2117      	movs	r1, #23
 80052f6:	187b      	adds	r3, r7, r1
 80052f8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80052fa:	187b      	adds	r3, r7, r1
 80052fc:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	3301      	adds	r3, #1
 8005302:	d055      	beq.n	80053b0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005304:	f7fe f900 	bl	8003508 <HAL_GetTick>
 8005308:	0002      	movs	r2, r0
 800530a:	6a3b      	ldr	r3, [r7, #32]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005310:	429a      	cmp	r2, r3
 8005312:	d902      	bls.n	800531a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8005314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005316:	2b00      	cmp	r3, #0
 8005318:	d142      	bne.n	80053a0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	685a      	ldr	r2, [r3, #4]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	21e0      	movs	r1, #224	; 0xe0
 8005326:	438a      	bics	r2, r1
 8005328:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	685a      	ldr	r2, [r3, #4]
 800532e:	2382      	movs	r3, #130	; 0x82
 8005330:	005b      	lsls	r3, r3, #1
 8005332:	429a      	cmp	r2, r3
 8005334:	d113      	bne.n	800535e <SPI_WaitFifoStateUntilTimeout+0xce>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	689a      	ldr	r2, [r3, #8]
 800533a:	2380      	movs	r3, #128	; 0x80
 800533c:	021b      	lsls	r3, r3, #8
 800533e:	429a      	cmp	r2, r3
 8005340:	d005      	beq.n	800534e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	689a      	ldr	r2, [r3, #8]
 8005346:	2380      	movs	r3, #128	; 0x80
 8005348:	00db      	lsls	r3, r3, #3
 800534a:	429a      	cmp	r2, r3
 800534c:	d107      	bne.n	800535e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2140      	movs	r1, #64	; 0x40
 800535a:	438a      	bics	r2, r1
 800535c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005362:	2380      	movs	r3, #128	; 0x80
 8005364:	019b      	lsls	r3, r3, #6
 8005366:	429a      	cmp	r2, r3
 8005368:	d110      	bne.n	800538c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4916      	ldr	r1, [pc, #88]	; (80053d0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8005376:	400a      	ands	r2, r1
 8005378:	601a      	str	r2, [r3, #0]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2180      	movs	r1, #128	; 0x80
 8005386:	0189      	lsls	r1, r1, #6
 8005388:	430a      	orrs	r2, r1
 800538a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	225d      	movs	r2, #93	; 0x5d
 8005390:	2101      	movs	r1, #1
 8005392:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	225c      	movs	r2, #92	; 0x5c
 8005398:	2100      	movs	r1, #0
 800539a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e010      	b.n	80053c2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d101      	bne.n	80053aa <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80053a6:	2300      	movs	r3, #0
 80053a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	3b01      	subs	r3, #1
 80053ae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	68ba      	ldr	r2, [r7, #8]
 80053b8:	4013      	ands	r3, r2
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d18e      	bne.n	80052de <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	0018      	movs	r0, r3
 80053c4:	46bd      	mov	sp, r7
 80053c6:	b00a      	add	sp, #40	; 0x28
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	46c0      	nop			; (mov r8, r8)
 80053cc:	20000000 	.word	0x20000000
 80053d0:	ffffdfff 	.word	0xffffdfff

080053d4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af02      	add	r7, sp, #8
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	685a      	ldr	r2, [r3, #4]
 80053e4:	2382      	movs	r3, #130	; 0x82
 80053e6:	005b      	lsls	r3, r3, #1
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d113      	bne.n	8005414 <SPI_EndRxTransaction+0x40>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	689a      	ldr	r2, [r3, #8]
 80053f0:	2380      	movs	r3, #128	; 0x80
 80053f2:	021b      	lsls	r3, r3, #8
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d005      	beq.n	8005404 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	689a      	ldr	r2, [r3, #8]
 80053fc:	2380      	movs	r3, #128	; 0x80
 80053fe:	00db      	lsls	r3, r3, #3
 8005400:	429a      	cmp	r2, r3
 8005402:	d107      	bne.n	8005414 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2140      	movs	r1, #64	; 0x40
 8005410:	438a      	bics	r2, r1
 8005412:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	9300      	str	r3, [sp, #0]
 800541c:	0013      	movs	r3, r2
 800541e:	2200      	movs	r2, #0
 8005420:	2180      	movs	r1, #128	; 0x80
 8005422:	f7ff fea7 	bl	8005174 <SPI_WaitFlagStateUntilTimeout>
 8005426:	1e03      	subs	r3, r0, #0
 8005428:	d007      	beq.n	800543a <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800542e:	2220      	movs	r2, #32
 8005430:	431a      	orrs	r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e026      	b.n	8005488 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	685a      	ldr	r2, [r3, #4]
 800543e:	2382      	movs	r3, #130	; 0x82
 8005440:	005b      	lsls	r3, r3, #1
 8005442:	429a      	cmp	r2, r3
 8005444:	d11f      	bne.n	8005486 <SPI_EndRxTransaction+0xb2>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	689a      	ldr	r2, [r3, #8]
 800544a:	2380      	movs	r3, #128	; 0x80
 800544c:	021b      	lsls	r3, r3, #8
 800544e:	429a      	cmp	r2, r3
 8005450:	d005      	beq.n	800545e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	689a      	ldr	r2, [r3, #8]
 8005456:	2380      	movs	r3, #128	; 0x80
 8005458:	00db      	lsls	r3, r3, #3
 800545a:	429a      	cmp	r2, r3
 800545c:	d113      	bne.n	8005486 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	23c0      	movs	r3, #192	; 0xc0
 8005462:	00d9      	lsls	r1, r3, #3
 8005464:	68f8      	ldr	r0, [r7, #12]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	9300      	str	r3, [sp, #0]
 800546a:	0013      	movs	r3, r2
 800546c:	2200      	movs	r2, #0
 800546e:	f7ff ff0f 	bl	8005290 <SPI_WaitFifoStateUntilTimeout>
 8005472:	1e03      	subs	r3, r0, #0
 8005474:	d007      	beq.n	8005486 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800547a:	2220      	movs	r2, #32
 800547c:	431a      	orrs	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e000      	b.n	8005488 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	0018      	movs	r0, r3
 800548a:	46bd      	mov	sp, r7
 800548c:	b004      	add	sp, #16
 800548e:	bd80      	pop	{r7, pc}

08005490 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b086      	sub	sp, #24
 8005494:	af02      	add	r7, sp, #8
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	23c0      	movs	r3, #192	; 0xc0
 80054a0:	0159      	lsls	r1, r3, #5
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	9300      	str	r3, [sp, #0]
 80054a8:	0013      	movs	r3, r2
 80054aa:	2200      	movs	r2, #0
 80054ac:	f7ff fef0 	bl	8005290 <SPI_WaitFifoStateUntilTimeout>
 80054b0:	1e03      	subs	r3, r0, #0
 80054b2:	d007      	beq.n	80054c4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054b8:	2220      	movs	r2, #32
 80054ba:	431a      	orrs	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e027      	b.n	8005514 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054c4:	68ba      	ldr	r2, [r7, #8]
 80054c6:	68f8      	ldr	r0, [r7, #12]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	9300      	str	r3, [sp, #0]
 80054cc:	0013      	movs	r3, r2
 80054ce:	2200      	movs	r2, #0
 80054d0:	2180      	movs	r1, #128	; 0x80
 80054d2:	f7ff fe4f 	bl	8005174 <SPI_WaitFlagStateUntilTimeout>
 80054d6:	1e03      	subs	r3, r0, #0
 80054d8:	d007      	beq.n	80054ea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054de:	2220      	movs	r2, #32
 80054e0:	431a      	orrs	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e014      	b.n	8005514 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80054ea:	68ba      	ldr	r2, [r7, #8]
 80054ec:	23c0      	movs	r3, #192	; 0xc0
 80054ee:	00d9      	lsls	r1, r3, #3
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	0013      	movs	r3, r2
 80054f8:	2200      	movs	r2, #0
 80054fa:	f7ff fec9 	bl	8005290 <SPI_WaitFifoStateUntilTimeout>
 80054fe:	1e03      	subs	r3, r0, #0
 8005500:	d007      	beq.n	8005512 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005506:	2220      	movs	r2, #32
 8005508:	431a      	orrs	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e000      	b.n	8005514 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	0018      	movs	r0, r3
 8005516:	46bd      	mov	sp, r7
 8005518:	b004      	add	sp, #16
 800551a:	bd80      	pop	{r7, pc}

0800551c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d101      	bne.n	800552e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e046      	b.n	80055bc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2288      	movs	r2, #136	; 0x88
 8005532:	589b      	ldr	r3, [r3, r2]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d107      	bne.n	8005548 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2284      	movs	r2, #132	; 0x84
 800553c:	2100      	movs	r1, #0
 800553e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	0018      	movs	r0, r3
 8005544:	f7fd feda 	bl	80032fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2288      	movs	r2, #136	; 0x88
 800554c:	2124      	movs	r1, #36	; 0x24
 800554e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2101      	movs	r1, #1
 800555c:	438a      	bics	r2, r1
 800555e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	0018      	movs	r0, r3
 8005564:	f000 f8cc 	bl	8005700 <UART_SetConfig>
 8005568:	0003      	movs	r3, r0
 800556a:	2b01      	cmp	r3, #1
 800556c:	d101      	bne.n	8005572 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e024      	b.n	80055bc <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005576:	2b00      	cmp	r3, #0
 8005578:	d003      	beq.n	8005582 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	0018      	movs	r0, r3
 800557e:	f000 fb7d 	bl	8005c7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	685a      	ldr	r2, [r3, #4]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	490d      	ldr	r1, [pc, #52]	; (80055c4 <HAL_UART_Init+0xa8>)
 800558e:	400a      	ands	r2, r1
 8005590:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	689a      	ldr	r2, [r3, #8]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	212a      	movs	r1, #42	; 0x2a
 800559e:	438a      	bics	r2, r1
 80055a0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2101      	movs	r1, #1
 80055ae:	430a      	orrs	r2, r1
 80055b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	0018      	movs	r0, r3
 80055b6:	f000 fc15 	bl	8005de4 <UART_CheckIdleState>
 80055ba:	0003      	movs	r3, r0
}
 80055bc:	0018      	movs	r0, r3
 80055be:	46bd      	mov	sp, r7
 80055c0:	b002      	add	sp, #8
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	ffffb7ff 	.word	0xffffb7ff

080055c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b08a      	sub	sp, #40	; 0x28
 80055cc:	af02      	add	r7, sp, #8
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	603b      	str	r3, [r7, #0]
 80055d4:	1dbb      	adds	r3, r7, #6
 80055d6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2288      	movs	r2, #136	; 0x88
 80055dc:	589b      	ldr	r3, [r3, r2]
 80055de:	2b20      	cmp	r3, #32
 80055e0:	d000      	beq.n	80055e4 <HAL_UART_Transmit+0x1c>
 80055e2:	e088      	b.n	80056f6 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d003      	beq.n	80055f2 <HAL_UART_Transmit+0x2a>
 80055ea:	1dbb      	adds	r3, r7, #6
 80055ec:	881b      	ldrh	r3, [r3, #0]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e080      	b.n	80056f8 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	689a      	ldr	r2, [r3, #8]
 80055fa:	2380      	movs	r3, #128	; 0x80
 80055fc:	015b      	lsls	r3, r3, #5
 80055fe:	429a      	cmp	r2, r3
 8005600:	d109      	bne.n	8005616 <HAL_UART_Transmit+0x4e>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d105      	bne.n	8005616 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	2201      	movs	r2, #1
 800560e:	4013      	ands	r3, r2
 8005610:	d001      	beq.n	8005616 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e070      	b.n	80056f8 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2290      	movs	r2, #144	; 0x90
 800561a:	2100      	movs	r1, #0
 800561c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2288      	movs	r2, #136	; 0x88
 8005622:	2121      	movs	r1, #33	; 0x21
 8005624:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005626:	f7fd ff6f 	bl	8003508 <HAL_GetTick>
 800562a:	0003      	movs	r3, r0
 800562c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	1dba      	adds	r2, r7, #6
 8005632:	2154      	movs	r1, #84	; 0x54
 8005634:	8812      	ldrh	r2, [r2, #0]
 8005636:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	1dba      	adds	r2, r7, #6
 800563c:	2156      	movs	r1, #86	; 0x56
 800563e:	8812      	ldrh	r2, [r2, #0]
 8005640:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	689a      	ldr	r2, [r3, #8]
 8005646:	2380      	movs	r3, #128	; 0x80
 8005648:	015b      	lsls	r3, r3, #5
 800564a:	429a      	cmp	r2, r3
 800564c:	d108      	bne.n	8005660 <HAL_UART_Transmit+0x98>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d104      	bne.n	8005660 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8005656:	2300      	movs	r3, #0
 8005658:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	61bb      	str	r3, [r7, #24]
 800565e:	e003      	b.n	8005668 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005664:	2300      	movs	r3, #0
 8005666:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005668:	e02c      	b.n	80056c4 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800566a:	697a      	ldr	r2, [r7, #20]
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	9300      	str	r3, [sp, #0]
 8005672:	0013      	movs	r3, r2
 8005674:	2200      	movs	r2, #0
 8005676:	2180      	movs	r1, #128	; 0x80
 8005678:	f000 fc02 	bl	8005e80 <UART_WaitOnFlagUntilTimeout>
 800567c:	1e03      	subs	r3, r0, #0
 800567e:	d001      	beq.n	8005684 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e039      	b.n	80056f8 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d10b      	bne.n	80056a2 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	881b      	ldrh	r3, [r3, #0]
 800568e:	001a      	movs	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	05d2      	lsls	r2, r2, #23
 8005696:	0dd2      	lsrs	r2, r2, #23
 8005698:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	3302      	adds	r3, #2
 800569e:	61bb      	str	r3, [r7, #24]
 80056a0:	e007      	b.n	80056b2 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	781a      	ldrb	r2, [r3, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	3301      	adds	r3, #1
 80056b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2256      	movs	r2, #86	; 0x56
 80056b6:	5a9b      	ldrh	r3, [r3, r2]
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	3b01      	subs	r3, #1
 80056bc:	b299      	uxth	r1, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2256      	movs	r2, #86	; 0x56
 80056c2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2256      	movs	r2, #86	; 0x56
 80056c8:	5a9b      	ldrh	r3, [r3, r2]
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d1cc      	bne.n	800566a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	9300      	str	r3, [sp, #0]
 80056d8:	0013      	movs	r3, r2
 80056da:	2200      	movs	r2, #0
 80056dc:	2140      	movs	r1, #64	; 0x40
 80056de:	f000 fbcf 	bl	8005e80 <UART_WaitOnFlagUntilTimeout>
 80056e2:	1e03      	subs	r3, r0, #0
 80056e4:	d001      	beq.n	80056ea <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e006      	b.n	80056f8 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2288      	movs	r2, #136	; 0x88
 80056ee:	2120      	movs	r1, #32
 80056f0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80056f2:	2300      	movs	r3, #0
 80056f4:	e000      	b.n	80056f8 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80056f6:	2302      	movs	r3, #2
  }
}
 80056f8:	0018      	movs	r0, r3
 80056fa:	46bd      	mov	sp, r7
 80056fc:	b008      	add	sp, #32
 80056fe:	bd80      	pop	{r7, pc}

08005700 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005700:	b5b0      	push	{r4, r5, r7, lr}
 8005702:	b090      	sub	sp, #64	; 0x40
 8005704:	af00      	add	r7, sp, #0
 8005706:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005708:	231a      	movs	r3, #26
 800570a:	2220      	movs	r2, #32
 800570c:	189b      	adds	r3, r3, r2
 800570e:	19db      	adds	r3, r3, r7
 8005710:	2200      	movs	r2, #0
 8005712:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005716:	689a      	ldr	r2, [r3, #8]
 8005718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	431a      	orrs	r2, r3
 800571e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005720:	695b      	ldr	r3, [r3, #20]
 8005722:	431a      	orrs	r2, r3
 8005724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005726:	69db      	ldr	r3, [r3, #28]
 8005728:	4313      	orrs	r3, r2
 800572a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800572c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4aaf      	ldr	r2, [pc, #700]	; (80059f0 <UART_SetConfig+0x2f0>)
 8005734:	4013      	ands	r3, r2
 8005736:	0019      	movs	r1, r3
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800573e:	430b      	orrs	r3, r1
 8005740:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	4aaa      	ldr	r2, [pc, #680]	; (80059f4 <UART_SetConfig+0x2f4>)
 800574a:	4013      	ands	r3, r2
 800574c:	0018      	movs	r0, r3
 800574e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005750:	68d9      	ldr	r1, [r3, #12]
 8005752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	0003      	movs	r3, r0
 8005758:	430b      	orrs	r3, r1
 800575a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800575c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4aa4      	ldr	r2, [pc, #656]	; (80059f8 <UART_SetConfig+0x2f8>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d004      	beq.n	8005776 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800576c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005772:	4313      	orrs	r3, r2
 8005774:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	4a9f      	ldr	r2, [pc, #636]	; (80059fc <UART_SetConfig+0x2fc>)
 800577e:	4013      	ands	r3, r2
 8005780:	0019      	movs	r1, r3
 8005782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005788:	430b      	orrs	r3, r1
 800578a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800578c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005792:	220f      	movs	r2, #15
 8005794:	4393      	bics	r3, r2
 8005796:	0018      	movs	r0, r3
 8005798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800579c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	0003      	movs	r3, r0
 80057a2:	430b      	orrs	r3, r1
 80057a4:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a95      	ldr	r2, [pc, #596]	; (8005a00 <UART_SetConfig+0x300>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d131      	bne.n	8005814 <UART_SetConfig+0x114>
 80057b0:	4b94      	ldr	r3, [pc, #592]	; (8005a04 <UART_SetConfig+0x304>)
 80057b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b4:	2203      	movs	r2, #3
 80057b6:	4013      	ands	r3, r2
 80057b8:	2b03      	cmp	r3, #3
 80057ba:	d01d      	beq.n	80057f8 <UART_SetConfig+0xf8>
 80057bc:	d823      	bhi.n	8005806 <UART_SetConfig+0x106>
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d00c      	beq.n	80057dc <UART_SetConfig+0xdc>
 80057c2:	d820      	bhi.n	8005806 <UART_SetConfig+0x106>
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d002      	beq.n	80057ce <UART_SetConfig+0xce>
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d00e      	beq.n	80057ea <UART_SetConfig+0xea>
 80057cc:	e01b      	b.n	8005806 <UART_SetConfig+0x106>
 80057ce:	231b      	movs	r3, #27
 80057d0:	2220      	movs	r2, #32
 80057d2:	189b      	adds	r3, r3, r2
 80057d4:	19db      	adds	r3, r3, r7
 80057d6:	2200      	movs	r2, #0
 80057d8:	701a      	strb	r2, [r3, #0]
 80057da:	e0b4      	b.n	8005946 <UART_SetConfig+0x246>
 80057dc:	231b      	movs	r3, #27
 80057de:	2220      	movs	r2, #32
 80057e0:	189b      	adds	r3, r3, r2
 80057e2:	19db      	adds	r3, r3, r7
 80057e4:	2202      	movs	r2, #2
 80057e6:	701a      	strb	r2, [r3, #0]
 80057e8:	e0ad      	b.n	8005946 <UART_SetConfig+0x246>
 80057ea:	231b      	movs	r3, #27
 80057ec:	2220      	movs	r2, #32
 80057ee:	189b      	adds	r3, r3, r2
 80057f0:	19db      	adds	r3, r3, r7
 80057f2:	2204      	movs	r2, #4
 80057f4:	701a      	strb	r2, [r3, #0]
 80057f6:	e0a6      	b.n	8005946 <UART_SetConfig+0x246>
 80057f8:	231b      	movs	r3, #27
 80057fa:	2220      	movs	r2, #32
 80057fc:	189b      	adds	r3, r3, r2
 80057fe:	19db      	adds	r3, r3, r7
 8005800:	2208      	movs	r2, #8
 8005802:	701a      	strb	r2, [r3, #0]
 8005804:	e09f      	b.n	8005946 <UART_SetConfig+0x246>
 8005806:	231b      	movs	r3, #27
 8005808:	2220      	movs	r2, #32
 800580a:	189b      	adds	r3, r3, r2
 800580c:	19db      	adds	r3, r3, r7
 800580e:	2210      	movs	r2, #16
 8005810:	701a      	strb	r2, [r3, #0]
 8005812:	e098      	b.n	8005946 <UART_SetConfig+0x246>
 8005814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a7b      	ldr	r2, [pc, #492]	; (8005a08 <UART_SetConfig+0x308>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d131      	bne.n	8005882 <UART_SetConfig+0x182>
 800581e:	4b79      	ldr	r3, [pc, #484]	; (8005a04 <UART_SetConfig+0x304>)
 8005820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005822:	220c      	movs	r2, #12
 8005824:	4013      	ands	r3, r2
 8005826:	2b0c      	cmp	r3, #12
 8005828:	d01d      	beq.n	8005866 <UART_SetConfig+0x166>
 800582a:	d823      	bhi.n	8005874 <UART_SetConfig+0x174>
 800582c:	2b08      	cmp	r3, #8
 800582e:	d00c      	beq.n	800584a <UART_SetConfig+0x14a>
 8005830:	d820      	bhi.n	8005874 <UART_SetConfig+0x174>
 8005832:	2b00      	cmp	r3, #0
 8005834:	d002      	beq.n	800583c <UART_SetConfig+0x13c>
 8005836:	2b04      	cmp	r3, #4
 8005838:	d00e      	beq.n	8005858 <UART_SetConfig+0x158>
 800583a:	e01b      	b.n	8005874 <UART_SetConfig+0x174>
 800583c:	231b      	movs	r3, #27
 800583e:	2220      	movs	r2, #32
 8005840:	189b      	adds	r3, r3, r2
 8005842:	19db      	adds	r3, r3, r7
 8005844:	2200      	movs	r2, #0
 8005846:	701a      	strb	r2, [r3, #0]
 8005848:	e07d      	b.n	8005946 <UART_SetConfig+0x246>
 800584a:	231b      	movs	r3, #27
 800584c:	2220      	movs	r2, #32
 800584e:	189b      	adds	r3, r3, r2
 8005850:	19db      	adds	r3, r3, r7
 8005852:	2202      	movs	r2, #2
 8005854:	701a      	strb	r2, [r3, #0]
 8005856:	e076      	b.n	8005946 <UART_SetConfig+0x246>
 8005858:	231b      	movs	r3, #27
 800585a:	2220      	movs	r2, #32
 800585c:	189b      	adds	r3, r3, r2
 800585e:	19db      	adds	r3, r3, r7
 8005860:	2204      	movs	r2, #4
 8005862:	701a      	strb	r2, [r3, #0]
 8005864:	e06f      	b.n	8005946 <UART_SetConfig+0x246>
 8005866:	231b      	movs	r3, #27
 8005868:	2220      	movs	r2, #32
 800586a:	189b      	adds	r3, r3, r2
 800586c:	19db      	adds	r3, r3, r7
 800586e:	2208      	movs	r2, #8
 8005870:	701a      	strb	r2, [r3, #0]
 8005872:	e068      	b.n	8005946 <UART_SetConfig+0x246>
 8005874:	231b      	movs	r3, #27
 8005876:	2220      	movs	r2, #32
 8005878:	189b      	adds	r3, r3, r2
 800587a:	19db      	adds	r3, r3, r7
 800587c:	2210      	movs	r2, #16
 800587e:	701a      	strb	r2, [r3, #0]
 8005880:	e061      	b.n	8005946 <UART_SetConfig+0x246>
 8005882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a61      	ldr	r2, [pc, #388]	; (8005a0c <UART_SetConfig+0x30c>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d106      	bne.n	800589a <UART_SetConfig+0x19a>
 800588c:	231b      	movs	r3, #27
 800588e:	2220      	movs	r2, #32
 8005890:	189b      	adds	r3, r3, r2
 8005892:	19db      	adds	r3, r3, r7
 8005894:	2200      	movs	r2, #0
 8005896:	701a      	strb	r2, [r3, #0]
 8005898:	e055      	b.n	8005946 <UART_SetConfig+0x246>
 800589a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a5c      	ldr	r2, [pc, #368]	; (8005a10 <UART_SetConfig+0x310>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d106      	bne.n	80058b2 <UART_SetConfig+0x1b2>
 80058a4:	231b      	movs	r3, #27
 80058a6:	2220      	movs	r2, #32
 80058a8:	189b      	adds	r3, r3, r2
 80058aa:	19db      	adds	r3, r3, r7
 80058ac:	2200      	movs	r2, #0
 80058ae:	701a      	strb	r2, [r3, #0]
 80058b0:	e049      	b.n	8005946 <UART_SetConfig+0x246>
 80058b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a50      	ldr	r2, [pc, #320]	; (80059f8 <UART_SetConfig+0x2f8>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d13e      	bne.n	800593a <UART_SetConfig+0x23a>
 80058bc:	4b51      	ldr	r3, [pc, #324]	; (8005a04 <UART_SetConfig+0x304>)
 80058be:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058c0:	23c0      	movs	r3, #192	; 0xc0
 80058c2:	011b      	lsls	r3, r3, #4
 80058c4:	4013      	ands	r3, r2
 80058c6:	22c0      	movs	r2, #192	; 0xc0
 80058c8:	0112      	lsls	r2, r2, #4
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d027      	beq.n	800591e <UART_SetConfig+0x21e>
 80058ce:	22c0      	movs	r2, #192	; 0xc0
 80058d0:	0112      	lsls	r2, r2, #4
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d82a      	bhi.n	800592c <UART_SetConfig+0x22c>
 80058d6:	2280      	movs	r2, #128	; 0x80
 80058d8:	0112      	lsls	r2, r2, #4
 80058da:	4293      	cmp	r3, r2
 80058dc:	d011      	beq.n	8005902 <UART_SetConfig+0x202>
 80058de:	2280      	movs	r2, #128	; 0x80
 80058e0:	0112      	lsls	r2, r2, #4
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d822      	bhi.n	800592c <UART_SetConfig+0x22c>
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d004      	beq.n	80058f4 <UART_SetConfig+0x1f4>
 80058ea:	2280      	movs	r2, #128	; 0x80
 80058ec:	00d2      	lsls	r2, r2, #3
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d00e      	beq.n	8005910 <UART_SetConfig+0x210>
 80058f2:	e01b      	b.n	800592c <UART_SetConfig+0x22c>
 80058f4:	231b      	movs	r3, #27
 80058f6:	2220      	movs	r2, #32
 80058f8:	189b      	adds	r3, r3, r2
 80058fa:	19db      	adds	r3, r3, r7
 80058fc:	2200      	movs	r2, #0
 80058fe:	701a      	strb	r2, [r3, #0]
 8005900:	e021      	b.n	8005946 <UART_SetConfig+0x246>
 8005902:	231b      	movs	r3, #27
 8005904:	2220      	movs	r2, #32
 8005906:	189b      	adds	r3, r3, r2
 8005908:	19db      	adds	r3, r3, r7
 800590a:	2202      	movs	r2, #2
 800590c:	701a      	strb	r2, [r3, #0]
 800590e:	e01a      	b.n	8005946 <UART_SetConfig+0x246>
 8005910:	231b      	movs	r3, #27
 8005912:	2220      	movs	r2, #32
 8005914:	189b      	adds	r3, r3, r2
 8005916:	19db      	adds	r3, r3, r7
 8005918:	2204      	movs	r2, #4
 800591a:	701a      	strb	r2, [r3, #0]
 800591c:	e013      	b.n	8005946 <UART_SetConfig+0x246>
 800591e:	231b      	movs	r3, #27
 8005920:	2220      	movs	r2, #32
 8005922:	189b      	adds	r3, r3, r2
 8005924:	19db      	adds	r3, r3, r7
 8005926:	2208      	movs	r2, #8
 8005928:	701a      	strb	r2, [r3, #0]
 800592a:	e00c      	b.n	8005946 <UART_SetConfig+0x246>
 800592c:	231b      	movs	r3, #27
 800592e:	2220      	movs	r2, #32
 8005930:	189b      	adds	r3, r3, r2
 8005932:	19db      	adds	r3, r3, r7
 8005934:	2210      	movs	r2, #16
 8005936:	701a      	strb	r2, [r3, #0]
 8005938:	e005      	b.n	8005946 <UART_SetConfig+0x246>
 800593a:	231b      	movs	r3, #27
 800593c:	2220      	movs	r2, #32
 800593e:	189b      	adds	r3, r3, r2
 8005940:	19db      	adds	r3, r3, r7
 8005942:	2210      	movs	r2, #16
 8005944:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a2b      	ldr	r2, [pc, #172]	; (80059f8 <UART_SetConfig+0x2f8>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d000      	beq.n	8005952 <UART_SetConfig+0x252>
 8005950:	e0a9      	b.n	8005aa6 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005952:	231b      	movs	r3, #27
 8005954:	2220      	movs	r2, #32
 8005956:	189b      	adds	r3, r3, r2
 8005958:	19db      	adds	r3, r3, r7
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	2b08      	cmp	r3, #8
 800595e:	d015      	beq.n	800598c <UART_SetConfig+0x28c>
 8005960:	dc18      	bgt.n	8005994 <UART_SetConfig+0x294>
 8005962:	2b04      	cmp	r3, #4
 8005964:	d00d      	beq.n	8005982 <UART_SetConfig+0x282>
 8005966:	dc15      	bgt.n	8005994 <UART_SetConfig+0x294>
 8005968:	2b00      	cmp	r3, #0
 800596a:	d002      	beq.n	8005972 <UART_SetConfig+0x272>
 800596c:	2b02      	cmp	r3, #2
 800596e:	d005      	beq.n	800597c <UART_SetConfig+0x27c>
 8005970:	e010      	b.n	8005994 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005972:	f7fe fd03 	bl	800437c <HAL_RCC_GetPCLK1Freq>
 8005976:	0003      	movs	r3, r0
 8005978:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800597a:	e014      	b.n	80059a6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800597c:	4b25      	ldr	r3, [pc, #148]	; (8005a14 <UART_SetConfig+0x314>)
 800597e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005980:	e011      	b.n	80059a6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005982:	f7fe fc6f 	bl	8004264 <HAL_RCC_GetSysClockFreq>
 8005986:	0003      	movs	r3, r0
 8005988:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800598a:	e00c      	b.n	80059a6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800598c:	2380      	movs	r3, #128	; 0x80
 800598e:	021b      	lsls	r3, r3, #8
 8005990:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005992:	e008      	b.n	80059a6 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8005994:	2300      	movs	r3, #0
 8005996:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005998:	231a      	movs	r3, #26
 800599a:	2220      	movs	r2, #32
 800599c:	189b      	adds	r3, r3, r2
 800599e:	19db      	adds	r3, r3, r7
 80059a0:	2201      	movs	r2, #1
 80059a2:	701a      	strb	r2, [r3, #0]
        break;
 80059a4:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80059a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d100      	bne.n	80059ae <UART_SetConfig+0x2ae>
 80059ac:	e14b      	b.n	8005c46 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80059ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059b2:	4b19      	ldr	r3, [pc, #100]	; (8005a18 <UART_SetConfig+0x318>)
 80059b4:	0052      	lsls	r2, r2, #1
 80059b6:	5ad3      	ldrh	r3, [r2, r3]
 80059b8:	0019      	movs	r1, r3
 80059ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80059bc:	f7fa fbbe 	bl	800013c <__udivsi3>
 80059c0:	0003      	movs	r3, r0
 80059c2:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c6:	685a      	ldr	r2, [r3, #4]
 80059c8:	0013      	movs	r3, r2
 80059ca:	005b      	lsls	r3, r3, #1
 80059cc:	189b      	adds	r3, r3, r2
 80059ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d305      	bcc.n	80059e0 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80059d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059dc:	429a      	cmp	r2, r3
 80059de:	d91d      	bls.n	8005a1c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80059e0:	231a      	movs	r3, #26
 80059e2:	2220      	movs	r2, #32
 80059e4:	189b      	adds	r3, r3, r2
 80059e6:	19db      	adds	r3, r3, r7
 80059e8:	2201      	movs	r2, #1
 80059ea:	701a      	strb	r2, [r3, #0]
 80059ec:	e12b      	b.n	8005c46 <UART_SetConfig+0x546>
 80059ee:	46c0      	nop			; (mov r8, r8)
 80059f0:	cfff69f3 	.word	0xcfff69f3
 80059f4:	ffffcfff 	.word	0xffffcfff
 80059f8:	40008000 	.word	0x40008000
 80059fc:	11fff4ff 	.word	0x11fff4ff
 8005a00:	40013800 	.word	0x40013800
 8005a04:	40021000 	.word	0x40021000
 8005a08:	40004400 	.word	0x40004400
 8005a0c:	40004800 	.word	0x40004800
 8005a10:	40004c00 	.word	0x40004c00
 8005a14:	00f42400 	.word	0x00f42400
 8005a18:	080093a4 	.word	0x080093a4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a1e:	61bb      	str	r3, [r7, #24]
 8005a20:	2300      	movs	r3, #0
 8005a22:	61fb      	str	r3, [r7, #28]
 8005a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a28:	4b92      	ldr	r3, [pc, #584]	; (8005c74 <UART_SetConfig+0x574>)
 8005a2a:	0052      	lsls	r2, r2, #1
 8005a2c:	5ad3      	ldrh	r3, [r2, r3]
 8005a2e:	613b      	str	r3, [r7, #16]
 8005a30:	2300      	movs	r3, #0
 8005a32:	617b      	str	r3, [r7, #20]
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	69b8      	ldr	r0, [r7, #24]
 8005a3a:	69f9      	ldr	r1, [r7, #28]
 8005a3c:	f7fa fd32 	bl	80004a4 <__aeabi_uldivmod>
 8005a40:	0002      	movs	r2, r0
 8005a42:	000b      	movs	r3, r1
 8005a44:	0e11      	lsrs	r1, r2, #24
 8005a46:	021d      	lsls	r5, r3, #8
 8005a48:	430d      	orrs	r5, r1
 8005a4a:	0214      	lsls	r4, r2, #8
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	085b      	lsrs	r3, r3, #1
 8005a52:	60bb      	str	r3, [r7, #8]
 8005a54:	2300      	movs	r3, #0
 8005a56:	60fb      	str	r3, [r7, #12]
 8005a58:	68b8      	ldr	r0, [r7, #8]
 8005a5a:	68f9      	ldr	r1, [r7, #12]
 8005a5c:	1900      	adds	r0, r0, r4
 8005a5e:	4169      	adcs	r1, r5
 8005a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	603b      	str	r3, [r7, #0]
 8005a66:	2300      	movs	r3, #0
 8005a68:	607b      	str	r3, [r7, #4]
 8005a6a:	683a      	ldr	r2, [r7, #0]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f7fa fd19 	bl	80004a4 <__aeabi_uldivmod>
 8005a72:	0002      	movs	r2, r0
 8005a74:	000b      	movs	r3, r1
 8005a76:	0013      	movs	r3, r2
 8005a78:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a7c:	23c0      	movs	r3, #192	; 0xc0
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d309      	bcc.n	8005a98 <UART_SetConfig+0x398>
 8005a84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a86:	2380      	movs	r3, #128	; 0x80
 8005a88:	035b      	lsls	r3, r3, #13
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d204      	bcs.n	8005a98 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8005a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a94:	60da      	str	r2, [r3, #12]
 8005a96:	e0d6      	b.n	8005c46 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8005a98:	231a      	movs	r3, #26
 8005a9a:	2220      	movs	r2, #32
 8005a9c:	189b      	adds	r3, r3, r2
 8005a9e:	19db      	adds	r3, r3, r7
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	701a      	strb	r2, [r3, #0]
 8005aa4:	e0cf      	b.n	8005c46 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa8:	69da      	ldr	r2, [r3, #28]
 8005aaa:	2380      	movs	r3, #128	; 0x80
 8005aac:	021b      	lsls	r3, r3, #8
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d000      	beq.n	8005ab4 <UART_SetConfig+0x3b4>
 8005ab2:	e070      	b.n	8005b96 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8005ab4:	231b      	movs	r3, #27
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	189b      	adds	r3, r3, r2
 8005aba:	19db      	adds	r3, r3, r7
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	2b08      	cmp	r3, #8
 8005ac0:	d015      	beq.n	8005aee <UART_SetConfig+0x3ee>
 8005ac2:	dc18      	bgt.n	8005af6 <UART_SetConfig+0x3f6>
 8005ac4:	2b04      	cmp	r3, #4
 8005ac6:	d00d      	beq.n	8005ae4 <UART_SetConfig+0x3e4>
 8005ac8:	dc15      	bgt.n	8005af6 <UART_SetConfig+0x3f6>
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d002      	beq.n	8005ad4 <UART_SetConfig+0x3d4>
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d005      	beq.n	8005ade <UART_SetConfig+0x3de>
 8005ad2:	e010      	b.n	8005af6 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ad4:	f7fe fc52 	bl	800437c <HAL_RCC_GetPCLK1Freq>
 8005ad8:	0003      	movs	r3, r0
 8005ada:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005adc:	e014      	b.n	8005b08 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ade:	4b66      	ldr	r3, [pc, #408]	; (8005c78 <UART_SetConfig+0x578>)
 8005ae0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ae2:	e011      	b.n	8005b08 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ae4:	f7fe fbbe 	bl	8004264 <HAL_RCC_GetSysClockFreq>
 8005ae8:	0003      	movs	r3, r0
 8005aea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005aec:	e00c      	b.n	8005b08 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005aee:	2380      	movs	r3, #128	; 0x80
 8005af0:	021b      	lsls	r3, r3, #8
 8005af2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005af4:	e008      	b.n	8005b08 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005af6:	2300      	movs	r3, #0
 8005af8:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005afa:	231a      	movs	r3, #26
 8005afc:	2220      	movs	r2, #32
 8005afe:	189b      	adds	r3, r3, r2
 8005b00:	19db      	adds	r3, r3, r7
 8005b02:	2201      	movs	r2, #1
 8005b04:	701a      	strb	r2, [r3, #0]
        break;
 8005b06:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d100      	bne.n	8005b10 <UART_SetConfig+0x410>
 8005b0e:	e09a      	b.n	8005c46 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b14:	4b57      	ldr	r3, [pc, #348]	; (8005c74 <UART_SetConfig+0x574>)
 8005b16:	0052      	lsls	r2, r2, #1
 8005b18:	5ad3      	ldrh	r3, [r2, r3]
 8005b1a:	0019      	movs	r1, r3
 8005b1c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005b1e:	f7fa fb0d 	bl	800013c <__udivsi3>
 8005b22:	0003      	movs	r3, r0
 8005b24:	005a      	lsls	r2, r3, #1
 8005b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	085b      	lsrs	r3, r3, #1
 8005b2c:	18d2      	adds	r2, r2, r3
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	0019      	movs	r1, r3
 8005b34:	0010      	movs	r0, r2
 8005b36:	f7fa fb01 	bl	800013c <__udivsi3>
 8005b3a:	0003      	movs	r3, r0
 8005b3c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b40:	2b0f      	cmp	r3, #15
 8005b42:	d921      	bls.n	8005b88 <UART_SetConfig+0x488>
 8005b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b46:	2380      	movs	r3, #128	; 0x80
 8005b48:	025b      	lsls	r3, r3, #9
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d21c      	bcs.n	8005b88 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	200e      	movs	r0, #14
 8005b54:	2420      	movs	r4, #32
 8005b56:	1903      	adds	r3, r0, r4
 8005b58:	19db      	adds	r3, r3, r7
 8005b5a:	210f      	movs	r1, #15
 8005b5c:	438a      	bics	r2, r1
 8005b5e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b62:	085b      	lsrs	r3, r3, #1
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	2207      	movs	r2, #7
 8005b68:	4013      	ands	r3, r2
 8005b6a:	b299      	uxth	r1, r3
 8005b6c:	1903      	adds	r3, r0, r4
 8005b6e:	19db      	adds	r3, r3, r7
 8005b70:	1902      	adds	r2, r0, r4
 8005b72:	19d2      	adds	r2, r2, r7
 8005b74:	8812      	ldrh	r2, [r2, #0]
 8005b76:	430a      	orrs	r2, r1
 8005b78:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	1902      	adds	r2, r0, r4
 8005b80:	19d2      	adds	r2, r2, r7
 8005b82:	8812      	ldrh	r2, [r2, #0]
 8005b84:	60da      	str	r2, [r3, #12]
 8005b86:	e05e      	b.n	8005c46 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8005b88:	231a      	movs	r3, #26
 8005b8a:	2220      	movs	r2, #32
 8005b8c:	189b      	adds	r3, r3, r2
 8005b8e:	19db      	adds	r3, r3, r7
 8005b90:	2201      	movs	r2, #1
 8005b92:	701a      	strb	r2, [r3, #0]
 8005b94:	e057      	b.n	8005c46 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b96:	231b      	movs	r3, #27
 8005b98:	2220      	movs	r2, #32
 8005b9a:	189b      	adds	r3, r3, r2
 8005b9c:	19db      	adds	r3, r3, r7
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	2b08      	cmp	r3, #8
 8005ba2:	d015      	beq.n	8005bd0 <UART_SetConfig+0x4d0>
 8005ba4:	dc18      	bgt.n	8005bd8 <UART_SetConfig+0x4d8>
 8005ba6:	2b04      	cmp	r3, #4
 8005ba8:	d00d      	beq.n	8005bc6 <UART_SetConfig+0x4c6>
 8005baa:	dc15      	bgt.n	8005bd8 <UART_SetConfig+0x4d8>
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d002      	beq.n	8005bb6 <UART_SetConfig+0x4b6>
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d005      	beq.n	8005bc0 <UART_SetConfig+0x4c0>
 8005bb4:	e010      	b.n	8005bd8 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bb6:	f7fe fbe1 	bl	800437c <HAL_RCC_GetPCLK1Freq>
 8005bba:	0003      	movs	r3, r0
 8005bbc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005bbe:	e014      	b.n	8005bea <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bc0:	4b2d      	ldr	r3, [pc, #180]	; (8005c78 <UART_SetConfig+0x578>)
 8005bc2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005bc4:	e011      	b.n	8005bea <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bc6:	f7fe fb4d 	bl	8004264 <HAL_RCC_GetSysClockFreq>
 8005bca:	0003      	movs	r3, r0
 8005bcc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005bce:	e00c      	b.n	8005bea <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bd0:	2380      	movs	r3, #128	; 0x80
 8005bd2:	021b      	lsls	r3, r3, #8
 8005bd4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005bd6:	e008      	b.n	8005bea <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005bdc:	231a      	movs	r3, #26
 8005bde:	2220      	movs	r2, #32
 8005be0:	189b      	adds	r3, r3, r2
 8005be2:	19db      	adds	r3, r3, r7
 8005be4:	2201      	movs	r2, #1
 8005be6:	701a      	strb	r2, [r3, #0]
        break;
 8005be8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d02a      	beq.n	8005c46 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bf4:	4b1f      	ldr	r3, [pc, #124]	; (8005c74 <UART_SetConfig+0x574>)
 8005bf6:	0052      	lsls	r2, r2, #1
 8005bf8:	5ad3      	ldrh	r3, [r2, r3]
 8005bfa:	0019      	movs	r1, r3
 8005bfc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005bfe:	f7fa fa9d 	bl	800013c <__udivsi3>
 8005c02:	0003      	movs	r3, r0
 8005c04:	001a      	movs	r2, r3
 8005c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	085b      	lsrs	r3, r3, #1
 8005c0c:	18d2      	adds	r2, r2, r3
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	0019      	movs	r1, r3
 8005c14:	0010      	movs	r0, r2
 8005c16:	f7fa fa91 	bl	800013c <__udivsi3>
 8005c1a:	0003      	movs	r3, r0
 8005c1c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c20:	2b0f      	cmp	r3, #15
 8005c22:	d90a      	bls.n	8005c3a <UART_SetConfig+0x53a>
 8005c24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c26:	2380      	movs	r3, #128	; 0x80
 8005c28:	025b      	lsls	r3, r3, #9
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d205      	bcs.n	8005c3a <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	60da      	str	r2, [r3, #12]
 8005c38:	e005      	b.n	8005c46 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8005c3a:	231a      	movs	r3, #26
 8005c3c:	2220      	movs	r2, #32
 8005c3e:	189b      	adds	r3, r3, r2
 8005c40:	19db      	adds	r3, r3, r7
 8005c42:	2201      	movs	r2, #1
 8005c44:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c48:	226a      	movs	r2, #106	; 0x6a
 8005c4a:	2101      	movs	r1, #1
 8005c4c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c50:	2268      	movs	r2, #104	; 0x68
 8005c52:	2101      	movs	r1, #1
 8005c54:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c58:	2200      	movs	r2, #0
 8005c5a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5e:	2200      	movs	r2, #0
 8005c60:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005c62:	231a      	movs	r3, #26
 8005c64:	2220      	movs	r2, #32
 8005c66:	189b      	adds	r3, r3, r2
 8005c68:	19db      	adds	r3, r3, r7
 8005c6a:	781b      	ldrb	r3, [r3, #0]
}
 8005c6c:	0018      	movs	r0, r3
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	b010      	add	sp, #64	; 0x40
 8005c72:	bdb0      	pop	{r4, r5, r7, pc}
 8005c74:	080093a4 	.word	0x080093a4
 8005c78:	00f42400 	.word	0x00f42400

08005c7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b082      	sub	sp, #8
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c88:	2201      	movs	r2, #1
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	d00b      	beq.n	8005ca6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	4a4a      	ldr	r2, [pc, #296]	; (8005dc0 <UART_AdvFeatureConfig+0x144>)
 8005c96:	4013      	ands	r3, r2
 8005c98:	0019      	movs	r1, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005caa:	2202      	movs	r2, #2
 8005cac:	4013      	ands	r3, r2
 8005cae:	d00b      	beq.n	8005cc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	4a43      	ldr	r2, [pc, #268]	; (8005dc4 <UART_AdvFeatureConfig+0x148>)
 8005cb8:	4013      	ands	r3, r2
 8005cba:	0019      	movs	r1, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ccc:	2204      	movs	r2, #4
 8005cce:	4013      	ands	r3, r2
 8005cd0:	d00b      	beq.n	8005cea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	4a3b      	ldr	r2, [pc, #236]	; (8005dc8 <UART_AdvFeatureConfig+0x14c>)
 8005cda:	4013      	ands	r3, r2
 8005cdc:	0019      	movs	r1, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cee:	2208      	movs	r2, #8
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	d00b      	beq.n	8005d0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	4a34      	ldr	r2, [pc, #208]	; (8005dcc <UART_AdvFeatureConfig+0x150>)
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	0019      	movs	r1, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d10:	2210      	movs	r2, #16
 8005d12:	4013      	ands	r3, r2
 8005d14:	d00b      	beq.n	8005d2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	4a2c      	ldr	r2, [pc, #176]	; (8005dd0 <UART_AdvFeatureConfig+0x154>)
 8005d1e:	4013      	ands	r3, r2
 8005d20:	0019      	movs	r1, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d32:	2220      	movs	r2, #32
 8005d34:	4013      	ands	r3, r2
 8005d36:	d00b      	beq.n	8005d50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	4a25      	ldr	r2, [pc, #148]	; (8005dd4 <UART_AdvFeatureConfig+0x158>)
 8005d40:	4013      	ands	r3, r2
 8005d42:	0019      	movs	r1, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	430a      	orrs	r2, r1
 8005d4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d54:	2240      	movs	r2, #64	; 0x40
 8005d56:	4013      	ands	r3, r2
 8005d58:	d01d      	beq.n	8005d96 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	4a1d      	ldr	r2, [pc, #116]	; (8005dd8 <UART_AdvFeatureConfig+0x15c>)
 8005d62:	4013      	ands	r3, r2
 8005d64:	0019      	movs	r1, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d76:	2380      	movs	r3, #128	; 0x80
 8005d78:	035b      	lsls	r3, r3, #13
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d10b      	bne.n	8005d96 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	4a15      	ldr	r2, [pc, #84]	; (8005ddc <UART_AdvFeatureConfig+0x160>)
 8005d86:	4013      	ands	r3, r2
 8005d88:	0019      	movs	r1, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	430a      	orrs	r2, r1
 8005d94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9a:	2280      	movs	r2, #128	; 0x80
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	d00b      	beq.n	8005db8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	4a0e      	ldr	r2, [pc, #56]	; (8005de0 <UART_AdvFeatureConfig+0x164>)
 8005da8:	4013      	ands	r3, r2
 8005daa:	0019      	movs	r1, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	430a      	orrs	r2, r1
 8005db6:	605a      	str	r2, [r3, #4]
  }
}
 8005db8:	46c0      	nop			; (mov r8, r8)
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	b002      	add	sp, #8
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	fffdffff 	.word	0xfffdffff
 8005dc4:	fffeffff 	.word	0xfffeffff
 8005dc8:	fffbffff 	.word	0xfffbffff
 8005dcc:	ffff7fff 	.word	0xffff7fff
 8005dd0:	ffffefff 	.word	0xffffefff
 8005dd4:	ffffdfff 	.word	0xffffdfff
 8005dd8:	ffefffff 	.word	0xffefffff
 8005ddc:	ff9fffff 	.word	0xff9fffff
 8005de0:	fff7ffff 	.word	0xfff7ffff

08005de4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b086      	sub	sp, #24
 8005de8:	af02      	add	r7, sp, #8
 8005dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2290      	movs	r2, #144	; 0x90
 8005df0:	2100      	movs	r1, #0
 8005df2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005df4:	f7fd fb88 	bl	8003508 <HAL_GetTick>
 8005df8:	0003      	movs	r3, r0
 8005dfa:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2208      	movs	r2, #8
 8005e04:	4013      	ands	r3, r2
 8005e06:	2b08      	cmp	r3, #8
 8005e08:	d10c      	bne.n	8005e24 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2280      	movs	r2, #128	; 0x80
 8005e0e:	0391      	lsls	r1, r2, #14
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	4a1a      	ldr	r2, [pc, #104]	; (8005e7c <UART_CheckIdleState+0x98>)
 8005e14:	9200      	str	r2, [sp, #0]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f000 f832 	bl	8005e80 <UART_WaitOnFlagUntilTimeout>
 8005e1c:	1e03      	subs	r3, r0, #0
 8005e1e:	d001      	beq.n	8005e24 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e026      	b.n	8005e72 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2204      	movs	r2, #4
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	2b04      	cmp	r3, #4
 8005e30:	d10c      	bne.n	8005e4c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2280      	movs	r2, #128	; 0x80
 8005e36:	03d1      	lsls	r1, r2, #15
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	4a10      	ldr	r2, [pc, #64]	; (8005e7c <UART_CheckIdleState+0x98>)
 8005e3c:	9200      	str	r2, [sp, #0]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f000 f81e 	bl	8005e80 <UART_WaitOnFlagUntilTimeout>
 8005e44:	1e03      	subs	r3, r0, #0
 8005e46:	d001      	beq.n	8005e4c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e012      	b.n	8005e72 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2288      	movs	r2, #136	; 0x88
 8005e50:	2120      	movs	r1, #32
 8005e52:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	228c      	movs	r2, #140	; 0x8c
 8005e58:	2120      	movs	r1, #32
 8005e5a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2284      	movs	r2, #132	; 0x84
 8005e6c:	2100      	movs	r1, #0
 8005e6e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	0018      	movs	r0, r3
 8005e74:	46bd      	mov	sp, r7
 8005e76:	b004      	add	sp, #16
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	46c0      	nop			; (mov r8, r8)
 8005e7c:	01ffffff 	.word	0x01ffffff

08005e80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b094      	sub	sp, #80	; 0x50
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	603b      	str	r3, [r7, #0]
 8005e8c:	1dfb      	adds	r3, r7, #7
 8005e8e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e90:	e0a7      	b.n	8005fe2 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e94:	3301      	adds	r3, #1
 8005e96:	d100      	bne.n	8005e9a <UART_WaitOnFlagUntilTimeout+0x1a>
 8005e98:	e0a3      	b.n	8005fe2 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e9a:	f7fd fb35 	bl	8003508 <HAL_GetTick>
 8005e9e:	0002      	movs	r2, r0
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d302      	bcc.n	8005eb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005eaa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d13f      	bne.n	8005f30 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005eb0:	f3ef 8310 	mrs	r3, PRIMASK
 8005eb4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005eb8:	647b      	str	r3, [r7, #68]	; 0x44
 8005eba:	2301      	movs	r3, #1
 8005ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec0:	f383 8810 	msr	PRIMASK, r3
}
 8005ec4:	46c0      	nop			; (mov r8, r8)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	494e      	ldr	r1, [pc, #312]	; (800600c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005ed2:	400a      	ands	r2, r1
 8005ed4:	601a      	str	r2, [r3, #0]
 8005ed6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ed8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005edc:	f383 8810 	msr	PRIMASK, r3
}
 8005ee0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ee2:	f3ef 8310 	mrs	r3, PRIMASK
 8005ee6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eea:	643b      	str	r3, [r7, #64]	; 0x40
 8005eec:	2301      	movs	r3, #1
 8005eee:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef2:	f383 8810 	msr	PRIMASK, r3
}
 8005ef6:	46c0      	nop			; (mov r8, r8)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	689a      	ldr	r2, [r3, #8]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2101      	movs	r1, #1
 8005f04:	438a      	bics	r2, r1
 8005f06:	609a      	str	r2, [r3, #8]
 8005f08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f0e:	f383 8810 	msr	PRIMASK, r3
}
 8005f12:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2288      	movs	r2, #136	; 0x88
 8005f18:	2120      	movs	r1, #32
 8005f1a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	228c      	movs	r2, #140	; 0x8c
 8005f20:	2120      	movs	r1, #32
 8005f22:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2284      	movs	r2, #132	; 0x84
 8005f28:	2100      	movs	r1, #0
 8005f2a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	e069      	b.n	8006004 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2204      	movs	r2, #4
 8005f38:	4013      	ands	r3, r2
 8005f3a:	d052      	beq.n	8005fe2 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	69da      	ldr	r2, [r3, #28]
 8005f42:	2380      	movs	r3, #128	; 0x80
 8005f44:	011b      	lsls	r3, r3, #4
 8005f46:	401a      	ands	r2, r3
 8005f48:	2380      	movs	r3, #128	; 0x80
 8005f4a:	011b      	lsls	r3, r3, #4
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d148      	bne.n	8005fe2 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2280      	movs	r2, #128	; 0x80
 8005f56:	0112      	lsls	r2, r2, #4
 8005f58:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f5a:	f3ef 8310 	mrs	r3, PRIMASK
 8005f5e:	613b      	str	r3, [r7, #16]
  return(result);
 8005f60:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005f62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f64:	2301      	movs	r3, #1
 8005f66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	f383 8810 	msr	PRIMASK, r3
}
 8005f6e:	46c0      	nop			; (mov r8, r8)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4924      	ldr	r1, [pc, #144]	; (800600c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005f7c:	400a      	ands	r2, r1
 8005f7e:	601a      	str	r2, [r3, #0]
 8005f80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f82:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	f383 8810 	msr	PRIMASK, r3
}
 8005f8a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f8c:	f3ef 8310 	mrs	r3, PRIMASK
 8005f90:	61fb      	str	r3, [r7, #28]
  return(result);
 8005f92:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f94:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f96:	2301      	movs	r3, #1
 8005f98:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f9a:	6a3b      	ldr	r3, [r7, #32]
 8005f9c:	f383 8810 	msr	PRIMASK, r3
}
 8005fa0:	46c0      	nop			; (mov r8, r8)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	689a      	ldr	r2, [r3, #8]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2101      	movs	r1, #1
 8005fae:	438a      	bics	r2, r1
 8005fb0:	609a      	str	r2, [r3, #8]
 8005fb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fb4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb8:	f383 8810 	msr	PRIMASK, r3
}
 8005fbc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2288      	movs	r2, #136	; 0x88
 8005fc2:	2120      	movs	r1, #32
 8005fc4:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	228c      	movs	r2, #140	; 0x8c
 8005fca:	2120      	movs	r1, #32
 8005fcc:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2290      	movs	r2, #144	; 0x90
 8005fd2:	2120      	movs	r1, #32
 8005fd4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2284      	movs	r2, #132	; 0x84
 8005fda:	2100      	movs	r1, #0
 8005fdc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e010      	b.n	8006004 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	69db      	ldr	r3, [r3, #28]
 8005fe8:	68ba      	ldr	r2, [r7, #8]
 8005fea:	4013      	ands	r3, r2
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	425a      	negs	r2, r3
 8005ff2:	4153      	adcs	r3, r2
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	001a      	movs	r2, r3
 8005ff8:	1dfb      	adds	r3, r7, #7
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d100      	bne.n	8006002 <UART_WaitOnFlagUntilTimeout+0x182>
 8006000:	e747      	b.n	8005e92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	0018      	movs	r0, r3
 8006006:	46bd      	mov	sp, r7
 8006008:	b014      	add	sp, #80	; 0x50
 800600a:	bd80      	pop	{r7, pc}
 800600c:	fffffe5f 	.word	0xfffffe5f

08006010 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2284      	movs	r2, #132	; 0x84
 800601c:	5c9b      	ldrb	r3, [r3, r2]
 800601e:	2b01      	cmp	r3, #1
 8006020:	d101      	bne.n	8006026 <HAL_UARTEx_DisableFifoMode+0x16>
 8006022:	2302      	movs	r3, #2
 8006024:	e027      	b.n	8006076 <HAL_UARTEx_DisableFifoMode+0x66>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2284      	movs	r2, #132	; 0x84
 800602a:	2101      	movs	r1, #1
 800602c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2288      	movs	r2, #136	; 0x88
 8006032:	2124      	movs	r1, #36	; 0x24
 8006034:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2101      	movs	r1, #1
 800604a:	438a      	bics	r2, r1
 800604c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	4a0b      	ldr	r2, [pc, #44]	; (8006080 <HAL_UARTEx_DisableFifoMode+0x70>)
 8006052:	4013      	ands	r3, r2
 8006054:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2288      	movs	r2, #136	; 0x88
 8006068:	2120      	movs	r1, #32
 800606a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2284      	movs	r2, #132	; 0x84
 8006070:	2100      	movs	r1, #0
 8006072:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	0018      	movs	r0, r3
 8006078:	46bd      	mov	sp, r7
 800607a:	b004      	add	sp, #16
 800607c:	bd80      	pop	{r7, pc}
 800607e:	46c0      	nop			; (mov r8, r8)
 8006080:	dfffffff 	.word	0xdfffffff

08006084 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2284      	movs	r2, #132	; 0x84
 8006092:	5c9b      	ldrb	r3, [r3, r2]
 8006094:	2b01      	cmp	r3, #1
 8006096:	d101      	bne.n	800609c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006098:	2302      	movs	r3, #2
 800609a:	e02e      	b.n	80060fa <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2284      	movs	r2, #132	; 0x84
 80060a0:	2101      	movs	r1, #1
 80060a2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2288      	movs	r2, #136	; 0x88
 80060a8:	2124      	movs	r1, #36	; 0x24
 80060aa:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2101      	movs	r1, #1
 80060c0:	438a      	bics	r2, r1
 80060c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	00db      	lsls	r3, r3, #3
 80060cc:	08d9      	lsrs	r1, r3, #3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	683a      	ldr	r2, [r7, #0]
 80060d4:	430a      	orrs	r2, r1
 80060d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	0018      	movs	r0, r3
 80060dc:	f000 f854 	bl	8006188 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2288      	movs	r2, #136	; 0x88
 80060ec:	2120      	movs	r1, #32
 80060ee:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2284      	movs	r2, #132	; 0x84
 80060f4:	2100      	movs	r1, #0
 80060f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	0018      	movs	r0, r3
 80060fc:	46bd      	mov	sp, r7
 80060fe:	b004      	add	sp, #16
 8006100:	bd80      	pop	{r7, pc}
	...

08006104 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2284      	movs	r2, #132	; 0x84
 8006112:	5c9b      	ldrb	r3, [r3, r2]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d101      	bne.n	800611c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006118:	2302      	movs	r3, #2
 800611a:	e02f      	b.n	800617c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2284      	movs	r2, #132	; 0x84
 8006120:	2101      	movs	r1, #1
 8006122:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2288      	movs	r2, #136	; 0x88
 8006128:	2124      	movs	r1, #36	; 0x24
 800612a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2101      	movs	r1, #1
 8006140:	438a      	bics	r2, r1
 8006142:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	4a0e      	ldr	r2, [pc, #56]	; (8006184 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800614c:	4013      	ands	r3, r2
 800614e:	0019      	movs	r1, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	683a      	ldr	r2, [r7, #0]
 8006156:	430a      	orrs	r2, r1
 8006158:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	0018      	movs	r0, r3
 800615e:	f000 f813 	bl	8006188 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2288      	movs	r2, #136	; 0x88
 800616e:	2120      	movs	r1, #32
 8006170:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2284      	movs	r2, #132	; 0x84
 8006176:	2100      	movs	r1, #0
 8006178:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	0018      	movs	r0, r3
 800617e:	46bd      	mov	sp, r7
 8006180:	b004      	add	sp, #16
 8006182:	bd80      	pop	{r7, pc}
 8006184:	f1ffffff 	.word	0xf1ffffff

08006188 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006194:	2b00      	cmp	r3, #0
 8006196:	d108      	bne.n	80061aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	226a      	movs	r2, #106	; 0x6a
 800619c:	2101      	movs	r1, #1
 800619e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2268      	movs	r2, #104	; 0x68
 80061a4:	2101      	movs	r1, #1
 80061a6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80061a8:	e043      	b.n	8006232 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80061aa:	260f      	movs	r6, #15
 80061ac:	19bb      	adds	r3, r7, r6
 80061ae:	2208      	movs	r2, #8
 80061b0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80061b2:	200e      	movs	r0, #14
 80061b4:	183b      	adds	r3, r7, r0
 80061b6:	2208      	movs	r2, #8
 80061b8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	0e5b      	lsrs	r3, r3, #25
 80061c2:	b2da      	uxtb	r2, r3
 80061c4:	240d      	movs	r4, #13
 80061c6:	193b      	adds	r3, r7, r4
 80061c8:	2107      	movs	r1, #7
 80061ca:	400a      	ands	r2, r1
 80061cc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	0f5b      	lsrs	r3, r3, #29
 80061d6:	b2da      	uxtb	r2, r3
 80061d8:	250c      	movs	r5, #12
 80061da:	197b      	adds	r3, r7, r5
 80061dc:	2107      	movs	r1, #7
 80061de:	400a      	ands	r2, r1
 80061e0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061e2:	183b      	adds	r3, r7, r0
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	197a      	adds	r2, r7, r5
 80061e8:	7812      	ldrb	r2, [r2, #0]
 80061ea:	4914      	ldr	r1, [pc, #80]	; (800623c <UARTEx_SetNbDataToProcess+0xb4>)
 80061ec:	5c8a      	ldrb	r2, [r1, r2]
 80061ee:	435a      	muls	r2, r3
 80061f0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80061f2:	197b      	adds	r3, r7, r5
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	4a12      	ldr	r2, [pc, #72]	; (8006240 <UARTEx_SetNbDataToProcess+0xb8>)
 80061f8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061fa:	0019      	movs	r1, r3
 80061fc:	f7fa f828 	bl	8000250 <__divsi3>
 8006200:	0003      	movs	r3, r0
 8006202:	b299      	uxth	r1, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	226a      	movs	r2, #106	; 0x6a
 8006208:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800620a:	19bb      	adds	r3, r7, r6
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	193a      	adds	r2, r7, r4
 8006210:	7812      	ldrb	r2, [r2, #0]
 8006212:	490a      	ldr	r1, [pc, #40]	; (800623c <UARTEx_SetNbDataToProcess+0xb4>)
 8006214:	5c8a      	ldrb	r2, [r1, r2]
 8006216:	435a      	muls	r2, r3
 8006218:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800621a:	193b      	adds	r3, r7, r4
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	4a08      	ldr	r2, [pc, #32]	; (8006240 <UARTEx_SetNbDataToProcess+0xb8>)
 8006220:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006222:	0019      	movs	r1, r3
 8006224:	f7fa f814 	bl	8000250 <__divsi3>
 8006228:	0003      	movs	r3, r0
 800622a:	b299      	uxth	r1, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2268      	movs	r2, #104	; 0x68
 8006230:	5299      	strh	r1, [r3, r2]
}
 8006232:	46c0      	nop			; (mov r8, r8)
 8006234:	46bd      	mov	sp, r7
 8006236:	b005      	add	sp, #20
 8006238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800623a:	46c0      	nop			; (mov r8, r8)
 800623c:	080093bc 	.word	0x080093bc
 8006240:	080093c4 	.word	0x080093c4

08006244 <__errno>:
 8006244:	4b01      	ldr	r3, [pc, #4]	; (800624c <__errno+0x8>)
 8006246:	6818      	ldr	r0, [r3, #0]
 8006248:	4770      	bx	lr
 800624a:	46c0      	nop			; (mov r8, r8)
 800624c:	2000000c 	.word	0x2000000c

08006250 <__libc_init_array>:
 8006250:	b570      	push	{r4, r5, r6, lr}
 8006252:	2600      	movs	r6, #0
 8006254:	4d0c      	ldr	r5, [pc, #48]	; (8006288 <__libc_init_array+0x38>)
 8006256:	4c0d      	ldr	r4, [pc, #52]	; (800628c <__libc_init_array+0x3c>)
 8006258:	1b64      	subs	r4, r4, r5
 800625a:	10a4      	asrs	r4, r4, #2
 800625c:	42a6      	cmp	r6, r4
 800625e:	d109      	bne.n	8006274 <__libc_init_array+0x24>
 8006260:	2600      	movs	r6, #0
 8006262:	f002 ffbb 	bl	80091dc <_init>
 8006266:	4d0a      	ldr	r5, [pc, #40]	; (8006290 <__libc_init_array+0x40>)
 8006268:	4c0a      	ldr	r4, [pc, #40]	; (8006294 <__libc_init_array+0x44>)
 800626a:	1b64      	subs	r4, r4, r5
 800626c:	10a4      	asrs	r4, r4, #2
 800626e:	42a6      	cmp	r6, r4
 8006270:	d105      	bne.n	800627e <__libc_init_array+0x2e>
 8006272:	bd70      	pop	{r4, r5, r6, pc}
 8006274:	00b3      	lsls	r3, r6, #2
 8006276:	58eb      	ldr	r3, [r5, r3]
 8006278:	4798      	blx	r3
 800627a:	3601      	adds	r6, #1
 800627c:	e7ee      	b.n	800625c <__libc_init_array+0xc>
 800627e:	00b3      	lsls	r3, r6, #2
 8006280:	58eb      	ldr	r3, [r5, r3]
 8006282:	4798      	blx	r3
 8006284:	3601      	adds	r6, #1
 8006286:	e7f2      	b.n	800626e <__libc_init_array+0x1e>
 8006288:	080097ac 	.word	0x080097ac
 800628c:	080097ac 	.word	0x080097ac
 8006290:	080097ac 	.word	0x080097ac
 8006294:	080097b0 	.word	0x080097b0

08006298 <memset>:
 8006298:	0003      	movs	r3, r0
 800629a:	1882      	adds	r2, r0, r2
 800629c:	4293      	cmp	r3, r2
 800629e:	d100      	bne.n	80062a2 <memset+0xa>
 80062a0:	4770      	bx	lr
 80062a2:	7019      	strb	r1, [r3, #0]
 80062a4:	3301      	adds	r3, #1
 80062a6:	e7f9      	b.n	800629c <memset+0x4>

080062a8 <__cvt>:
 80062a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062aa:	001e      	movs	r6, r3
 80062ac:	2300      	movs	r3, #0
 80062ae:	0014      	movs	r4, r2
 80062b0:	b08b      	sub	sp, #44	; 0x2c
 80062b2:	429e      	cmp	r6, r3
 80062b4:	da04      	bge.n	80062c0 <__cvt+0x18>
 80062b6:	2180      	movs	r1, #128	; 0x80
 80062b8:	0609      	lsls	r1, r1, #24
 80062ba:	1873      	adds	r3, r6, r1
 80062bc:	001e      	movs	r6, r3
 80062be:	232d      	movs	r3, #45	; 0x2d
 80062c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80062c2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80062c4:	7013      	strb	r3, [r2, #0]
 80062c6:	2320      	movs	r3, #32
 80062c8:	2203      	movs	r2, #3
 80062ca:	439f      	bics	r7, r3
 80062cc:	2f46      	cmp	r7, #70	; 0x46
 80062ce:	d007      	beq.n	80062e0 <__cvt+0x38>
 80062d0:	003b      	movs	r3, r7
 80062d2:	3b45      	subs	r3, #69	; 0x45
 80062d4:	4259      	negs	r1, r3
 80062d6:	414b      	adcs	r3, r1
 80062d8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80062da:	3a01      	subs	r2, #1
 80062dc:	18cb      	adds	r3, r1, r3
 80062de:	9310      	str	r3, [sp, #64]	; 0x40
 80062e0:	ab09      	add	r3, sp, #36	; 0x24
 80062e2:	9304      	str	r3, [sp, #16]
 80062e4:	ab08      	add	r3, sp, #32
 80062e6:	9303      	str	r3, [sp, #12]
 80062e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80062ea:	9200      	str	r2, [sp, #0]
 80062ec:	9302      	str	r3, [sp, #8]
 80062ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80062f0:	0022      	movs	r2, r4
 80062f2:	9301      	str	r3, [sp, #4]
 80062f4:	0033      	movs	r3, r6
 80062f6:	f000 fcf1 	bl	8006cdc <_dtoa_r>
 80062fa:	0005      	movs	r5, r0
 80062fc:	2f47      	cmp	r7, #71	; 0x47
 80062fe:	d102      	bne.n	8006306 <__cvt+0x5e>
 8006300:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006302:	07db      	lsls	r3, r3, #31
 8006304:	d528      	bpl.n	8006358 <__cvt+0xb0>
 8006306:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006308:	18eb      	adds	r3, r5, r3
 800630a:	9307      	str	r3, [sp, #28]
 800630c:	2f46      	cmp	r7, #70	; 0x46
 800630e:	d114      	bne.n	800633a <__cvt+0x92>
 8006310:	782b      	ldrb	r3, [r5, #0]
 8006312:	2b30      	cmp	r3, #48	; 0x30
 8006314:	d10c      	bne.n	8006330 <__cvt+0x88>
 8006316:	2200      	movs	r2, #0
 8006318:	2300      	movs	r3, #0
 800631a:	0020      	movs	r0, r4
 800631c:	0031      	movs	r1, r6
 800631e:	f7fa f893 	bl	8000448 <__aeabi_dcmpeq>
 8006322:	2800      	cmp	r0, #0
 8006324:	d104      	bne.n	8006330 <__cvt+0x88>
 8006326:	2301      	movs	r3, #1
 8006328:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800632a:	1a9b      	subs	r3, r3, r2
 800632c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800632e:	6013      	str	r3, [r2, #0]
 8006330:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006332:	9a07      	ldr	r2, [sp, #28]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	18d3      	adds	r3, r2, r3
 8006338:	9307      	str	r3, [sp, #28]
 800633a:	2200      	movs	r2, #0
 800633c:	2300      	movs	r3, #0
 800633e:	0020      	movs	r0, r4
 8006340:	0031      	movs	r1, r6
 8006342:	f7fa f881 	bl	8000448 <__aeabi_dcmpeq>
 8006346:	2800      	cmp	r0, #0
 8006348:	d001      	beq.n	800634e <__cvt+0xa6>
 800634a:	9b07      	ldr	r3, [sp, #28]
 800634c:	9309      	str	r3, [sp, #36]	; 0x24
 800634e:	2230      	movs	r2, #48	; 0x30
 8006350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006352:	9907      	ldr	r1, [sp, #28]
 8006354:	428b      	cmp	r3, r1
 8006356:	d306      	bcc.n	8006366 <__cvt+0xbe>
 8006358:	0028      	movs	r0, r5
 800635a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800635c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800635e:	1b5b      	subs	r3, r3, r5
 8006360:	6013      	str	r3, [r2, #0]
 8006362:	b00b      	add	sp, #44	; 0x2c
 8006364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006366:	1c59      	adds	r1, r3, #1
 8006368:	9109      	str	r1, [sp, #36]	; 0x24
 800636a:	701a      	strb	r2, [r3, #0]
 800636c:	e7f0      	b.n	8006350 <__cvt+0xa8>

0800636e <__exponent>:
 800636e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006370:	1c83      	adds	r3, r0, #2
 8006372:	b087      	sub	sp, #28
 8006374:	9303      	str	r3, [sp, #12]
 8006376:	0005      	movs	r5, r0
 8006378:	000c      	movs	r4, r1
 800637a:	232b      	movs	r3, #43	; 0x2b
 800637c:	7002      	strb	r2, [r0, #0]
 800637e:	2900      	cmp	r1, #0
 8006380:	da01      	bge.n	8006386 <__exponent+0x18>
 8006382:	424c      	negs	r4, r1
 8006384:	3302      	adds	r3, #2
 8006386:	706b      	strb	r3, [r5, #1]
 8006388:	2c09      	cmp	r4, #9
 800638a:	dd31      	ble.n	80063f0 <__exponent+0x82>
 800638c:	270a      	movs	r7, #10
 800638e:	ab04      	add	r3, sp, #16
 8006390:	1dde      	adds	r6, r3, #7
 8006392:	0020      	movs	r0, r4
 8006394:	0039      	movs	r1, r7
 8006396:	9601      	str	r6, [sp, #4]
 8006398:	f7fa f840 	bl	800041c <__aeabi_idivmod>
 800639c:	3e01      	subs	r6, #1
 800639e:	3130      	adds	r1, #48	; 0x30
 80063a0:	0020      	movs	r0, r4
 80063a2:	7031      	strb	r1, [r6, #0]
 80063a4:	0039      	movs	r1, r7
 80063a6:	9402      	str	r4, [sp, #8]
 80063a8:	f7f9 ff52 	bl	8000250 <__divsi3>
 80063ac:	9b02      	ldr	r3, [sp, #8]
 80063ae:	0004      	movs	r4, r0
 80063b0:	2b63      	cmp	r3, #99	; 0x63
 80063b2:	dcee      	bgt.n	8006392 <__exponent+0x24>
 80063b4:	9b01      	ldr	r3, [sp, #4]
 80063b6:	3430      	adds	r4, #48	; 0x30
 80063b8:	1e9a      	subs	r2, r3, #2
 80063ba:	0013      	movs	r3, r2
 80063bc:	9903      	ldr	r1, [sp, #12]
 80063be:	7014      	strb	r4, [r2, #0]
 80063c0:	a804      	add	r0, sp, #16
 80063c2:	3007      	adds	r0, #7
 80063c4:	4298      	cmp	r0, r3
 80063c6:	d80e      	bhi.n	80063e6 <__exponent+0x78>
 80063c8:	ab04      	add	r3, sp, #16
 80063ca:	3307      	adds	r3, #7
 80063cc:	2000      	movs	r0, #0
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d804      	bhi.n	80063dc <__exponent+0x6e>
 80063d2:	ab04      	add	r3, sp, #16
 80063d4:	3009      	adds	r0, #9
 80063d6:	18c0      	adds	r0, r0, r3
 80063d8:	9b01      	ldr	r3, [sp, #4]
 80063da:	1ac0      	subs	r0, r0, r3
 80063dc:	9b03      	ldr	r3, [sp, #12]
 80063de:	1818      	adds	r0, r3, r0
 80063e0:	1b40      	subs	r0, r0, r5
 80063e2:	b007      	add	sp, #28
 80063e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063e6:	7818      	ldrb	r0, [r3, #0]
 80063e8:	3301      	adds	r3, #1
 80063ea:	7008      	strb	r0, [r1, #0]
 80063ec:	3101      	adds	r1, #1
 80063ee:	e7e7      	b.n	80063c0 <__exponent+0x52>
 80063f0:	2330      	movs	r3, #48	; 0x30
 80063f2:	18e4      	adds	r4, r4, r3
 80063f4:	70ab      	strb	r3, [r5, #2]
 80063f6:	1d28      	adds	r0, r5, #4
 80063f8:	70ec      	strb	r4, [r5, #3]
 80063fa:	e7f1      	b.n	80063e0 <__exponent+0x72>

080063fc <_printf_float>:
 80063fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063fe:	b095      	sub	sp, #84	; 0x54
 8006400:	000c      	movs	r4, r1
 8006402:	9209      	str	r2, [sp, #36]	; 0x24
 8006404:	001e      	movs	r6, r3
 8006406:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006408:	0007      	movs	r7, r0
 800640a:	f001 fa81 	bl	8007910 <_localeconv_r>
 800640e:	6803      	ldr	r3, [r0, #0]
 8006410:	0018      	movs	r0, r3
 8006412:	930c      	str	r3, [sp, #48]	; 0x30
 8006414:	f7f9 fe76 	bl	8000104 <strlen>
 8006418:	2300      	movs	r3, #0
 800641a:	9312      	str	r3, [sp, #72]	; 0x48
 800641c:	7e23      	ldrb	r3, [r4, #24]
 800641e:	2207      	movs	r2, #7
 8006420:	930a      	str	r3, [sp, #40]	; 0x28
 8006422:	6823      	ldr	r3, [r4, #0]
 8006424:	900e      	str	r0, [sp, #56]	; 0x38
 8006426:	930d      	str	r3, [sp, #52]	; 0x34
 8006428:	990d      	ldr	r1, [sp, #52]	; 0x34
 800642a:	682b      	ldr	r3, [r5, #0]
 800642c:	05c9      	lsls	r1, r1, #23
 800642e:	d547      	bpl.n	80064c0 <_printf_float+0xc4>
 8006430:	189b      	adds	r3, r3, r2
 8006432:	4393      	bics	r3, r2
 8006434:	001a      	movs	r2, r3
 8006436:	3208      	adds	r2, #8
 8006438:	602a      	str	r2, [r5, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	64a2      	str	r2, [r4, #72]	; 0x48
 8006440:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006442:	2201      	movs	r2, #1
 8006444:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006446:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8006448:	930b      	str	r3, [sp, #44]	; 0x2c
 800644a:	006b      	lsls	r3, r5, #1
 800644c:	085b      	lsrs	r3, r3, #1
 800644e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006450:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006452:	4ba7      	ldr	r3, [pc, #668]	; (80066f0 <_printf_float+0x2f4>)
 8006454:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006456:	4252      	negs	r2, r2
 8006458:	f7fb ffb2 	bl	80023c0 <__aeabi_dcmpun>
 800645c:	2800      	cmp	r0, #0
 800645e:	d131      	bne.n	80064c4 <_printf_float+0xc8>
 8006460:	2201      	movs	r2, #1
 8006462:	4ba3      	ldr	r3, [pc, #652]	; (80066f0 <_printf_float+0x2f4>)
 8006464:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006466:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006468:	4252      	negs	r2, r2
 800646a:	f7f9 fffd 	bl	8000468 <__aeabi_dcmple>
 800646e:	2800      	cmp	r0, #0
 8006470:	d128      	bne.n	80064c4 <_printf_float+0xc8>
 8006472:	2200      	movs	r2, #0
 8006474:	2300      	movs	r3, #0
 8006476:	0029      	movs	r1, r5
 8006478:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800647a:	f7f9 ffeb 	bl	8000454 <__aeabi_dcmplt>
 800647e:	2800      	cmp	r0, #0
 8006480:	d003      	beq.n	800648a <_printf_float+0x8e>
 8006482:	0023      	movs	r3, r4
 8006484:	222d      	movs	r2, #45	; 0x2d
 8006486:	3343      	adds	r3, #67	; 0x43
 8006488:	701a      	strb	r2, [r3, #0]
 800648a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800648c:	4d99      	ldr	r5, [pc, #612]	; (80066f4 <_printf_float+0x2f8>)
 800648e:	2b47      	cmp	r3, #71	; 0x47
 8006490:	d900      	bls.n	8006494 <_printf_float+0x98>
 8006492:	4d99      	ldr	r5, [pc, #612]	; (80066f8 <_printf_float+0x2fc>)
 8006494:	2303      	movs	r3, #3
 8006496:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006498:	6123      	str	r3, [r4, #16]
 800649a:	3301      	adds	r3, #1
 800649c:	439a      	bics	r2, r3
 800649e:	2300      	movs	r3, #0
 80064a0:	6022      	str	r2, [r4, #0]
 80064a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80064a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064a6:	0021      	movs	r1, r4
 80064a8:	0038      	movs	r0, r7
 80064aa:	9600      	str	r6, [sp, #0]
 80064ac:	aa13      	add	r2, sp, #76	; 0x4c
 80064ae:	f000 f9e7 	bl	8006880 <_printf_common>
 80064b2:	1c43      	adds	r3, r0, #1
 80064b4:	d000      	beq.n	80064b8 <_printf_float+0xbc>
 80064b6:	e0a2      	b.n	80065fe <_printf_float+0x202>
 80064b8:	2001      	movs	r0, #1
 80064ba:	4240      	negs	r0, r0
 80064bc:	b015      	add	sp, #84	; 0x54
 80064be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064c0:	3307      	adds	r3, #7
 80064c2:	e7b6      	b.n	8006432 <_printf_float+0x36>
 80064c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80064c6:	002b      	movs	r3, r5
 80064c8:	0010      	movs	r0, r2
 80064ca:	0029      	movs	r1, r5
 80064cc:	f7fb ff78 	bl	80023c0 <__aeabi_dcmpun>
 80064d0:	2800      	cmp	r0, #0
 80064d2:	d00b      	beq.n	80064ec <_printf_float+0xf0>
 80064d4:	2d00      	cmp	r5, #0
 80064d6:	da03      	bge.n	80064e0 <_printf_float+0xe4>
 80064d8:	0023      	movs	r3, r4
 80064da:	222d      	movs	r2, #45	; 0x2d
 80064dc:	3343      	adds	r3, #67	; 0x43
 80064de:	701a      	strb	r2, [r3, #0]
 80064e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064e2:	4d86      	ldr	r5, [pc, #536]	; (80066fc <_printf_float+0x300>)
 80064e4:	2b47      	cmp	r3, #71	; 0x47
 80064e6:	d9d5      	bls.n	8006494 <_printf_float+0x98>
 80064e8:	4d85      	ldr	r5, [pc, #532]	; (8006700 <_printf_float+0x304>)
 80064ea:	e7d3      	b.n	8006494 <_printf_float+0x98>
 80064ec:	2220      	movs	r2, #32
 80064ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 80064f0:	6863      	ldr	r3, [r4, #4]
 80064f2:	4391      	bics	r1, r2
 80064f4:	910f      	str	r1, [sp, #60]	; 0x3c
 80064f6:	1c5a      	adds	r2, r3, #1
 80064f8:	d149      	bne.n	800658e <_printf_float+0x192>
 80064fa:	3307      	adds	r3, #7
 80064fc:	6063      	str	r3, [r4, #4]
 80064fe:	2380      	movs	r3, #128	; 0x80
 8006500:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006502:	00db      	lsls	r3, r3, #3
 8006504:	4313      	orrs	r3, r2
 8006506:	2200      	movs	r2, #0
 8006508:	9206      	str	r2, [sp, #24]
 800650a:	aa12      	add	r2, sp, #72	; 0x48
 800650c:	9205      	str	r2, [sp, #20]
 800650e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006510:	a908      	add	r1, sp, #32
 8006512:	9204      	str	r2, [sp, #16]
 8006514:	aa11      	add	r2, sp, #68	; 0x44
 8006516:	9203      	str	r2, [sp, #12]
 8006518:	2223      	movs	r2, #35	; 0x23
 800651a:	6023      	str	r3, [r4, #0]
 800651c:	9301      	str	r3, [sp, #4]
 800651e:	6863      	ldr	r3, [r4, #4]
 8006520:	1852      	adds	r2, r2, r1
 8006522:	9202      	str	r2, [sp, #8]
 8006524:	9300      	str	r3, [sp, #0]
 8006526:	0038      	movs	r0, r7
 8006528:	002b      	movs	r3, r5
 800652a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800652c:	f7ff febc 	bl	80062a8 <__cvt>
 8006530:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006532:	0005      	movs	r5, r0
 8006534:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006536:	2b47      	cmp	r3, #71	; 0x47
 8006538:	d108      	bne.n	800654c <_printf_float+0x150>
 800653a:	1ccb      	adds	r3, r1, #3
 800653c:	db02      	blt.n	8006544 <_printf_float+0x148>
 800653e:	6863      	ldr	r3, [r4, #4]
 8006540:	4299      	cmp	r1, r3
 8006542:	dd48      	ble.n	80065d6 <_printf_float+0x1da>
 8006544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006546:	3b02      	subs	r3, #2
 8006548:	b2db      	uxtb	r3, r3
 800654a:	930a      	str	r3, [sp, #40]	; 0x28
 800654c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800654e:	2b65      	cmp	r3, #101	; 0x65
 8006550:	d824      	bhi.n	800659c <_printf_float+0x1a0>
 8006552:	0020      	movs	r0, r4
 8006554:	001a      	movs	r2, r3
 8006556:	3901      	subs	r1, #1
 8006558:	3050      	adds	r0, #80	; 0x50
 800655a:	9111      	str	r1, [sp, #68]	; 0x44
 800655c:	f7ff ff07 	bl	800636e <__exponent>
 8006560:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006562:	900b      	str	r0, [sp, #44]	; 0x2c
 8006564:	1813      	adds	r3, r2, r0
 8006566:	6123      	str	r3, [r4, #16]
 8006568:	2a01      	cmp	r2, #1
 800656a:	dc02      	bgt.n	8006572 <_printf_float+0x176>
 800656c:	6822      	ldr	r2, [r4, #0]
 800656e:	07d2      	lsls	r2, r2, #31
 8006570:	d501      	bpl.n	8006576 <_printf_float+0x17a>
 8006572:	3301      	adds	r3, #1
 8006574:	6123      	str	r3, [r4, #16]
 8006576:	2323      	movs	r3, #35	; 0x23
 8006578:	aa08      	add	r2, sp, #32
 800657a:	189b      	adds	r3, r3, r2
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d100      	bne.n	8006584 <_printf_float+0x188>
 8006582:	e78f      	b.n	80064a4 <_printf_float+0xa8>
 8006584:	0023      	movs	r3, r4
 8006586:	222d      	movs	r2, #45	; 0x2d
 8006588:	3343      	adds	r3, #67	; 0x43
 800658a:	701a      	strb	r2, [r3, #0]
 800658c:	e78a      	b.n	80064a4 <_printf_float+0xa8>
 800658e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006590:	2a47      	cmp	r2, #71	; 0x47
 8006592:	d1b4      	bne.n	80064fe <_printf_float+0x102>
 8006594:	2b00      	cmp	r3, #0
 8006596:	d1b2      	bne.n	80064fe <_printf_float+0x102>
 8006598:	3301      	adds	r3, #1
 800659a:	e7af      	b.n	80064fc <_printf_float+0x100>
 800659c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800659e:	2b66      	cmp	r3, #102	; 0x66
 80065a0:	d11b      	bne.n	80065da <_printf_float+0x1de>
 80065a2:	6863      	ldr	r3, [r4, #4]
 80065a4:	2900      	cmp	r1, #0
 80065a6:	dd0d      	ble.n	80065c4 <_printf_float+0x1c8>
 80065a8:	6121      	str	r1, [r4, #16]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d102      	bne.n	80065b4 <_printf_float+0x1b8>
 80065ae:	6822      	ldr	r2, [r4, #0]
 80065b0:	07d2      	lsls	r2, r2, #31
 80065b2:	d502      	bpl.n	80065ba <_printf_float+0x1be>
 80065b4:	3301      	adds	r3, #1
 80065b6:	1859      	adds	r1, r3, r1
 80065b8:	6121      	str	r1, [r4, #16]
 80065ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80065bc:	65a3      	str	r3, [r4, #88]	; 0x58
 80065be:	2300      	movs	r3, #0
 80065c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80065c2:	e7d8      	b.n	8006576 <_printf_float+0x17a>
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d103      	bne.n	80065d0 <_printf_float+0x1d4>
 80065c8:	2201      	movs	r2, #1
 80065ca:	6821      	ldr	r1, [r4, #0]
 80065cc:	4211      	tst	r1, r2
 80065ce:	d000      	beq.n	80065d2 <_printf_float+0x1d6>
 80065d0:	1c9a      	adds	r2, r3, #2
 80065d2:	6122      	str	r2, [r4, #16]
 80065d4:	e7f1      	b.n	80065ba <_printf_float+0x1be>
 80065d6:	2367      	movs	r3, #103	; 0x67
 80065d8:	930a      	str	r3, [sp, #40]	; 0x28
 80065da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80065dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80065de:	4293      	cmp	r3, r2
 80065e0:	db06      	blt.n	80065f0 <_printf_float+0x1f4>
 80065e2:	6822      	ldr	r2, [r4, #0]
 80065e4:	6123      	str	r3, [r4, #16]
 80065e6:	07d2      	lsls	r2, r2, #31
 80065e8:	d5e7      	bpl.n	80065ba <_printf_float+0x1be>
 80065ea:	3301      	adds	r3, #1
 80065ec:	6123      	str	r3, [r4, #16]
 80065ee:	e7e4      	b.n	80065ba <_printf_float+0x1be>
 80065f0:	2101      	movs	r1, #1
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	dc01      	bgt.n	80065fa <_printf_float+0x1fe>
 80065f6:	1849      	adds	r1, r1, r1
 80065f8:	1ac9      	subs	r1, r1, r3
 80065fa:	1852      	adds	r2, r2, r1
 80065fc:	e7e9      	b.n	80065d2 <_printf_float+0x1d6>
 80065fe:	6822      	ldr	r2, [r4, #0]
 8006600:	0553      	lsls	r3, r2, #21
 8006602:	d407      	bmi.n	8006614 <_printf_float+0x218>
 8006604:	6923      	ldr	r3, [r4, #16]
 8006606:	002a      	movs	r2, r5
 8006608:	0038      	movs	r0, r7
 800660a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800660c:	47b0      	blx	r6
 800660e:	1c43      	adds	r3, r0, #1
 8006610:	d128      	bne.n	8006664 <_printf_float+0x268>
 8006612:	e751      	b.n	80064b8 <_printf_float+0xbc>
 8006614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006616:	2b65      	cmp	r3, #101	; 0x65
 8006618:	d800      	bhi.n	800661c <_printf_float+0x220>
 800661a:	e0e1      	b.n	80067e0 <_printf_float+0x3e4>
 800661c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800661e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006620:	2200      	movs	r2, #0
 8006622:	2300      	movs	r3, #0
 8006624:	f7f9 ff10 	bl	8000448 <__aeabi_dcmpeq>
 8006628:	2800      	cmp	r0, #0
 800662a:	d031      	beq.n	8006690 <_printf_float+0x294>
 800662c:	2301      	movs	r3, #1
 800662e:	0038      	movs	r0, r7
 8006630:	4a34      	ldr	r2, [pc, #208]	; (8006704 <_printf_float+0x308>)
 8006632:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006634:	47b0      	blx	r6
 8006636:	1c43      	adds	r3, r0, #1
 8006638:	d100      	bne.n	800663c <_printf_float+0x240>
 800663a:	e73d      	b.n	80064b8 <_printf_float+0xbc>
 800663c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800663e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006640:	4293      	cmp	r3, r2
 8006642:	db02      	blt.n	800664a <_printf_float+0x24e>
 8006644:	6823      	ldr	r3, [r4, #0]
 8006646:	07db      	lsls	r3, r3, #31
 8006648:	d50c      	bpl.n	8006664 <_printf_float+0x268>
 800664a:	0038      	movs	r0, r7
 800664c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800664e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006650:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006652:	47b0      	blx	r6
 8006654:	2500      	movs	r5, #0
 8006656:	1c43      	adds	r3, r0, #1
 8006658:	d100      	bne.n	800665c <_printf_float+0x260>
 800665a:	e72d      	b.n	80064b8 <_printf_float+0xbc>
 800665c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800665e:	3b01      	subs	r3, #1
 8006660:	42ab      	cmp	r3, r5
 8006662:	dc0a      	bgt.n	800667a <_printf_float+0x27e>
 8006664:	6823      	ldr	r3, [r4, #0]
 8006666:	079b      	lsls	r3, r3, #30
 8006668:	d500      	bpl.n	800666c <_printf_float+0x270>
 800666a:	e106      	b.n	800687a <_printf_float+0x47e>
 800666c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800666e:	68e0      	ldr	r0, [r4, #12]
 8006670:	4298      	cmp	r0, r3
 8006672:	db00      	blt.n	8006676 <_printf_float+0x27a>
 8006674:	e722      	b.n	80064bc <_printf_float+0xc0>
 8006676:	0018      	movs	r0, r3
 8006678:	e720      	b.n	80064bc <_printf_float+0xc0>
 800667a:	0022      	movs	r2, r4
 800667c:	2301      	movs	r3, #1
 800667e:	0038      	movs	r0, r7
 8006680:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006682:	321a      	adds	r2, #26
 8006684:	47b0      	blx	r6
 8006686:	1c43      	adds	r3, r0, #1
 8006688:	d100      	bne.n	800668c <_printf_float+0x290>
 800668a:	e715      	b.n	80064b8 <_printf_float+0xbc>
 800668c:	3501      	adds	r5, #1
 800668e:	e7e5      	b.n	800665c <_printf_float+0x260>
 8006690:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006692:	2b00      	cmp	r3, #0
 8006694:	dc38      	bgt.n	8006708 <_printf_float+0x30c>
 8006696:	2301      	movs	r3, #1
 8006698:	0038      	movs	r0, r7
 800669a:	4a1a      	ldr	r2, [pc, #104]	; (8006704 <_printf_float+0x308>)
 800669c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800669e:	47b0      	blx	r6
 80066a0:	1c43      	adds	r3, r0, #1
 80066a2:	d100      	bne.n	80066a6 <_printf_float+0x2aa>
 80066a4:	e708      	b.n	80064b8 <_printf_float+0xbc>
 80066a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80066a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80066aa:	4313      	orrs	r3, r2
 80066ac:	d102      	bne.n	80066b4 <_printf_float+0x2b8>
 80066ae:	6823      	ldr	r3, [r4, #0]
 80066b0:	07db      	lsls	r3, r3, #31
 80066b2:	d5d7      	bpl.n	8006664 <_printf_float+0x268>
 80066b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066b6:	0038      	movs	r0, r7
 80066b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80066ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066bc:	47b0      	blx	r6
 80066be:	1c43      	adds	r3, r0, #1
 80066c0:	d100      	bne.n	80066c4 <_printf_float+0x2c8>
 80066c2:	e6f9      	b.n	80064b8 <_printf_float+0xbc>
 80066c4:	2300      	movs	r3, #0
 80066c6:	930a      	str	r3, [sp, #40]	; 0x28
 80066c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80066ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066cc:	425b      	negs	r3, r3
 80066ce:	4293      	cmp	r3, r2
 80066d0:	dc01      	bgt.n	80066d6 <_printf_float+0x2da>
 80066d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80066d4:	e797      	b.n	8006606 <_printf_float+0x20a>
 80066d6:	0022      	movs	r2, r4
 80066d8:	2301      	movs	r3, #1
 80066da:	0038      	movs	r0, r7
 80066dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066de:	321a      	adds	r2, #26
 80066e0:	47b0      	blx	r6
 80066e2:	1c43      	adds	r3, r0, #1
 80066e4:	d100      	bne.n	80066e8 <_printf_float+0x2ec>
 80066e6:	e6e7      	b.n	80064b8 <_printf_float+0xbc>
 80066e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066ea:	3301      	adds	r3, #1
 80066ec:	e7eb      	b.n	80066c6 <_printf_float+0x2ca>
 80066ee:	46c0      	nop			; (mov r8, r8)
 80066f0:	7fefffff 	.word	0x7fefffff
 80066f4:	080093d0 	.word	0x080093d0
 80066f8:	080093d4 	.word	0x080093d4
 80066fc:	080093d8 	.word	0x080093d8
 8006700:	080093dc 	.word	0x080093dc
 8006704:	080093e0 	.word	0x080093e0
 8006708:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800670a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800670c:	920a      	str	r2, [sp, #40]	; 0x28
 800670e:	429a      	cmp	r2, r3
 8006710:	dd00      	ble.n	8006714 <_printf_float+0x318>
 8006712:	930a      	str	r3, [sp, #40]	; 0x28
 8006714:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006716:	2b00      	cmp	r3, #0
 8006718:	dc3c      	bgt.n	8006794 <_printf_float+0x398>
 800671a:	2300      	movs	r3, #0
 800671c:	930d      	str	r3, [sp, #52]	; 0x34
 800671e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006720:	43db      	mvns	r3, r3
 8006722:	17db      	asrs	r3, r3, #31
 8006724:	930f      	str	r3, [sp, #60]	; 0x3c
 8006726:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006728:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800672a:	930b      	str	r3, [sp, #44]	; 0x2c
 800672c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800672e:	4013      	ands	r3, r2
 8006730:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006736:	4293      	cmp	r3, r2
 8006738:	dc34      	bgt.n	80067a4 <_printf_float+0x3a8>
 800673a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800673c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800673e:	4293      	cmp	r3, r2
 8006740:	db3d      	blt.n	80067be <_printf_float+0x3c2>
 8006742:	6823      	ldr	r3, [r4, #0]
 8006744:	07db      	lsls	r3, r3, #31
 8006746:	d43a      	bmi.n	80067be <_printf_float+0x3c2>
 8006748:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800674a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800674c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	1a52      	subs	r2, r2, r1
 8006752:	920a      	str	r2, [sp, #40]	; 0x28
 8006754:	429a      	cmp	r2, r3
 8006756:	dd00      	ble.n	800675a <_printf_float+0x35e>
 8006758:	930a      	str	r3, [sp, #40]	; 0x28
 800675a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800675c:	2b00      	cmp	r3, #0
 800675e:	dc36      	bgt.n	80067ce <_printf_float+0x3d2>
 8006760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006762:	2500      	movs	r5, #0
 8006764:	43db      	mvns	r3, r3
 8006766:	17db      	asrs	r3, r3, #31
 8006768:	930b      	str	r3, [sp, #44]	; 0x2c
 800676a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800676c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800676e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006770:	1a9b      	subs	r3, r3, r2
 8006772:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006774:	400a      	ands	r2, r1
 8006776:	1a9b      	subs	r3, r3, r2
 8006778:	42ab      	cmp	r3, r5
 800677a:	dc00      	bgt.n	800677e <_printf_float+0x382>
 800677c:	e772      	b.n	8006664 <_printf_float+0x268>
 800677e:	0022      	movs	r2, r4
 8006780:	2301      	movs	r3, #1
 8006782:	0038      	movs	r0, r7
 8006784:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006786:	321a      	adds	r2, #26
 8006788:	47b0      	blx	r6
 800678a:	1c43      	adds	r3, r0, #1
 800678c:	d100      	bne.n	8006790 <_printf_float+0x394>
 800678e:	e693      	b.n	80064b8 <_printf_float+0xbc>
 8006790:	3501      	adds	r5, #1
 8006792:	e7ea      	b.n	800676a <_printf_float+0x36e>
 8006794:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006796:	002a      	movs	r2, r5
 8006798:	0038      	movs	r0, r7
 800679a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800679c:	47b0      	blx	r6
 800679e:	1c43      	adds	r3, r0, #1
 80067a0:	d1bb      	bne.n	800671a <_printf_float+0x31e>
 80067a2:	e689      	b.n	80064b8 <_printf_float+0xbc>
 80067a4:	0022      	movs	r2, r4
 80067a6:	2301      	movs	r3, #1
 80067a8:	0038      	movs	r0, r7
 80067aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067ac:	321a      	adds	r2, #26
 80067ae:	47b0      	blx	r6
 80067b0:	1c43      	adds	r3, r0, #1
 80067b2:	d100      	bne.n	80067b6 <_printf_float+0x3ba>
 80067b4:	e680      	b.n	80064b8 <_printf_float+0xbc>
 80067b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067b8:	3301      	adds	r3, #1
 80067ba:	930d      	str	r3, [sp, #52]	; 0x34
 80067bc:	e7b3      	b.n	8006726 <_printf_float+0x32a>
 80067be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067c0:	0038      	movs	r0, r7
 80067c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80067c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067c6:	47b0      	blx	r6
 80067c8:	1c43      	adds	r3, r0, #1
 80067ca:	d1bd      	bne.n	8006748 <_printf_float+0x34c>
 80067cc:	e674      	b.n	80064b8 <_printf_float+0xbc>
 80067ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067d0:	0038      	movs	r0, r7
 80067d2:	18ea      	adds	r2, r5, r3
 80067d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067d8:	47b0      	blx	r6
 80067da:	1c43      	adds	r3, r0, #1
 80067dc:	d1c0      	bne.n	8006760 <_printf_float+0x364>
 80067de:	e66b      	b.n	80064b8 <_printf_float+0xbc>
 80067e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	dc02      	bgt.n	80067ec <_printf_float+0x3f0>
 80067e6:	2301      	movs	r3, #1
 80067e8:	421a      	tst	r2, r3
 80067ea:	d034      	beq.n	8006856 <_printf_float+0x45a>
 80067ec:	2301      	movs	r3, #1
 80067ee:	002a      	movs	r2, r5
 80067f0:	0038      	movs	r0, r7
 80067f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067f4:	47b0      	blx	r6
 80067f6:	1c43      	adds	r3, r0, #1
 80067f8:	d100      	bne.n	80067fc <_printf_float+0x400>
 80067fa:	e65d      	b.n	80064b8 <_printf_float+0xbc>
 80067fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067fe:	0038      	movs	r0, r7
 8006800:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006802:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006804:	47b0      	blx	r6
 8006806:	1c43      	adds	r3, r0, #1
 8006808:	d100      	bne.n	800680c <_printf_float+0x410>
 800680a:	e655      	b.n	80064b8 <_printf_float+0xbc>
 800680c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800680e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006810:	2200      	movs	r2, #0
 8006812:	2300      	movs	r3, #0
 8006814:	f7f9 fe18 	bl	8000448 <__aeabi_dcmpeq>
 8006818:	2800      	cmp	r0, #0
 800681a:	d11a      	bne.n	8006852 <_printf_float+0x456>
 800681c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800681e:	1c6a      	adds	r2, r5, #1
 8006820:	3b01      	subs	r3, #1
 8006822:	0038      	movs	r0, r7
 8006824:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006826:	47b0      	blx	r6
 8006828:	1c43      	adds	r3, r0, #1
 800682a:	d10e      	bne.n	800684a <_printf_float+0x44e>
 800682c:	e644      	b.n	80064b8 <_printf_float+0xbc>
 800682e:	0022      	movs	r2, r4
 8006830:	2301      	movs	r3, #1
 8006832:	0038      	movs	r0, r7
 8006834:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006836:	321a      	adds	r2, #26
 8006838:	47b0      	blx	r6
 800683a:	1c43      	adds	r3, r0, #1
 800683c:	d100      	bne.n	8006840 <_printf_float+0x444>
 800683e:	e63b      	b.n	80064b8 <_printf_float+0xbc>
 8006840:	3501      	adds	r5, #1
 8006842:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006844:	3b01      	subs	r3, #1
 8006846:	42ab      	cmp	r3, r5
 8006848:	dcf1      	bgt.n	800682e <_printf_float+0x432>
 800684a:	0022      	movs	r2, r4
 800684c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800684e:	3250      	adds	r2, #80	; 0x50
 8006850:	e6da      	b.n	8006608 <_printf_float+0x20c>
 8006852:	2500      	movs	r5, #0
 8006854:	e7f5      	b.n	8006842 <_printf_float+0x446>
 8006856:	002a      	movs	r2, r5
 8006858:	e7e3      	b.n	8006822 <_printf_float+0x426>
 800685a:	0022      	movs	r2, r4
 800685c:	2301      	movs	r3, #1
 800685e:	0038      	movs	r0, r7
 8006860:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006862:	3219      	adds	r2, #25
 8006864:	47b0      	blx	r6
 8006866:	1c43      	adds	r3, r0, #1
 8006868:	d100      	bne.n	800686c <_printf_float+0x470>
 800686a:	e625      	b.n	80064b8 <_printf_float+0xbc>
 800686c:	3501      	adds	r5, #1
 800686e:	68e3      	ldr	r3, [r4, #12]
 8006870:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006872:	1a9b      	subs	r3, r3, r2
 8006874:	42ab      	cmp	r3, r5
 8006876:	dcf0      	bgt.n	800685a <_printf_float+0x45e>
 8006878:	e6f8      	b.n	800666c <_printf_float+0x270>
 800687a:	2500      	movs	r5, #0
 800687c:	e7f7      	b.n	800686e <_printf_float+0x472>
 800687e:	46c0      	nop			; (mov r8, r8)

08006880 <_printf_common>:
 8006880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006882:	0015      	movs	r5, r2
 8006884:	9301      	str	r3, [sp, #4]
 8006886:	688a      	ldr	r2, [r1, #8]
 8006888:	690b      	ldr	r3, [r1, #16]
 800688a:	000c      	movs	r4, r1
 800688c:	9000      	str	r0, [sp, #0]
 800688e:	4293      	cmp	r3, r2
 8006890:	da00      	bge.n	8006894 <_printf_common+0x14>
 8006892:	0013      	movs	r3, r2
 8006894:	0022      	movs	r2, r4
 8006896:	602b      	str	r3, [r5, #0]
 8006898:	3243      	adds	r2, #67	; 0x43
 800689a:	7812      	ldrb	r2, [r2, #0]
 800689c:	2a00      	cmp	r2, #0
 800689e:	d001      	beq.n	80068a4 <_printf_common+0x24>
 80068a0:	3301      	adds	r3, #1
 80068a2:	602b      	str	r3, [r5, #0]
 80068a4:	6823      	ldr	r3, [r4, #0]
 80068a6:	069b      	lsls	r3, r3, #26
 80068a8:	d502      	bpl.n	80068b0 <_printf_common+0x30>
 80068aa:	682b      	ldr	r3, [r5, #0]
 80068ac:	3302      	adds	r3, #2
 80068ae:	602b      	str	r3, [r5, #0]
 80068b0:	6822      	ldr	r2, [r4, #0]
 80068b2:	2306      	movs	r3, #6
 80068b4:	0017      	movs	r7, r2
 80068b6:	401f      	ands	r7, r3
 80068b8:	421a      	tst	r2, r3
 80068ba:	d027      	beq.n	800690c <_printf_common+0x8c>
 80068bc:	0023      	movs	r3, r4
 80068be:	3343      	adds	r3, #67	; 0x43
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	1e5a      	subs	r2, r3, #1
 80068c4:	4193      	sbcs	r3, r2
 80068c6:	6822      	ldr	r2, [r4, #0]
 80068c8:	0692      	lsls	r2, r2, #26
 80068ca:	d430      	bmi.n	800692e <_printf_common+0xae>
 80068cc:	0022      	movs	r2, r4
 80068ce:	9901      	ldr	r1, [sp, #4]
 80068d0:	9800      	ldr	r0, [sp, #0]
 80068d2:	9e08      	ldr	r6, [sp, #32]
 80068d4:	3243      	adds	r2, #67	; 0x43
 80068d6:	47b0      	blx	r6
 80068d8:	1c43      	adds	r3, r0, #1
 80068da:	d025      	beq.n	8006928 <_printf_common+0xa8>
 80068dc:	2306      	movs	r3, #6
 80068de:	6820      	ldr	r0, [r4, #0]
 80068e0:	682a      	ldr	r2, [r5, #0]
 80068e2:	68e1      	ldr	r1, [r4, #12]
 80068e4:	2500      	movs	r5, #0
 80068e6:	4003      	ands	r3, r0
 80068e8:	2b04      	cmp	r3, #4
 80068ea:	d103      	bne.n	80068f4 <_printf_common+0x74>
 80068ec:	1a8d      	subs	r5, r1, r2
 80068ee:	43eb      	mvns	r3, r5
 80068f0:	17db      	asrs	r3, r3, #31
 80068f2:	401d      	ands	r5, r3
 80068f4:	68a3      	ldr	r3, [r4, #8]
 80068f6:	6922      	ldr	r2, [r4, #16]
 80068f8:	4293      	cmp	r3, r2
 80068fa:	dd01      	ble.n	8006900 <_printf_common+0x80>
 80068fc:	1a9b      	subs	r3, r3, r2
 80068fe:	18ed      	adds	r5, r5, r3
 8006900:	2700      	movs	r7, #0
 8006902:	42bd      	cmp	r5, r7
 8006904:	d120      	bne.n	8006948 <_printf_common+0xc8>
 8006906:	2000      	movs	r0, #0
 8006908:	e010      	b.n	800692c <_printf_common+0xac>
 800690a:	3701      	adds	r7, #1
 800690c:	68e3      	ldr	r3, [r4, #12]
 800690e:	682a      	ldr	r2, [r5, #0]
 8006910:	1a9b      	subs	r3, r3, r2
 8006912:	42bb      	cmp	r3, r7
 8006914:	ddd2      	ble.n	80068bc <_printf_common+0x3c>
 8006916:	0022      	movs	r2, r4
 8006918:	2301      	movs	r3, #1
 800691a:	9901      	ldr	r1, [sp, #4]
 800691c:	9800      	ldr	r0, [sp, #0]
 800691e:	9e08      	ldr	r6, [sp, #32]
 8006920:	3219      	adds	r2, #25
 8006922:	47b0      	blx	r6
 8006924:	1c43      	adds	r3, r0, #1
 8006926:	d1f0      	bne.n	800690a <_printf_common+0x8a>
 8006928:	2001      	movs	r0, #1
 800692a:	4240      	negs	r0, r0
 800692c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800692e:	2030      	movs	r0, #48	; 0x30
 8006930:	18e1      	adds	r1, r4, r3
 8006932:	3143      	adds	r1, #67	; 0x43
 8006934:	7008      	strb	r0, [r1, #0]
 8006936:	0021      	movs	r1, r4
 8006938:	1c5a      	adds	r2, r3, #1
 800693a:	3145      	adds	r1, #69	; 0x45
 800693c:	7809      	ldrb	r1, [r1, #0]
 800693e:	18a2      	adds	r2, r4, r2
 8006940:	3243      	adds	r2, #67	; 0x43
 8006942:	3302      	adds	r3, #2
 8006944:	7011      	strb	r1, [r2, #0]
 8006946:	e7c1      	b.n	80068cc <_printf_common+0x4c>
 8006948:	0022      	movs	r2, r4
 800694a:	2301      	movs	r3, #1
 800694c:	9901      	ldr	r1, [sp, #4]
 800694e:	9800      	ldr	r0, [sp, #0]
 8006950:	9e08      	ldr	r6, [sp, #32]
 8006952:	321a      	adds	r2, #26
 8006954:	47b0      	blx	r6
 8006956:	1c43      	adds	r3, r0, #1
 8006958:	d0e6      	beq.n	8006928 <_printf_common+0xa8>
 800695a:	3701      	adds	r7, #1
 800695c:	e7d1      	b.n	8006902 <_printf_common+0x82>
	...

08006960 <_printf_i>:
 8006960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006962:	b08b      	sub	sp, #44	; 0x2c
 8006964:	9206      	str	r2, [sp, #24]
 8006966:	000a      	movs	r2, r1
 8006968:	3243      	adds	r2, #67	; 0x43
 800696a:	9307      	str	r3, [sp, #28]
 800696c:	9005      	str	r0, [sp, #20]
 800696e:	9204      	str	r2, [sp, #16]
 8006970:	7e0a      	ldrb	r2, [r1, #24]
 8006972:	000c      	movs	r4, r1
 8006974:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006976:	2a78      	cmp	r2, #120	; 0x78
 8006978:	d807      	bhi.n	800698a <_printf_i+0x2a>
 800697a:	2a62      	cmp	r2, #98	; 0x62
 800697c:	d809      	bhi.n	8006992 <_printf_i+0x32>
 800697e:	2a00      	cmp	r2, #0
 8006980:	d100      	bne.n	8006984 <_printf_i+0x24>
 8006982:	e0c1      	b.n	8006b08 <_printf_i+0x1a8>
 8006984:	2a58      	cmp	r2, #88	; 0x58
 8006986:	d100      	bne.n	800698a <_printf_i+0x2a>
 8006988:	e08c      	b.n	8006aa4 <_printf_i+0x144>
 800698a:	0026      	movs	r6, r4
 800698c:	3642      	adds	r6, #66	; 0x42
 800698e:	7032      	strb	r2, [r6, #0]
 8006990:	e022      	b.n	80069d8 <_printf_i+0x78>
 8006992:	0010      	movs	r0, r2
 8006994:	3863      	subs	r0, #99	; 0x63
 8006996:	2815      	cmp	r0, #21
 8006998:	d8f7      	bhi.n	800698a <_printf_i+0x2a>
 800699a:	f7f9 fbc5 	bl	8000128 <__gnu_thumb1_case_shi>
 800699e:	0016      	.short	0x0016
 80069a0:	fff6001f 	.word	0xfff6001f
 80069a4:	fff6fff6 	.word	0xfff6fff6
 80069a8:	001ffff6 	.word	0x001ffff6
 80069ac:	fff6fff6 	.word	0xfff6fff6
 80069b0:	fff6fff6 	.word	0xfff6fff6
 80069b4:	003600a8 	.word	0x003600a8
 80069b8:	fff6009a 	.word	0xfff6009a
 80069bc:	00b9fff6 	.word	0x00b9fff6
 80069c0:	0036fff6 	.word	0x0036fff6
 80069c4:	fff6fff6 	.word	0xfff6fff6
 80069c8:	009e      	.short	0x009e
 80069ca:	0026      	movs	r6, r4
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	3642      	adds	r6, #66	; 0x42
 80069d0:	1d11      	adds	r1, r2, #4
 80069d2:	6019      	str	r1, [r3, #0]
 80069d4:	6813      	ldr	r3, [r2, #0]
 80069d6:	7033      	strb	r3, [r6, #0]
 80069d8:	2301      	movs	r3, #1
 80069da:	e0a7      	b.n	8006b2c <_printf_i+0x1cc>
 80069dc:	6808      	ldr	r0, [r1, #0]
 80069de:	6819      	ldr	r1, [r3, #0]
 80069e0:	1d0a      	adds	r2, r1, #4
 80069e2:	0605      	lsls	r5, r0, #24
 80069e4:	d50b      	bpl.n	80069fe <_printf_i+0x9e>
 80069e6:	680d      	ldr	r5, [r1, #0]
 80069e8:	601a      	str	r2, [r3, #0]
 80069ea:	2d00      	cmp	r5, #0
 80069ec:	da03      	bge.n	80069f6 <_printf_i+0x96>
 80069ee:	232d      	movs	r3, #45	; 0x2d
 80069f0:	9a04      	ldr	r2, [sp, #16]
 80069f2:	426d      	negs	r5, r5
 80069f4:	7013      	strb	r3, [r2, #0]
 80069f6:	4b61      	ldr	r3, [pc, #388]	; (8006b7c <_printf_i+0x21c>)
 80069f8:	270a      	movs	r7, #10
 80069fa:	9303      	str	r3, [sp, #12]
 80069fc:	e01b      	b.n	8006a36 <_printf_i+0xd6>
 80069fe:	680d      	ldr	r5, [r1, #0]
 8006a00:	601a      	str	r2, [r3, #0]
 8006a02:	0641      	lsls	r1, r0, #25
 8006a04:	d5f1      	bpl.n	80069ea <_printf_i+0x8a>
 8006a06:	b22d      	sxth	r5, r5
 8006a08:	e7ef      	b.n	80069ea <_printf_i+0x8a>
 8006a0a:	680d      	ldr	r5, [r1, #0]
 8006a0c:	6819      	ldr	r1, [r3, #0]
 8006a0e:	1d08      	adds	r0, r1, #4
 8006a10:	6018      	str	r0, [r3, #0]
 8006a12:	062e      	lsls	r6, r5, #24
 8006a14:	d501      	bpl.n	8006a1a <_printf_i+0xba>
 8006a16:	680d      	ldr	r5, [r1, #0]
 8006a18:	e003      	b.n	8006a22 <_printf_i+0xc2>
 8006a1a:	066d      	lsls	r5, r5, #25
 8006a1c:	d5fb      	bpl.n	8006a16 <_printf_i+0xb6>
 8006a1e:	680d      	ldr	r5, [r1, #0]
 8006a20:	b2ad      	uxth	r5, r5
 8006a22:	4b56      	ldr	r3, [pc, #344]	; (8006b7c <_printf_i+0x21c>)
 8006a24:	2708      	movs	r7, #8
 8006a26:	9303      	str	r3, [sp, #12]
 8006a28:	2a6f      	cmp	r2, #111	; 0x6f
 8006a2a:	d000      	beq.n	8006a2e <_printf_i+0xce>
 8006a2c:	3702      	adds	r7, #2
 8006a2e:	0023      	movs	r3, r4
 8006a30:	2200      	movs	r2, #0
 8006a32:	3343      	adds	r3, #67	; 0x43
 8006a34:	701a      	strb	r2, [r3, #0]
 8006a36:	6863      	ldr	r3, [r4, #4]
 8006a38:	60a3      	str	r3, [r4, #8]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	db03      	blt.n	8006a46 <_printf_i+0xe6>
 8006a3e:	2204      	movs	r2, #4
 8006a40:	6821      	ldr	r1, [r4, #0]
 8006a42:	4391      	bics	r1, r2
 8006a44:	6021      	str	r1, [r4, #0]
 8006a46:	2d00      	cmp	r5, #0
 8006a48:	d102      	bne.n	8006a50 <_printf_i+0xf0>
 8006a4a:	9e04      	ldr	r6, [sp, #16]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00c      	beq.n	8006a6a <_printf_i+0x10a>
 8006a50:	9e04      	ldr	r6, [sp, #16]
 8006a52:	0028      	movs	r0, r5
 8006a54:	0039      	movs	r1, r7
 8006a56:	f7f9 fbf7 	bl	8000248 <__aeabi_uidivmod>
 8006a5a:	9b03      	ldr	r3, [sp, #12]
 8006a5c:	3e01      	subs	r6, #1
 8006a5e:	5c5b      	ldrb	r3, [r3, r1]
 8006a60:	7033      	strb	r3, [r6, #0]
 8006a62:	002b      	movs	r3, r5
 8006a64:	0005      	movs	r5, r0
 8006a66:	429f      	cmp	r7, r3
 8006a68:	d9f3      	bls.n	8006a52 <_printf_i+0xf2>
 8006a6a:	2f08      	cmp	r7, #8
 8006a6c:	d109      	bne.n	8006a82 <_printf_i+0x122>
 8006a6e:	6823      	ldr	r3, [r4, #0]
 8006a70:	07db      	lsls	r3, r3, #31
 8006a72:	d506      	bpl.n	8006a82 <_printf_i+0x122>
 8006a74:	6863      	ldr	r3, [r4, #4]
 8006a76:	6922      	ldr	r2, [r4, #16]
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	dc02      	bgt.n	8006a82 <_printf_i+0x122>
 8006a7c:	2330      	movs	r3, #48	; 0x30
 8006a7e:	3e01      	subs	r6, #1
 8006a80:	7033      	strb	r3, [r6, #0]
 8006a82:	9b04      	ldr	r3, [sp, #16]
 8006a84:	1b9b      	subs	r3, r3, r6
 8006a86:	6123      	str	r3, [r4, #16]
 8006a88:	9b07      	ldr	r3, [sp, #28]
 8006a8a:	0021      	movs	r1, r4
 8006a8c:	9300      	str	r3, [sp, #0]
 8006a8e:	9805      	ldr	r0, [sp, #20]
 8006a90:	9b06      	ldr	r3, [sp, #24]
 8006a92:	aa09      	add	r2, sp, #36	; 0x24
 8006a94:	f7ff fef4 	bl	8006880 <_printf_common>
 8006a98:	1c43      	adds	r3, r0, #1
 8006a9a:	d14c      	bne.n	8006b36 <_printf_i+0x1d6>
 8006a9c:	2001      	movs	r0, #1
 8006a9e:	4240      	negs	r0, r0
 8006aa0:	b00b      	add	sp, #44	; 0x2c
 8006aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006aa4:	3145      	adds	r1, #69	; 0x45
 8006aa6:	700a      	strb	r2, [r1, #0]
 8006aa8:	4a34      	ldr	r2, [pc, #208]	; (8006b7c <_printf_i+0x21c>)
 8006aaa:	9203      	str	r2, [sp, #12]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	6821      	ldr	r1, [r4, #0]
 8006ab0:	ca20      	ldmia	r2!, {r5}
 8006ab2:	601a      	str	r2, [r3, #0]
 8006ab4:	0608      	lsls	r0, r1, #24
 8006ab6:	d516      	bpl.n	8006ae6 <_printf_i+0x186>
 8006ab8:	07cb      	lsls	r3, r1, #31
 8006aba:	d502      	bpl.n	8006ac2 <_printf_i+0x162>
 8006abc:	2320      	movs	r3, #32
 8006abe:	4319      	orrs	r1, r3
 8006ac0:	6021      	str	r1, [r4, #0]
 8006ac2:	2710      	movs	r7, #16
 8006ac4:	2d00      	cmp	r5, #0
 8006ac6:	d1b2      	bne.n	8006a2e <_printf_i+0xce>
 8006ac8:	2320      	movs	r3, #32
 8006aca:	6822      	ldr	r2, [r4, #0]
 8006acc:	439a      	bics	r2, r3
 8006ace:	6022      	str	r2, [r4, #0]
 8006ad0:	e7ad      	b.n	8006a2e <_printf_i+0xce>
 8006ad2:	2220      	movs	r2, #32
 8006ad4:	6809      	ldr	r1, [r1, #0]
 8006ad6:	430a      	orrs	r2, r1
 8006ad8:	6022      	str	r2, [r4, #0]
 8006ada:	0022      	movs	r2, r4
 8006adc:	2178      	movs	r1, #120	; 0x78
 8006ade:	3245      	adds	r2, #69	; 0x45
 8006ae0:	7011      	strb	r1, [r2, #0]
 8006ae2:	4a27      	ldr	r2, [pc, #156]	; (8006b80 <_printf_i+0x220>)
 8006ae4:	e7e1      	b.n	8006aaa <_printf_i+0x14a>
 8006ae6:	0648      	lsls	r0, r1, #25
 8006ae8:	d5e6      	bpl.n	8006ab8 <_printf_i+0x158>
 8006aea:	b2ad      	uxth	r5, r5
 8006aec:	e7e4      	b.n	8006ab8 <_printf_i+0x158>
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	680d      	ldr	r5, [r1, #0]
 8006af2:	1d10      	adds	r0, r2, #4
 8006af4:	6949      	ldr	r1, [r1, #20]
 8006af6:	6018      	str	r0, [r3, #0]
 8006af8:	6813      	ldr	r3, [r2, #0]
 8006afa:	062e      	lsls	r6, r5, #24
 8006afc:	d501      	bpl.n	8006b02 <_printf_i+0x1a2>
 8006afe:	6019      	str	r1, [r3, #0]
 8006b00:	e002      	b.n	8006b08 <_printf_i+0x1a8>
 8006b02:	066d      	lsls	r5, r5, #25
 8006b04:	d5fb      	bpl.n	8006afe <_printf_i+0x19e>
 8006b06:	8019      	strh	r1, [r3, #0]
 8006b08:	2300      	movs	r3, #0
 8006b0a:	9e04      	ldr	r6, [sp, #16]
 8006b0c:	6123      	str	r3, [r4, #16]
 8006b0e:	e7bb      	b.n	8006a88 <_printf_i+0x128>
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	1d11      	adds	r1, r2, #4
 8006b14:	6019      	str	r1, [r3, #0]
 8006b16:	6816      	ldr	r6, [r2, #0]
 8006b18:	2100      	movs	r1, #0
 8006b1a:	0030      	movs	r0, r6
 8006b1c:	6862      	ldr	r2, [r4, #4]
 8006b1e:	f000 ff05 	bl	800792c <memchr>
 8006b22:	2800      	cmp	r0, #0
 8006b24:	d001      	beq.n	8006b2a <_printf_i+0x1ca>
 8006b26:	1b80      	subs	r0, r0, r6
 8006b28:	6060      	str	r0, [r4, #4]
 8006b2a:	6863      	ldr	r3, [r4, #4]
 8006b2c:	6123      	str	r3, [r4, #16]
 8006b2e:	2300      	movs	r3, #0
 8006b30:	9a04      	ldr	r2, [sp, #16]
 8006b32:	7013      	strb	r3, [r2, #0]
 8006b34:	e7a8      	b.n	8006a88 <_printf_i+0x128>
 8006b36:	6923      	ldr	r3, [r4, #16]
 8006b38:	0032      	movs	r2, r6
 8006b3a:	9906      	ldr	r1, [sp, #24]
 8006b3c:	9805      	ldr	r0, [sp, #20]
 8006b3e:	9d07      	ldr	r5, [sp, #28]
 8006b40:	47a8      	blx	r5
 8006b42:	1c43      	adds	r3, r0, #1
 8006b44:	d0aa      	beq.n	8006a9c <_printf_i+0x13c>
 8006b46:	6823      	ldr	r3, [r4, #0]
 8006b48:	079b      	lsls	r3, r3, #30
 8006b4a:	d415      	bmi.n	8006b78 <_printf_i+0x218>
 8006b4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b4e:	68e0      	ldr	r0, [r4, #12]
 8006b50:	4298      	cmp	r0, r3
 8006b52:	daa5      	bge.n	8006aa0 <_printf_i+0x140>
 8006b54:	0018      	movs	r0, r3
 8006b56:	e7a3      	b.n	8006aa0 <_printf_i+0x140>
 8006b58:	0022      	movs	r2, r4
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	9906      	ldr	r1, [sp, #24]
 8006b5e:	9805      	ldr	r0, [sp, #20]
 8006b60:	9e07      	ldr	r6, [sp, #28]
 8006b62:	3219      	adds	r2, #25
 8006b64:	47b0      	blx	r6
 8006b66:	1c43      	adds	r3, r0, #1
 8006b68:	d098      	beq.n	8006a9c <_printf_i+0x13c>
 8006b6a:	3501      	adds	r5, #1
 8006b6c:	68e3      	ldr	r3, [r4, #12]
 8006b6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b70:	1a9b      	subs	r3, r3, r2
 8006b72:	42ab      	cmp	r3, r5
 8006b74:	dcf0      	bgt.n	8006b58 <_printf_i+0x1f8>
 8006b76:	e7e9      	b.n	8006b4c <_printf_i+0x1ec>
 8006b78:	2500      	movs	r5, #0
 8006b7a:	e7f7      	b.n	8006b6c <_printf_i+0x20c>
 8006b7c:	080093e2 	.word	0x080093e2
 8006b80:	080093f3 	.word	0x080093f3

08006b84 <siprintf>:
 8006b84:	b40e      	push	{r1, r2, r3}
 8006b86:	b500      	push	{lr}
 8006b88:	490b      	ldr	r1, [pc, #44]	; (8006bb8 <siprintf+0x34>)
 8006b8a:	b09c      	sub	sp, #112	; 0x70
 8006b8c:	ab1d      	add	r3, sp, #116	; 0x74
 8006b8e:	9002      	str	r0, [sp, #8]
 8006b90:	9006      	str	r0, [sp, #24]
 8006b92:	9107      	str	r1, [sp, #28]
 8006b94:	9104      	str	r1, [sp, #16]
 8006b96:	4809      	ldr	r0, [pc, #36]	; (8006bbc <siprintf+0x38>)
 8006b98:	4909      	ldr	r1, [pc, #36]	; (8006bc0 <siprintf+0x3c>)
 8006b9a:	cb04      	ldmia	r3!, {r2}
 8006b9c:	9105      	str	r1, [sp, #20]
 8006b9e:	6800      	ldr	r0, [r0, #0]
 8006ba0:	a902      	add	r1, sp, #8
 8006ba2:	9301      	str	r3, [sp, #4]
 8006ba4:	f001 fbe2 	bl	800836c <_svfiprintf_r>
 8006ba8:	2300      	movs	r3, #0
 8006baa:	9a02      	ldr	r2, [sp, #8]
 8006bac:	7013      	strb	r3, [r2, #0]
 8006bae:	b01c      	add	sp, #112	; 0x70
 8006bb0:	bc08      	pop	{r3}
 8006bb2:	b003      	add	sp, #12
 8006bb4:	4718      	bx	r3
 8006bb6:	46c0      	nop			; (mov r8, r8)
 8006bb8:	7fffffff 	.word	0x7fffffff
 8006bbc:	2000000c 	.word	0x2000000c
 8006bc0:	ffff0208 	.word	0xffff0208

08006bc4 <quorem>:
 8006bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bc6:	0006      	movs	r6, r0
 8006bc8:	690b      	ldr	r3, [r1, #16]
 8006bca:	6932      	ldr	r2, [r6, #16]
 8006bcc:	b087      	sub	sp, #28
 8006bce:	2000      	movs	r0, #0
 8006bd0:	9103      	str	r1, [sp, #12]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	db65      	blt.n	8006ca2 <quorem+0xde>
 8006bd6:	3b01      	subs	r3, #1
 8006bd8:	009c      	lsls	r4, r3, #2
 8006bda:	9300      	str	r3, [sp, #0]
 8006bdc:	000b      	movs	r3, r1
 8006bde:	3314      	adds	r3, #20
 8006be0:	9305      	str	r3, [sp, #20]
 8006be2:	191b      	adds	r3, r3, r4
 8006be4:	9304      	str	r3, [sp, #16]
 8006be6:	0033      	movs	r3, r6
 8006be8:	3314      	adds	r3, #20
 8006bea:	9302      	str	r3, [sp, #8]
 8006bec:	191c      	adds	r4, r3, r4
 8006bee:	9b04      	ldr	r3, [sp, #16]
 8006bf0:	6827      	ldr	r7, [r4, #0]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	0038      	movs	r0, r7
 8006bf6:	1c5d      	adds	r5, r3, #1
 8006bf8:	0029      	movs	r1, r5
 8006bfa:	9301      	str	r3, [sp, #4]
 8006bfc:	f7f9 fa9e 	bl	800013c <__udivsi3>
 8006c00:	9001      	str	r0, [sp, #4]
 8006c02:	42af      	cmp	r7, r5
 8006c04:	d324      	bcc.n	8006c50 <quorem+0x8c>
 8006c06:	2500      	movs	r5, #0
 8006c08:	46ac      	mov	ip, r5
 8006c0a:	9802      	ldr	r0, [sp, #8]
 8006c0c:	9f05      	ldr	r7, [sp, #20]
 8006c0e:	cf08      	ldmia	r7!, {r3}
 8006c10:	9a01      	ldr	r2, [sp, #4]
 8006c12:	b299      	uxth	r1, r3
 8006c14:	4351      	muls	r1, r2
 8006c16:	0c1b      	lsrs	r3, r3, #16
 8006c18:	4353      	muls	r3, r2
 8006c1a:	1949      	adds	r1, r1, r5
 8006c1c:	0c0a      	lsrs	r2, r1, #16
 8006c1e:	189b      	adds	r3, r3, r2
 8006c20:	6802      	ldr	r2, [r0, #0]
 8006c22:	b289      	uxth	r1, r1
 8006c24:	b292      	uxth	r2, r2
 8006c26:	4462      	add	r2, ip
 8006c28:	1a52      	subs	r2, r2, r1
 8006c2a:	6801      	ldr	r1, [r0, #0]
 8006c2c:	0c1d      	lsrs	r5, r3, #16
 8006c2e:	0c09      	lsrs	r1, r1, #16
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	1acb      	subs	r3, r1, r3
 8006c34:	1411      	asrs	r1, r2, #16
 8006c36:	185b      	adds	r3, r3, r1
 8006c38:	1419      	asrs	r1, r3, #16
 8006c3a:	b292      	uxth	r2, r2
 8006c3c:	041b      	lsls	r3, r3, #16
 8006c3e:	431a      	orrs	r2, r3
 8006c40:	9b04      	ldr	r3, [sp, #16]
 8006c42:	468c      	mov	ip, r1
 8006c44:	c004      	stmia	r0!, {r2}
 8006c46:	42bb      	cmp	r3, r7
 8006c48:	d2e1      	bcs.n	8006c0e <quorem+0x4a>
 8006c4a:	6823      	ldr	r3, [r4, #0]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d030      	beq.n	8006cb2 <quorem+0xee>
 8006c50:	0030      	movs	r0, r6
 8006c52:	9903      	ldr	r1, [sp, #12]
 8006c54:	f001 f902 	bl	8007e5c <__mcmp>
 8006c58:	2800      	cmp	r0, #0
 8006c5a:	db21      	blt.n	8006ca0 <quorem+0xdc>
 8006c5c:	0030      	movs	r0, r6
 8006c5e:	2400      	movs	r4, #0
 8006c60:	9b01      	ldr	r3, [sp, #4]
 8006c62:	9903      	ldr	r1, [sp, #12]
 8006c64:	3301      	adds	r3, #1
 8006c66:	9301      	str	r3, [sp, #4]
 8006c68:	3014      	adds	r0, #20
 8006c6a:	3114      	adds	r1, #20
 8006c6c:	6803      	ldr	r3, [r0, #0]
 8006c6e:	c920      	ldmia	r1!, {r5}
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	1914      	adds	r4, r2, r4
 8006c74:	b2aa      	uxth	r2, r5
 8006c76:	1aa2      	subs	r2, r4, r2
 8006c78:	0c1b      	lsrs	r3, r3, #16
 8006c7a:	0c2d      	lsrs	r5, r5, #16
 8006c7c:	1414      	asrs	r4, r2, #16
 8006c7e:	1b5b      	subs	r3, r3, r5
 8006c80:	191b      	adds	r3, r3, r4
 8006c82:	141c      	asrs	r4, r3, #16
 8006c84:	b292      	uxth	r2, r2
 8006c86:	041b      	lsls	r3, r3, #16
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	c008      	stmia	r0!, {r3}
 8006c8c:	9b04      	ldr	r3, [sp, #16]
 8006c8e:	428b      	cmp	r3, r1
 8006c90:	d2ec      	bcs.n	8006c6c <quorem+0xa8>
 8006c92:	9b00      	ldr	r3, [sp, #0]
 8006c94:	9a02      	ldr	r2, [sp, #8]
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	18d3      	adds	r3, r2, r3
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	2a00      	cmp	r2, #0
 8006c9e:	d015      	beq.n	8006ccc <quorem+0x108>
 8006ca0:	9801      	ldr	r0, [sp, #4]
 8006ca2:	b007      	add	sp, #28
 8006ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ca6:	6823      	ldr	r3, [r4, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d106      	bne.n	8006cba <quorem+0xf6>
 8006cac:	9b00      	ldr	r3, [sp, #0]
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	9300      	str	r3, [sp, #0]
 8006cb2:	9b02      	ldr	r3, [sp, #8]
 8006cb4:	3c04      	subs	r4, #4
 8006cb6:	42a3      	cmp	r3, r4
 8006cb8:	d3f5      	bcc.n	8006ca6 <quorem+0xe2>
 8006cba:	9b00      	ldr	r3, [sp, #0]
 8006cbc:	6133      	str	r3, [r6, #16]
 8006cbe:	e7c7      	b.n	8006c50 <quorem+0x8c>
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	2a00      	cmp	r2, #0
 8006cc4:	d106      	bne.n	8006cd4 <quorem+0x110>
 8006cc6:	9a00      	ldr	r2, [sp, #0]
 8006cc8:	3a01      	subs	r2, #1
 8006cca:	9200      	str	r2, [sp, #0]
 8006ccc:	9a02      	ldr	r2, [sp, #8]
 8006cce:	3b04      	subs	r3, #4
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d3f5      	bcc.n	8006cc0 <quorem+0xfc>
 8006cd4:	9b00      	ldr	r3, [sp, #0]
 8006cd6:	6133      	str	r3, [r6, #16]
 8006cd8:	e7e2      	b.n	8006ca0 <quorem+0xdc>
	...

08006cdc <_dtoa_r>:
 8006cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cde:	b09d      	sub	sp, #116	; 0x74
 8006ce0:	9202      	str	r2, [sp, #8]
 8006ce2:	9303      	str	r3, [sp, #12]
 8006ce4:	9b02      	ldr	r3, [sp, #8]
 8006ce6:	9c03      	ldr	r4, [sp, #12]
 8006ce8:	9308      	str	r3, [sp, #32]
 8006cea:	9409      	str	r4, [sp, #36]	; 0x24
 8006cec:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006cee:	0007      	movs	r7, r0
 8006cf0:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8006cf2:	2c00      	cmp	r4, #0
 8006cf4:	d10e      	bne.n	8006d14 <_dtoa_r+0x38>
 8006cf6:	2010      	movs	r0, #16
 8006cf8:	f000 fe0e 	bl	8007918 <malloc>
 8006cfc:	1e02      	subs	r2, r0, #0
 8006cfe:	6278      	str	r0, [r7, #36]	; 0x24
 8006d00:	d104      	bne.n	8006d0c <_dtoa_r+0x30>
 8006d02:	21ea      	movs	r1, #234	; 0xea
 8006d04:	4bc7      	ldr	r3, [pc, #796]	; (8007024 <_dtoa_r+0x348>)
 8006d06:	48c8      	ldr	r0, [pc, #800]	; (8007028 <_dtoa_r+0x34c>)
 8006d08:	f001 fc42 	bl	8008590 <__assert_func>
 8006d0c:	6044      	str	r4, [r0, #4]
 8006d0e:	6084      	str	r4, [r0, #8]
 8006d10:	6004      	str	r4, [r0, #0]
 8006d12:	60c4      	str	r4, [r0, #12]
 8006d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d16:	6819      	ldr	r1, [r3, #0]
 8006d18:	2900      	cmp	r1, #0
 8006d1a:	d00a      	beq.n	8006d32 <_dtoa_r+0x56>
 8006d1c:	685a      	ldr	r2, [r3, #4]
 8006d1e:	2301      	movs	r3, #1
 8006d20:	4093      	lsls	r3, r2
 8006d22:	604a      	str	r2, [r1, #4]
 8006d24:	608b      	str	r3, [r1, #8]
 8006d26:	0038      	movs	r0, r7
 8006d28:	f000 fe58 	bl	80079dc <_Bfree>
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d30:	601a      	str	r2, [r3, #0]
 8006d32:	9b03      	ldr	r3, [sp, #12]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	da20      	bge.n	8006d7a <_dtoa_r+0x9e>
 8006d38:	2301      	movs	r3, #1
 8006d3a:	602b      	str	r3, [r5, #0]
 8006d3c:	9b03      	ldr	r3, [sp, #12]
 8006d3e:	005b      	lsls	r3, r3, #1
 8006d40:	085b      	lsrs	r3, r3, #1
 8006d42:	9309      	str	r3, [sp, #36]	; 0x24
 8006d44:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006d46:	4bb9      	ldr	r3, [pc, #740]	; (800702c <_dtoa_r+0x350>)
 8006d48:	4ab8      	ldr	r2, [pc, #736]	; (800702c <_dtoa_r+0x350>)
 8006d4a:	402b      	ands	r3, r5
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d117      	bne.n	8006d80 <_dtoa_r+0xa4>
 8006d50:	4bb7      	ldr	r3, [pc, #732]	; (8007030 <_dtoa_r+0x354>)
 8006d52:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006d54:	0328      	lsls	r0, r5, #12
 8006d56:	6013      	str	r3, [r2, #0]
 8006d58:	9b02      	ldr	r3, [sp, #8]
 8006d5a:	0b00      	lsrs	r0, r0, #12
 8006d5c:	4318      	orrs	r0, r3
 8006d5e:	d101      	bne.n	8006d64 <_dtoa_r+0x88>
 8006d60:	f000 fdbf 	bl	80078e2 <_dtoa_r+0xc06>
 8006d64:	48b3      	ldr	r0, [pc, #716]	; (8007034 <_dtoa_r+0x358>)
 8006d66:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006d68:	9006      	str	r0, [sp, #24]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d002      	beq.n	8006d74 <_dtoa_r+0x98>
 8006d6e:	4bb2      	ldr	r3, [pc, #712]	; (8007038 <_dtoa_r+0x35c>)
 8006d70:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006d72:	6013      	str	r3, [r2, #0]
 8006d74:	9806      	ldr	r0, [sp, #24]
 8006d76:	b01d      	add	sp, #116	; 0x74
 8006d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	602b      	str	r3, [r5, #0]
 8006d7e:	e7e1      	b.n	8006d44 <_dtoa_r+0x68>
 8006d80:	9b08      	ldr	r3, [sp, #32]
 8006d82:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8006d84:	9312      	str	r3, [sp, #72]	; 0x48
 8006d86:	9413      	str	r4, [sp, #76]	; 0x4c
 8006d88:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006d8a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	2300      	movs	r3, #0
 8006d90:	f7f9 fb5a 	bl	8000448 <__aeabi_dcmpeq>
 8006d94:	1e04      	subs	r4, r0, #0
 8006d96:	d009      	beq.n	8006dac <_dtoa_r+0xd0>
 8006d98:	2301      	movs	r3, #1
 8006d9a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006d9c:	6013      	str	r3, [r2, #0]
 8006d9e:	4ba7      	ldr	r3, [pc, #668]	; (800703c <_dtoa_r+0x360>)
 8006da0:	9306      	str	r3, [sp, #24]
 8006da2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d0e5      	beq.n	8006d74 <_dtoa_r+0x98>
 8006da8:	4ba5      	ldr	r3, [pc, #660]	; (8007040 <_dtoa_r+0x364>)
 8006daa:	e7e1      	b.n	8006d70 <_dtoa_r+0x94>
 8006dac:	ab1a      	add	r3, sp, #104	; 0x68
 8006dae:	9301      	str	r3, [sp, #4]
 8006db0:	ab1b      	add	r3, sp, #108	; 0x6c
 8006db2:	9300      	str	r3, [sp, #0]
 8006db4:	0038      	movs	r0, r7
 8006db6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006db8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006dba:	f001 f903 	bl	8007fc4 <__d2b>
 8006dbe:	006e      	lsls	r6, r5, #1
 8006dc0:	9005      	str	r0, [sp, #20]
 8006dc2:	0d76      	lsrs	r6, r6, #21
 8006dc4:	d100      	bne.n	8006dc8 <_dtoa_r+0xec>
 8006dc6:	e07c      	b.n	8006ec2 <_dtoa_r+0x1e6>
 8006dc8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006dca:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006dcc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006dce:	4a9d      	ldr	r2, [pc, #628]	; (8007044 <_dtoa_r+0x368>)
 8006dd0:	031b      	lsls	r3, r3, #12
 8006dd2:	0b1b      	lsrs	r3, r3, #12
 8006dd4:	431a      	orrs	r2, r3
 8006dd6:	0011      	movs	r1, r2
 8006dd8:	4b9b      	ldr	r3, [pc, #620]	; (8007048 <_dtoa_r+0x36c>)
 8006dda:	9418      	str	r4, [sp, #96]	; 0x60
 8006ddc:	18f6      	adds	r6, r6, r3
 8006dde:	2200      	movs	r2, #0
 8006de0:	4b9a      	ldr	r3, [pc, #616]	; (800704c <_dtoa_r+0x370>)
 8006de2:	f7fa ff5b 	bl	8001c9c <__aeabi_dsub>
 8006de6:	4a9a      	ldr	r2, [pc, #616]	; (8007050 <_dtoa_r+0x374>)
 8006de8:	4b9a      	ldr	r3, [pc, #616]	; (8007054 <_dtoa_r+0x378>)
 8006dea:	f7fa fceb 	bl	80017c4 <__aeabi_dmul>
 8006dee:	4a9a      	ldr	r2, [pc, #616]	; (8007058 <_dtoa_r+0x37c>)
 8006df0:	4b9a      	ldr	r3, [pc, #616]	; (800705c <_dtoa_r+0x380>)
 8006df2:	f7f9 fda9 	bl	8000948 <__aeabi_dadd>
 8006df6:	0004      	movs	r4, r0
 8006df8:	0030      	movs	r0, r6
 8006dfa:	000d      	movs	r5, r1
 8006dfc:	f7fb fb34 	bl	8002468 <__aeabi_i2d>
 8006e00:	4a97      	ldr	r2, [pc, #604]	; (8007060 <_dtoa_r+0x384>)
 8006e02:	4b98      	ldr	r3, [pc, #608]	; (8007064 <_dtoa_r+0x388>)
 8006e04:	f7fa fcde 	bl	80017c4 <__aeabi_dmul>
 8006e08:	0002      	movs	r2, r0
 8006e0a:	000b      	movs	r3, r1
 8006e0c:	0020      	movs	r0, r4
 8006e0e:	0029      	movs	r1, r5
 8006e10:	f7f9 fd9a 	bl	8000948 <__aeabi_dadd>
 8006e14:	0004      	movs	r4, r0
 8006e16:	000d      	movs	r5, r1
 8006e18:	f7fb faf0 	bl	80023fc <__aeabi_d2iz>
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	9002      	str	r0, [sp, #8]
 8006e20:	2300      	movs	r3, #0
 8006e22:	0020      	movs	r0, r4
 8006e24:	0029      	movs	r1, r5
 8006e26:	f7f9 fb15 	bl	8000454 <__aeabi_dcmplt>
 8006e2a:	2800      	cmp	r0, #0
 8006e2c:	d00b      	beq.n	8006e46 <_dtoa_r+0x16a>
 8006e2e:	9802      	ldr	r0, [sp, #8]
 8006e30:	f7fb fb1a 	bl	8002468 <__aeabi_i2d>
 8006e34:	002b      	movs	r3, r5
 8006e36:	0022      	movs	r2, r4
 8006e38:	f7f9 fb06 	bl	8000448 <__aeabi_dcmpeq>
 8006e3c:	4243      	negs	r3, r0
 8006e3e:	4158      	adcs	r0, r3
 8006e40:	9b02      	ldr	r3, [sp, #8]
 8006e42:	1a1b      	subs	r3, r3, r0
 8006e44:	9302      	str	r3, [sp, #8]
 8006e46:	2301      	movs	r3, #1
 8006e48:	9316      	str	r3, [sp, #88]	; 0x58
 8006e4a:	9b02      	ldr	r3, [sp, #8]
 8006e4c:	2b16      	cmp	r3, #22
 8006e4e:	d80f      	bhi.n	8006e70 <_dtoa_r+0x194>
 8006e50:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006e52:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006e54:	00da      	lsls	r2, r3, #3
 8006e56:	4b84      	ldr	r3, [pc, #528]	; (8007068 <_dtoa_r+0x38c>)
 8006e58:	189b      	adds	r3, r3, r2
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	f7f9 faf9 	bl	8000454 <__aeabi_dcmplt>
 8006e62:	2800      	cmp	r0, #0
 8006e64:	d049      	beq.n	8006efa <_dtoa_r+0x21e>
 8006e66:	9b02      	ldr	r3, [sp, #8]
 8006e68:	3b01      	subs	r3, #1
 8006e6a:	9302      	str	r3, [sp, #8]
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	9316      	str	r3, [sp, #88]	; 0x58
 8006e70:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006e72:	1b9e      	subs	r6, r3, r6
 8006e74:	2300      	movs	r3, #0
 8006e76:	930a      	str	r3, [sp, #40]	; 0x28
 8006e78:	0033      	movs	r3, r6
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	930d      	str	r3, [sp, #52]	; 0x34
 8006e7e:	d504      	bpl.n	8006e8a <_dtoa_r+0x1ae>
 8006e80:	2301      	movs	r3, #1
 8006e82:	1b9b      	subs	r3, r3, r6
 8006e84:	930a      	str	r3, [sp, #40]	; 0x28
 8006e86:	2300      	movs	r3, #0
 8006e88:	930d      	str	r3, [sp, #52]	; 0x34
 8006e8a:	9b02      	ldr	r3, [sp, #8]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	db36      	blt.n	8006efe <_dtoa_r+0x222>
 8006e90:	9a02      	ldr	r2, [sp, #8]
 8006e92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e94:	4694      	mov	ip, r2
 8006e96:	4463      	add	r3, ip
 8006e98:	930d      	str	r3, [sp, #52]	; 0x34
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	9215      	str	r2, [sp, #84]	; 0x54
 8006e9e:	930e      	str	r3, [sp, #56]	; 0x38
 8006ea0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ea2:	2401      	movs	r4, #1
 8006ea4:	2b09      	cmp	r3, #9
 8006ea6:	d864      	bhi.n	8006f72 <_dtoa_r+0x296>
 8006ea8:	2b05      	cmp	r3, #5
 8006eaa:	dd02      	ble.n	8006eb2 <_dtoa_r+0x1d6>
 8006eac:	2400      	movs	r4, #0
 8006eae:	3b04      	subs	r3, #4
 8006eb0:	9322      	str	r3, [sp, #136]	; 0x88
 8006eb2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006eb4:	1e98      	subs	r0, r3, #2
 8006eb6:	2803      	cmp	r0, #3
 8006eb8:	d864      	bhi.n	8006f84 <_dtoa_r+0x2a8>
 8006eba:	f7f9 f92b 	bl	8000114 <__gnu_thumb1_case_uqi>
 8006ebe:	3829      	.short	0x3829
 8006ec0:	5836      	.short	0x5836
 8006ec2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006ec4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006ec6:	189e      	adds	r6, r3, r2
 8006ec8:	4b68      	ldr	r3, [pc, #416]	; (800706c <_dtoa_r+0x390>)
 8006eca:	18f2      	adds	r2, r6, r3
 8006ecc:	2a20      	cmp	r2, #32
 8006ece:	dd0f      	ble.n	8006ef0 <_dtoa_r+0x214>
 8006ed0:	2340      	movs	r3, #64	; 0x40
 8006ed2:	1a9b      	subs	r3, r3, r2
 8006ed4:	409d      	lsls	r5, r3
 8006ed6:	4b66      	ldr	r3, [pc, #408]	; (8007070 <_dtoa_r+0x394>)
 8006ed8:	9802      	ldr	r0, [sp, #8]
 8006eda:	18f3      	adds	r3, r6, r3
 8006edc:	40d8      	lsrs	r0, r3
 8006ede:	4328      	orrs	r0, r5
 8006ee0:	f7fb faf2 	bl	80024c8 <__aeabi_ui2d>
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	4c63      	ldr	r4, [pc, #396]	; (8007074 <_dtoa_r+0x398>)
 8006ee8:	3e01      	subs	r6, #1
 8006eea:	1909      	adds	r1, r1, r4
 8006eec:	9318      	str	r3, [sp, #96]	; 0x60
 8006eee:	e776      	b.n	8006dde <_dtoa_r+0x102>
 8006ef0:	2320      	movs	r3, #32
 8006ef2:	9802      	ldr	r0, [sp, #8]
 8006ef4:	1a9b      	subs	r3, r3, r2
 8006ef6:	4098      	lsls	r0, r3
 8006ef8:	e7f2      	b.n	8006ee0 <_dtoa_r+0x204>
 8006efa:	9016      	str	r0, [sp, #88]	; 0x58
 8006efc:	e7b8      	b.n	8006e70 <_dtoa_r+0x194>
 8006efe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f00:	9a02      	ldr	r2, [sp, #8]
 8006f02:	1a9b      	subs	r3, r3, r2
 8006f04:	930a      	str	r3, [sp, #40]	; 0x28
 8006f06:	4253      	negs	r3, r2
 8006f08:	930e      	str	r3, [sp, #56]	; 0x38
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	9315      	str	r3, [sp, #84]	; 0x54
 8006f0e:	e7c7      	b.n	8006ea0 <_dtoa_r+0x1c4>
 8006f10:	2300      	movs	r3, #0
 8006f12:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f14:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006f16:	930c      	str	r3, [sp, #48]	; 0x30
 8006f18:	9307      	str	r3, [sp, #28]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	dc13      	bgt.n	8006f46 <_dtoa_r+0x26a>
 8006f1e:	2301      	movs	r3, #1
 8006f20:	001a      	movs	r2, r3
 8006f22:	930c      	str	r3, [sp, #48]	; 0x30
 8006f24:	9307      	str	r3, [sp, #28]
 8006f26:	9223      	str	r2, [sp, #140]	; 0x8c
 8006f28:	e00d      	b.n	8006f46 <_dtoa_r+0x26a>
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e7f1      	b.n	8006f12 <_dtoa_r+0x236>
 8006f2e:	2300      	movs	r3, #0
 8006f30:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8006f32:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f34:	4694      	mov	ip, r2
 8006f36:	9b02      	ldr	r3, [sp, #8]
 8006f38:	4463      	add	r3, ip
 8006f3a:	930c      	str	r3, [sp, #48]	; 0x30
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	9307      	str	r3, [sp, #28]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	dc00      	bgt.n	8006f46 <_dtoa_r+0x26a>
 8006f44:	2301      	movs	r3, #1
 8006f46:	2200      	movs	r2, #0
 8006f48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f4a:	6042      	str	r2, [r0, #4]
 8006f4c:	3204      	adds	r2, #4
 8006f4e:	0015      	movs	r5, r2
 8006f50:	3514      	adds	r5, #20
 8006f52:	6841      	ldr	r1, [r0, #4]
 8006f54:	429d      	cmp	r5, r3
 8006f56:	d919      	bls.n	8006f8c <_dtoa_r+0x2b0>
 8006f58:	0038      	movs	r0, r7
 8006f5a:	f000 fcfb 	bl	8007954 <_Balloc>
 8006f5e:	9006      	str	r0, [sp, #24]
 8006f60:	2800      	cmp	r0, #0
 8006f62:	d117      	bne.n	8006f94 <_dtoa_r+0x2b8>
 8006f64:	21d5      	movs	r1, #213	; 0xd5
 8006f66:	0002      	movs	r2, r0
 8006f68:	4b43      	ldr	r3, [pc, #268]	; (8007078 <_dtoa_r+0x39c>)
 8006f6a:	0049      	lsls	r1, r1, #1
 8006f6c:	e6cb      	b.n	8006d06 <_dtoa_r+0x2a>
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e7de      	b.n	8006f30 <_dtoa_r+0x254>
 8006f72:	2300      	movs	r3, #0
 8006f74:	940f      	str	r4, [sp, #60]	; 0x3c
 8006f76:	9322      	str	r3, [sp, #136]	; 0x88
 8006f78:	3b01      	subs	r3, #1
 8006f7a:	930c      	str	r3, [sp, #48]	; 0x30
 8006f7c:	9307      	str	r3, [sp, #28]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	3313      	adds	r3, #19
 8006f82:	e7d0      	b.n	8006f26 <_dtoa_r+0x24a>
 8006f84:	2301      	movs	r3, #1
 8006f86:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f88:	3b02      	subs	r3, #2
 8006f8a:	e7f6      	b.n	8006f7a <_dtoa_r+0x29e>
 8006f8c:	3101      	adds	r1, #1
 8006f8e:	6041      	str	r1, [r0, #4]
 8006f90:	0052      	lsls	r2, r2, #1
 8006f92:	e7dc      	b.n	8006f4e <_dtoa_r+0x272>
 8006f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f96:	9a06      	ldr	r2, [sp, #24]
 8006f98:	601a      	str	r2, [r3, #0]
 8006f9a:	9b07      	ldr	r3, [sp, #28]
 8006f9c:	2b0e      	cmp	r3, #14
 8006f9e:	d900      	bls.n	8006fa2 <_dtoa_r+0x2c6>
 8006fa0:	e0eb      	b.n	800717a <_dtoa_r+0x49e>
 8006fa2:	2c00      	cmp	r4, #0
 8006fa4:	d100      	bne.n	8006fa8 <_dtoa_r+0x2cc>
 8006fa6:	e0e8      	b.n	800717a <_dtoa_r+0x49e>
 8006fa8:	9b02      	ldr	r3, [sp, #8]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	dd68      	ble.n	8007080 <_dtoa_r+0x3a4>
 8006fae:	001a      	movs	r2, r3
 8006fb0:	210f      	movs	r1, #15
 8006fb2:	4b2d      	ldr	r3, [pc, #180]	; (8007068 <_dtoa_r+0x38c>)
 8006fb4:	400a      	ands	r2, r1
 8006fb6:	00d2      	lsls	r2, r2, #3
 8006fb8:	189b      	adds	r3, r3, r2
 8006fba:	681d      	ldr	r5, [r3, #0]
 8006fbc:	685e      	ldr	r6, [r3, #4]
 8006fbe:	9b02      	ldr	r3, [sp, #8]
 8006fc0:	111c      	asrs	r4, r3, #4
 8006fc2:	2302      	movs	r3, #2
 8006fc4:	9310      	str	r3, [sp, #64]	; 0x40
 8006fc6:	9b02      	ldr	r3, [sp, #8]
 8006fc8:	05db      	lsls	r3, r3, #23
 8006fca:	d50b      	bpl.n	8006fe4 <_dtoa_r+0x308>
 8006fcc:	4b2b      	ldr	r3, [pc, #172]	; (800707c <_dtoa_r+0x3a0>)
 8006fce:	400c      	ands	r4, r1
 8006fd0:	6a1a      	ldr	r2, [r3, #32]
 8006fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006fd6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006fd8:	f7f9 fff2 	bl	8000fc0 <__aeabi_ddiv>
 8006fdc:	2303      	movs	r3, #3
 8006fde:	9008      	str	r0, [sp, #32]
 8006fe0:	9109      	str	r1, [sp, #36]	; 0x24
 8006fe2:	9310      	str	r3, [sp, #64]	; 0x40
 8006fe4:	4b25      	ldr	r3, [pc, #148]	; (800707c <_dtoa_r+0x3a0>)
 8006fe6:	9314      	str	r3, [sp, #80]	; 0x50
 8006fe8:	2c00      	cmp	r4, #0
 8006fea:	d108      	bne.n	8006ffe <_dtoa_r+0x322>
 8006fec:	9808      	ldr	r0, [sp, #32]
 8006fee:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ff0:	002a      	movs	r2, r5
 8006ff2:	0033      	movs	r3, r6
 8006ff4:	f7f9 ffe4 	bl	8000fc0 <__aeabi_ddiv>
 8006ff8:	9008      	str	r0, [sp, #32]
 8006ffa:	9109      	str	r1, [sp, #36]	; 0x24
 8006ffc:	e05c      	b.n	80070b8 <_dtoa_r+0x3dc>
 8006ffe:	2301      	movs	r3, #1
 8007000:	421c      	tst	r4, r3
 8007002:	d00b      	beq.n	800701c <_dtoa_r+0x340>
 8007004:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007006:	0028      	movs	r0, r5
 8007008:	3301      	adds	r3, #1
 800700a:	9310      	str	r3, [sp, #64]	; 0x40
 800700c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800700e:	0031      	movs	r1, r6
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	f7fa fbd6 	bl	80017c4 <__aeabi_dmul>
 8007018:	0005      	movs	r5, r0
 800701a:	000e      	movs	r6, r1
 800701c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800701e:	1064      	asrs	r4, r4, #1
 8007020:	3308      	adds	r3, #8
 8007022:	e7e0      	b.n	8006fe6 <_dtoa_r+0x30a>
 8007024:	08009411 	.word	0x08009411
 8007028:	08009428 	.word	0x08009428
 800702c:	7ff00000 	.word	0x7ff00000
 8007030:	0000270f 	.word	0x0000270f
 8007034:	0800940d 	.word	0x0800940d
 8007038:	08009410 	.word	0x08009410
 800703c:	080093e0 	.word	0x080093e0
 8007040:	080093e1 	.word	0x080093e1
 8007044:	3ff00000 	.word	0x3ff00000
 8007048:	fffffc01 	.word	0xfffffc01
 800704c:	3ff80000 	.word	0x3ff80000
 8007050:	636f4361 	.word	0x636f4361
 8007054:	3fd287a7 	.word	0x3fd287a7
 8007058:	8b60c8b3 	.word	0x8b60c8b3
 800705c:	3fc68a28 	.word	0x3fc68a28
 8007060:	509f79fb 	.word	0x509f79fb
 8007064:	3fd34413 	.word	0x3fd34413
 8007068:	08009518 	.word	0x08009518
 800706c:	00000432 	.word	0x00000432
 8007070:	00000412 	.word	0x00000412
 8007074:	fe100000 	.word	0xfe100000
 8007078:	08009483 	.word	0x08009483
 800707c:	080094f0 	.word	0x080094f0
 8007080:	2302      	movs	r3, #2
 8007082:	9310      	str	r3, [sp, #64]	; 0x40
 8007084:	9b02      	ldr	r3, [sp, #8]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d016      	beq.n	80070b8 <_dtoa_r+0x3dc>
 800708a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800708c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800708e:	425c      	negs	r4, r3
 8007090:	230f      	movs	r3, #15
 8007092:	4ab6      	ldr	r2, [pc, #728]	; (800736c <_dtoa_r+0x690>)
 8007094:	4023      	ands	r3, r4
 8007096:	00db      	lsls	r3, r3, #3
 8007098:	18d3      	adds	r3, r2, r3
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	f7fa fb91 	bl	80017c4 <__aeabi_dmul>
 80070a2:	2601      	movs	r6, #1
 80070a4:	2300      	movs	r3, #0
 80070a6:	9008      	str	r0, [sp, #32]
 80070a8:	9109      	str	r1, [sp, #36]	; 0x24
 80070aa:	4db1      	ldr	r5, [pc, #708]	; (8007370 <_dtoa_r+0x694>)
 80070ac:	1124      	asrs	r4, r4, #4
 80070ae:	2c00      	cmp	r4, #0
 80070b0:	d000      	beq.n	80070b4 <_dtoa_r+0x3d8>
 80070b2:	e094      	b.n	80071de <_dtoa_r+0x502>
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d19f      	bne.n	8006ff8 <_dtoa_r+0x31c>
 80070b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d100      	bne.n	80070c0 <_dtoa_r+0x3e4>
 80070be:	e09b      	b.n	80071f8 <_dtoa_r+0x51c>
 80070c0:	9c08      	ldr	r4, [sp, #32]
 80070c2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80070c4:	2200      	movs	r2, #0
 80070c6:	0020      	movs	r0, r4
 80070c8:	0029      	movs	r1, r5
 80070ca:	4baa      	ldr	r3, [pc, #680]	; (8007374 <_dtoa_r+0x698>)
 80070cc:	f7f9 f9c2 	bl	8000454 <__aeabi_dcmplt>
 80070d0:	2800      	cmp	r0, #0
 80070d2:	d100      	bne.n	80070d6 <_dtoa_r+0x3fa>
 80070d4:	e090      	b.n	80071f8 <_dtoa_r+0x51c>
 80070d6:	9b07      	ldr	r3, [sp, #28]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d100      	bne.n	80070de <_dtoa_r+0x402>
 80070dc:	e08c      	b.n	80071f8 <_dtoa_r+0x51c>
 80070de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	dd46      	ble.n	8007172 <_dtoa_r+0x496>
 80070e4:	9b02      	ldr	r3, [sp, #8]
 80070e6:	2200      	movs	r2, #0
 80070e8:	0020      	movs	r0, r4
 80070ea:	0029      	movs	r1, r5
 80070ec:	1e5e      	subs	r6, r3, #1
 80070ee:	4ba2      	ldr	r3, [pc, #648]	; (8007378 <_dtoa_r+0x69c>)
 80070f0:	f7fa fb68 	bl	80017c4 <__aeabi_dmul>
 80070f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80070f6:	9008      	str	r0, [sp, #32]
 80070f8:	9109      	str	r1, [sp, #36]	; 0x24
 80070fa:	3301      	adds	r3, #1
 80070fc:	9310      	str	r3, [sp, #64]	; 0x40
 80070fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007100:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007102:	9c08      	ldr	r4, [sp, #32]
 8007104:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007106:	9314      	str	r3, [sp, #80]	; 0x50
 8007108:	f7fb f9ae 	bl	8002468 <__aeabi_i2d>
 800710c:	0022      	movs	r2, r4
 800710e:	002b      	movs	r3, r5
 8007110:	f7fa fb58 	bl	80017c4 <__aeabi_dmul>
 8007114:	2200      	movs	r2, #0
 8007116:	4b99      	ldr	r3, [pc, #612]	; (800737c <_dtoa_r+0x6a0>)
 8007118:	f7f9 fc16 	bl	8000948 <__aeabi_dadd>
 800711c:	9010      	str	r0, [sp, #64]	; 0x40
 800711e:	9111      	str	r1, [sp, #68]	; 0x44
 8007120:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007122:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007124:	9208      	str	r2, [sp, #32]
 8007126:	9309      	str	r3, [sp, #36]	; 0x24
 8007128:	4a95      	ldr	r2, [pc, #596]	; (8007380 <_dtoa_r+0x6a4>)
 800712a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800712c:	4694      	mov	ip, r2
 800712e:	4463      	add	r3, ip
 8007130:	9317      	str	r3, [sp, #92]	; 0x5c
 8007132:	9309      	str	r3, [sp, #36]	; 0x24
 8007134:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007136:	2b00      	cmp	r3, #0
 8007138:	d161      	bne.n	80071fe <_dtoa_r+0x522>
 800713a:	2200      	movs	r2, #0
 800713c:	0020      	movs	r0, r4
 800713e:	0029      	movs	r1, r5
 8007140:	4b90      	ldr	r3, [pc, #576]	; (8007384 <_dtoa_r+0x6a8>)
 8007142:	f7fa fdab 	bl	8001c9c <__aeabi_dsub>
 8007146:	9a08      	ldr	r2, [sp, #32]
 8007148:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800714a:	0004      	movs	r4, r0
 800714c:	000d      	movs	r5, r1
 800714e:	f7f9 f995 	bl	800047c <__aeabi_dcmpgt>
 8007152:	2800      	cmp	r0, #0
 8007154:	d000      	beq.n	8007158 <_dtoa_r+0x47c>
 8007156:	e2af      	b.n	80076b8 <_dtoa_r+0x9dc>
 8007158:	488b      	ldr	r0, [pc, #556]	; (8007388 <_dtoa_r+0x6ac>)
 800715a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800715c:	4684      	mov	ip, r0
 800715e:	4461      	add	r1, ip
 8007160:	000b      	movs	r3, r1
 8007162:	0020      	movs	r0, r4
 8007164:	0029      	movs	r1, r5
 8007166:	9a08      	ldr	r2, [sp, #32]
 8007168:	f7f9 f974 	bl	8000454 <__aeabi_dcmplt>
 800716c:	2800      	cmp	r0, #0
 800716e:	d000      	beq.n	8007172 <_dtoa_r+0x496>
 8007170:	e29f      	b.n	80076b2 <_dtoa_r+0x9d6>
 8007172:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007174:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8007176:	9308      	str	r3, [sp, #32]
 8007178:	9409      	str	r4, [sp, #36]	; 0x24
 800717a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800717c:	2b00      	cmp	r3, #0
 800717e:	da00      	bge.n	8007182 <_dtoa_r+0x4a6>
 8007180:	e172      	b.n	8007468 <_dtoa_r+0x78c>
 8007182:	9a02      	ldr	r2, [sp, #8]
 8007184:	2a0e      	cmp	r2, #14
 8007186:	dd00      	ble.n	800718a <_dtoa_r+0x4ae>
 8007188:	e16e      	b.n	8007468 <_dtoa_r+0x78c>
 800718a:	4b78      	ldr	r3, [pc, #480]	; (800736c <_dtoa_r+0x690>)
 800718c:	00d2      	lsls	r2, r2, #3
 800718e:	189b      	adds	r3, r3, r2
 8007190:	685c      	ldr	r4, [r3, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	930a      	str	r3, [sp, #40]	; 0x28
 8007196:	940b      	str	r4, [sp, #44]	; 0x2c
 8007198:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800719a:	2b00      	cmp	r3, #0
 800719c:	db00      	blt.n	80071a0 <_dtoa_r+0x4c4>
 800719e:	e0f7      	b.n	8007390 <_dtoa_r+0x6b4>
 80071a0:	9b07      	ldr	r3, [sp, #28]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	dd00      	ble.n	80071a8 <_dtoa_r+0x4cc>
 80071a6:	e0f3      	b.n	8007390 <_dtoa_r+0x6b4>
 80071a8:	d000      	beq.n	80071ac <_dtoa_r+0x4d0>
 80071aa:	e282      	b.n	80076b2 <_dtoa_r+0x9d6>
 80071ac:	980a      	ldr	r0, [sp, #40]	; 0x28
 80071ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80071b0:	2200      	movs	r2, #0
 80071b2:	4b74      	ldr	r3, [pc, #464]	; (8007384 <_dtoa_r+0x6a8>)
 80071b4:	f7fa fb06 	bl	80017c4 <__aeabi_dmul>
 80071b8:	9a08      	ldr	r2, [sp, #32]
 80071ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071bc:	f7f9 f968 	bl	8000490 <__aeabi_dcmpge>
 80071c0:	9e07      	ldr	r6, [sp, #28]
 80071c2:	0035      	movs	r5, r6
 80071c4:	2800      	cmp	r0, #0
 80071c6:	d000      	beq.n	80071ca <_dtoa_r+0x4ee>
 80071c8:	e259      	b.n	800767e <_dtoa_r+0x9a2>
 80071ca:	9b06      	ldr	r3, [sp, #24]
 80071cc:	9a06      	ldr	r2, [sp, #24]
 80071ce:	3301      	adds	r3, #1
 80071d0:	9308      	str	r3, [sp, #32]
 80071d2:	2331      	movs	r3, #49	; 0x31
 80071d4:	7013      	strb	r3, [r2, #0]
 80071d6:	9b02      	ldr	r3, [sp, #8]
 80071d8:	3301      	adds	r3, #1
 80071da:	9302      	str	r3, [sp, #8]
 80071dc:	e254      	b.n	8007688 <_dtoa_r+0x9ac>
 80071de:	4234      	tst	r4, r6
 80071e0:	d007      	beq.n	80071f2 <_dtoa_r+0x516>
 80071e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80071e4:	3301      	adds	r3, #1
 80071e6:	9310      	str	r3, [sp, #64]	; 0x40
 80071e8:	682a      	ldr	r2, [r5, #0]
 80071ea:	686b      	ldr	r3, [r5, #4]
 80071ec:	f7fa faea 	bl	80017c4 <__aeabi_dmul>
 80071f0:	0033      	movs	r3, r6
 80071f2:	1064      	asrs	r4, r4, #1
 80071f4:	3508      	adds	r5, #8
 80071f6:	e75a      	b.n	80070ae <_dtoa_r+0x3d2>
 80071f8:	9e02      	ldr	r6, [sp, #8]
 80071fa:	9b07      	ldr	r3, [sp, #28]
 80071fc:	e780      	b.n	8007100 <_dtoa_r+0x424>
 80071fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007200:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007202:	1e5a      	subs	r2, r3, #1
 8007204:	4b59      	ldr	r3, [pc, #356]	; (800736c <_dtoa_r+0x690>)
 8007206:	00d2      	lsls	r2, r2, #3
 8007208:	189b      	adds	r3, r3, r2
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	2900      	cmp	r1, #0
 8007210:	d051      	beq.n	80072b6 <_dtoa_r+0x5da>
 8007212:	2000      	movs	r0, #0
 8007214:	495d      	ldr	r1, [pc, #372]	; (800738c <_dtoa_r+0x6b0>)
 8007216:	f7f9 fed3 	bl	8000fc0 <__aeabi_ddiv>
 800721a:	9a08      	ldr	r2, [sp, #32]
 800721c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800721e:	f7fa fd3d 	bl	8001c9c <__aeabi_dsub>
 8007222:	9a06      	ldr	r2, [sp, #24]
 8007224:	9b06      	ldr	r3, [sp, #24]
 8007226:	4694      	mov	ip, r2
 8007228:	9317      	str	r3, [sp, #92]	; 0x5c
 800722a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800722c:	9010      	str	r0, [sp, #64]	; 0x40
 800722e:	9111      	str	r1, [sp, #68]	; 0x44
 8007230:	4463      	add	r3, ip
 8007232:	9319      	str	r3, [sp, #100]	; 0x64
 8007234:	0029      	movs	r1, r5
 8007236:	0020      	movs	r0, r4
 8007238:	f7fb f8e0 	bl	80023fc <__aeabi_d2iz>
 800723c:	9014      	str	r0, [sp, #80]	; 0x50
 800723e:	f7fb f913 	bl	8002468 <__aeabi_i2d>
 8007242:	0002      	movs	r2, r0
 8007244:	000b      	movs	r3, r1
 8007246:	0020      	movs	r0, r4
 8007248:	0029      	movs	r1, r5
 800724a:	f7fa fd27 	bl	8001c9c <__aeabi_dsub>
 800724e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007250:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007252:	3301      	adds	r3, #1
 8007254:	9308      	str	r3, [sp, #32]
 8007256:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007258:	0004      	movs	r4, r0
 800725a:	3330      	adds	r3, #48	; 0x30
 800725c:	7013      	strb	r3, [r2, #0]
 800725e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007260:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007262:	000d      	movs	r5, r1
 8007264:	f7f9 f8f6 	bl	8000454 <__aeabi_dcmplt>
 8007268:	2800      	cmp	r0, #0
 800726a:	d175      	bne.n	8007358 <_dtoa_r+0x67c>
 800726c:	0022      	movs	r2, r4
 800726e:	002b      	movs	r3, r5
 8007270:	2000      	movs	r0, #0
 8007272:	4940      	ldr	r1, [pc, #256]	; (8007374 <_dtoa_r+0x698>)
 8007274:	f7fa fd12 	bl	8001c9c <__aeabi_dsub>
 8007278:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800727a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800727c:	f7f9 f8ea 	bl	8000454 <__aeabi_dcmplt>
 8007280:	2800      	cmp	r0, #0
 8007282:	d000      	beq.n	8007286 <_dtoa_r+0x5aa>
 8007284:	e0d2      	b.n	800742c <_dtoa_r+0x750>
 8007286:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007288:	9a08      	ldr	r2, [sp, #32]
 800728a:	4293      	cmp	r3, r2
 800728c:	d100      	bne.n	8007290 <_dtoa_r+0x5b4>
 800728e:	e770      	b.n	8007172 <_dtoa_r+0x496>
 8007290:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007292:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007294:	2200      	movs	r2, #0
 8007296:	4b38      	ldr	r3, [pc, #224]	; (8007378 <_dtoa_r+0x69c>)
 8007298:	f7fa fa94 	bl	80017c4 <__aeabi_dmul>
 800729c:	4b36      	ldr	r3, [pc, #216]	; (8007378 <_dtoa_r+0x69c>)
 800729e:	9010      	str	r0, [sp, #64]	; 0x40
 80072a0:	9111      	str	r1, [sp, #68]	; 0x44
 80072a2:	2200      	movs	r2, #0
 80072a4:	0020      	movs	r0, r4
 80072a6:	0029      	movs	r1, r5
 80072a8:	f7fa fa8c 	bl	80017c4 <__aeabi_dmul>
 80072ac:	9b08      	ldr	r3, [sp, #32]
 80072ae:	0004      	movs	r4, r0
 80072b0:	000d      	movs	r5, r1
 80072b2:	9317      	str	r3, [sp, #92]	; 0x5c
 80072b4:	e7be      	b.n	8007234 <_dtoa_r+0x558>
 80072b6:	9808      	ldr	r0, [sp, #32]
 80072b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072ba:	f7fa fa83 	bl	80017c4 <__aeabi_dmul>
 80072be:	9a06      	ldr	r2, [sp, #24]
 80072c0:	9b06      	ldr	r3, [sp, #24]
 80072c2:	4694      	mov	ip, r2
 80072c4:	9308      	str	r3, [sp, #32]
 80072c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80072c8:	9010      	str	r0, [sp, #64]	; 0x40
 80072ca:	9111      	str	r1, [sp, #68]	; 0x44
 80072cc:	4463      	add	r3, ip
 80072ce:	9319      	str	r3, [sp, #100]	; 0x64
 80072d0:	0029      	movs	r1, r5
 80072d2:	0020      	movs	r0, r4
 80072d4:	f7fb f892 	bl	80023fc <__aeabi_d2iz>
 80072d8:	9017      	str	r0, [sp, #92]	; 0x5c
 80072da:	f7fb f8c5 	bl	8002468 <__aeabi_i2d>
 80072de:	0002      	movs	r2, r0
 80072e0:	000b      	movs	r3, r1
 80072e2:	0020      	movs	r0, r4
 80072e4:	0029      	movs	r1, r5
 80072e6:	f7fa fcd9 	bl	8001c9c <__aeabi_dsub>
 80072ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072ec:	9a08      	ldr	r2, [sp, #32]
 80072ee:	3330      	adds	r3, #48	; 0x30
 80072f0:	7013      	strb	r3, [r2, #0]
 80072f2:	0013      	movs	r3, r2
 80072f4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80072f6:	3301      	adds	r3, #1
 80072f8:	0004      	movs	r4, r0
 80072fa:	000d      	movs	r5, r1
 80072fc:	9308      	str	r3, [sp, #32]
 80072fe:	4293      	cmp	r3, r2
 8007300:	d12c      	bne.n	800735c <_dtoa_r+0x680>
 8007302:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007304:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007306:	9a06      	ldr	r2, [sp, #24]
 8007308:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800730a:	4694      	mov	ip, r2
 800730c:	4463      	add	r3, ip
 800730e:	2200      	movs	r2, #0
 8007310:	9308      	str	r3, [sp, #32]
 8007312:	4b1e      	ldr	r3, [pc, #120]	; (800738c <_dtoa_r+0x6b0>)
 8007314:	f7f9 fb18 	bl	8000948 <__aeabi_dadd>
 8007318:	0002      	movs	r2, r0
 800731a:	000b      	movs	r3, r1
 800731c:	0020      	movs	r0, r4
 800731e:	0029      	movs	r1, r5
 8007320:	f7f9 f8ac 	bl	800047c <__aeabi_dcmpgt>
 8007324:	2800      	cmp	r0, #0
 8007326:	d000      	beq.n	800732a <_dtoa_r+0x64e>
 8007328:	e080      	b.n	800742c <_dtoa_r+0x750>
 800732a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800732c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800732e:	2000      	movs	r0, #0
 8007330:	4916      	ldr	r1, [pc, #88]	; (800738c <_dtoa_r+0x6b0>)
 8007332:	f7fa fcb3 	bl	8001c9c <__aeabi_dsub>
 8007336:	0002      	movs	r2, r0
 8007338:	000b      	movs	r3, r1
 800733a:	0020      	movs	r0, r4
 800733c:	0029      	movs	r1, r5
 800733e:	f7f9 f889 	bl	8000454 <__aeabi_dcmplt>
 8007342:	2800      	cmp	r0, #0
 8007344:	d100      	bne.n	8007348 <_dtoa_r+0x66c>
 8007346:	e714      	b.n	8007172 <_dtoa_r+0x496>
 8007348:	9b08      	ldr	r3, [sp, #32]
 800734a:	001a      	movs	r2, r3
 800734c:	3a01      	subs	r2, #1
 800734e:	9208      	str	r2, [sp, #32]
 8007350:	7812      	ldrb	r2, [r2, #0]
 8007352:	2a30      	cmp	r2, #48	; 0x30
 8007354:	d0f8      	beq.n	8007348 <_dtoa_r+0x66c>
 8007356:	9308      	str	r3, [sp, #32]
 8007358:	9602      	str	r6, [sp, #8]
 800735a:	e055      	b.n	8007408 <_dtoa_r+0x72c>
 800735c:	2200      	movs	r2, #0
 800735e:	4b06      	ldr	r3, [pc, #24]	; (8007378 <_dtoa_r+0x69c>)
 8007360:	f7fa fa30 	bl	80017c4 <__aeabi_dmul>
 8007364:	0004      	movs	r4, r0
 8007366:	000d      	movs	r5, r1
 8007368:	e7b2      	b.n	80072d0 <_dtoa_r+0x5f4>
 800736a:	46c0      	nop			; (mov r8, r8)
 800736c:	08009518 	.word	0x08009518
 8007370:	080094f0 	.word	0x080094f0
 8007374:	3ff00000 	.word	0x3ff00000
 8007378:	40240000 	.word	0x40240000
 800737c:	401c0000 	.word	0x401c0000
 8007380:	fcc00000 	.word	0xfcc00000
 8007384:	40140000 	.word	0x40140000
 8007388:	7cc00000 	.word	0x7cc00000
 800738c:	3fe00000 	.word	0x3fe00000
 8007390:	9b07      	ldr	r3, [sp, #28]
 8007392:	9e06      	ldr	r6, [sp, #24]
 8007394:	3b01      	subs	r3, #1
 8007396:	199b      	adds	r3, r3, r6
 8007398:	930c      	str	r3, [sp, #48]	; 0x30
 800739a:	9c08      	ldr	r4, [sp, #32]
 800739c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800739e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073a2:	0020      	movs	r0, r4
 80073a4:	0029      	movs	r1, r5
 80073a6:	f7f9 fe0b 	bl	8000fc0 <__aeabi_ddiv>
 80073aa:	f7fb f827 	bl	80023fc <__aeabi_d2iz>
 80073ae:	9007      	str	r0, [sp, #28]
 80073b0:	f7fb f85a 	bl	8002468 <__aeabi_i2d>
 80073b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073b8:	f7fa fa04 	bl	80017c4 <__aeabi_dmul>
 80073bc:	0002      	movs	r2, r0
 80073be:	000b      	movs	r3, r1
 80073c0:	0020      	movs	r0, r4
 80073c2:	0029      	movs	r1, r5
 80073c4:	f7fa fc6a 	bl	8001c9c <__aeabi_dsub>
 80073c8:	0033      	movs	r3, r6
 80073ca:	9a07      	ldr	r2, [sp, #28]
 80073cc:	3601      	adds	r6, #1
 80073ce:	3230      	adds	r2, #48	; 0x30
 80073d0:	701a      	strb	r2, [r3, #0]
 80073d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073d4:	9608      	str	r6, [sp, #32]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d139      	bne.n	800744e <_dtoa_r+0x772>
 80073da:	0002      	movs	r2, r0
 80073dc:	000b      	movs	r3, r1
 80073de:	f7f9 fab3 	bl	8000948 <__aeabi_dadd>
 80073e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073e6:	0004      	movs	r4, r0
 80073e8:	000d      	movs	r5, r1
 80073ea:	f7f9 f847 	bl	800047c <__aeabi_dcmpgt>
 80073ee:	2800      	cmp	r0, #0
 80073f0:	d11b      	bne.n	800742a <_dtoa_r+0x74e>
 80073f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073f6:	0020      	movs	r0, r4
 80073f8:	0029      	movs	r1, r5
 80073fa:	f7f9 f825 	bl	8000448 <__aeabi_dcmpeq>
 80073fe:	2800      	cmp	r0, #0
 8007400:	d002      	beq.n	8007408 <_dtoa_r+0x72c>
 8007402:	9b07      	ldr	r3, [sp, #28]
 8007404:	07db      	lsls	r3, r3, #31
 8007406:	d410      	bmi.n	800742a <_dtoa_r+0x74e>
 8007408:	0038      	movs	r0, r7
 800740a:	9905      	ldr	r1, [sp, #20]
 800740c:	f000 fae6 	bl	80079dc <_Bfree>
 8007410:	2300      	movs	r3, #0
 8007412:	9a08      	ldr	r2, [sp, #32]
 8007414:	9802      	ldr	r0, [sp, #8]
 8007416:	7013      	strb	r3, [r2, #0]
 8007418:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800741a:	3001      	adds	r0, #1
 800741c:	6018      	str	r0, [r3, #0]
 800741e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007420:	2b00      	cmp	r3, #0
 8007422:	d100      	bne.n	8007426 <_dtoa_r+0x74a>
 8007424:	e4a6      	b.n	8006d74 <_dtoa_r+0x98>
 8007426:	601a      	str	r2, [r3, #0]
 8007428:	e4a4      	b.n	8006d74 <_dtoa_r+0x98>
 800742a:	9e02      	ldr	r6, [sp, #8]
 800742c:	9b08      	ldr	r3, [sp, #32]
 800742e:	9308      	str	r3, [sp, #32]
 8007430:	3b01      	subs	r3, #1
 8007432:	781a      	ldrb	r2, [r3, #0]
 8007434:	2a39      	cmp	r2, #57	; 0x39
 8007436:	d106      	bne.n	8007446 <_dtoa_r+0x76a>
 8007438:	9a06      	ldr	r2, [sp, #24]
 800743a:	429a      	cmp	r2, r3
 800743c:	d1f7      	bne.n	800742e <_dtoa_r+0x752>
 800743e:	2230      	movs	r2, #48	; 0x30
 8007440:	9906      	ldr	r1, [sp, #24]
 8007442:	3601      	adds	r6, #1
 8007444:	700a      	strb	r2, [r1, #0]
 8007446:	781a      	ldrb	r2, [r3, #0]
 8007448:	3201      	adds	r2, #1
 800744a:	701a      	strb	r2, [r3, #0]
 800744c:	e784      	b.n	8007358 <_dtoa_r+0x67c>
 800744e:	2200      	movs	r2, #0
 8007450:	4baa      	ldr	r3, [pc, #680]	; (80076fc <_dtoa_r+0xa20>)
 8007452:	f7fa f9b7 	bl	80017c4 <__aeabi_dmul>
 8007456:	2200      	movs	r2, #0
 8007458:	2300      	movs	r3, #0
 800745a:	0004      	movs	r4, r0
 800745c:	000d      	movs	r5, r1
 800745e:	f7f8 fff3 	bl	8000448 <__aeabi_dcmpeq>
 8007462:	2800      	cmp	r0, #0
 8007464:	d09b      	beq.n	800739e <_dtoa_r+0x6c2>
 8007466:	e7cf      	b.n	8007408 <_dtoa_r+0x72c>
 8007468:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800746a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800746c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800746e:	2d00      	cmp	r5, #0
 8007470:	d012      	beq.n	8007498 <_dtoa_r+0x7bc>
 8007472:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007474:	2a01      	cmp	r2, #1
 8007476:	dc66      	bgt.n	8007546 <_dtoa_r+0x86a>
 8007478:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800747a:	2a00      	cmp	r2, #0
 800747c:	d05d      	beq.n	800753a <_dtoa_r+0x85e>
 800747e:	4aa0      	ldr	r2, [pc, #640]	; (8007700 <_dtoa_r+0xa24>)
 8007480:	189b      	adds	r3, r3, r2
 8007482:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007484:	2101      	movs	r1, #1
 8007486:	18d2      	adds	r2, r2, r3
 8007488:	920a      	str	r2, [sp, #40]	; 0x28
 800748a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800748c:	0038      	movs	r0, r7
 800748e:	18d3      	adds	r3, r2, r3
 8007490:	930d      	str	r3, [sp, #52]	; 0x34
 8007492:	f000 fb53 	bl	8007b3c <__i2b>
 8007496:	0005      	movs	r5, r0
 8007498:	2c00      	cmp	r4, #0
 800749a:	dd0e      	ble.n	80074ba <_dtoa_r+0x7de>
 800749c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800749e:	2b00      	cmp	r3, #0
 80074a0:	dd0b      	ble.n	80074ba <_dtoa_r+0x7de>
 80074a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80074a4:	0023      	movs	r3, r4
 80074a6:	4294      	cmp	r4, r2
 80074a8:	dd00      	ble.n	80074ac <_dtoa_r+0x7d0>
 80074aa:	0013      	movs	r3, r2
 80074ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074ae:	1ae4      	subs	r4, r4, r3
 80074b0:	1ad2      	subs	r2, r2, r3
 80074b2:	920a      	str	r2, [sp, #40]	; 0x28
 80074b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80074b6:	1ad3      	subs	r3, r2, r3
 80074b8:	930d      	str	r3, [sp, #52]	; 0x34
 80074ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d01f      	beq.n	8007500 <_dtoa_r+0x824>
 80074c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d054      	beq.n	8007570 <_dtoa_r+0x894>
 80074c6:	2e00      	cmp	r6, #0
 80074c8:	dd11      	ble.n	80074ee <_dtoa_r+0x812>
 80074ca:	0029      	movs	r1, r5
 80074cc:	0032      	movs	r2, r6
 80074ce:	0038      	movs	r0, r7
 80074d0:	f000 fbfa 	bl	8007cc8 <__pow5mult>
 80074d4:	9a05      	ldr	r2, [sp, #20]
 80074d6:	0001      	movs	r1, r0
 80074d8:	0005      	movs	r5, r0
 80074da:	0038      	movs	r0, r7
 80074dc:	f000 fb44 	bl	8007b68 <__multiply>
 80074e0:	9905      	ldr	r1, [sp, #20]
 80074e2:	9014      	str	r0, [sp, #80]	; 0x50
 80074e4:	0038      	movs	r0, r7
 80074e6:	f000 fa79 	bl	80079dc <_Bfree>
 80074ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80074ec:	9305      	str	r3, [sp, #20]
 80074ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074f0:	1b9a      	subs	r2, r3, r6
 80074f2:	42b3      	cmp	r3, r6
 80074f4:	d004      	beq.n	8007500 <_dtoa_r+0x824>
 80074f6:	0038      	movs	r0, r7
 80074f8:	9905      	ldr	r1, [sp, #20]
 80074fa:	f000 fbe5 	bl	8007cc8 <__pow5mult>
 80074fe:	9005      	str	r0, [sp, #20]
 8007500:	2101      	movs	r1, #1
 8007502:	0038      	movs	r0, r7
 8007504:	f000 fb1a 	bl	8007b3c <__i2b>
 8007508:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800750a:	0006      	movs	r6, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	dd31      	ble.n	8007574 <_dtoa_r+0x898>
 8007510:	001a      	movs	r2, r3
 8007512:	0001      	movs	r1, r0
 8007514:	0038      	movs	r0, r7
 8007516:	f000 fbd7 	bl	8007cc8 <__pow5mult>
 800751a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800751c:	0006      	movs	r6, r0
 800751e:	2b01      	cmp	r3, #1
 8007520:	dd2d      	ble.n	800757e <_dtoa_r+0x8a2>
 8007522:	2300      	movs	r3, #0
 8007524:	930e      	str	r3, [sp, #56]	; 0x38
 8007526:	6933      	ldr	r3, [r6, #16]
 8007528:	3303      	adds	r3, #3
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	18f3      	adds	r3, r6, r3
 800752e:	6858      	ldr	r0, [r3, #4]
 8007530:	f000 fabc 	bl	8007aac <__hi0bits>
 8007534:	2320      	movs	r3, #32
 8007536:	1a18      	subs	r0, r3, r0
 8007538:	e039      	b.n	80075ae <_dtoa_r+0x8d2>
 800753a:	2336      	movs	r3, #54	; 0x36
 800753c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800753e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007540:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007542:	1a9b      	subs	r3, r3, r2
 8007544:	e79d      	b.n	8007482 <_dtoa_r+0x7a6>
 8007546:	9b07      	ldr	r3, [sp, #28]
 8007548:	1e5e      	subs	r6, r3, #1
 800754a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800754c:	42b3      	cmp	r3, r6
 800754e:	db07      	blt.n	8007560 <_dtoa_r+0x884>
 8007550:	1b9e      	subs	r6, r3, r6
 8007552:	9b07      	ldr	r3, [sp, #28]
 8007554:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007556:	2b00      	cmp	r3, #0
 8007558:	da93      	bge.n	8007482 <_dtoa_r+0x7a6>
 800755a:	1ae4      	subs	r4, r4, r3
 800755c:	2300      	movs	r3, #0
 800755e:	e790      	b.n	8007482 <_dtoa_r+0x7a6>
 8007560:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007562:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007564:	1af3      	subs	r3, r6, r3
 8007566:	18d3      	adds	r3, r2, r3
 8007568:	960e      	str	r6, [sp, #56]	; 0x38
 800756a:	9315      	str	r3, [sp, #84]	; 0x54
 800756c:	2600      	movs	r6, #0
 800756e:	e7f0      	b.n	8007552 <_dtoa_r+0x876>
 8007570:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007572:	e7c0      	b.n	80074f6 <_dtoa_r+0x81a>
 8007574:	2300      	movs	r3, #0
 8007576:	930e      	str	r3, [sp, #56]	; 0x38
 8007578:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800757a:	2b01      	cmp	r3, #1
 800757c:	dc13      	bgt.n	80075a6 <_dtoa_r+0x8ca>
 800757e:	2300      	movs	r3, #0
 8007580:	930e      	str	r3, [sp, #56]	; 0x38
 8007582:	9b08      	ldr	r3, [sp, #32]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d10e      	bne.n	80075a6 <_dtoa_r+0x8ca>
 8007588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800758a:	031b      	lsls	r3, r3, #12
 800758c:	d10b      	bne.n	80075a6 <_dtoa_r+0x8ca>
 800758e:	4b5d      	ldr	r3, [pc, #372]	; (8007704 <_dtoa_r+0xa28>)
 8007590:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007592:	4213      	tst	r3, r2
 8007594:	d007      	beq.n	80075a6 <_dtoa_r+0x8ca>
 8007596:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007598:	3301      	adds	r3, #1
 800759a:	930a      	str	r3, [sp, #40]	; 0x28
 800759c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800759e:	3301      	adds	r3, #1
 80075a0:	930d      	str	r3, [sp, #52]	; 0x34
 80075a2:	2301      	movs	r3, #1
 80075a4:	930e      	str	r3, [sp, #56]	; 0x38
 80075a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075a8:	2001      	movs	r0, #1
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d1bb      	bne.n	8007526 <_dtoa_r+0x84a>
 80075ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075b0:	221f      	movs	r2, #31
 80075b2:	1818      	adds	r0, r3, r0
 80075b4:	0003      	movs	r3, r0
 80075b6:	4013      	ands	r3, r2
 80075b8:	4210      	tst	r0, r2
 80075ba:	d046      	beq.n	800764a <_dtoa_r+0x96e>
 80075bc:	3201      	adds	r2, #1
 80075be:	1ad2      	subs	r2, r2, r3
 80075c0:	2a04      	cmp	r2, #4
 80075c2:	dd3f      	ble.n	8007644 <_dtoa_r+0x968>
 80075c4:	221c      	movs	r2, #28
 80075c6:	1ad3      	subs	r3, r2, r3
 80075c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075ca:	18e4      	adds	r4, r4, r3
 80075cc:	18d2      	adds	r2, r2, r3
 80075ce:	920a      	str	r2, [sp, #40]	; 0x28
 80075d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80075d2:	18d3      	adds	r3, r2, r3
 80075d4:	930d      	str	r3, [sp, #52]	; 0x34
 80075d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075d8:	2b00      	cmp	r3, #0
 80075da:	dd05      	ble.n	80075e8 <_dtoa_r+0x90c>
 80075dc:	001a      	movs	r2, r3
 80075de:	0038      	movs	r0, r7
 80075e0:	9905      	ldr	r1, [sp, #20]
 80075e2:	f000 fbcd 	bl	8007d80 <__lshift>
 80075e6:	9005      	str	r0, [sp, #20]
 80075e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	dd05      	ble.n	80075fa <_dtoa_r+0x91e>
 80075ee:	0031      	movs	r1, r6
 80075f0:	001a      	movs	r2, r3
 80075f2:	0038      	movs	r0, r7
 80075f4:	f000 fbc4 	bl	8007d80 <__lshift>
 80075f8:	0006      	movs	r6, r0
 80075fa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d026      	beq.n	800764e <_dtoa_r+0x972>
 8007600:	0031      	movs	r1, r6
 8007602:	9805      	ldr	r0, [sp, #20]
 8007604:	f000 fc2a 	bl	8007e5c <__mcmp>
 8007608:	2800      	cmp	r0, #0
 800760a:	da20      	bge.n	800764e <_dtoa_r+0x972>
 800760c:	9b02      	ldr	r3, [sp, #8]
 800760e:	220a      	movs	r2, #10
 8007610:	3b01      	subs	r3, #1
 8007612:	9302      	str	r3, [sp, #8]
 8007614:	0038      	movs	r0, r7
 8007616:	2300      	movs	r3, #0
 8007618:	9905      	ldr	r1, [sp, #20]
 800761a:	f000 fa03 	bl	8007a24 <__multadd>
 800761e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007620:	9005      	str	r0, [sp, #20]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d100      	bne.n	8007628 <_dtoa_r+0x94c>
 8007626:	e166      	b.n	80078f6 <_dtoa_r+0xc1a>
 8007628:	2300      	movs	r3, #0
 800762a:	0029      	movs	r1, r5
 800762c:	220a      	movs	r2, #10
 800762e:	0038      	movs	r0, r7
 8007630:	f000 f9f8 	bl	8007a24 <__multadd>
 8007634:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007636:	0005      	movs	r5, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	dc47      	bgt.n	80076cc <_dtoa_r+0x9f0>
 800763c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800763e:	2b02      	cmp	r3, #2
 8007640:	dc0d      	bgt.n	800765e <_dtoa_r+0x982>
 8007642:	e043      	b.n	80076cc <_dtoa_r+0x9f0>
 8007644:	2a04      	cmp	r2, #4
 8007646:	d0c6      	beq.n	80075d6 <_dtoa_r+0x8fa>
 8007648:	0013      	movs	r3, r2
 800764a:	331c      	adds	r3, #28
 800764c:	e7bc      	b.n	80075c8 <_dtoa_r+0x8ec>
 800764e:	9b07      	ldr	r3, [sp, #28]
 8007650:	2b00      	cmp	r3, #0
 8007652:	dc35      	bgt.n	80076c0 <_dtoa_r+0x9e4>
 8007654:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007656:	2b02      	cmp	r3, #2
 8007658:	dd32      	ble.n	80076c0 <_dtoa_r+0x9e4>
 800765a:	9b07      	ldr	r3, [sp, #28]
 800765c:	930c      	str	r3, [sp, #48]	; 0x30
 800765e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007660:	2b00      	cmp	r3, #0
 8007662:	d10c      	bne.n	800767e <_dtoa_r+0x9a2>
 8007664:	0031      	movs	r1, r6
 8007666:	2205      	movs	r2, #5
 8007668:	0038      	movs	r0, r7
 800766a:	f000 f9db 	bl	8007a24 <__multadd>
 800766e:	0006      	movs	r6, r0
 8007670:	0001      	movs	r1, r0
 8007672:	9805      	ldr	r0, [sp, #20]
 8007674:	f000 fbf2 	bl	8007e5c <__mcmp>
 8007678:	2800      	cmp	r0, #0
 800767a:	dd00      	ble.n	800767e <_dtoa_r+0x9a2>
 800767c:	e5a5      	b.n	80071ca <_dtoa_r+0x4ee>
 800767e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007680:	43db      	mvns	r3, r3
 8007682:	9302      	str	r3, [sp, #8]
 8007684:	9b06      	ldr	r3, [sp, #24]
 8007686:	9308      	str	r3, [sp, #32]
 8007688:	2400      	movs	r4, #0
 800768a:	0031      	movs	r1, r6
 800768c:	0038      	movs	r0, r7
 800768e:	f000 f9a5 	bl	80079dc <_Bfree>
 8007692:	2d00      	cmp	r5, #0
 8007694:	d100      	bne.n	8007698 <_dtoa_r+0x9bc>
 8007696:	e6b7      	b.n	8007408 <_dtoa_r+0x72c>
 8007698:	2c00      	cmp	r4, #0
 800769a:	d005      	beq.n	80076a8 <_dtoa_r+0x9cc>
 800769c:	42ac      	cmp	r4, r5
 800769e:	d003      	beq.n	80076a8 <_dtoa_r+0x9cc>
 80076a0:	0021      	movs	r1, r4
 80076a2:	0038      	movs	r0, r7
 80076a4:	f000 f99a 	bl	80079dc <_Bfree>
 80076a8:	0029      	movs	r1, r5
 80076aa:	0038      	movs	r0, r7
 80076ac:	f000 f996 	bl	80079dc <_Bfree>
 80076b0:	e6aa      	b.n	8007408 <_dtoa_r+0x72c>
 80076b2:	2600      	movs	r6, #0
 80076b4:	0035      	movs	r5, r6
 80076b6:	e7e2      	b.n	800767e <_dtoa_r+0x9a2>
 80076b8:	9602      	str	r6, [sp, #8]
 80076ba:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80076bc:	0035      	movs	r5, r6
 80076be:	e584      	b.n	80071ca <_dtoa_r+0x4ee>
 80076c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d100      	bne.n	80076c8 <_dtoa_r+0x9ec>
 80076c6:	e0ce      	b.n	8007866 <_dtoa_r+0xb8a>
 80076c8:	9b07      	ldr	r3, [sp, #28]
 80076ca:	930c      	str	r3, [sp, #48]	; 0x30
 80076cc:	2c00      	cmp	r4, #0
 80076ce:	dd05      	ble.n	80076dc <_dtoa_r+0xa00>
 80076d0:	0029      	movs	r1, r5
 80076d2:	0022      	movs	r2, r4
 80076d4:	0038      	movs	r0, r7
 80076d6:	f000 fb53 	bl	8007d80 <__lshift>
 80076da:	0005      	movs	r5, r0
 80076dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076de:	0028      	movs	r0, r5
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d022      	beq.n	800772a <_dtoa_r+0xa4e>
 80076e4:	0038      	movs	r0, r7
 80076e6:	6869      	ldr	r1, [r5, #4]
 80076e8:	f000 f934 	bl	8007954 <_Balloc>
 80076ec:	1e04      	subs	r4, r0, #0
 80076ee:	d10f      	bne.n	8007710 <_dtoa_r+0xa34>
 80076f0:	0002      	movs	r2, r0
 80076f2:	4b05      	ldr	r3, [pc, #20]	; (8007708 <_dtoa_r+0xa2c>)
 80076f4:	4905      	ldr	r1, [pc, #20]	; (800770c <_dtoa_r+0xa30>)
 80076f6:	f7ff fb06 	bl	8006d06 <_dtoa_r+0x2a>
 80076fa:	46c0      	nop			; (mov r8, r8)
 80076fc:	40240000 	.word	0x40240000
 8007700:	00000433 	.word	0x00000433
 8007704:	7ff00000 	.word	0x7ff00000
 8007708:	08009483 	.word	0x08009483
 800770c:	000002ea 	.word	0x000002ea
 8007710:	0029      	movs	r1, r5
 8007712:	692b      	ldr	r3, [r5, #16]
 8007714:	310c      	adds	r1, #12
 8007716:	1c9a      	adds	r2, r3, #2
 8007718:	0092      	lsls	r2, r2, #2
 800771a:	300c      	adds	r0, #12
 800771c:	f000 f911 	bl	8007942 <memcpy>
 8007720:	2201      	movs	r2, #1
 8007722:	0021      	movs	r1, r4
 8007724:	0038      	movs	r0, r7
 8007726:	f000 fb2b 	bl	8007d80 <__lshift>
 800772a:	9b06      	ldr	r3, [sp, #24]
 800772c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800772e:	930a      	str	r3, [sp, #40]	; 0x28
 8007730:	3b01      	subs	r3, #1
 8007732:	189b      	adds	r3, r3, r2
 8007734:	2201      	movs	r2, #1
 8007736:	002c      	movs	r4, r5
 8007738:	0005      	movs	r5, r0
 800773a:	9314      	str	r3, [sp, #80]	; 0x50
 800773c:	9b08      	ldr	r3, [sp, #32]
 800773e:	4013      	ands	r3, r2
 8007740:	930f      	str	r3, [sp, #60]	; 0x3c
 8007742:	0031      	movs	r1, r6
 8007744:	9805      	ldr	r0, [sp, #20]
 8007746:	f7ff fa3d 	bl	8006bc4 <quorem>
 800774a:	0003      	movs	r3, r0
 800774c:	0021      	movs	r1, r4
 800774e:	3330      	adds	r3, #48	; 0x30
 8007750:	900d      	str	r0, [sp, #52]	; 0x34
 8007752:	9805      	ldr	r0, [sp, #20]
 8007754:	9307      	str	r3, [sp, #28]
 8007756:	f000 fb81 	bl	8007e5c <__mcmp>
 800775a:	002a      	movs	r2, r5
 800775c:	900e      	str	r0, [sp, #56]	; 0x38
 800775e:	0031      	movs	r1, r6
 8007760:	0038      	movs	r0, r7
 8007762:	f000 fb97 	bl	8007e94 <__mdiff>
 8007766:	68c3      	ldr	r3, [r0, #12]
 8007768:	9008      	str	r0, [sp, #32]
 800776a:	9310      	str	r3, [sp, #64]	; 0x40
 800776c:	2301      	movs	r3, #1
 800776e:	930c      	str	r3, [sp, #48]	; 0x30
 8007770:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007772:	2b00      	cmp	r3, #0
 8007774:	d104      	bne.n	8007780 <_dtoa_r+0xaa4>
 8007776:	0001      	movs	r1, r0
 8007778:	9805      	ldr	r0, [sp, #20]
 800777a:	f000 fb6f 	bl	8007e5c <__mcmp>
 800777e:	900c      	str	r0, [sp, #48]	; 0x30
 8007780:	0038      	movs	r0, r7
 8007782:	9908      	ldr	r1, [sp, #32]
 8007784:	f000 f92a 	bl	80079dc <_Bfree>
 8007788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800778a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800778c:	3301      	adds	r3, #1
 800778e:	9308      	str	r3, [sp, #32]
 8007790:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007792:	4313      	orrs	r3, r2
 8007794:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007796:	4313      	orrs	r3, r2
 8007798:	d10c      	bne.n	80077b4 <_dtoa_r+0xad8>
 800779a:	9b07      	ldr	r3, [sp, #28]
 800779c:	2b39      	cmp	r3, #57	; 0x39
 800779e:	d026      	beq.n	80077ee <_dtoa_r+0xb12>
 80077a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	dd02      	ble.n	80077ac <_dtoa_r+0xad0>
 80077a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077a8:	3331      	adds	r3, #49	; 0x31
 80077aa:	9307      	str	r3, [sp, #28]
 80077ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077ae:	9a07      	ldr	r2, [sp, #28]
 80077b0:	701a      	strb	r2, [r3, #0]
 80077b2:	e76a      	b.n	800768a <_dtoa_r+0x9ae>
 80077b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	db04      	blt.n	80077c4 <_dtoa_r+0xae8>
 80077ba:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80077bc:	4313      	orrs	r3, r2
 80077be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80077c0:	4313      	orrs	r3, r2
 80077c2:	d11f      	bne.n	8007804 <_dtoa_r+0xb28>
 80077c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	ddf0      	ble.n	80077ac <_dtoa_r+0xad0>
 80077ca:	9905      	ldr	r1, [sp, #20]
 80077cc:	2201      	movs	r2, #1
 80077ce:	0038      	movs	r0, r7
 80077d0:	f000 fad6 	bl	8007d80 <__lshift>
 80077d4:	0031      	movs	r1, r6
 80077d6:	9005      	str	r0, [sp, #20]
 80077d8:	f000 fb40 	bl	8007e5c <__mcmp>
 80077dc:	2800      	cmp	r0, #0
 80077de:	dc03      	bgt.n	80077e8 <_dtoa_r+0xb0c>
 80077e0:	d1e4      	bne.n	80077ac <_dtoa_r+0xad0>
 80077e2:	9b07      	ldr	r3, [sp, #28]
 80077e4:	07db      	lsls	r3, r3, #31
 80077e6:	d5e1      	bpl.n	80077ac <_dtoa_r+0xad0>
 80077e8:	9b07      	ldr	r3, [sp, #28]
 80077ea:	2b39      	cmp	r3, #57	; 0x39
 80077ec:	d1db      	bne.n	80077a6 <_dtoa_r+0xaca>
 80077ee:	2339      	movs	r3, #57	; 0x39
 80077f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077f2:	7013      	strb	r3, [r2, #0]
 80077f4:	9b08      	ldr	r3, [sp, #32]
 80077f6:	9308      	str	r3, [sp, #32]
 80077f8:	3b01      	subs	r3, #1
 80077fa:	781a      	ldrb	r2, [r3, #0]
 80077fc:	2a39      	cmp	r2, #57	; 0x39
 80077fe:	d068      	beq.n	80078d2 <_dtoa_r+0xbf6>
 8007800:	3201      	adds	r2, #1
 8007802:	e7d5      	b.n	80077b0 <_dtoa_r+0xad4>
 8007804:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007806:	2b00      	cmp	r3, #0
 8007808:	dd07      	ble.n	800781a <_dtoa_r+0xb3e>
 800780a:	9b07      	ldr	r3, [sp, #28]
 800780c:	2b39      	cmp	r3, #57	; 0x39
 800780e:	d0ee      	beq.n	80077ee <_dtoa_r+0xb12>
 8007810:	9b07      	ldr	r3, [sp, #28]
 8007812:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007814:	3301      	adds	r3, #1
 8007816:	7013      	strb	r3, [r2, #0]
 8007818:	e737      	b.n	800768a <_dtoa_r+0x9ae>
 800781a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800781c:	9a07      	ldr	r2, [sp, #28]
 800781e:	701a      	strb	r2, [r3, #0]
 8007820:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007822:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007824:	4293      	cmp	r3, r2
 8007826:	d03e      	beq.n	80078a6 <_dtoa_r+0xbca>
 8007828:	2300      	movs	r3, #0
 800782a:	220a      	movs	r2, #10
 800782c:	9905      	ldr	r1, [sp, #20]
 800782e:	0038      	movs	r0, r7
 8007830:	f000 f8f8 	bl	8007a24 <__multadd>
 8007834:	2300      	movs	r3, #0
 8007836:	9005      	str	r0, [sp, #20]
 8007838:	220a      	movs	r2, #10
 800783a:	0021      	movs	r1, r4
 800783c:	0038      	movs	r0, r7
 800783e:	42ac      	cmp	r4, r5
 8007840:	d106      	bne.n	8007850 <_dtoa_r+0xb74>
 8007842:	f000 f8ef 	bl	8007a24 <__multadd>
 8007846:	0004      	movs	r4, r0
 8007848:	0005      	movs	r5, r0
 800784a:	9b08      	ldr	r3, [sp, #32]
 800784c:	930a      	str	r3, [sp, #40]	; 0x28
 800784e:	e778      	b.n	8007742 <_dtoa_r+0xa66>
 8007850:	f000 f8e8 	bl	8007a24 <__multadd>
 8007854:	0029      	movs	r1, r5
 8007856:	0004      	movs	r4, r0
 8007858:	2300      	movs	r3, #0
 800785a:	220a      	movs	r2, #10
 800785c:	0038      	movs	r0, r7
 800785e:	f000 f8e1 	bl	8007a24 <__multadd>
 8007862:	0005      	movs	r5, r0
 8007864:	e7f1      	b.n	800784a <_dtoa_r+0xb6e>
 8007866:	9b07      	ldr	r3, [sp, #28]
 8007868:	930c      	str	r3, [sp, #48]	; 0x30
 800786a:	2400      	movs	r4, #0
 800786c:	0031      	movs	r1, r6
 800786e:	9805      	ldr	r0, [sp, #20]
 8007870:	f7ff f9a8 	bl	8006bc4 <quorem>
 8007874:	9b06      	ldr	r3, [sp, #24]
 8007876:	3030      	adds	r0, #48	; 0x30
 8007878:	5518      	strb	r0, [r3, r4]
 800787a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800787c:	3401      	adds	r4, #1
 800787e:	9007      	str	r0, [sp, #28]
 8007880:	42a3      	cmp	r3, r4
 8007882:	dd07      	ble.n	8007894 <_dtoa_r+0xbb8>
 8007884:	2300      	movs	r3, #0
 8007886:	220a      	movs	r2, #10
 8007888:	0038      	movs	r0, r7
 800788a:	9905      	ldr	r1, [sp, #20]
 800788c:	f000 f8ca 	bl	8007a24 <__multadd>
 8007890:	9005      	str	r0, [sp, #20]
 8007892:	e7eb      	b.n	800786c <_dtoa_r+0xb90>
 8007894:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007896:	2001      	movs	r0, #1
 8007898:	2b00      	cmp	r3, #0
 800789a:	dd00      	ble.n	800789e <_dtoa_r+0xbc2>
 800789c:	0018      	movs	r0, r3
 800789e:	2400      	movs	r4, #0
 80078a0:	9b06      	ldr	r3, [sp, #24]
 80078a2:	181b      	adds	r3, r3, r0
 80078a4:	9308      	str	r3, [sp, #32]
 80078a6:	9905      	ldr	r1, [sp, #20]
 80078a8:	2201      	movs	r2, #1
 80078aa:	0038      	movs	r0, r7
 80078ac:	f000 fa68 	bl	8007d80 <__lshift>
 80078b0:	0031      	movs	r1, r6
 80078b2:	9005      	str	r0, [sp, #20]
 80078b4:	f000 fad2 	bl	8007e5c <__mcmp>
 80078b8:	2800      	cmp	r0, #0
 80078ba:	dc9b      	bgt.n	80077f4 <_dtoa_r+0xb18>
 80078bc:	d102      	bne.n	80078c4 <_dtoa_r+0xbe8>
 80078be:	9b07      	ldr	r3, [sp, #28]
 80078c0:	07db      	lsls	r3, r3, #31
 80078c2:	d497      	bmi.n	80077f4 <_dtoa_r+0xb18>
 80078c4:	9b08      	ldr	r3, [sp, #32]
 80078c6:	9308      	str	r3, [sp, #32]
 80078c8:	3b01      	subs	r3, #1
 80078ca:	781a      	ldrb	r2, [r3, #0]
 80078cc:	2a30      	cmp	r2, #48	; 0x30
 80078ce:	d0fa      	beq.n	80078c6 <_dtoa_r+0xbea>
 80078d0:	e6db      	b.n	800768a <_dtoa_r+0x9ae>
 80078d2:	9a06      	ldr	r2, [sp, #24]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d18e      	bne.n	80077f6 <_dtoa_r+0xb1a>
 80078d8:	9b02      	ldr	r3, [sp, #8]
 80078da:	3301      	adds	r3, #1
 80078dc:	9302      	str	r3, [sp, #8]
 80078de:	2331      	movs	r3, #49	; 0x31
 80078e0:	e799      	b.n	8007816 <_dtoa_r+0xb3a>
 80078e2:	4b09      	ldr	r3, [pc, #36]	; (8007908 <_dtoa_r+0xc2c>)
 80078e4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80078e6:	9306      	str	r3, [sp, #24]
 80078e8:	4b08      	ldr	r3, [pc, #32]	; (800790c <_dtoa_r+0xc30>)
 80078ea:	2a00      	cmp	r2, #0
 80078ec:	d001      	beq.n	80078f2 <_dtoa_r+0xc16>
 80078ee:	f7ff fa3f 	bl	8006d70 <_dtoa_r+0x94>
 80078f2:	f7ff fa3f 	bl	8006d74 <_dtoa_r+0x98>
 80078f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	dcb6      	bgt.n	800786a <_dtoa_r+0xb8e>
 80078fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80078fe:	2b02      	cmp	r3, #2
 8007900:	dd00      	ble.n	8007904 <_dtoa_r+0xc28>
 8007902:	e6ac      	b.n	800765e <_dtoa_r+0x982>
 8007904:	e7b1      	b.n	800786a <_dtoa_r+0xb8e>
 8007906:	46c0      	nop			; (mov r8, r8)
 8007908:	08009404 	.word	0x08009404
 800790c:	0800940c 	.word	0x0800940c

08007910 <_localeconv_r>:
 8007910:	4800      	ldr	r0, [pc, #0]	; (8007914 <_localeconv_r+0x4>)
 8007912:	4770      	bx	lr
 8007914:	20000160 	.word	0x20000160

08007918 <malloc>:
 8007918:	b510      	push	{r4, lr}
 800791a:	4b03      	ldr	r3, [pc, #12]	; (8007928 <malloc+0x10>)
 800791c:	0001      	movs	r1, r0
 800791e:	6818      	ldr	r0, [r3, #0]
 8007920:	f000 fc4c 	bl	80081bc <_malloc_r>
 8007924:	bd10      	pop	{r4, pc}
 8007926:	46c0      	nop			; (mov r8, r8)
 8007928:	2000000c 	.word	0x2000000c

0800792c <memchr>:
 800792c:	b2c9      	uxtb	r1, r1
 800792e:	1882      	adds	r2, r0, r2
 8007930:	4290      	cmp	r0, r2
 8007932:	d101      	bne.n	8007938 <memchr+0xc>
 8007934:	2000      	movs	r0, #0
 8007936:	4770      	bx	lr
 8007938:	7803      	ldrb	r3, [r0, #0]
 800793a:	428b      	cmp	r3, r1
 800793c:	d0fb      	beq.n	8007936 <memchr+0xa>
 800793e:	3001      	adds	r0, #1
 8007940:	e7f6      	b.n	8007930 <memchr+0x4>

08007942 <memcpy>:
 8007942:	2300      	movs	r3, #0
 8007944:	b510      	push	{r4, lr}
 8007946:	429a      	cmp	r2, r3
 8007948:	d100      	bne.n	800794c <memcpy+0xa>
 800794a:	bd10      	pop	{r4, pc}
 800794c:	5ccc      	ldrb	r4, [r1, r3]
 800794e:	54c4      	strb	r4, [r0, r3]
 8007950:	3301      	adds	r3, #1
 8007952:	e7f8      	b.n	8007946 <memcpy+0x4>

08007954 <_Balloc>:
 8007954:	b570      	push	{r4, r5, r6, lr}
 8007956:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007958:	0006      	movs	r6, r0
 800795a:	000c      	movs	r4, r1
 800795c:	2d00      	cmp	r5, #0
 800795e:	d10e      	bne.n	800797e <_Balloc+0x2a>
 8007960:	2010      	movs	r0, #16
 8007962:	f7ff ffd9 	bl	8007918 <malloc>
 8007966:	1e02      	subs	r2, r0, #0
 8007968:	6270      	str	r0, [r6, #36]	; 0x24
 800796a:	d104      	bne.n	8007976 <_Balloc+0x22>
 800796c:	2166      	movs	r1, #102	; 0x66
 800796e:	4b19      	ldr	r3, [pc, #100]	; (80079d4 <_Balloc+0x80>)
 8007970:	4819      	ldr	r0, [pc, #100]	; (80079d8 <_Balloc+0x84>)
 8007972:	f000 fe0d 	bl	8008590 <__assert_func>
 8007976:	6045      	str	r5, [r0, #4]
 8007978:	6085      	str	r5, [r0, #8]
 800797a:	6005      	str	r5, [r0, #0]
 800797c:	60c5      	str	r5, [r0, #12]
 800797e:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8007980:	68eb      	ldr	r3, [r5, #12]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d013      	beq.n	80079ae <_Balloc+0x5a>
 8007986:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007988:	00a2      	lsls	r2, r4, #2
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	189b      	adds	r3, r3, r2
 800798e:	6818      	ldr	r0, [r3, #0]
 8007990:	2800      	cmp	r0, #0
 8007992:	d118      	bne.n	80079c6 <_Balloc+0x72>
 8007994:	2101      	movs	r1, #1
 8007996:	000d      	movs	r5, r1
 8007998:	40a5      	lsls	r5, r4
 800799a:	1d6a      	adds	r2, r5, #5
 800799c:	0030      	movs	r0, r6
 800799e:	0092      	lsls	r2, r2, #2
 80079a0:	f000 fb74 	bl	800808c <_calloc_r>
 80079a4:	2800      	cmp	r0, #0
 80079a6:	d00c      	beq.n	80079c2 <_Balloc+0x6e>
 80079a8:	6044      	str	r4, [r0, #4]
 80079aa:	6085      	str	r5, [r0, #8]
 80079ac:	e00d      	b.n	80079ca <_Balloc+0x76>
 80079ae:	2221      	movs	r2, #33	; 0x21
 80079b0:	2104      	movs	r1, #4
 80079b2:	0030      	movs	r0, r6
 80079b4:	f000 fb6a 	bl	800808c <_calloc_r>
 80079b8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80079ba:	60e8      	str	r0, [r5, #12]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d1e1      	bne.n	8007986 <_Balloc+0x32>
 80079c2:	2000      	movs	r0, #0
 80079c4:	bd70      	pop	{r4, r5, r6, pc}
 80079c6:	6802      	ldr	r2, [r0, #0]
 80079c8:	601a      	str	r2, [r3, #0]
 80079ca:	2300      	movs	r3, #0
 80079cc:	6103      	str	r3, [r0, #16]
 80079ce:	60c3      	str	r3, [r0, #12]
 80079d0:	e7f8      	b.n	80079c4 <_Balloc+0x70>
 80079d2:	46c0      	nop			; (mov r8, r8)
 80079d4:	08009411 	.word	0x08009411
 80079d8:	08009494 	.word	0x08009494

080079dc <_Bfree>:
 80079dc:	b570      	push	{r4, r5, r6, lr}
 80079de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80079e0:	0005      	movs	r5, r0
 80079e2:	000c      	movs	r4, r1
 80079e4:	2e00      	cmp	r6, #0
 80079e6:	d10e      	bne.n	8007a06 <_Bfree+0x2a>
 80079e8:	2010      	movs	r0, #16
 80079ea:	f7ff ff95 	bl	8007918 <malloc>
 80079ee:	1e02      	subs	r2, r0, #0
 80079f0:	6268      	str	r0, [r5, #36]	; 0x24
 80079f2:	d104      	bne.n	80079fe <_Bfree+0x22>
 80079f4:	218a      	movs	r1, #138	; 0x8a
 80079f6:	4b09      	ldr	r3, [pc, #36]	; (8007a1c <_Bfree+0x40>)
 80079f8:	4809      	ldr	r0, [pc, #36]	; (8007a20 <_Bfree+0x44>)
 80079fa:	f000 fdc9 	bl	8008590 <__assert_func>
 80079fe:	6046      	str	r6, [r0, #4]
 8007a00:	6086      	str	r6, [r0, #8]
 8007a02:	6006      	str	r6, [r0, #0]
 8007a04:	60c6      	str	r6, [r0, #12]
 8007a06:	2c00      	cmp	r4, #0
 8007a08:	d007      	beq.n	8007a1a <_Bfree+0x3e>
 8007a0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007a0c:	6862      	ldr	r2, [r4, #4]
 8007a0e:	68db      	ldr	r3, [r3, #12]
 8007a10:	0092      	lsls	r2, r2, #2
 8007a12:	189b      	adds	r3, r3, r2
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	6022      	str	r2, [r4, #0]
 8007a18:	601c      	str	r4, [r3, #0]
 8007a1a:	bd70      	pop	{r4, r5, r6, pc}
 8007a1c:	08009411 	.word	0x08009411
 8007a20:	08009494 	.word	0x08009494

08007a24 <__multadd>:
 8007a24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a26:	000e      	movs	r6, r1
 8007a28:	9001      	str	r0, [sp, #4]
 8007a2a:	000c      	movs	r4, r1
 8007a2c:	001d      	movs	r5, r3
 8007a2e:	2000      	movs	r0, #0
 8007a30:	690f      	ldr	r7, [r1, #16]
 8007a32:	3614      	adds	r6, #20
 8007a34:	6833      	ldr	r3, [r6, #0]
 8007a36:	3001      	adds	r0, #1
 8007a38:	b299      	uxth	r1, r3
 8007a3a:	4351      	muls	r1, r2
 8007a3c:	0c1b      	lsrs	r3, r3, #16
 8007a3e:	4353      	muls	r3, r2
 8007a40:	1949      	adds	r1, r1, r5
 8007a42:	0c0d      	lsrs	r5, r1, #16
 8007a44:	195b      	adds	r3, r3, r5
 8007a46:	0c1d      	lsrs	r5, r3, #16
 8007a48:	b289      	uxth	r1, r1
 8007a4a:	041b      	lsls	r3, r3, #16
 8007a4c:	185b      	adds	r3, r3, r1
 8007a4e:	c608      	stmia	r6!, {r3}
 8007a50:	4287      	cmp	r7, r0
 8007a52:	dcef      	bgt.n	8007a34 <__multadd+0x10>
 8007a54:	2d00      	cmp	r5, #0
 8007a56:	d022      	beq.n	8007a9e <__multadd+0x7a>
 8007a58:	68a3      	ldr	r3, [r4, #8]
 8007a5a:	42bb      	cmp	r3, r7
 8007a5c:	dc19      	bgt.n	8007a92 <__multadd+0x6e>
 8007a5e:	6863      	ldr	r3, [r4, #4]
 8007a60:	9801      	ldr	r0, [sp, #4]
 8007a62:	1c59      	adds	r1, r3, #1
 8007a64:	f7ff ff76 	bl	8007954 <_Balloc>
 8007a68:	1e06      	subs	r6, r0, #0
 8007a6a:	d105      	bne.n	8007a78 <__multadd+0x54>
 8007a6c:	0002      	movs	r2, r0
 8007a6e:	21b5      	movs	r1, #181	; 0xb5
 8007a70:	4b0c      	ldr	r3, [pc, #48]	; (8007aa4 <__multadd+0x80>)
 8007a72:	480d      	ldr	r0, [pc, #52]	; (8007aa8 <__multadd+0x84>)
 8007a74:	f000 fd8c 	bl	8008590 <__assert_func>
 8007a78:	0021      	movs	r1, r4
 8007a7a:	6923      	ldr	r3, [r4, #16]
 8007a7c:	310c      	adds	r1, #12
 8007a7e:	1c9a      	adds	r2, r3, #2
 8007a80:	0092      	lsls	r2, r2, #2
 8007a82:	300c      	adds	r0, #12
 8007a84:	f7ff ff5d 	bl	8007942 <memcpy>
 8007a88:	0021      	movs	r1, r4
 8007a8a:	9801      	ldr	r0, [sp, #4]
 8007a8c:	f7ff ffa6 	bl	80079dc <_Bfree>
 8007a90:	0034      	movs	r4, r6
 8007a92:	1d3b      	adds	r3, r7, #4
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	18e3      	adds	r3, r4, r3
 8007a98:	605d      	str	r5, [r3, #4]
 8007a9a:	1c7b      	adds	r3, r7, #1
 8007a9c:	6123      	str	r3, [r4, #16]
 8007a9e:	0020      	movs	r0, r4
 8007aa0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007aa2:	46c0      	nop			; (mov r8, r8)
 8007aa4:	08009483 	.word	0x08009483
 8007aa8:	08009494 	.word	0x08009494

08007aac <__hi0bits>:
 8007aac:	0003      	movs	r3, r0
 8007aae:	0c02      	lsrs	r2, r0, #16
 8007ab0:	2000      	movs	r0, #0
 8007ab2:	4282      	cmp	r2, r0
 8007ab4:	d101      	bne.n	8007aba <__hi0bits+0xe>
 8007ab6:	041b      	lsls	r3, r3, #16
 8007ab8:	3010      	adds	r0, #16
 8007aba:	0e1a      	lsrs	r2, r3, #24
 8007abc:	d101      	bne.n	8007ac2 <__hi0bits+0x16>
 8007abe:	3008      	adds	r0, #8
 8007ac0:	021b      	lsls	r3, r3, #8
 8007ac2:	0f1a      	lsrs	r2, r3, #28
 8007ac4:	d101      	bne.n	8007aca <__hi0bits+0x1e>
 8007ac6:	3004      	adds	r0, #4
 8007ac8:	011b      	lsls	r3, r3, #4
 8007aca:	0f9a      	lsrs	r2, r3, #30
 8007acc:	d101      	bne.n	8007ad2 <__hi0bits+0x26>
 8007ace:	3002      	adds	r0, #2
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	db03      	blt.n	8007ade <__hi0bits+0x32>
 8007ad6:	3001      	adds	r0, #1
 8007ad8:	005b      	lsls	r3, r3, #1
 8007ada:	d400      	bmi.n	8007ade <__hi0bits+0x32>
 8007adc:	2020      	movs	r0, #32
 8007ade:	4770      	bx	lr

08007ae0 <__lo0bits>:
 8007ae0:	6803      	ldr	r3, [r0, #0]
 8007ae2:	0002      	movs	r2, r0
 8007ae4:	2107      	movs	r1, #7
 8007ae6:	0018      	movs	r0, r3
 8007ae8:	4008      	ands	r0, r1
 8007aea:	420b      	tst	r3, r1
 8007aec:	d00d      	beq.n	8007b0a <__lo0bits+0x2a>
 8007aee:	3906      	subs	r1, #6
 8007af0:	2000      	movs	r0, #0
 8007af2:	420b      	tst	r3, r1
 8007af4:	d105      	bne.n	8007b02 <__lo0bits+0x22>
 8007af6:	3002      	adds	r0, #2
 8007af8:	4203      	tst	r3, r0
 8007afa:	d003      	beq.n	8007b04 <__lo0bits+0x24>
 8007afc:	40cb      	lsrs	r3, r1
 8007afe:	0008      	movs	r0, r1
 8007b00:	6013      	str	r3, [r2, #0]
 8007b02:	4770      	bx	lr
 8007b04:	089b      	lsrs	r3, r3, #2
 8007b06:	6013      	str	r3, [r2, #0]
 8007b08:	e7fb      	b.n	8007b02 <__lo0bits+0x22>
 8007b0a:	b299      	uxth	r1, r3
 8007b0c:	2900      	cmp	r1, #0
 8007b0e:	d101      	bne.n	8007b14 <__lo0bits+0x34>
 8007b10:	2010      	movs	r0, #16
 8007b12:	0c1b      	lsrs	r3, r3, #16
 8007b14:	b2d9      	uxtb	r1, r3
 8007b16:	2900      	cmp	r1, #0
 8007b18:	d101      	bne.n	8007b1e <__lo0bits+0x3e>
 8007b1a:	3008      	adds	r0, #8
 8007b1c:	0a1b      	lsrs	r3, r3, #8
 8007b1e:	0719      	lsls	r1, r3, #28
 8007b20:	d101      	bne.n	8007b26 <__lo0bits+0x46>
 8007b22:	3004      	adds	r0, #4
 8007b24:	091b      	lsrs	r3, r3, #4
 8007b26:	0799      	lsls	r1, r3, #30
 8007b28:	d101      	bne.n	8007b2e <__lo0bits+0x4e>
 8007b2a:	3002      	adds	r0, #2
 8007b2c:	089b      	lsrs	r3, r3, #2
 8007b2e:	07d9      	lsls	r1, r3, #31
 8007b30:	d4e9      	bmi.n	8007b06 <__lo0bits+0x26>
 8007b32:	3001      	adds	r0, #1
 8007b34:	085b      	lsrs	r3, r3, #1
 8007b36:	d1e6      	bne.n	8007b06 <__lo0bits+0x26>
 8007b38:	2020      	movs	r0, #32
 8007b3a:	e7e2      	b.n	8007b02 <__lo0bits+0x22>

08007b3c <__i2b>:
 8007b3c:	b510      	push	{r4, lr}
 8007b3e:	000c      	movs	r4, r1
 8007b40:	2101      	movs	r1, #1
 8007b42:	f7ff ff07 	bl	8007954 <_Balloc>
 8007b46:	2800      	cmp	r0, #0
 8007b48:	d106      	bne.n	8007b58 <__i2b+0x1c>
 8007b4a:	21a0      	movs	r1, #160	; 0xa0
 8007b4c:	0002      	movs	r2, r0
 8007b4e:	4b04      	ldr	r3, [pc, #16]	; (8007b60 <__i2b+0x24>)
 8007b50:	4804      	ldr	r0, [pc, #16]	; (8007b64 <__i2b+0x28>)
 8007b52:	0049      	lsls	r1, r1, #1
 8007b54:	f000 fd1c 	bl	8008590 <__assert_func>
 8007b58:	2301      	movs	r3, #1
 8007b5a:	6144      	str	r4, [r0, #20]
 8007b5c:	6103      	str	r3, [r0, #16]
 8007b5e:	bd10      	pop	{r4, pc}
 8007b60:	08009483 	.word	0x08009483
 8007b64:	08009494 	.word	0x08009494

08007b68 <__multiply>:
 8007b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b6a:	690b      	ldr	r3, [r1, #16]
 8007b6c:	0014      	movs	r4, r2
 8007b6e:	6912      	ldr	r2, [r2, #16]
 8007b70:	000d      	movs	r5, r1
 8007b72:	b089      	sub	sp, #36	; 0x24
 8007b74:	4293      	cmp	r3, r2
 8007b76:	da01      	bge.n	8007b7c <__multiply+0x14>
 8007b78:	0025      	movs	r5, r4
 8007b7a:	000c      	movs	r4, r1
 8007b7c:	692f      	ldr	r7, [r5, #16]
 8007b7e:	6926      	ldr	r6, [r4, #16]
 8007b80:	6869      	ldr	r1, [r5, #4]
 8007b82:	19bb      	adds	r3, r7, r6
 8007b84:	9302      	str	r3, [sp, #8]
 8007b86:	68ab      	ldr	r3, [r5, #8]
 8007b88:	19ba      	adds	r2, r7, r6
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	da00      	bge.n	8007b90 <__multiply+0x28>
 8007b8e:	3101      	adds	r1, #1
 8007b90:	f7ff fee0 	bl	8007954 <_Balloc>
 8007b94:	9001      	str	r0, [sp, #4]
 8007b96:	2800      	cmp	r0, #0
 8007b98:	d106      	bne.n	8007ba8 <__multiply+0x40>
 8007b9a:	215e      	movs	r1, #94	; 0x5e
 8007b9c:	0002      	movs	r2, r0
 8007b9e:	4b48      	ldr	r3, [pc, #288]	; (8007cc0 <__multiply+0x158>)
 8007ba0:	4848      	ldr	r0, [pc, #288]	; (8007cc4 <__multiply+0x15c>)
 8007ba2:	31ff      	adds	r1, #255	; 0xff
 8007ba4:	f000 fcf4 	bl	8008590 <__assert_func>
 8007ba8:	9b01      	ldr	r3, [sp, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	3314      	adds	r3, #20
 8007bae:	469c      	mov	ip, r3
 8007bb0:	19bb      	adds	r3, r7, r6
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	4463      	add	r3, ip
 8007bb6:	9303      	str	r3, [sp, #12]
 8007bb8:	4663      	mov	r3, ip
 8007bba:	9903      	ldr	r1, [sp, #12]
 8007bbc:	428b      	cmp	r3, r1
 8007bbe:	d32c      	bcc.n	8007c1a <__multiply+0xb2>
 8007bc0:	002b      	movs	r3, r5
 8007bc2:	0022      	movs	r2, r4
 8007bc4:	3314      	adds	r3, #20
 8007bc6:	00bf      	lsls	r7, r7, #2
 8007bc8:	3214      	adds	r2, #20
 8007bca:	9306      	str	r3, [sp, #24]
 8007bcc:	00b6      	lsls	r6, r6, #2
 8007bce:	19db      	adds	r3, r3, r7
 8007bd0:	9304      	str	r3, [sp, #16]
 8007bd2:	1993      	adds	r3, r2, r6
 8007bd4:	9307      	str	r3, [sp, #28]
 8007bd6:	2304      	movs	r3, #4
 8007bd8:	9305      	str	r3, [sp, #20]
 8007bda:	002b      	movs	r3, r5
 8007bdc:	9904      	ldr	r1, [sp, #16]
 8007bde:	3315      	adds	r3, #21
 8007be0:	9200      	str	r2, [sp, #0]
 8007be2:	4299      	cmp	r1, r3
 8007be4:	d305      	bcc.n	8007bf2 <__multiply+0x8a>
 8007be6:	1b4b      	subs	r3, r1, r5
 8007be8:	3b15      	subs	r3, #21
 8007bea:	089b      	lsrs	r3, r3, #2
 8007bec:	3301      	adds	r3, #1
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	9305      	str	r3, [sp, #20]
 8007bf2:	9b07      	ldr	r3, [sp, #28]
 8007bf4:	9a00      	ldr	r2, [sp, #0]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d311      	bcc.n	8007c1e <__multiply+0xb6>
 8007bfa:	9b02      	ldr	r3, [sp, #8]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	dd06      	ble.n	8007c0e <__multiply+0xa6>
 8007c00:	9b03      	ldr	r3, [sp, #12]
 8007c02:	3b04      	subs	r3, #4
 8007c04:	9303      	str	r3, [sp, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	9300      	str	r3, [sp, #0]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d053      	beq.n	8007cb6 <__multiply+0x14e>
 8007c0e:	9b01      	ldr	r3, [sp, #4]
 8007c10:	9a02      	ldr	r2, [sp, #8]
 8007c12:	0018      	movs	r0, r3
 8007c14:	611a      	str	r2, [r3, #16]
 8007c16:	b009      	add	sp, #36	; 0x24
 8007c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c1a:	c304      	stmia	r3!, {r2}
 8007c1c:	e7cd      	b.n	8007bba <__multiply+0x52>
 8007c1e:	9b00      	ldr	r3, [sp, #0]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	b298      	uxth	r0, r3
 8007c24:	2800      	cmp	r0, #0
 8007c26:	d01b      	beq.n	8007c60 <__multiply+0xf8>
 8007c28:	4667      	mov	r7, ip
 8007c2a:	2400      	movs	r4, #0
 8007c2c:	9e06      	ldr	r6, [sp, #24]
 8007c2e:	ce02      	ldmia	r6!, {r1}
 8007c30:	683a      	ldr	r2, [r7, #0]
 8007c32:	b28b      	uxth	r3, r1
 8007c34:	4343      	muls	r3, r0
 8007c36:	b292      	uxth	r2, r2
 8007c38:	189b      	adds	r3, r3, r2
 8007c3a:	191b      	adds	r3, r3, r4
 8007c3c:	0c0c      	lsrs	r4, r1, #16
 8007c3e:	4344      	muls	r4, r0
 8007c40:	683a      	ldr	r2, [r7, #0]
 8007c42:	0c11      	lsrs	r1, r2, #16
 8007c44:	1861      	adds	r1, r4, r1
 8007c46:	0c1c      	lsrs	r4, r3, #16
 8007c48:	1909      	adds	r1, r1, r4
 8007c4a:	0c0c      	lsrs	r4, r1, #16
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	0409      	lsls	r1, r1, #16
 8007c50:	430b      	orrs	r3, r1
 8007c52:	c708      	stmia	r7!, {r3}
 8007c54:	9b04      	ldr	r3, [sp, #16]
 8007c56:	42b3      	cmp	r3, r6
 8007c58:	d8e9      	bhi.n	8007c2e <__multiply+0xc6>
 8007c5a:	4663      	mov	r3, ip
 8007c5c:	9a05      	ldr	r2, [sp, #20]
 8007c5e:	509c      	str	r4, [r3, r2]
 8007c60:	9b00      	ldr	r3, [sp, #0]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	0c1e      	lsrs	r6, r3, #16
 8007c66:	d020      	beq.n	8007caa <__multiply+0x142>
 8007c68:	4663      	mov	r3, ip
 8007c6a:	002c      	movs	r4, r5
 8007c6c:	4660      	mov	r0, ip
 8007c6e:	2700      	movs	r7, #0
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	3414      	adds	r4, #20
 8007c74:	6822      	ldr	r2, [r4, #0]
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	b291      	uxth	r1, r2
 8007c7a:	4371      	muls	r1, r6
 8007c7c:	6802      	ldr	r2, [r0, #0]
 8007c7e:	0c12      	lsrs	r2, r2, #16
 8007c80:	1889      	adds	r1, r1, r2
 8007c82:	19cf      	adds	r7, r1, r7
 8007c84:	0439      	lsls	r1, r7, #16
 8007c86:	430b      	orrs	r3, r1
 8007c88:	6003      	str	r3, [r0, #0]
 8007c8a:	cc02      	ldmia	r4!, {r1}
 8007c8c:	6843      	ldr	r3, [r0, #4]
 8007c8e:	0c09      	lsrs	r1, r1, #16
 8007c90:	4371      	muls	r1, r6
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	0c3f      	lsrs	r7, r7, #16
 8007c96:	18cb      	adds	r3, r1, r3
 8007c98:	9a04      	ldr	r2, [sp, #16]
 8007c9a:	19db      	adds	r3, r3, r7
 8007c9c:	0c1f      	lsrs	r7, r3, #16
 8007c9e:	3004      	adds	r0, #4
 8007ca0:	42a2      	cmp	r2, r4
 8007ca2:	d8e7      	bhi.n	8007c74 <__multiply+0x10c>
 8007ca4:	4662      	mov	r2, ip
 8007ca6:	9905      	ldr	r1, [sp, #20]
 8007ca8:	5053      	str	r3, [r2, r1]
 8007caa:	9b00      	ldr	r3, [sp, #0]
 8007cac:	3304      	adds	r3, #4
 8007cae:	9300      	str	r3, [sp, #0]
 8007cb0:	2304      	movs	r3, #4
 8007cb2:	449c      	add	ip, r3
 8007cb4:	e79d      	b.n	8007bf2 <__multiply+0x8a>
 8007cb6:	9b02      	ldr	r3, [sp, #8]
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	9302      	str	r3, [sp, #8]
 8007cbc:	e79d      	b.n	8007bfa <__multiply+0x92>
 8007cbe:	46c0      	nop			; (mov r8, r8)
 8007cc0:	08009483 	.word	0x08009483
 8007cc4:	08009494 	.word	0x08009494

08007cc8 <__pow5mult>:
 8007cc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cca:	2303      	movs	r3, #3
 8007ccc:	0015      	movs	r5, r2
 8007cce:	0007      	movs	r7, r0
 8007cd0:	000e      	movs	r6, r1
 8007cd2:	401a      	ands	r2, r3
 8007cd4:	421d      	tst	r5, r3
 8007cd6:	d008      	beq.n	8007cea <__pow5mult+0x22>
 8007cd8:	4925      	ldr	r1, [pc, #148]	; (8007d70 <__pow5mult+0xa8>)
 8007cda:	3a01      	subs	r2, #1
 8007cdc:	0092      	lsls	r2, r2, #2
 8007cde:	5852      	ldr	r2, [r2, r1]
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	0031      	movs	r1, r6
 8007ce4:	f7ff fe9e 	bl	8007a24 <__multadd>
 8007ce8:	0006      	movs	r6, r0
 8007cea:	10ad      	asrs	r5, r5, #2
 8007cec:	d03d      	beq.n	8007d6a <__pow5mult+0xa2>
 8007cee:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8007cf0:	2c00      	cmp	r4, #0
 8007cf2:	d10f      	bne.n	8007d14 <__pow5mult+0x4c>
 8007cf4:	2010      	movs	r0, #16
 8007cf6:	f7ff fe0f 	bl	8007918 <malloc>
 8007cfa:	1e02      	subs	r2, r0, #0
 8007cfc:	6278      	str	r0, [r7, #36]	; 0x24
 8007cfe:	d105      	bne.n	8007d0c <__pow5mult+0x44>
 8007d00:	21d7      	movs	r1, #215	; 0xd7
 8007d02:	4b1c      	ldr	r3, [pc, #112]	; (8007d74 <__pow5mult+0xac>)
 8007d04:	481c      	ldr	r0, [pc, #112]	; (8007d78 <__pow5mult+0xb0>)
 8007d06:	0049      	lsls	r1, r1, #1
 8007d08:	f000 fc42 	bl	8008590 <__assert_func>
 8007d0c:	6044      	str	r4, [r0, #4]
 8007d0e:	6084      	str	r4, [r0, #8]
 8007d10:	6004      	str	r4, [r0, #0]
 8007d12:	60c4      	str	r4, [r0, #12]
 8007d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d16:	689c      	ldr	r4, [r3, #8]
 8007d18:	9301      	str	r3, [sp, #4]
 8007d1a:	2c00      	cmp	r4, #0
 8007d1c:	d108      	bne.n	8007d30 <__pow5mult+0x68>
 8007d1e:	0038      	movs	r0, r7
 8007d20:	4916      	ldr	r1, [pc, #88]	; (8007d7c <__pow5mult+0xb4>)
 8007d22:	f7ff ff0b 	bl	8007b3c <__i2b>
 8007d26:	9b01      	ldr	r3, [sp, #4]
 8007d28:	0004      	movs	r4, r0
 8007d2a:	6098      	str	r0, [r3, #8]
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	6003      	str	r3, [r0, #0]
 8007d30:	2301      	movs	r3, #1
 8007d32:	421d      	tst	r5, r3
 8007d34:	d00a      	beq.n	8007d4c <__pow5mult+0x84>
 8007d36:	0031      	movs	r1, r6
 8007d38:	0022      	movs	r2, r4
 8007d3a:	0038      	movs	r0, r7
 8007d3c:	f7ff ff14 	bl	8007b68 <__multiply>
 8007d40:	0031      	movs	r1, r6
 8007d42:	9001      	str	r0, [sp, #4]
 8007d44:	0038      	movs	r0, r7
 8007d46:	f7ff fe49 	bl	80079dc <_Bfree>
 8007d4a:	9e01      	ldr	r6, [sp, #4]
 8007d4c:	106d      	asrs	r5, r5, #1
 8007d4e:	d00c      	beq.n	8007d6a <__pow5mult+0xa2>
 8007d50:	6820      	ldr	r0, [r4, #0]
 8007d52:	2800      	cmp	r0, #0
 8007d54:	d107      	bne.n	8007d66 <__pow5mult+0x9e>
 8007d56:	0022      	movs	r2, r4
 8007d58:	0021      	movs	r1, r4
 8007d5a:	0038      	movs	r0, r7
 8007d5c:	f7ff ff04 	bl	8007b68 <__multiply>
 8007d60:	2300      	movs	r3, #0
 8007d62:	6020      	str	r0, [r4, #0]
 8007d64:	6003      	str	r3, [r0, #0]
 8007d66:	0004      	movs	r4, r0
 8007d68:	e7e2      	b.n	8007d30 <__pow5mult+0x68>
 8007d6a:	0030      	movs	r0, r6
 8007d6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007d6e:	46c0      	nop			; (mov r8, r8)
 8007d70:	080095e0 	.word	0x080095e0
 8007d74:	08009411 	.word	0x08009411
 8007d78:	08009494 	.word	0x08009494
 8007d7c:	00000271 	.word	0x00000271

08007d80 <__lshift>:
 8007d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d82:	000c      	movs	r4, r1
 8007d84:	0017      	movs	r7, r2
 8007d86:	6923      	ldr	r3, [r4, #16]
 8007d88:	1155      	asrs	r5, r2, #5
 8007d8a:	b087      	sub	sp, #28
 8007d8c:	18eb      	adds	r3, r5, r3
 8007d8e:	9302      	str	r3, [sp, #8]
 8007d90:	3301      	adds	r3, #1
 8007d92:	9301      	str	r3, [sp, #4]
 8007d94:	6849      	ldr	r1, [r1, #4]
 8007d96:	68a3      	ldr	r3, [r4, #8]
 8007d98:	9004      	str	r0, [sp, #16]
 8007d9a:	9a01      	ldr	r2, [sp, #4]
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	db10      	blt.n	8007dc2 <__lshift+0x42>
 8007da0:	9804      	ldr	r0, [sp, #16]
 8007da2:	f7ff fdd7 	bl	8007954 <_Balloc>
 8007da6:	2300      	movs	r3, #0
 8007da8:	0002      	movs	r2, r0
 8007daa:	0006      	movs	r6, r0
 8007dac:	0019      	movs	r1, r3
 8007dae:	3214      	adds	r2, #20
 8007db0:	4298      	cmp	r0, r3
 8007db2:	d10c      	bne.n	8007dce <__lshift+0x4e>
 8007db4:	21da      	movs	r1, #218	; 0xda
 8007db6:	0002      	movs	r2, r0
 8007db8:	4b26      	ldr	r3, [pc, #152]	; (8007e54 <__lshift+0xd4>)
 8007dba:	4827      	ldr	r0, [pc, #156]	; (8007e58 <__lshift+0xd8>)
 8007dbc:	31ff      	adds	r1, #255	; 0xff
 8007dbe:	f000 fbe7 	bl	8008590 <__assert_func>
 8007dc2:	3101      	adds	r1, #1
 8007dc4:	005b      	lsls	r3, r3, #1
 8007dc6:	e7e8      	b.n	8007d9a <__lshift+0x1a>
 8007dc8:	0098      	lsls	r0, r3, #2
 8007dca:	5011      	str	r1, [r2, r0]
 8007dcc:	3301      	adds	r3, #1
 8007dce:	42ab      	cmp	r3, r5
 8007dd0:	dbfa      	blt.n	8007dc8 <__lshift+0x48>
 8007dd2:	43eb      	mvns	r3, r5
 8007dd4:	17db      	asrs	r3, r3, #31
 8007dd6:	401d      	ands	r5, r3
 8007dd8:	211f      	movs	r1, #31
 8007dda:	0023      	movs	r3, r4
 8007ddc:	0038      	movs	r0, r7
 8007dde:	00ad      	lsls	r5, r5, #2
 8007de0:	1955      	adds	r5, r2, r5
 8007de2:	6922      	ldr	r2, [r4, #16]
 8007de4:	3314      	adds	r3, #20
 8007de6:	0092      	lsls	r2, r2, #2
 8007de8:	4008      	ands	r0, r1
 8007dea:	4684      	mov	ip, r0
 8007dec:	189a      	adds	r2, r3, r2
 8007dee:	420f      	tst	r7, r1
 8007df0:	d02a      	beq.n	8007e48 <__lshift+0xc8>
 8007df2:	3101      	adds	r1, #1
 8007df4:	1a09      	subs	r1, r1, r0
 8007df6:	9105      	str	r1, [sp, #20]
 8007df8:	2100      	movs	r1, #0
 8007dfa:	9503      	str	r5, [sp, #12]
 8007dfc:	4667      	mov	r7, ip
 8007dfe:	6818      	ldr	r0, [r3, #0]
 8007e00:	40b8      	lsls	r0, r7
 8007e02:	4301      	orrs	r1, r0
 8007e04:	9803      	ldr	r0, [sp, #12]
 8007e06:	c002      	stmia	r0!, {r1}
 8007e08:	cb02      	ldmia	r3!, {r1}
 8007e0a:	9003      	str	r0, [sp, #12]
 8007e0c:	9805      	ldr	r0, [sp, #20]
 8007e0e:	40c1      	lsrs	r1, r0
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d8f3      	bhi.n	8007dfc <__lshift+0x7c>
 8007e14:	0020      	movs	r0, r4
 8007e16:	3015      	adds	r0, #21
 8007e18:	2304      	movs	r3, #4
 8007e1a:	4282      	cmp	r2, r0
 8007e1c:	d304      	bcc.n	8007e28 <__lshift+0xa8>
 8007e1e:	1b13      	subs	r3, r2, r4
 8007e20:	3b15      	subs	r3, #21
 8007e22:	089b      	lsrs	r3, r3, #2
 8007e24:	3301      	adds	r3, #1
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	50e9      	str	r1, [r5, r3]
 8007e2a:	2900      	cmp	r1, #0
 8007e2c:	d002      	beq.n	8007e34 <__lshift+0xb4>
 8007e2e:	9b02      	ldr	r3, [sp, #8]
 8007e30:	3302      	adds	r3, #2
 8007e32:	9301      	str	r3, [sp, #4]
 8007e34:	9b01      	ldr	r3, [sp, #4]
 8007e36:	9804      	ldr	r0, [sp, #16]
 8007e38:	3b01      	subs	r3, #1
 8007e3a:	0021      	movs	r1, r4
 8007e3c:	6133      	str	r3, [r6, #16]
 8007e3e:	f7ff fdcd 	bl	80079dc <_Bfree>
 8007e42:	0030      	movs	r0, r6
 8007e44:	b007      	add	sp, #28
 8007e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e48:	cb02      	ldmia	r3!, {r1}
 8007e4a:	c502      	stmia	r5!, {r1}
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d8fb      	bhi.n	8007e48 <__lshift+0xc8>
 8007e50:	e7f0      	b.n	8007e34 <__lshift+0xb4>
 8007e52:	46c0      	nop			; (mov r8, r8)
 8007e54:	08009483 	.word	0x08009483
 8007e58:	08009494 	.word	0x08009494

08007e5c <__mcmp>:
 8007e5c:	6902      	ldr	r2, [r0, #16]
 8007e5e:	690b      	ldr	r3, [r1, #16]
 8007e60:	b530      	push	{r4, r5, lr}
 8007e62:	0004      	movs	r4, r0
 8007e64:	1ad0      	subs	r0, r2, r3
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d10d      	bne.n	8007e86 <__mcmp+0x2a>
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	3414      	adds	r4, #20
 8007e6e:	3114      	adds	r1, #20
 8007e70:	18e2      	adds	r2, r4, r3
 8007e72:	18c9      	adds	r1, r1, r3
 8007e74:	3a04      	subs	r2, #4
 8007e76:	3904      	subs	r1, #4
 8007e78:	6815      	ldr	r5, [r2, #0]
 8007e7a:	680b      	ldr	r3, [r1, #0]
 8007e7c:	429d      	cmp	r5, r3
 8007e7e:	d003      	beq.n	8007e88 <__mcmp+0x2c>
 8007e80:	2001      	movs	r0, #1
 8007e82:	429d      	cmp	r5, r3
 8007e84:	d303      	bcc.n	8007e8e <__mcmp+0x32>
 8007e86:	bd30      	pop	{r4, r5, pc}
 8007e88:	4294      	cmp	r4, r2
 8007e8a:	d3f3      	bcc.n	8007e74 <__mcmp+0x18>
 8007e8c:	e7fb      	b.n	8007e86 <__mcmp+0x2a>
 8007e8e:	4240      	negs	r0, r0
 8007e90:	e7f9      	b.n	8007e86 <__mcmp+0x2a>
	...

08007e94 <__mdiff>:
 8007e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e96:	000e      	movs	r6, r1
 8007e98:	0007      	movs	r7, r0
 8007e9a:	0011      	movs	r1, r2
 8007e9c:	0030      	movs	r0, r6
 8007e9e:	b087      	sub	sp, #28
 8007ea0:	0014      	movs	r4, r2
 8007ea2:	f7ff ffdb 	bl	8007e5c <__mcmp>
 8007ea6:	1e05      	subs	r5, r0, #0
 8007ea8:	d110      	bne.n	8007ecc <__mdiff+0x38>
 8007eaa:	0001      	movs	r1, r0
 8007eac:	0038      	movs	r0, r7
 8007eae:	f7ff fd51 	bl	8007954 <_Balloc>
 8007eb2:	1e02      	subs	r2, r0, #0
 8007eb4:	d104      	bne.n	8007ec0 <__mdiff+0x2c>
 8007eb6:	4b40      	ldr	r3, [pc, #256]	; (8007fb8 <__mdiff+0x124>)
 8007eb8:	4940      	ldr	r1, [pc, #256]	; (8007fbc <__mdiff+0x128>)
 8007eba:	4841      	ldr	r0, [pc, #260]	; (8007fc0 <__mdiff+0x12c>)
 8007ebc:	f000 fb68 	bl	8008590 <__assert_func>
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	6145      	str	r5, [r0, #20]
 8007ec4:	6103      	str	r3, [r0, #16]
 8007ec6:	0010      	movs	r0, r2
 8007ec8:	b007      	add	sp, #28
 8007eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ecc:	2301      	movs	r3, #1
 8007ece:	9301      	str	r3, [sp, #4]
 8007ed0:	2800      	cmp	r0, #0
 8007ed2:	db04      	blt.n	8007ede <__mdiff+0x4a>
 8007ed4:	0023      	movs	r3, r4
 8007ed6:	0034      	movs	r4, r6
 8007ed8:	001e      	movs	r6, r3
 8007eda:	2300      	movs	r3, #0
 8007edc:	9301      	str	r3, [sp, #4]
 8007ede:	0038      	movs	r0, r7
 8007ee0:	6861      	ldr	r1, [r4, #4]
 8007ee2:	f7ff fd37 	bl	8007954 <_Balloc>
 8007ee6:	1e02      	subs	r2, r0, #0
 8007ee8:	d103      	bne.n	8007ef2 <__mdiff+0x5e>
 8007eea:	2190      	movs	r1, #144	; 0x90
 8007eec:	4b32      	ldr	r3, [pc, #200]	; (8007fb8 <__mdiff+0x124>)
 8007eee:	0089      	lsls	r1, r1, #2
 8007ef0:	e7e3      	b.n	8007eba <__mdiff+0x26>
 8007ef2:	9b01      	ldr	r3, [sp, #4]
 8007ef4:	2700      	movs	r7, #0
 8007ef6:	60c3      	str	r3, [r0, #12]
 8007ef8:	6920      	ldr	r0, [r4, #16]
 8007efa:	3414      	adds	r4, #20
 8007efc:	9401      	str	r4, [sp, #4]
 8007efe:	9b01      	ldr	r3, [sp, #4]
 8007f00:	0084      	lsls	r4, r0, #2
 8007f02:	191b      	adds	r3, r3, r4
 8007f04:	0034      	movs	r4, r6
 8007f06:	9302      	str	r3, [sp, #8]
 8007f08:	6933      	ldr	r3, [r6, #16]
 8007f0a:	3414      	adds	r4, #20
 8007f0c:	0099      	lsls	r1, r3, #2
 8007f0e:	1863      	adds	r3, r4, r1
 8007f10:	9303      	str	r3, [sp, #12]
 8007f12:	0013      	movs	r3, r2
 8007f14:	3314      	adds	r3, #20
 8007f16:	469c      	mov	ip, r3
 8007f18:	9305      	str	r3, [sp, #20]
 8007f1a:	9b01      	ldr	r3, [sp, #4]
 8007f1c:	9304      	str	r3, [sp, #16]
 8007f1e:	9b04      	ldr	r3, [sp, #16]
 8007f20:	cc02      	ldmia	r4!, {r1}
 8007f22:	cb20      	ldmia	r3!, {r5}
 8007f24:	9304      	str	r3, [sp, #16]
 8007f26:	b2ab      	uxth	r3, r5
 8007f28:	19df      	adds	r7, r3, r7
 8007f2a:	b28b      	uxth	r3, r1
 8007f2c:	1afb      	subs	r3, r7, r3
 8007f2e:	0c09      	lsrs	r1, r1, #16
 8007f30:	0c2d      	lsrs	r5, r5, #16
 8007f32:	1a6d      	subs	r5, r5, r1
 8007f34:	1419      	asrs	r1, r3, #16
 8007f36:	186d      	adds	r5, r5, r1
 8007f38:	4661      	mov	r1, ip
 8007f3a:	142f      	asrs	r7, r5, #16
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	042d      	lsls	r5, r5, #16
 8007f40:	432b      	orrs	r3, r5
 8007f42:	c108      	stmia	r1!, {r3}
 8007f44:	9b03      	ldr	r3, [sp, #12]
 8007f46:	468c      	mov	ip, r1
 8007f48:	42a3      	cmp	r3, r4
 8007f4a:	d8e8      	bhi.n	8007f1e <__mdiff+0x8a>
 8007f4c:	0031      	movs	r1, r6
 8007f4e:	9c03      	ldr	r4, [sp, #12]
 8007f50:	3115      	adds	r1, #21
 8007f52:	2304      	movs	r3, #4
 8007f54:	428c      	cmp	r4, r1
 8007f56:	d304      	bcc.n	8007f62 <__mdiff+0xce>
 8007f58:	1ba3      	subs	r3, r4, r6
 8007f5a:	3b15      	subs	r3, #21
 8007f5c:	089b      	lsrs	r3, r3, #2
 8007f5e:	3301      	adds	r3, #1
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	9901      	ldr	r1, [sp, #4]
 8007f64:	18cc      	adds	r4, r1, r3
 8007f66:	9905      	ldr	r1, [sp, #20]
 8007f68:	0026      	movs	r6, r4
 8007f6a:	18cb      	adds	r3, r1, r3
 8007f6c:	469c      	mov	ip, r3
 8007f6e:	9902      	ldr	r1, [sp, #8]
 8007f70:	428e      	cmp	r6, r1
 8007f72:	d310      	bcc.n	8007f96 <__mdiff+0x102>
 8007f74:	9e02      	ldr	r6, [sp, #8]
 8007f76:	1ee1      	subs	r1, r4, #3
 8007f78:	2500      	movs	r5, #0
 8007f7a:	428e      	cmp	r6, r1
 8007f7c:	d304      	bcc.n	8007f88 <__mdiff+0xf4>
 8007f7e:	0031      	movs	r1, r6
 8007f80:	3103      	adds	r1, #3
 8007f82:	1b0c      	subs	r4, r1, r4
 8007f84:	08a4      	lsrs	r4, r4, #2
 8007f86:	00a5      	lsls	r5, r4, #2
 8007f88:	195b      	adds	r3, r3, r5
 8007f8a:	3b04      	subs	r3, #4
 8007f8c:	6819      	ldr	r1, [r3, #0]
 8007f8e:	2900      	cmp	r1, #0
 8007f90:	d00f      	beq.n	8007fb2 <__mdiff+0x11e>
 8007f92:	6110      	str	r0, [r2, #16]
 8007f94:	e797      	b.n	8007ec6 <__mdiff+0x32>
 8007f96:	ce02      	ldmia	r6!, {r1}
 8007f98:	b28d      	uxth	r5, r1
 8007f9a:	19ed      	adds	r5, r5, r7
 8007f9c:	0c0f      	lsrs	r7, r1, #16
 8007f9e:	1429      	asrs	r1, r5, #16
 8007fa0:	1879      	adds	r1, r7, r1
 8007fa2:	140f      	asrs	r7, r1, #16
 8007fa4:	b2ad      	uxth	r5, r5
 8007fa6:	0409      	lsls	r1, r1, #16
 8007fa8:	430d      	orrs	r5, r1
 8007faa:	4661      	mov	r1, ip
 8007fac:	c120      	stmia	r1!, {r5}
 8007fae:	468c      	mov	ip, r1
 8007fb0:	e7dd      	b.n	8007f6e <__mdiff+0xda>
 8007fb2:	3801      	subs	r0, #1
 8007fb4:	e7e9      	b.n	8007f8a <__mdiff+0xf6>
 8007fb6:	46c0      	nop			; (mov r8, r8)
 8007fb8:	08009483 	.word	0x08009483
 8007fbc:	00000232 	.word	0x00000232
 8007fc0:	08009494 	.word	0x08009494

08007fc4 <__d2b>:
 8007fc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007fc6:	2101      	movs	r1, #1
 8007fc8:	0014      	movs	r4, r2
 8007fca:	001e      	movs	r6, r3
 8007fcc:	9f08      	ldr	r7, [sp, #32]
 8007fce:	f7ff fcc1 	bl	8007954 <_Balloc>
 8007fd2:	1e05      	subs	r5, r0, #0
 8007fd4:	d105      	bne.n	8007fe2 <__d2b+0x1e>
 8007fd6:	0002      	movs	r2, r0
 8007fd8:	4b26      	ldr	r3, [pc, #152]	; (8008074 <__d2b+0xb0>)
 8007fda:	4927      	ldr	r1, [pc, #156]	; (8008078 <__d2b+0xb4>)
 8007fdc:	4827      	ldr	r0, [pc, #156]	; (800807c <__d2b+0xb8>)
 8007fde:	f000 fad7 	bl	8008590 <__assert_func>
 8007fe2:	0333      	lsls	r3, r6, #12
 8007fe4:	0076      	lsls	r6, r6, #1
 8007fe6:	0b1b      	lsrs	r3, r3, #12
 8007fe8:	0d76      	lsrs	r6, r6, #21
 8007fea:	d124      	bne.n	8008036 <__d2b+0x72>
 8007fec:	9301      	str	r3, [sp, #4]
 8007fee:	2c00      	cmp	r4, #0
 8007ff0:	d027      	beq.n	8008042 <__d2b+0x7e>
 8007ff2:	4668      	mov	r0, sp
 8007ff4:	9400      	str	r4, [sp, #0]
 8007ff6:	f7ff fd73 	bl	8007ae0 <__lo0bits>
 8007ffa:	9c00      	ldr	r4, [sp, #0]
 8007ffc:	2800      	cmp	r0, #0
 8007ffe:	d01e      	beq.n	800803e <__d2b+0x7a>
 8008000:	9b01      	ldr	r3, [sp, #4]
 8008002:	2120      	movs	r1, #32
 8008004:	001a      	movs	r2, r3
 8008006:	1a09      	subs	r1, r1, r0
 8008008:	408a      	lsls	r2, r1
 800800a:	40c3      	lsrs	r3, r0
 800800c:	4322      	orrs	r2, r4
 800800e:	616a      	str	r2, [r5, #20]
 8008010:	9301      	str	r3, [sp, #4]
 8008012:	9c01      	ldr	r4, [sp, #4]
 8008014:	61ac      	str	r4, [r5, #24]
 8008016:	1e63      	subs	r3, r4, #1
 8008018:	419c      	sbcs	r4, r3
 800801a:	3401      	adds	r4, #1
 800801c:	612c      	str	r4, [r5, #16]
 800801e:	2e00      	cmp	r6, #0
 8008020:	d018      	beq.n	8008054 <__d2b+0x90>
 8008022:	4b17      	ldr	r3, [pc, #92]	; (8008080 <__d2b+0xbc>)
 8008024:	18f6      	adds	r6, r6, r3
 8008026:	2335      	movs	r3, #53	; 0x35
 8008028:	1836      	adds	r6, r6, r0
 800802a:	1a18      	subs	r0, r3, r0
 800802c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800802e:	603e      	str	r6, [r7, #0]
 8008030:	6018      	str	r0, [r3, #0]
 8008032:	0028      	movs	r0, r5
 8008034:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008036:	2280      	movs	r2, #128	; 0x80
 8008038:	0352      	lsls	r2, r2, #13
 800803a:	4313      	orrs	r3, r2
 800803c:	e7d6      	b.n	8007fec <__d2b+0x28>
 800803e:	616c      	str	r4, [r5, #20]
 8008040:	e7e7      	b.n	8008012 <__d2b+0x4e>
 8008042:	a801      	add	r0, sp, #4
 8008044:	f7ff fd4c 	bl	8007ae0 <__lo0bits>
 8008048:	2401      	movs	r4, #1
 800804a:	9b01      	ldr	r3, [sp, #4]
 800804c:	612c      	str	r4, [r5, #16]
 800804e:	616b      	str	r3, [r5, #20]
 8008050:	3020      	adds	r0, #32
 8008052:	e7e4      	b.n	800801e <__d2b+0x5a>
 8008054:	4b0b      	ldr	r3, [pc, #44]	; (8008084 <__d2b+0xc0>)
 8008056:	18c0      	adds	r0, r0, r3
 8008058:	4b0b      	ldr	r3, [pc, #44]	; (8008088 <__d2b+0xc4>)
 800805a:	6038      	str	r0, [r7, #0]
 800805c:	18e3      	adds	r3, r4, r3
 800805e:	009b      	lsls	r3, r3, #2
 8008060:	18eb      	adds	r3, r5, r3
 8008062:	6958      	ldr	r0, [r3, #20]
 8008064:	f7ff fd22 	bl	8007aac <__hi0bits>
 8008068:	0164      	lsls	r4, r4, #5
 800806a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800806c:	1a24      	subs	r4, r4, r0
 800806e:	601c      	str	r4, [r3, #0]
 8008070:	e7df      	b.n	8008032 <__d2b+0x6e>
 8008072:	46c0      	nop			; (mov r8, r8)
 8008074:	08009483 	.word	0x08009483
 8008078:	0000030a 	.word	0x0000030a
 800807c:	08009494 	.word	0x08009494
 8008080:	fffffbcd 	.word	0xfffffbcd
 8008084:	fffffbce 	.word	0xfffffbce
 8008088:	3fffffff 	.word	0x3fffffff

0800808c <_calloc_r>:
 800808c:	b570      	push	{r4, r5, r6, lr}
 800808e:	0c13      	lsrs	r3, r2, #16
 8008090:	0c0d      	lsrs	r5, r1, #16
 8008092:	d11e      	bne.n	80080d2 <_calloc_r+0x46>
 8008094:	2b00      	cmp	r3, #0
 8008096:	d10c      	bne.n	80080b2 <_calloc_r+0x26>
 8008098:	b289      	uxth	r1, r1
 800809a:	b294      	uxth	r4, r2
 800809c:	434c      	muls	r4, r1
 800809e:	0021      	movs	r1, r4
 80080a0:	f000 f88c 	bl	80081bc <_malloc_r>
 80080a4:	1e05      	subs	r5, r0, #0
 80080a6:	d01b      	beq.n	80080e0 <_calloc_r+0x54>
 80080a8:	0022      	movs	r2, r4
 80080aa:	2100      	movs	r1, #0
 80080ac:	f7fe f8f4 	bl	8006298 <memset>
 80080b0:	e016      	b.n	80080e0 <_calloc_r+0x54>
 80080b2:	1c1d      	adds	r5, r3, #0
 80080b4:	1c0b      	adds	r3, r1, #0
 80080b6:	b292      	uxth	r2, r2
 80080b8:	b289      	uxth	r1, r1
 80080ba:	b29c      	uxth	r4, r3
 80080bc:	4351      	muls	r1, r2
 80080be:	b2ab      	uxth	r3, r5
 80080c0:	4363      	muls	r3, r4
 80080c2:	0c0c      	lsrs	r4, r1, #16
 80080c4:	191c      	adds	r4, r3, r4
 80080c6:	0c22      	lsrs	r2, r4, #16
 80080c8:	d107      	bne.n	80080da <_calloc_r+0x4e>
 80080ca:	0424      	lsls	r4, r4, #16
 80080cc:	b289      	uxth	r1, r1
 80080ce:	430c      	orrs	r4, r1
 80080d0:	e7e5      	b.n	800809e <_calloc_r+0x12>
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d101      	bne.n	80080da <_calloc_r+0x4e>
 80080d6:	1c13      	adds	r3, r2, #0
 80080d8:	e7ed      	b.n	80080b6 <_calloc_r+0x2a>
 80080da:	230c      	movs	r3, #12
 80080dc:	2500      	movs	r5, #0
 80080de:	6003      	str	r3, [r0, #0]
 80080e0:	0028      	movs	r0, r5
 80080e2:	bd70      	pop	{r4, r5, r6, pc}

080080e4 <_free_r>:
 80080e4:	b570      	push	{r4, r5, r6, lr}
 80080e6:	0005      	movs	r5, r0
 80080e8:	2900      	cmp	r1, #0
 80080ea:	d010      	beq.n	800810e <_free_r+0x2a>
 80080ec:	1f0c      	subs	r4, r1, #4
 80080ee:	6823      	ldr	r3, [r4, #0]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	da00      	bge.n	80080f6 <_free_r+0x12>
 80080f4:	18e4      	adds	r4, r4, r3
 80080f6:	0028      	movs	r0, r5
 80080f8:	f000 fa9e 	bl	8008638 <__malloc_lock>
 80080fc:	4a1d      	ldr	r2, [pc, #116]	; (8008174 <_free_r+0x90>)
 80080fe:	6813      	ldr	r3, [r2, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d105      	bne.n	8008110 <_free_r+0x2c>
 8008104:	6063      	str	r3, [r4, #4]
 8008106:	6014      	str	r4, [r2, #0]
 8008108:	0028      	movs	r0, r5
 800810a:	f000 fa9d 	bl	8008648 <__malloc_unlock>
 800810e:	bd70      	pop	{r4, r5, r6, pc}
 8008110:	42a3      	cmp	r3, r4
 8008112:	d908      	bls.n	8008126 <_free_r+0x42>
 8008114:	6821      	ldr	r1, [r4, #0]
 8008116:	1860      	adds	r0, r4, r1
 8008118:	4283      	cmp	r3, r0
 800811a:	d1f3      	bne.n	8008104 <_free_r+0x20>
 800811c:	6818      	ldr	r0, [r3, #0]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	1841      	adds	r1, r0, r1
 8008122:	6021      	str	r1, [r4, #0]
 8008124:	e7ee      	b.n	8008104 <_free_r+0x20>
 8008126:	001a      	movs	r2, r3
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d001      	beq.n	8008132 <_free_r+0x4e>
 800812e:	42a3      	cmp	r3, r4
 8008130:	d9f9      	bls.n	8008126 <_free_r+0x42>
 8008132:	6811      	ldr	r1, [r2, #0]
 8008134:	1850      	adds	r0, r2, r1
 8008136:	42a0      	cmp	r0, r4
 8008138:	d10b      	bne.n	8008152 <_free_r+0x6e>
 800813a:	6820      	ldr	r0, [r4, #0]
 800813c:	1809      	adds	r1, r1, r0
 800813e:	1850      	adds	r0, r2, r1
 8008140:	6011      	str	r1, [r2, #0]
 8008142:	4283      	cmp	r3, r0
 8008144:	d1e0      	bne.n	8008108 <_free_r+0x24>
 8008146:	6818      	ldr	r0, [r3, #0]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	1841      	adds	r1, r0, r1
 800814c:	6011      	str	r1, [r2, #0]
 800814e:	6053      	str	r3, [r2, #4]
 8008150:	e7da      	b.n	8008108 <_free_r+0x24>
 8008152:	42a0      	cmp	r0, r4
 8008154:	d902      	bls.n	800815c <_free_r+0x78>
 8008156:	230c      	movs	r3, #12
 8008158:	602b      	str	r3, [r5, #0]
 800815a:	e7d5      	b.n	8008108 <_free_r+0x24>
 800815c:	6821      	ldr	r1, [r4, #0]
 800815e:	1860      	adds	r0, r4, r1
 8008160:	4283      	cmp	r3, r0
 8008162:	d103      	bne.n	800816c <_free_r+0x88>
 8008164:	6818      	ldr	r0, [r3, #0]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	1841      	adds	r1, r0, r1
 800816a:	6021      	str	r1, [r4, #0]
 800816c:	6063      	str	r3, [r4, #4]
 800816e:	6054      	str	r4, [r2, #4]
 8008170:	e7ca      	b.n	8008108 <_free_r+0x24>
 8008172:	46c0      	nop			; (mov r8, r8)
 8008174:	200006f8 	.word	0x200006f8

08008178 <sbrk_aligned>:
 8008178:	b570      	push	{r4, r5, r6, lr}
 800817a:	4e0f      	ldr	r6, [pc, #60]	; (80081b8 <sbrk_aligned+0x40>)
 800817c:	000d      	movs	r5, r1
 800817e:	6831      	ldr	r1, [r6, #0]
 8008180:	0004      	movs	r4, r0
 8008182:	2900      	cmp	r1, #0
 8008184:	d102      	bne.n	800818c <sbrk_aligned+0x14>
 8008186:	f000 f9f1 	bl	800856c <_sbrk_r>
 800818a:	6030      	str	r0, [r6, #0]
 800818c:	0029      	movs	r1, r5
 800818e:	0020      	movs	r0, r4
 8008190:	f000 f9ec 	bl	800856c <_sbrk_r>
 8008194:	1c43      	adds	r3, r0, #1
 8008196:	d00a      	beq.n	80081ae <sbrk_aligned+0x36>
 8008198:	2303      	movs	r3, #3
 800819a:	1cc5      	adds	r5, r0, #3
 800819c:	439d      	bics	r5, r3
 800819e:	42a8      	cmp	r0, r5
 80081a0:	d007      	beq.n	80081b2 <sbrk_aligned+0x3a>
 80081a2:	1a29      	subs	r1, r5, r0
 80081a4:	0020      	movs	r0, r4
 80081a6:	f000 f9e1 	bl	800856c <_sbrk_r>
 80081aa:	1c43      	adds	r3, r0, #1
 80081ac:	d101      	bne.n	80081b2 <sbrk_aligned+0x3a>
 80081ae:	2501      	movs	r5, #1
 80081b0:	426d      	negs	r5, r5
 80081b2:	0028      	movs	r0, r5
 80081b4:	bd70      	pop	{r4, r5, r6, pc}
 80081b6:	46c0      	nop			; (mov r8, r8)
 80081b8:	200006fc 	.word	0x200006fc

080081bc <_malloc_r>:
 80081bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081be:	2203      	movs	r2, #3
 80081c0:	1ccb      	adds	r3, r1, #3
 80081c2:	4393      	bics	r3, r2
 80081c4:	3308      	adds	r3, #8
 80081c6:	0006      	movs	r6, r0
 80081c8:	001f      	movs	r7, r3
 80081ca:	2b0c      	cmp	r3, #12
 80081cc:	d232      	bcs.n	8008234 <_malloc_r+0x78>
 80081ce:	270c      	movs	r7, #12
 80081d0:	42b9      	cmp	r1, r7
 80081d2:	d831      	bhi.n	8008238 <_malloc_r+0x7c>
 80081d4:	0030      	movs	r0, r6
 80081d6:	f000 fa2f 	bl	8008638 <__malloc_lock>
 80081da:	4d32      	ldr	r5, [pc, #200]	; (80082a4 <_malloc_r+0xe8>)
 80081dc:	682b      	ldr	r3, [r5, #0]
 80081de:	001c      	movs	r4, r3
 80081e0:	2c00      	cmp	r4, #0
 80081e2:	d12e      	bne.n	8008242 <_malloc_r+0x86>
 80081e4:	0039      	movs	r1, r7
 80081e6:	0030      	movs	r0, r6
 80081e8:	f7ff ffc6 	bl	8008178 <sbrk_aligned>
 80081ec:	0004      	movs	r4, r0
 80081ee:	1c43      	adds	r3, r0, #1
 80081f0:	d11e      	bne.n	8008230 <_malloc_r+0x74>
 80081f2:	682c      	ldr	r4, [r5, #0]
 80081f4:	0025      	movs	r5, r4
 80081f6:	2d00      	cmp	r5, #0
 80081f8:	d14a      	bne.n	8008290 <_malloc_r+0xd4>
 80081fa:	6823      	ldr	r3, [r4, #0]
 80081fc:	0029      	movs	r1, r5
 80081fe:	18e3      	adds	r3, r4, r3
 8008200:	0030      	movs	r0, r6
 8008202:	9301      	str	r3, [sp, #4]
 8008204:	f000 f9b2 	bl	800856c <_sbrk_r>
 8008208:	9b01      	ldr	r3, [sp, #4]
 800820a:	4283      	cmp	r3, r0
 800820c:	d143      	bne.n	8008296 <_malloc_r+0xda>
 800820e:	6823      	ldr	r3, [r4, #0]
 8008210:	3703      	adds	r7, #3
 8008212:	1aff      	subs	r7, r7, r3
 8008214:	2303      	movs	r3, #3
 8008216:	439f      	bics	r7, r3
 8008218:	3708      	adds	r7, #8
 800821a:	2f0c      	cmp	r7, #12
 800821c:	d200      	bcs.n	8008220 <_malloc_r+0x64>
 800821e:	270c      	movs	r7, #12
 8008220:	0039      	movs	r1, r7
 8008222:	0030      	movs	r0, r6
 8008224:	f7ff ffa8 	bl	8008178 <sbrk_aligned>
 8008228:	1c43      	adds	r3, r0, #1
 800822a:	d034      	beq.n	8008296 <_malloc_r+0xda>
 800822c:	6823      	ldr	r3, [r4, #0]
 800822e:	19df      	adds	r7, r3, r7
 8008230:	6027      	str	r7, [r4, #0]
 8008232:	e013      	b.n	800825c <_malloc_r+0xa0>
 8008234:	2b00      	cmp	r3, #0
 8008236:	dacb      	bge.n	80081d0 <_malloc_r+0x14>
 8008238:	230c      	movs	r3, #12
 800823a:	2500      	movs	r5, #0
 800823c:	6033      	str	r3, [r6, #0]
 800823e:	0028      	movs	r0, r5
 8008240:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008242:	6822      	ldr	r2, [r4, #0]
 8008244:	1bd1      	subs	r1, r2, r7
 8008246:	d420      	bmi.n	800828a <_malloc_r+0xce>
 8008248:	290b      	cmp	r1, #11
 800824a:	d917      	bls.n	800827c <_malloc_r+0xc0>
 800824c:	19e2      	adds	r2, r4, r7
 800824e:	6027      	str	r7, [r4, #0]
 8008250:	42a3      	cmp	r3, r4
 8008252:	d111      	bne.n	8008278 <_malloc_r+0xbc>
 8008254:	602a      	str	r2, [r5, #0]
 8008256:	6863      	ldr	r3, [r4, #4]
 8008258:	6011      	str	r1, [r2, #0]
 800825a:	6053      	str	r3, [r2, #4]
 800825c:	0030      	movs	r0, r6
 800825e:	0025      	movs	r5, r4
 8008260:	f000 f9f2 	bl	8008648 <__malloc_unlock>
 8008264:	2207      	movs	r2, #7
 8008266:	350b      	adds	r5, #11
 8008268:	1d23      	adds	r3, r4, #4
 800826a:	4395      	bics	r5, r2
 800826c:	1aea      	subs	r2, r5, r3
 800826e:	429d      	cmp	r5, r3
 8008270:	d0e5      	beq.n	800823e <_malloc_r+0x82>
 8008272:	1b5b      	subs	r3, r3, r5
 8008274:	50a3      	str	r3, [r4, r2]
 8008276:	e7e2      	b.n	800823e <_malloc_r+0x82>
 8008278:	605a      	str	r2, [r3, #4]
 800827a:	e7ec      	b.n	8008256 <_malloc_r+0x9a>
 800827c:	6862      	ldr	r2, [r4, #4]
 800827e:	42a3      	cmp	r3, r4
 8008280:	d101      	bne.n	8008286 <_malloc_r+0xca>
 8008282:	602a      	str	r2, [r5, #0]
 8008284:	e7ea      	b.n	800825c <_malloc_r+0xa0>
 8008286:	605a      	str	r2, [r3, #4]
 8008288:	e7e8      	b.n	800825c <_malloc_r+0xa0>
 800828a:	0023      	movs	r3, r4
 800828c:	6864      	ldr	r4, [r4, #4]
 800828e:	e7a7      	b.n	80081e0 <_malloc_r+0x24>
 8008290:	002c      	movs	r4, r5
 8008292:	686d      	ldr	r5, [r5, #4]
 8008294:	e7af      	b.n	80081f6 <_malloc_r+0x3a>
 8008296:	230c      	movs	r3, #12
 8008298:	0030      	movs	r0, r6
 800829a:	6033      	str	r3, [r6, #0]
 800829c:	f000 f9d4 	bl	8008648 <__malloc_unlock>
 80082a0:	e7cd      	b.n	800823e <_malloc_r+0x82>
 80082a2:	46c0      	nop			; (mov r8, r8)
 80082a4:	200006f8 	.word	0x200006f8

080082a8 <__ssputs_r>:
 80082a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082aa:	688e      	ldr	r6, [r1, #8]
 80082ac:	b085      	sub	sp, #20
 80082ae:	0007      	movs	r7, r0
 80082b0:	000c      	movs	r4, r1
 80082b2:	9203      	str	r2, [sp, #12]
 80082b4:	9301      	str	r3, [sp, #4]
 80082b6:	429e      	cmp	r6, r3
 80082b8:	d83c      	bhi.n	8008334 <__ssputs_r+0x8c>
 80082ba:	2390      	movs	r3, #144	; 0x90
 80082bc:	898a      	ldrh	r2, [r1, #12]
 80082be:	00db      	lsls	r3, r3, #3
 80082c0:	421a      	tst	r2, r3
 80082c2:	d034      	beq.n	800832e <__ssputs_r+0x86>
 80082c4:	6909      	ldr	r1, [r1, #16]
 80082c6:	6823      	ldr	r3, [r4, #0]
 80082c8:	6960      	ldr	r0, [r4, #20]
 80082ca:	1a5b      	subs	r3, r3, r1
 80082cc:	9302      	str	r3, [sp, #8]
 80082ce:	2303      	movs	r3, #3
 80082d0:	4343      	muls	r3, r0
 80082d2:	0fdd      	lsrs	r5, r3, #31
 80082d4:	18ed      	adds	r5, r5, r3
 80082d6:	9b01      	ldr	r3, [sp, #4]
 80082d8:	9802      	ldr	r0, [sp, #8]
 80082da:	3301      	adds	r3, #1
 80082dc:	181b      	adds	r3, r3, r0
 80082de:	106d      	asrs	r5, r5, #1
 80082e0:	42ab      	cmp	r3, r5
 80082e2:	d900      	bls.n	80082e6 <__ssputs_r+0x3e>
 80082e4:	001d      	movs	r5, r3
 80082e6:	0553      	lsls	r3, r2, #21
 80082e8:	d532      	bpl.n	8008350 <__ssputs_r+0xa8>
 80082ea:	0029      	movs	r1, r5
 80082ec:	0038      	movs	r0, r7
 80082ee:	f7ff ff65 	bl	80081bc <_malloc_r>
 80082f2:	1e06      	subs	r6, r0, #0
 80082f4:	d109      	bne.n	800830a <__ssputs_r+0x62>
 80082f6:	230c      	movs	r3, #12
 80082f8:	603b      	str	r3, [r7, #0]
 80082fa:	2340      	movs	r3, #64	; 0x40
 80082fc:	2001      	movs	r0, #1
 80082fe:	89a2      	ldrh	r2, [r4, #12]
 8008300:	4240      	negs	r0, r0
 8008302:	4313      	orrs	r3, r2
 8008304:	81a3      	strh	r3, [r4, #12]
 8008306:	b005      	add	sp, #20
 8008308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800830a:	9a02      	ldr	r2, [sp, #8]
 800830c:	6921      	ldr	r1, [r4, #16]
 800830e:	f7ff fb18 	bl	8007942 <memcpy>
 8008312:	89a3      	ldrh	r3, [r4, #12]
 8008314:	4a14      	ldr	r2, [pc, #80]	; (8008368 <__ssputs_r+0xc0>)
 8008316:	401a      	ands	r2, r3
 8008318:	2380      	movs	r3, #128	; 0x80
 800831a:	4313      	orrs	r3, r2
 800831c:	81a3      	strh	r3, [r4, #12]
 800831e:	9b02      	ldr	r3, [sp, #8]
 8008320:	6126      	str	r6, [r4, #16]
 8008322:	18f6      	adds	r6, r6, r3
 8008324:	6026      	str	r6, [r4, #0]
 8008326:	6165      	str	r5, [r4, #20]
 8008328:	9e01      	ldr	r6, [sp, #4]
 800832a:	1aed      	subs	r5, r5, r3
 800832c:	60a5      	str	r5, [r4, #8]
 800832e:	9b01      	ldr	r3, [sp, #4]
 8008330:	429e      	cmp	r6, r3
 8008332:	d900      	bls.n	8008336 <__ssputs_r+0x8e>
 8008334:	9e01      	ldr	r6, [sp, #4]
 8008336:	0032      	movs	r2, r6
 8008338:	9903      	ldr	r1, [sp, #12]
 800833a:	6820      	ldr	r0, [r4, #0]
 800833c:	f000 f968 	bl	8008610 <memmove>
 8008340:	68a3      	ldr	r3, [r4, #8]
 8008342:	2000      	movs	r0, #0
 8008344:	1b9b      	subs	r3, r3, r6
 8008346:	60a3      	str	r3, [r4, #8]
 8008348:	6823      	ldr	r3, [r4, #0]
 800834a:	199e      	adds	r6, r3, r6
 800834c:	6026      	str	r6, [r4, #0]
 800834e:	e7da      	b.n	8008306 <__ssputs_r+0x5e>
 8008350:	002a      	movs	r2, r5
 8008352:	0038      	movs	r0, r7
 8008354:	f000 f980 	bl	8008658 <_realloc_r>
 8008358:	1e06      	subs	r6, r0, #0
 800835a:	d1e0      	bne.n	800831e <__ssputs_r+0x76>
 800835c:	0038      	movs	r0, r7
 800835e:	6921      	ldr	r1, [r4, #16]
 8008360:	f7ff fec0 	bl	80080e4 <_free_r>
 8008364:	e7c7      	b.n	80082f6 <__ssputs_r+0x4e>
 8008366:	46c0      	nop			; (mov r8, r8)
 8008368:	fffffb7f 	.word	0xfffffb7f

0800836c <_svfiprintf_r>:
 800836c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800836e:	b0a1      	sub	sp, #132	; 0x84
 8008370:	9003      	str	r0, [sp, #12]
 8008372:	001d      	movs	r5, r3
 8008374:	898b      	ldrh	r3, [r1, #12]
 8008376:	000f      	movs	r7, r1
 8008378:	0016      	movs	r6, r2
 800837a:	061b      	lsls	r3, r3, #24
 800837c:	d511      	bpl.n	80083a2 <_svfiprintf_r+0x36>
 800837e:	690b      	ldr	r3, [r1, #16]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d10e      	bne.n	80083a2 <_svfiprintf_r+0x36>
 8008384:	2140      	movs	r1, #64	; 0x40
 8008386:	f7ff ff19 	bl	80081bc <_malloc_r>
 800838a:	6038      	str	r0, [r7, #0]
 800838c:	6138      	str	r0, [r7, #16]
 800838e:	2800      	cmp	r0, #0
 8008390:	d105      	bne.n	800839e <_svfiprintf_r+0x32>
 8008392:	230c      	movs	r3, #12
 8008394:	9a03      	ldr	r2, [sp, #12]
 8008396:	3801      	subs	r0, #1
 8008398:	6013      	str	r3, [r2, #0]
 800839a:	b021      	add	sp, #132	; 0x84
 800839c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800839e:	2340      	movs	r3, #64	; 0x40
 80083a0:	617b      	str	r3, [r7, #20]
 80083a2:	2300      	movs	r3, #0
 80083a4:	ac08      	add	r4, sp, #32
 80083a6:	6163      	str	r3, [r4, #20]
 80083a8:	3320      	adds	r3, #32
 80083aa:	7663      	strb	r3, [r4, #25]
 80083ac:	3310      	adds	r3, #16
 80083ae:	76a3      	strb	r3, [r4, #26]
 80083b0:	9507      	str	r5, [sp, #28]
 80083b2:	0035      	movs	r5, r6
 80083b4:	782b      	ldrb	r3, [r5, #0]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d001      	beq.n	80083be <_svfiprintf_r+0x52>
 80083ba:	2b25      	cmp	r3, #37	; 0x25
 80083bc:	d147      	bne.n	800844e <_svfiprintf_r+0xe2>
 80083be:	1bab      	subs	r3, r5, r6
 80083c0:	9305      	str	r3, [sp, #20]
 80083c2:	42b5      	cmp	r5, r6
 80083c4:	d00c      	beq.n	80083e0 <_svfiprintf_r+0x74>
 80083c6:	0032      	movs	r2, r6
 80083c8:	0039      	movs	r1, r7
 80083ca:	9803      	ldr	r0, [sp, #12]
 80083cc:	f7ff ff6c 	bl	80082a8 <__ssputs_r>
 80083d0:	1c43      	adds	r3, r0, #1
 80083d2:	d100      	bne.n	80083d6 <_svfiprintf_r+0x6a>
 80083d4:	e0ae      	b.n	8008534 <_svfiprintf_r+0x1c8>
 80083d6:	6962      	ldr	r2, [r4, #20]
 80083d8:	9b05      	ldr	r3, [sp, #20]
 80083da:	4694      	mov	ip, r2
 80083dc:	4463      	add	r3, ip
 80083de:	6163      	str	r3, [r4, #20]
 80083e0:	782b      	ldrb	r3, [r5, #0]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d100      	bne.n	80083e8 <_svfiprintf_r+0x7c>
 80083e6:	e0a5      	b.n	8008534 <_svfiprintf_r+0x1c8>
 80083e8:	2201      	movs	r2, #1
 80083ea:	2300      	movs	r3, #0
 80083ec:	4252      	negs	r2, r2
 80083ee:	6062      	str	r2, [r4, #4]
 80083f0:	a904      	add	r1, sp, #16
 80083f2:	3254      	adds	r2, #84	; 0x54
 80083f4:	1852      	adds	r2, r2, r1
 80083f6:	1c6e      	adds	r6, r5, #1
 80083f8:	6023      	str	r3, [r4, #0]
 80083fa:	60e3      	str	r3, [r4, #12]
 80083fc:	60a3      	str	r3, [r4, #8]
 80083fe:	7013      	strb	r3, [r2, #0]
 8008400:	65a3      	str	r3, [r4, #88]	; 0x58
 8008402:	2205      	movs	r2, #5
 8008404:	7831      	ldrb	r1, [r6, #0]
 8008406:	4854      	ldr	r0, [pc, #336]	; (8008558 <_svfiprintf_r+0x1ec>)
 8008408:	f7ff fa90 	bl	800792c <memchr>
 800840c:	1c75      	adds	r5, r6, #1
 800840e:	2800      	cmp	r0, #0
 8008410:	d11f      	bne.n	8008452 <_svfiprintf_r+0xe6>
 8008412:	6822      	ldr	r2, [r4, #0]
 8008414:	06d3      	lsls	r3, r2, #27
 8008416:	d504      	bpl.n	8008422 <_svfiprintf_r+0xb6>
 8008418:	2353      	movs	r3, #83	; 0x53
 800841a:	a904      	add	r1, sp, #16
 800841c:	185b      	adds	r3, r3, r1
 800841e:	2120      	movs	r1, #32
 8008420:	7019      	strb	r1, [r3, #0]
 8008422:	0713      	lsls	r3, r2, #28
 8008424:	d504      	bpl.n	8008430 <_svfiprintf_r+0xc4>
 8008426:	2353      	movs	r3, #83	; 0x53
 8008428:	a904      	add	r1, sp, #16
 800842a:	185b      	adds	r3, r3, r1
 800842c:	212b      	movs	r1, #43	; 0x2b
 800842e:	7019      	strb	r1, [r3, #0]
 8008430:	7833      	ldrb	r3, [r6, #0]
 8008432:	2b2a      	cmp	r3, #42	; 0x2a
 8008434:	d016      	beq.n	8008464 <_svfiprintf_r+0xf8>
 8008436:	0035      	movs	r5, r6
 8008438:	2100      	movs	r1, #0
 800843a:	200a      	movs	r0, #10
 800843c:	68e3      	ldr	r3, [r4, #12]
 800843e:	782a      	ldrb	r2, [r5, #0]
 8008440:	1c6e      	adds	r6, r5, #1
 8008442:	3a30      	subs	r2, #48	; 0x30
 8008444:	2a09      	cmp	r2, #9
 8008446:	d94e      	bls.n	80084e6 <_svfiprintf_r+0x17a>
 8008448:	2900      	cmp	r1, #0
 800844a:	d111      	bne.n	8008470 <_svfiprintf_r+0x104>
 800844c:	e017      	b.n	800847e <_svfiprintf_r+0x112>
 800844e:	3501      	adds	r5, #1
 8008450:	e7b0      	b.n	80083b4 <_svfiprintf_r+0x48>
 8008452:	4b41      	ldr	r3, [pc, #260]	; (8008558 <_svfiprintf_r+0x1ec>)
 8008454:	6822      	ldr	r2, [r4, #0]
 8008456:	1ac0      	subs	r0, r0, r3
 8008458:	2301      	movs	r3, #1
 800845a:	4083      	lsls	r3, r0
 800845c:	4313      	orrs	r3, r2
 800845e:	002e      	movs	r6, r5
 8008460:	6023      	str	r3, [r4, #0]
 8008462:	e7ce      	b.n	8008402 <_svfiprintf_r+0x96>
 8008464:	9b07      	ldr	r3, [sp, #28]
 8008466:	1d19      	adds	r1, r3, #4
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	9107      	str	r1, [sp, #28]
 800846c:	2b00      	cmp	r3, #0
 800846e:	db01      	blt.n	8008474 <_svfiprintf_r+0x108>
 8008470:	930b      	str	r3, [sp, #44]	; 0x2c
 8008472:	e004      	b.n	800847e <_svfiprintf_r+0x112>
 8008474:	425b      	negs	r3, r3
 8008476:	60e3      	str	r3, [r4, #12]
 8008478:	2302      	movs	r3, #2
 800847a:	4313      	orrs	r3, r2
 800847c:	6023      	str	r3, [r4, #0]
 800847e:	782b      	ldrb	r3, [r5, #0]
 8008480:	2b2e      	cmp	r3, #46	; 0x2e
 8008482:	d10a      	bne.n	800849a <_svfiprintf_r+0x12e>
 8008484:	786b      	ldrb	r3, [r5, #1]
 8008486:	2b2a      	cmp	r3, #42	; 0x2a
 8008488:	d135      	bne.n	80084f6 <_svfiprintf_r+0x18a>
 800848a:	9b07      	ldr	r3, [sp, #28]
 800848c:	3502      	adds	r5, #2
 800848e:	1d1a      	adds	r2, r3, #4
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	9207      	str	r2, [sp, #28]
 8008494:	2b00      	cmp	r3, #0
 8008496:	db2b      	blt.n	80084f0 <_svfiprintf_r+0x184>
 8008498:	9309      	str	r3, [sp, #36]	; 0x24
 800849a:	4e30      	ldr	r6, [pc, #192]	; (800855c <_svfiprintf_r+0x1f0>)
 800849c:	2203      	movs	r2, #3
 800849e:	0030      	movs	r0, r6
 80084a0:	7829      	ldrb	r1, [r5, #0]
 80084a2:	f7ff fa43 	bl	800792c <memchr>
 80084a6:	2800      	cmp	r0, #0
 80084a8:	d006      	beq.n	80084b8 <_svfiprintf_r+0x14c>
 80084aa:	2340      	movs	r3, #64	; 0x40
 80084ac:	1b80      	subs	r0, r0, r6
 80084ae:	4083      	lsls	r3, r0
 80084b0:	6822      	ldr	r2, [r4, #0]
 80084b2:	3501      	adds	r5, #1
 80084b4:	4313      	orrs	r3, r2
 80084b6:	6023      	str	r3, [r4, #0]
 80084b8:	7829      	ldrb	r1, [r5, #0]
 80084ba:	2206      	movs	r2, #6
 80084bc:	4828      	ldr	r0, [pc, #160]	; (8008560 <_svfiprintf_r+0x1f4>)
 80084be:	1c6e      	adds	r6, r5, #1
 80084c0:	7621      	strb	r1, [r4, #24]
 80084c2:	f7ff fa33 	bl	800792c <memchr>
 80084c6:	2800      	cmp	r0, #0
 80084c8:	d03c      	beq.n	8008544 <_svfiprintf_r+0x1d8>
 80084ca:	4b26      	ldr	r3, [pc, #152]	; (8008564 <_svfiprintf_r+0x1f8>)
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d125      	bne.n	800851c <_svfiprintf_r+0x1b0>
 80084d0:	2207      	movs	r2, #7
 80084d2:	9b07      	ldr	r3, [sp, #28]
 80084d4:	3307      	adds	r3, #7
 80084d6:	4393      	bics	r3, r2
 80084d8:	3308      	adds	r3, #8
 80084da:	9307      	str	r3, [sp, #28]
 80084dc:	6963      	ldr	r3, [r4, #20]
 80084de:	9a04      	ldr	r2, [sp, #16]
 80084e0:	189b      	adds	r3, r3, r2
 80084e2:	6163      	str	r3, [r4, #20]
 80084e4:	e765      	b.n	80083b2 <_svfiprintf_r+0x46>
 80084e6:	4343      	muls	r3, r0
 80084e8:	0035      	movs	r5, r6
 80084ea:	2101      	movs	r1, #1
 80084ec:	189b      	adds	r3, r3, r2
 80084ee:	e7a6      	b.n	800843e <_svfiprintf_r+0xd2>
 80084f0:	2301      	movs	r3, #1
 80084f2:	425b      	negs	r3, r3
 80084f4:	e7d0      	b.n	8008498 <_svfiprintf_r+0x12c>
 80084f6:	2300      	movs	r3, #0
 80084f8:	200a      	movs	r0, #10
 80084fa:	001a      	movs	r2, r3
 80084fc:	3501      	adds	r5, #1
 80084fe:	6063      	str	r3, [r4, #4]
 8008500:	7829      	ldrb	r1, [r5, #0]
 8008502:	1c6e      	adds	r6, r5, #1
 8008504:	3930      	subs	r1, #48	; 0x30
 8008506:	2909      	cmp	r1, #9
 8008508:	d903      	bls.n	8008512 <_svfiprintf_r+0x1a6>
 800850a:	2b00      	cmp	r3, #0
 800850c:	d0c5      	beq.n	800849a <_svfiprintf_r+0x12e>
 800850e:	9209      	str	r2, [sp, #36]	; 0x24
 8008510:	e7c3      	b.n	800849a <_svfiprintf_r+0x12e>
 8008512:	4342      	muls	r2, r0
 8008514:	0035      	movs	r5, r6
 8008516:	2301      	movs	r3, #1
 8008518:	1852      	adds	r2, r2, r1
 800851a:	e7f1      	b.n	8008500 <_svfiprintf_r+0x194>
 800851c:	ab07      	add	r3, sp, #28
 800851e:	9300      	str	r3, [sp, #0]
 8008520:	003a      	movs	r2, r7
 8008522:	0021      	movs	r1, r4
 8008524:	4b10      	ldr	r3, [pc, #64]	; (8008568 <_svfiprintf_r+0x1fc>)
 8008526:	9803      	ldr	r0, [sp, #12]
 8008528:	f7fd ff68 	bl	80063fc <_printf_float>
 800852c:	9004      	str	r0, [sp, #16]
 800852e:	9b04      	ldr	r3, [sp, #16]
 8008530:	3301      	adds	r3, #1
 8008532:	d1d3      	bne.n	80084dc <_svfiprintf_r+0x170>
 8008534:	89bb      	ldrh	r3, [r7, #12]
 8008536:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008538:	065b      	lsls	r3, r3, #25
 800853a:	d400      	bmi.n	800853e <_svfiprintf_r+0x1d2>
 800853c:	e72d      	b.n	800839a <_svfiprintf_r+0x2e>
 800853e:	2001      	movs	r0, #1
 8008540:	4240      	negs	r0, r0
 8008542:	e72a      	b.n	800839a <_svfiprintf_r+0x2e>
 8008544:	ab07      	add	r3, sp, #28
 8008546:	9300      	str	r3, [sp, #0]
 8008548:	003a      	movs	r2, r7
 800854a:	0021      	movs	r1, r4
 800854c:	4b06      	ldr	r3, [pc, #24]	; (8008568 <_svfiprintf_r+0x1fc>)
 800854e:	9803      	ldr	r0, [sp, #12]
 8008550:	f7fe fa06 	bl	8006960 <_printf_i>
 8008554:	e7ea      	b.n	800852c <_svfiprintf_r+0x1c0>
 8008556:	46c0      	nop			; (mov r8, r8)
 8008558:	080095ec 	.word	0x080095ec
 800855c:	080095f2 	.word	0x080095f2
 8008560:	080095f6 	.word	0x080095f6
 8008564:	080063fd 	.word	0x080063fd
 8008568:	080082a9 	.word	0x080082a9

0800856c <_sbrk_r>:
 800856c:	2300      	movs	r3, #0
 800856e:	b570      	push	{r4, r5, r6, lr}
 8008570:	4d06      	ldr	r5, [pc, #24]	; (800858c <_sbrk_r+0x20>)
 8008572:	0004      	movs	r4, r0
 8008574:	0008      	movs	r0, r1
 8008576:	602b      	str	r3, [r5, #0]
 8008578:	f7fa fe36 	bl	80031e8 <_sbrk>
 800857c:	1c43      	adds	r3, r0, #1
 800857e:	d103      	bne.n	8008588 <_sbrk_r+0x1c>
 8008580:	682b      	ldr	r3, [r5, #0]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d000      	beq.n	8008588 <_sbrk_r+0x1c>
 8008586:	6023      	str	r3, [r4, #0]
 8008588:	bd70      	pop	{r4, r5, r6, pc}
 800858a:	46c0      	nop			; (mov r8, r8)
 800858c:	20000700 	.word	0x20000700

08008590 <__assert_func>:
 8008590:	b530      	push	{r4, r5, lr}
 8008592:	0014      	movs	r4, r2
 8008594:	001a      	movs	r2, r3
 8008596:	4b09      	ldr	r3, [pc, #36]	; (80085bc <__assert_func+0x2c>)
 8008598:	0005      	movs	r5, r0
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	b085      	sub	sp, #20
 800859e:	68d8      	ldr	r0, [r3, #12]
 80085a0:	4b07      	ldr	r3, [pc, #28]	; (80085c0 <__assert_func+0x30>)
 80085a2:	2c00      	cmp	r4, #0
 80085a4:	d101      	bne.n	80085aa <__assert_func+0x1a>
 80085a6:	4b07      	ldr	r3, [pc, #28]	; (80085c4 <__assert_func+0x34>)
 80085a8:	001c      	movs	r4, r3
 80085aa:	9301      	str	r3, [sp, #4]
 80085ac:	9100      	str	r1, [sp, #0]
 80085ae:	002b      	movs	r3, r5
 80085b0:	4905      	ldr	r1, [pc, #20]	; (80085c8 <__assert_func+0x38>)
 80085b2:	9402      	str	r4, [sp, #8]
 80085b4:	f000 f80a 	bl	80085cc <fiprintf>
 80085b8:	f000 faba 	bl	8008b30 <abort>
 80085bc:	2000000c 	.word	0x2000000c
 80085c0:	080095fd 	.word	0x080095fd
 80085c4:	08009638 	.word	0x08009638
 80085c8:	0800960a 	.word	0x0800960a

080085cc <fiprintf>:
 80085cc:	b40e      	push	{r1, r2, r3}
 80085ce:	b503      	push	{r0, r1, lr}
 80085d0:	0001      	movs	r1, r0
 80085d2:	ab03      	add	r3, sp, #12
 80085d4:	4804      	ldr	r0, [pc, #16]	; (80085e8 <fiprintf+0x1c>)
 80085d6:	cb04      	ldmia	r3!, {r2}
 80085d8:	6800      	ldr	r0, [r0, #0]
 80085da:	9301      	str	r3, [sp, #4]
 80085dc:	f000 f892 	bl	8008704 <_vfiprintf_r>
 80085e0:	b002      	add	sp, #8
 80085e2:	bc08      	pop	{r3}
 80085e4:	b003      	add	sp, #12
 80085e6:	4718      	bx	r3
 80085e8:	2000000c 	.word	0x2000000c

080085ec <__ascii_mbtowc>:
 80085ec:	b082      	sub	sp, #8
 80085ee:	2900      	cmp	r1, #0
 80085f0:	d100      	bne.n	80085f4 <__ascii_mbtowc+0x8>
 80085f2:	a901      	add	r1, sp, #4
 80085f4:	1e10      	subs	r0, r2, #0
 80085f6:	d006      	beq.n	8008606 <__ascii_mbtowc+0x1a>
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d006      	beq.n	800860a <__ascii_mbtowc+0x1e>
 80085fc:	7813      	ldrb	r3, [r2, #0]
 80085fe:	600b      	str	r3, [r1, #0]
 8008600:	7810      	ldrb	r0, [r2, #0]
 8008602:	1e43      	subs	r3, r0, #1
 8008604:	4198      	sbcs	r0, r3
 8008606:	b002      	add	sp, #8
 8008608:	4770      	bx	lr
 800860a:	2002      	movs	r0, #2
 800860c:	4240      	negs	r0, r0
 800860e:	e7fa      	b.n	8008606 <__ascii_mbtowc+0x1a>

08008610 <memmove>:
 8008610:	b510      	push	{r4, lr}
 8008612:	4288      	cmp	r0, r1
 8008614:	d902      	bls.n	800861c <memmove+0xc>
 8008616:	188b      	adds	r3, r1, r2
 8008618:	4298      	cmp	r0, r3
 800861a:	d303      	bcc.n	8008624 <memmove+0x14>
 800861c:	2300      	movs	r3, #0
 800861e:	e007      	b.n	8008630 <memmove+0x20>
 8008620:	5c8b      	ldrb	r3, [r1, r2]
 8008622:	5483      	strb	r3, [r0, r2]
 8008624:	3a01      	subs	r2, #1
 8008626:	d2fb      	bcs.n	8008620 <memmove+0x10>
 8008628:	bd10      	pop	{r4, pc}
 800862a:	5ccc      	ldrb	r4, [r1, r3]
 800862c:	54c4      	strb	r4, [r0, r3]
 800862e:	3301      	adds	r3, #1
 8008630:	429a      	cmp	r2, r3
 8008632:	d1fa      	bne.n	800862a <memmove+0x1a>
 8008634:	e7f8      	b.n	8008628 <memmove+0x18>
	...

08008638 <__malloc_lock>:
 8008638:	b510      	push	{r4, lr}
 800863a:	4802      	ldr	r0, [pc, #8]	; (8008644 <__malloc_lock+0xc>)
 800863c:	f000 fc4f 	bl	8008ede <__retarget_lock_acquire_recursive>
 8008640:	bd10      	pop	{r4, pc}
 8008642:	46c0      	nop			; (mov r8, r8)
 8008644:	20000704 	.word	0x20000704

08008648 <__malloc_unlock>:
 8008648:	b510      	push	{r4, lr}
 800864a:	4802      	ldr	r0, [pc, #8]	; (8008654 <__malloc_unlock+0xc>)
 800864c:	f000 fc48 	bl	8008ee0 <__retarget_lock_release_recursive>
 8008650:	bd10      	pop	{r4, pc}
 8008652:	46c0      	nop			; (mov r8, r8)
 8008654:	20000704 	.word	0x20000704

08008658 <_realloc_r>:
 8008658:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800865a:	0007      	movs	r7, r0
 800865c:	000e      	movs	r6, r1
 800865e:	0014      	movs	r4, r2
 8008660:	2900      	cmp	r1, #0
 8008662:	d105      	bne.n	8008670 <_realloc_r+0x18>
 8008664:	0011      	movs	r1, r2
 8008666:	f7ff fda9 	bl	80081bc <_malloc_r>
 800866a:	0005      	movs	r5, r0
 800866c:	0028      	movs	r0, r5
 800866e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008670:	2a00      	cmp	r2, #0
 8008672:	d103      	bne.n	800867c <_realloc_r+0x24>
 8008674:	f7ff fd36 	bl	80080e4 <_free_r>
 8008678:	0025      	movs	r5, r4
 800867a:	e7f7      	b.n	800866c <_realloc_r+0x14>
 800867c:	f000 fc9e 	bl	8008fbc <_malloc_usable_size_r>
 8008680:	9001      	str	r0, [sp, #4]
 8008682:	4284      	cmp	r4, r0
 8008684:	d803      	bhi.n	800868e <_realloc_r+0x36>
 8008686:	0035      	movs	r5, r6
 8008688:	0843      	lsrs	r3, r0, #1
 800868a:	42a3      	cmp	r3, r4
 800868c:	d3ee      	bcc.n	800866c <_realloc_r+0x14>
 800868e:	0021      	movs	r1, r4
 8008690:	0038      	movs	r0, r7
 8008692:	f7ff fd93 	bl	80081bc <_malloc_r>
 8008696:	1e05      	subs	r5, r0, #0
 8008698:	d0e8      	beq.n	800866c <_realloc_r+0x14>
 800869a:	9b01      	ldr	r3, [sp, #4]
 800869c:	0022      	movs	r2, r4
 800869e:	429c      	cmp	r4, r3
 80086a0:	d900      	bls.n	80086a4 <_realloc_r+0x4c>
 80086a2:	001a      	movs	r2, r3
 80086a4:	0031      	movs	r1, r6
 80086a6:	0028      	movs	r0, r5
 80086a8:	f7ff f94b 	bl	8007942 <memcpy>
 80086ac:	0031      	movs	r1, r6
 80086ae:	0038      	movs	r0, r7
 80086b0:	f7ff fd18 	bl	80080e4 <_free_r>
 80086b4:	e7da      	b.n	800866c <_realloc_r+0x14>

080086b6 <__sfputc_r>:
 80086b6:	6893      	ldr	r3, [r2, #8]
 80086b8:	b510      	push	{r4, lr}
 80086ba:	3b01      	subs	r3, #1
 80086bc:	6093      	str	r3, [r2, #8]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	da04      	bge.n	80086cc <__sfputc_r+0x16>
 80086c2:	6994      	ldr	r4, [r2, #24]
 80086c4:	42a3      	cmp	r3, r4
 80086c6:	db07      	blt.n	80086d8 <__sfputc_r+0x22>
 80086c8:	290a      	cmp	r1, #10
 80086ca:	d005      	beq.n	80086d8 <__sfputc_r+0x22>
 80086cc:	6813      	ldr	r3, [r2, #0]
 80086ce:	1c58      	adds	r0, r3, #1
 80086d0:	6010      	str	r0, [r2, #0]
 80086d2:	7019      	strb	r1, [r3, #0]
 80086d4:	0008      	movs	r0, r1
 80086d6:	bd10      	pop	{r4, pc}
 80086d8:	f000 f94e 	bl	8008978 <__swbuf_r>
 80086dc:	0001      	movs	r1, r0
 80086de:	e7f9      	b.n	80086d4 <__sfputc_r+0x1e>

080086e0 <__sfputs_r>:
 80086e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086e2:	0006      	movs	r6, r0
 80086e4:	000f      	movs	r7, r1
 80086e6:	0014      	movs	r4, r2
 80086e8:	18d5      	adds	r5, r2, r3
 80086ea:	42ac      	cmp	r4, r5
 80086ec:	d101      	bne.n	80086f2 <__sfputs_r+0x12>
 80086ee:	2000      	movs	r0, #0
 80086f0:	e007      	b.n	8008702 <__sfputs_r+0x22>
 80086f2:	7821      	ldrb	r1, [r4, #0]
 80086f4:	003a      	movs	r2, r7
 80086f6:	0030      	movs	r0, r6
 80086f8:	f7ff ffdd 	bl	80086b6 <__sfputc_r>
 80086fc:	3401      	adds	r4, #1
 80086fe:	1c43      	adds	r3, r0, #1
 8008700:	d1f3      	bne.n	80086ea <__sfputs_r+0xa>
 8008702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008704 <_vfiprintf_r>:
 8008704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008706:	b0a1      	sub	sp, #132	; 0x84
 8008708:	0006      	movs	r6, r0
 800870a:	000c      	movs	r4, r1
 800870c:	001f      	movs	r7, r3
 800870e:	9203      	str	r2, [sp, #12]
 8008710:	2800      	cmp	r0, #0
 8008712:	d004      	beq.n	800871e <_vfiprintf_r+0x1a>
 8008714:	6983      	ldr	r3, [r0, #24]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d101      	bne.n	800871e <_vfiprintf_r+0x1a>
 800871a:	f000 fb3f 	bl	8008d9c <__sinit>
 800871e:	4b8e      	ldr	r3, [pc, #568]	; (8008958 <_vfiprintf_r+0x254>)
 8008720:	429c      	cmp	r4, r3
 8008722:	d11c      	bne.n	800875e <_vfiprintf_r+0x5a>
 8008724:	6874      	ldr	r4, [r6, #4]
 8008726:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008728:	07db      	lsls	r3, r3, #31
 800872a:	d405      	bmi.n	8008738 <_vfiprintf_r+0x34>
 800872c:	89a3      	ldrh	r3, [r4, #12]
 800872e:	059b      	lsls	r3, r3, #22
 8008730:	d402      	bmi.n	8008738 <_vfiprintf_r+0x34>
 8008732:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008734:	f000 fbd3 	bl	8008ede <__retarget_lock_acquire_recursive>
 8008738:	89a3      	ldrh	r3, [r4, #12]
 800873a:	071b      	lsls	r3, r3, #28
 800873c:	d502      	bpl.n	8008744 <_vfiprintf_r+0x40>
 800873e:	6923      	ldr	r3, [r4, #16]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d11d      	bne.n	8008780 <_vfiprintf_r+0x7c>
 8008744:	0021      	movs	r1, r4
 8008746:	0030      	movs	r0, r6
 8008748:	f000 f97a 	bl	8008a40 <__swsetup_r>
 800874c:	2800      	cmp	r0, #0
 800874e:	d017      	beq.n	8008780 <_vfiprintf_r+0x7c>
 8008750:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008752:	07db      	lsls	r3, r3, #31
 8008754:	d50d      	bpl.n	8008772 <_vfiprintf_r+0x6e>
 8008756:	2001      	movs	r0, #1
 8008758:	4240      	negs	r0, r0
 800875a:	b021      	add	sp, #132	; 0x84
 800875c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800875e:	4b7f      	ldr	r3, [pc, #508]	; (800895c <_vfiprintf_r+0x258>)
 8008760:	429c      	cmp	r4, r3
 8008762:	d101      	bne.n	8008768 <_vfiprintf_r+0x64>
 8008764:	68b4      	ldr	r4, [r6, #8]
 8008766:	e7de      	b.n	8008726 <_vfiprintf_r+0x22>
 8008768:	4b7d      	ldr	r3, [pc, #500]	; (8008960 <_vfiprintf_r+0x25c>)
 800876a:	429c      	cmp	r4, r3
 800876c:	d1db      	bne.n	8008726 <_vfiprintf_r+0x22>
 800876e:	68f4      	ldr	r4, [r6, #12]
 8008770:	e7d9      	b.n	8008726 <_vfiprintf_r+0x22>
 8008772:	89a3      	ldrh	r3, [r4, #12]
 8008774:	059b      	lsls	r3, r3, #22
 8008776:	d4ee      	bmi.n	8008756 <_vfiprintf_r+0x52>
 8008778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800877a:	f000 fbb1 	bl	8008ee0 <__retarget_lock_release_recursive>
 800877e:	e7ea      	b.n	8008756 <_vfiprintf_r+0x52>
 8008780:	2300      	movs	r3, #0
 8008782:	ad08      	add	r5, sp, #32
 8008784:	616b      	str	r3, [r5, #20]
 8008786:	3320      	adds	r3, #32
 8008788:	766b      	strb	r3, [r5, #25]
 800878a:	3310      	adds	r3, #16
 800878c:	76ab      	strb	r3, [r5, #26]
 800878e:	9707      	str	r7, [sp, #28]
 8008790:	9f03      	ldr	r7, [sp, #12]
 8008792:	783b      	ldrb	r3, [r7, #0]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d001      	beq.n	800879c <_vfiprintf_r+0x98>
 8008798:	2b25      	cmp	r3, #37	; 0x25
 800879a:	d14e      	bne.n	800883a <_vfiprintf_r+0x136>
 800879c:	9b03      	ldr	r3, [sp, #12]
 800879e:	1afb      	subs	r3, r7, r3
 80087a0:	9305      	str	r3, [sp, #20]
 80087a2:	9b03      	ldr	r3, [sp, #12]
 80087a4:	429f      	cmp	r7, r3
 80087a6:	d00d      	beq.n	80087c4 <_vfiprintf_r+0xc0>
 80087a8:	9b05      	ldr	r3, [sp, #20]
 80087aa:	0021      	movs	r1, r4
 80087ac:	0030      	movs	r0, r6
 80087ae:	9a03      	ldr	r2, [sp, #12]
 80087b0:	f7ff ff96 	bl	80086e0 <__sfputs_r>
 80087b4:	1c43      	adds	r3, r0, #1
 80087b6:	d100      	bne.n	80087ba <_vfiprintf_r+0xb6>
 80087b8:	e0b5      	b.n	8008926 <_vfiprintf_r+0x222>
 80087ba:	696a      	ldr	r2, [r5, #20]
 80087bc:	9b05      	ldr	r3, [sp, #20]
 80087be:	4694      	mov	ip, r2
 80087c0:	4463      	add	r3, ip
 80087c2:	616b      	str	r3, [r5, #20]
 80087c4:	783b      	ldrb	r3, [r7, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d100      	bne.n	80087cc <_vfiprintf_r+0xc8>
 80087ca:	e0ac      	b.n	8008926 <_vfiprintf_r+0x222>
 80087cc:	2201      	movs	r2, #1
 80087ce:	1c7b      	adds	r3, r7, #1
 80087d0:	9303      	str	r3, [sp, #12]
 80087d2:	2300      	movs	r3, #0
 80087d4:	4252      	negs	r2, r2
 80087d6:	606a      	str	r2, [r5, #4]
 80087d8:	a904      	add	r1, sp, #16
 80087da:	3254      	adds	r2, #84	; 0x54
 80087dc:	1852      	adds	r2, r2, r1
 80087de:	602b      	str	r3, [r5, #0]
 80087e0:	60eb      	str	r3, [r5, #12]
 80087e2:	60ab      	str	r3, [r5, #8]
 80087e4:	7013      	strb	r3, [r2, #0]
 80087e6:	65ab      	str	r3, [r5, #88]	; 0x58
 80087e8:	9b03      	ldr	r3, [sp, #12]
 80087ea:	2205      	movs	r2, #5
 80087ec:	7819      	ldrb	r1, [r3, #0]
 80087ee:	485d      	ldr	r0, [pc, #372]	; (8008964 <_vfiprintf_r+0x260>)
 80087f0:	f7ff f89c 	bl	800792c <memchr>
 80087f4:	9b03      	ldr	r3, [sp, #12]
 80087f6:	1c5f      	adds	r7, r3, #1
 80087f8:	2800      	cmp	r0, #0
 80087fa:	d120      	bne.n	800883e <_vfiprintf_r+0x13a>
 80087fc:	682a      	ldr	r2, [r5, #0]
 80087fe:	06d3      	lsls	r3, r2, #27
 8008800:	d504      	bpl.n	800880c <_vfiprintf_r+0x108>
 8008802:	2353      	movs	r3, #83	; 0x53
 8008804:	a904      	add	r1, sp, #16
 8008806:	185b      	adds	r3, r3, r1
 8008808:	2120      	movs	r1, #32
 800880a:	7019      	strb	r1, [r3, #0]
 800880c:	0713      	lsls	r3, r2, #28
 800880e:	d504      	bpl.n	800881a <_vfiprintf_r+0x116>
 8008810:	2353      	movs	r3, #83	; 0x53
 8008812:	a904      	add	r1, sp, #16
 8008814:	185b      	adds	r3, r3, r1
 8008816:	212b      	movs	r1, #43	; 0x2b
 8008818:	7019      	strb	r1, [r3, #0]
 800881a:	9b03      	ldr	r3, [sp, #12]
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	2b2a      	cmp	r3, #42	; 0x2a
 8008820:	d016      	beq.n	8008850 <_vfiprintf_r+0x14c>
 8008822:	2100      	movs	r1, #0
 8008824:	68eb      	ldr	r3, [r5, #12]
 8008826:	9f03      	ldr	r7, [sp, #12]
 8008828:	783a      	ldrb	r2, [r7, #0]
 800882a:	1c78      	adds	r0, r7, #1
 800882c:	3a30      	subs	r2, #48	; 0x30
 800882e:	4684      	mov	ip, r0
 8008830:	2a09      	cmp	r2, #9
 8008832:	d94f      	bls.n	80088d4 <_vfiprintf_r+0x1d0>
 8008834:	2900      	cmp	r1, #0
 8008836:	d111      	bne.n	800885c <_vfiprintf_r+0x158>
 8008838:	e017      	b.n	800886a <_vfiprintf_r+0x166>
 800883a:	3701      	adds	r7, #1
 800883c:	e7a9      	b.n	8008792 <_vfiprintf_r+0x8e>
 800883e:	4b49      	ldr	r3, [pc, #292]	; (8008964 <_vfiprintf_r+0x260>)
 8008840:	682a      	ldr	r2, [r5, #0]
 8008842:	1ac0      	subs	r0, r0, r3
 8008844:	2301      	movs	r3, #1
 8008846:	4083      	lsls	r3, r0
 8008848:	4313      	orrs	r3, r2
 800884a:	602b      	str	r3, [r5, #0]
 800884c:	9703      	str	r7, [sp, #12]
 800884e:	e7cb      	b.n	80087e8 <_vfiprintf_r+0xe4>
 8008850:	9b07      	ldr	r3, [sp, #28]
 8008852:	1d19      	adds	r1, r3, #4
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	9107      	str	r1, [sp, #28]
 8008858:	2b00      	cmp	r3, #0
 800885a:	db01      	blt.n	8008860 <_vfiprintf_r+0x15c>
 800885c:	930b      	str	r3, [sp, #44]	; 0x2c
 800885e:	e004      	b.n	800886a <_vfiprintf_r+0x166>
 8008860:	425b      	negs	r3, r3
 8008862:	60eb      	str	r3, [r5, #12]
 8008864:	2302      	movs	r3, #2
 8008866:	4313      	orrs	r3, r2
 8008868:	602b      	str	r3, [r5, #0]
 800886a:	783b      	ldrb	r3, [r7, #0]
 800886c:	2b2e      	cmp	r3, #46	; 0x2e
 800886e:	d10a      	bne.n	8008886 <_vfiprintf_r+0x182>
 8008870:	787b      	ldrb	r3, [r7, #1]
 8008872:	2b2a      	cmp	r3, #42	; 0x2a
 8008874:	d137      	bne.n	80088e6 <_vfiprintf_r+0x1e2>
 8008876:	9b07      	ldr	r3, [sp, #28]
 8008878:	3702      	adds	r7, #2
 800887a:	1d1a      	adds	r2, r3, #4
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	9207      	str	r2, [sp, #28]
 8008880:	2b00      	cmp	r3, #0
 8008882:	db2d      	blt.n	80088e0 <_vfiprintf_r+0x1dc>
 8008884:	9309      	str	r3, [sp, #36]	; 0x24
 8008886:	2203      	movs	r2, #3
 8008888:	7839      	ldrb	r1, [r7, #0]
 800888a:	4837      	ldr	r0, [pc, #220]	; (8008968 <_vfiprintf_r+0x264>)
 800888c:	f7ff f84e 	bl	800792c <memchr>
 8008890:	2800      	cmp	r0, #0
 8008892:	d007      	beq.n	80088a4 <_vfiprintf_r+0x1a0>
 8008894:	4b34      	ldr	r3, [pc, #208]	; (8008968 <_vfiprintf_r+0x264>)
 8008896:	682a      	ldr	r2, [r5, #0]
 8008898:	1ac0      	subs	r0, r0, r3
 800889a:	2340      	movs	r3, #64	; 0x40
 800889c:	4083      	lsls	r3, r0
 800889e:	4313      	orrs	r3, r2
 80088a0:	3701      	adds	r7, #1
 80088a2:	602b      	str	r3, [r5, #0]
 80088a4:	7839      	ldrb	r1, [r7, #0]
 80088a6:	1c7b      	adds	r3, r7, #1
 80088a8:	2206      	movs	r2, #6
 80088aa:	4830      	ldr	r0, [pc, #192]	; (800896c <_vfiprintf_r+0x268>)
 80088ac:	9303      	str	r3, [sp, #12]
 80088ae:	7629      	strb	r1, [r5, #24]
 80088b0:	f7ff f83c 	bl	800792c <memchr>
 80088b4:	2800      	cmp	r0, #0
 80088b6:	d045      	beq.n	8008944 <_vfiprintf_r+0x240>
 80088b8:	4b2d      	ldr	r3, [pc, #180]	; (8008970 <_vfiprintf_r+0x26c>)
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d127      	bne.n	800890e <_vfiprintf_r+0x20a>
 80088be:	2207      	movs	r2, #7
 80088c0:	9b07      	ldr	r3, [sp, #28]
 80088c2:	3307      	adds	r3, #7
 80088c4:	4393      	bics	r3, r2
 80088c6:	3308      	adds	r3, #8
 80088c8:	9307      	str	r3, [sp, #28]
 80088ca:	696b      	ldr	r3, [r5, #20]
 80088cc:	9a04      	ldr	r2, [sp, #16]
 80088ce:	189b      	adds	r3, r3, r2
 80088d0:	616b      	str	r3, [r5, #20]
 80088d2:	e75d      	b.n	8008790 <_vfiprintf_r+0x8c>
 80088d4:	210a      	movs	r1, #10
 80088d6:	434b      	muls	r3, r1
 80088d8:	4667      	mov	r7, ip
 80088da:	189b      	adds	r3, r3, r2
 80088dc:	3909      	subs	r1, #9
 80088de:	e7a3      	b.n	8008828 <_vfiprintf_r+0x124>
 80088e0:	2301      	movs	r3, #1
 80088e2:	425b      	negs	r3, r3
 80088e4:	e7ce      	b.n	8008884 <_vfiprintf_r+0x180>
 80088e6:	2300      	movs	r3, #0
 80088e8:	001a      	movs	r2, r3
 80088ea:	3701      	adds	r7, #1
 80088ec:	606b      	str	r3, [r5, #4]
 80088ee:	7839      	ldrb	r1, [r7, #0]
 80088f0:	1c78      	adds	r0, r7, #1
 80088f2:	3930      	subs	r1, #48	; 0x30
 80088f4:	4684      	mov	ip, r0
 80088f6:	2909      	cmp	r1, #9
 80088f8:	d903      	bls.n	8008902 <_vfiprintf_r+0x1fe>
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d0c3      	beq.n	8008886 <_vfiprintf_r+0x182>
 80088fe:	9209      	str	r2, [sp, #36]	; 0x24
 8008900:	e7c1      	b.n	8008886 <_vfiprintf_r+0x182>
 8008902:	230a      	movs	r3, #10
 8008904:	435a      	muls	r2, r3
 8008906:	4667      	mov	r7, ip
 8008908:	1852      	adds	r2, r2, r1
 800890a:	3b09      	subs	r3, #9
 800890c:	e7ef      	b.n	80088ee <_vfiprintf_r+0x1ea>
 800890e:	ab07      	add	r3, sp, #28
 8008910:	9300      	str	r3, [sp, #0]
 8008912:	0022      	movs	r2, r4
 8008914:	0029      	movs	r1, r5
 8008916:	0030      	movs	r0, r6
 8008918:	4b16      	ldr	r3, [pc, #88]	; (8008974 <_vfiprintf_r+0x270>)
 800891a:	f7fd fd6f 	bl	80063fc <_printf_float>
 800891e:	9004      	str	r0, [sp, #16]
 8008920:	9b04      	ldr	r3, [sp, #16]
 8008922:	3301      	adds	r3, #1
 8008924:	d1d1      	bne.n	80088ca <_vfiprintf_r+0x1c6>
 8008926:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008928:	07db      	lsls	r3, r3, #31
 800892a:	d405      	bmi.n	8008938 <_vfiprintf_r+0x234>
 800892c:	89a3      	ldrh	r3, [r4, #12]
 800892e:	059b      	lsls	r3, r3, #22
 8008930:	d402      	bmi.n	8008938 <_vfiprintf_r+0x234>
 8008932:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008934:	f000 fad4 	bl	8008ee0 <__retarget_lock_release_recursive>
 8008938:	89a3      	ldrh	r3, [r4, #12]
 800893a:	065b      	lsls	r3, r3, #25
 800893c:	d500      	bpl.n	8008940 <_vfiprintf_r+0x23c>
 800893e:	e70a      	b.n	8008756 <_vfiprintf_r+0x52>
 8008940:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008942:	e70a      	b.n	800875a <_vfiprintf_r+0x56>
 8008944:	ab07      	add	r3, sp, #28
 8008946:	9300      	str	r3, [sp, #0]
 8008948:	0022      	movs	r2, r4
 800894a:	0029      	movs	r1, r5
 800894c:	0030      	movs	r0, r6
 800894e:	4b09      	ldr	r3, [pc, #36]	; (8008974 <_vfiprintf_r+0x270>)
 8008950:	f7fe f806 	bl	8006960 <_printf_i>
 8008954:	e7e3      	b.n	800891e <_vfiprintf_r+0x21a>
 8008956:	46c0      	nop			; (mov r8, r8)
 8008958:	08009764 	.word	0x08009764
 800895c:	08009784 	.word	0x08009784
 8008960:	08009744 	.word	0x08009744
 8008964:	080095ec 	.word	0x080095ec
 8008968:	080095f2 	.word	0x080095f2
 800896c:	080095f6 	.word	0x080095f6
 8008970:	080063fd 	.word	0x080063fd
 8008974:	080086e1 	.word	0x080086e1

08008978 <__swbuf_r>:
 8008978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800897a:	0005      	movs	r5, r0
 800897c:	000e      	movs	r6, r1
 800897e:	0014      	movs	r4, r2
 8008980:	2800      	cmp	r0, #0
 8008982:	d004      	beq.n	800898e <__swbuf_r+0x16>
 8008984:	6983      	ldr	r3, [r0, #24]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d101      	bne.n	800898e <__swbuf_r+0x16>
 800898a:	f000 fa07 	bl	8008d9c <__sinit>
 800898e:	4b22      	ldr	r3, [pc, #136]	; (8008a18 <__swbuf_r+0xa0>)
 8008990:	429c      	cmp	r4, r3
 8008992:	d12e      	bne.n	80089f2 <__swbuf_r+0x7a>
 8008994:	686c      	ldr	r4, [r5, #4]
 8008996:	69a3      	ldr	r3, [r4, #24]
 8008998:	60a3      	str	r3, [r4, #8]
 800899a:	89a3      	ldrh	r3, [r4, #12]
 800899c:	071b      	lsls	r3, r3, #28
 800899e:	d532      	bpl.n	8008a06 <__swbuf_r+0x8e>
 80089a0:	6923      	ldr	r3, [r4, #16]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d02f      	beq.n	8008a06 <__swbuf_r+0x8e>
 80089a6:	6823      	ldr	r3, [r4, #0]
 80089a8:	6922      	ldr	r2, [r4, #16]
 80089aa:	b2f7      	uxtb	r7, r6
 80089ac:	1a98      	subs	r0, r3, r2
 80089ae:	6963      	ldr	r3, [r4, #20]
 80089b0:	b2f6      	uxtb	r6, r6
 80089b2:	4283      	cmp	r3, r0
 80089b4:	dc05      	bgt.n	80089c2 <__swbuf_r+0x4a>
 80089b6:	0021      	movs	r1, r4
 80089b8:	0028      	movs	r0, r5
 80089ba:	f000 f94d 	bl	8008c58 <_fflush_r>
 80089be:	2800      	cmp	r0, #0
 80089c0:	d127      	bne.n	8008a12 <__swbuf_r+0x9a>
 80089c2:	68a3      	ldr	r3, [r4, #8]
 80089c4:	3001      	adds	r0, #1
 80089c6:	3b01      	subs	r3, #1
 80089c8:	60a3      	str	r3, [r4, #8]
 80089ca:	6823      	ldr	r3, [r4, #0]
 80089cc:	1c5a      	adds	r2, r3, #1
 80089ce:	6022      	str	r2, [r4, #0]
 80089d0:	701f      	strb	r7, [r3, #0]
 80089d2:	6963      	ldr	r3, [r4, #20]
 80089d4:	4283      	cmp	r3, r0
 80089d6:	d004      	beq.n	80089e2 <__swbuf_r+0x6a>
 80089d8:	89a3      	ldrh	r3, [r4, #12]
 80089da:	07db      	lsls	r3, r3, #31
 80089dc:	d507      	bpl.n	80089ee <__swbuf_r+0x76>
 80089de:	2e0a      	cmp	r6, #10
 80089e0:	d105      	bne.n	80089ee <__swbuf_r+0x76>
 80089e2:	0021      	movs	r1, r4
 80089e4:	0028      	movs	r0, r5
 80089e6:	f000 f937 	bl	8008c58 <_fflush_r>
 80089ea:	2800      	cmp	r0, #0
 80089ec:	d111      	bne.n	8008a12 <__swbuf_r+0x9a>
 80089ee:	0030      	movs	r0, r6
 80089f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089f2:	4b0a      	ldr	r3, [pc, #40]	; (8008a1c <__swbuf_r+0xa4>)
 80089f4:	429c      	cmp	r4, r3
 80089f6:	d101      	bne.n	80089fc <__swbuf_r+0x84>
 80089f8:	68ac      	ldr	r4, [r5, #8]
 80089fa:	e7cc      	b.n	8008996 <__swbuf_r+0x1e>
 80089fc:	4b08      	ldr	r3, [pc, #32]	; (8008a20 <__swbuf_r+0xa8>)
 80089fe:	429c      	cmp	r4, r3
 8008a00:	d1c9      	bne.n	8008996 <__swbuf_r+0x1e>
 8008a02:	68ec      	ldr	r4, [r5, #12]
 8008a04:	e7c7      	b.n	8008996 <__swbuf_r+0x1e>
 8008a06:	0021      	movs	r1, r4
 8008a08:	0028      	movs	r0, r5
 8008a0a:	f000 f819 	bl	8008a40 <__swsetup_r>
 8008a0e:	2800      	cmp	r0, #0
 8008a10:	d0c9      	beq.n	80089a6 <__swbuf_r+0x2e>
 8008a12:	2601      	movs	r6, #1
 8008a14:	4276      	negs	r6, r6
 8008a16:	e7ea      	b.n	80089ee <__swbuf_r+0x76>
 8008a18:	08009764 	.word	0x08009764
 8008a1c:	08009784 	.word	0x08009784
 8008a20:	08009744 	.word	0x08009744

08008a24 <__ascii_wctomb>:
 8008a24:	0003      	movs	r3, r0
 8008a26:	1e08      	subs	r0, r1, #0
 8008a28:	d005      	beq.n	8008a36 <__ascii_wctomb+0x12>
 8008a2a:	2aff      	cmp	r2, #255	; 0xff
 8008a2c:	d904      	bls.n	8008a38 <__ascii_wctomb+0x14>
 8008a2e:	228a      	movs	r2, #138	; 0x8a
 8008a30:	2001      	movs	r0, #1
 8008a32:	601a      	str	r2, [r3, #0]
 8008a34:	4240      	negs	r0, r0
 8008a36:	4770      	bx	lr
 8008a38:	2001      	movs	r0, #1
 8008a3a:	700a      	strb	r2, [r1, #0]
 8008a3c:	e7fb      	b.n	8008a36 <__ascii_wctomb+0x12>
	...

08008a40 <__swsetup_r>:
 8008a40:	4b37      	ldr	r3, [pc, #220]	; (8008b20 <__swsetup_r+0xe0>)
 8008a42:	b570      	push	{r4, r5, r6, lr}
 8008a44:	681d      	ldr	r5, [r3, #0]
 8008a46:	0006      	movs	r6, r0
 8008a48:	000c      	movs	r4, r1
 8008a4a:	2d00      	cmp	r5, #0
 8008a4c:	d005      	beq.n	8008a5a <__swsetup_r+0x1a>
 8008a4e:	69ab      	ldr	r3, [r5, #24]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d102      	bne.n	8008a5a <__swsetup_r+0x1a>
 8008a54:	0028      	movs	r0, r5
 8008a56:	f000 f9a1 	bl	8008d9c <__sinit>
 8008a5a:	4b32      	ldr	r3, [pc, #200]	; (8008b24 <__swsetup_r+0xe4>)
 8008a5c:	429c      	cmp	r4, r3
 8008a5e:	d10f      	bne.n	8008a80 <__swsetup_r+0x40>
 8008a60:	686c      	ldr	r4, [r5, #4]
 8008a62:	230c      	movs	r3, #12
 8008a64:	5ee2      	ldrsh	r2, [r4, r3]
 8008a66:	b293      	uxth	r3, r2
 8008a68:	0711      	lsls	r1, r2, #28
 8008a6a:	d42d      	bmi.n	8008ac8 <__swsetup_r+0x88>
 8008a6c:	06d9      	lsls	r1, r3, #27
 8008a6e:	d411      	bmi.n	8008a94 <__swsetup_r+0x54>
 8008a70:	2309      	movs	r3, #9
 8008a72:	2001      	movs	r0, #1
 8008a74:	6033      	str	r3, [r6, #0]
 8008a76:	3337      	adds	r3, #55	; 0x37
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	81a3      	strh	r3, [r4, #12]
 8008a7c:	4240      	negs	r0, r0
 8008a7e:	bd70      	pop	{r4, r5, r6, pc}
 8008a80:	4b29      	ldr	r3, [pc, #164]	; (8008b28 <__swsetup_r+0xe8>)
 8008a82:	429c      	cmp	r4, r3
 8008a84:	d101      	bne.n	8008a8a <__swsetup_r+0x4a>
 8008a86:	68ac      	ldr	r4, [r5, #8]
 8008a88:	e7eb      	b.n	8008a62 <__swsetup_r+0x22>
 8008a8a:	4b28      	ldr	r3, [pc, #160]	; (8008b2c <__swsetup_r+0xec>)
 8008a8c:	429c      	cmp	r4, r3
 8008a8e:	d1e8      	bne.n	8008a62 <__swsetup_r+0x22>
 8008a90:	68ec      	ldr	r4, [r5, #12]
 8008a92:	e7e6      	b.n	8008a62 <__swsetup_r+0x22>
 8008a94:	075b      	lsls	r3, r3, #29
 8008a96:	d513      	bpl.n	8008ac0 <__swsetup_r+0x80>
 8008a98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a9a:	2900      	cmp	r1, #0
 8008a9c:	d008      	beq.n	8008ab0 <__swsetup_r+0x70>
 8008a9e:	0023      	movs	r3, r4
 8008aa0:	3344      	adds	r3, #68	; 0x44
 8008aa2:	4299      	cmp	r1, r3
 8008aa4:	d002      	beq.n	8008aac <__swsetup_r+0x6c>
 8008aa6:	0030      	movs	r0, r6
 8008aa8:	f7ff fb1c 	bl	80080e4 <_free_r>
 8008aac:	2300      	movs	r3, #0
 8008aae:	6363      	str	r3, [r4, #52]	; 0x34
 8008ab0:	2224      	movs	r2, #36	; 0x24
 8008ab2:	89a3      	ldrh	r3, [r4, #12]
 8008ab4:	4393      	bics	r3, r2
 8008ab6:	81a3      	strh	r3, [r4, #12]
 8008ab8:	2300      	movs	r3, #0
 8008aba:	6063      	str	r3, [r4, #4]
 8008abc:	6923      	ldr	r3, [r4, #16]
 8008abe:	6023      	str	r3, [r4, #0]
 8008ac0:	2308      	movs	r3, #8
 8008ac2:	89a2      	ldrh	r2, [r4, #12]
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	81a3      	strh	r3, [r4, #12]
 8008ac8:	6923      	ldr	r3, [r4, #16]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d10b      	bne.n	8008ae6 <__swsetup_r+0xa6>
 8008ace:	21a0      	movs	r1, #160	; 0xa0
 8008ad0:	2280      	movs	r2, #128	; 0x80
 8008ad2:	89a3      	ldrh	r3, [r4, #12]
 8008ad4:	0089      	lsls	r1, r1, #2
 8008ad6:	0092      	lsls	r2, r2, #2
 8008ad8:	400b      	ands	r3, r1
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d003      	beq.n	8008ae6 <__swsetup_r+0xa6>
 8008ade:	0021      	movs	r1, r4
 8008ae0:	0030      	movs	r0, r6
 8008ae2:	f000 fa27 	bl	8008f34 <__smakebuf_r>
 8008ae6:	220c      	movs	r2, #12
 8008ae8:	5ea3      	ldrsh	r3, [r4, r2]
 8008aea:	2001      	movs	r0, #1
 8008aec:	001a      	movs	r2, r3
 8008aee:	b299      	uxth	r1, r3
 8008af0:	4002      	ands	r2, r0
 8008af2:	4203      	tst	r3, r0
 8008af4:	d00f      	beq.n	8008b16 <__swsetup_r+0xd6>
 8008af6:	2200      	movs	r2, #0
 8008af8:	60a2      	str	r2, [r4, #8]
 8008afa:	6962      	ldr	r2, [r4, #20]
 8008afc:	4252      	negs	r2, r2
 8008afe:	61a2      	str	r2, [r4, #24]
 8008b00:	2000      	movs	r0, #0
 8008b02:	6922      	ldr	r2, [r4, #16]
 8008b04:	4282      	cmp	r2, r0
 8008b06:	d1ba      	bne.n	8008a7e <__swsetup_r+0x3e>
 8008b08:	060a      	lsls	r2, r1, #24
 8008b0a:	d5b8      	bpl.n	8008a7e <__swsetup_r+0x3e>
 8008b0c:	2240      	movs	r2, #64	; 0x40
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	81a3      	strh	r3, [r4, #12]
 8008b12:	3801      	subs	r0, #1
 8008b14:	e7b3      	b.n	8008a7e <__swsetup_r+0x3e>
 8008b16:	0788      	lsls	r0, r1, #30
 8008b18:	d400      	bmi.n	8008b1c <__swsetup_r+0xdc>
 8008b1a:	6962      	ldr	r2, [r4, #20]
 8008b1c:	60a2      	str	r2, [r4, #8]
 8008b1e:	e7ef      	b.n	8008b00 <__swsetup_r+0xc0>
 8008b20:	2000000c 	.word	0x2000000c
 8008b24:	08009764 	.word	0x08009764
 8008b28:	08009784 	.word	0x08009784
 8008b2c:	08009744 	.word	0x08009744

08008b30 <abort>:
 8008b30:	2006      	movs	r0, #6
 8008b32:	b510      	push	{r4, lr}
 8008b34:	f000 fa74 	bl	8009020 <raise>
 8008b38:	2001      	movs	r0, #1
 8008b3a:	f7fa fae4 	bl	8003106 <_exit>
	...

08008b40 <__sflush_r>:
 8008b40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b42:	898b      	ldrh	r3, [r1, #12]
 8008b44:	0005      	movs	r5, r0
 8008b46:	000c      	movs	r4, r1
 8008b48:	071a      	lsls	r2, r3, #28
 8008b4a:	d45f      	bmi.n	8008c0c <__sflush_r+0xcc>
 8008b4c:	684a      	ldr	r2, [r1, #4]
 8008b4e:	2a00      	cmp	r2, #0
 8008b50:	dc04      	bgt.n	8008b5c <__sflush_r+0x1c>
 8008b52:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8008b54:	2a00      	cmp	r2, #0
 8008b56:	dc01      	bgt.n	8008b5c <__sflush_r+0x1c>
 8008b58:	2000      	movs	r0, #0
 8008b5a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008b5c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008b5e:	2f00      	cmp	r7, #0
 8008b60:	d0fa      	beq.n	8008b58 <__sflush_r+0x18>
 8008b62:	2200      	movs	r2, #0
 8008b64:	2180      	movs	r1, #128	; 0x80
 8008b66:	682e      	ldr	r6, [r5, #0]
 8008b68:	602a      	str	r2, [r5, #0]
 8008b6a:	001a      	movs	r2, r3
 8008b6c:	0149      	lsls	r1, r1, #5
 8008b6e:	400a      	ands	r2, r1
 8008b70:	420b      	tst	r3, r1
 8008b72:	d034      	beq.n	8008bde <__sflush_r+0x9e>
 8008b74:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b76:	89a3      	ldrh	r3, [r4, #12]
 8008b78:	075b      	lsls	r3, r3, #29
 8008b7a:	d506      	bpl.n	8008b8a <__sflush_r+0x4a>
 8008b7c:	6863      	ldr	r3, [r4, #4]
 8008b7e:	1ac0      	subs	r0, r0, r3
 8008b80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d001      	beq.n	8008b8a <__sflush_r+0x4a>
 8008b86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b88:	1ac0      	subs	r0, r0, r3
 8008b8a:	0002      	movs	r2, r0
 8008b8c:	6a21      	ldr	r1, [r4, #32]
 8008b8e:	2300      	movs	r3, #0
 8008b90:	0028      	movs	r0, r5
 8008b92:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008b94:	47b8      	blx	r7
 8008b96:	89a1      	ldrh	r1, [r4, #12]
 8008b98:	1c43      	adds	r3, r0, #1
 8008b9a:	d106      	bne.n	8008baa <__sflush_r+0x6a>
 8008b9c:	682b      	ldr	r3, [r5, #0]
 8008b9e:	2b1d      	cmp	r3, #29
 8008ba0:	d831      	bhi.n	8008c06 <__sflush_r+0xc6>
 8008ba2:	4a2c      	ldr	r2, [pc, #176]	; (8008c54 <__sflush_r+0x114>)
 8008ba4:	40da      	lsrs	r2, r3
 8008ba6:	07d3      	lsls	r3, r2, #31
 8008ba8:	d52d      	bpl.n	8008c06 <__sflush_r+0xc6>
 8008baa:	2300      	movs	r3, #0
 8008bac:	6063      	str	r3, [r4, #4]
 8008bae:	6923      	ldr	r3, [r4, #16]
 8008bb0:	6023      	str	r3, [r4, #0]
 8008bb2:	04cb      	lsls	r3, r1, #19
 8008bb4:	d505      	bpl.n	8008bc2 <__sflush_r+0x82>
 8008bb6:	1c43      	adds	r3, r0, #1
 8008bb8:	d102      	bne.n	8008bc0 <__sflush_r+0x80>
 8008bba:	682b      	ldr	r3, [r5, #0]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d100      	bne.n	8008bc2 <__sflush_r+0x82>
 8008bc0:	6560      	str	r0, [r4, #84]	; 0x54
 8008bc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bc4:	602e      	str	r6, [r5, #0]
 8008bc6:	2900      	cmp	r1, #0
 8008bc8:	d0c6      	beq.n	8008b58 <__sflush_r+0x18>
 8008bca:	0023      	movs	r3, r4
 8008bcc:	3344      	adds	r3, #68	; 0x44
 8008bce:	4299      	cmp	r1, r3
 8008bd0:	d002      	beq.n	8008bd8 <__sflush_r+0x98>
 8008bd2:	0028      	movs	r0, r5
 8008bd4:	f7ff fa86 	bl	80080e4 <_free_r>
 8008bd8:	2000      	movs	r0, #0
 8008bda:	6360      	str	r0, [r4, #52]	; 0x34
 8008bdc:	e7bd      	b.n	8008b5a <__sflush_r+0x1a>
 8008bde:	2301      	movs	r3, #1
 8008be0:	0028      	movs	r0, r5
 8008be2:	6a21      	ldr	r1, [r4, #32]
 8008be4:	47b8      	blx	r7
 8008be6:	1c43      	adds	r3, r0, #1
 8008be8:	d1c5      	bne.n	8008b76 <__sflush_r+0x36>
 8008bea:	682b      	ldr	r3, [r5, #0]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d0c2      	beq.n	8008b76 <__sflush_r+0x36>
 8008bf0:	2b1d      	cmp	r3, #29
 8008bf2:	d001      	beq.n	8008bf8 <__sflush_r+0xb8>
 8008bf4:	2b16      	cmp	r3, #22
 8008bf6:	d101      	bne.n	8008bfc <__sflush_r+0xbc>
 8008bf8:	602e      	str	r6, [r5, #0]
 8008bfa:	e7ad      	b.n	8008b58 <__sflush_r+0x18>
 8008bfc:	2340      	movs	r3, #64	; 0x40
 8008bfe:	89a2      	ldrh	r2, [r4, #12]
 8008c00:	4313      	orrs	r3, r2
 8008c02:	81a3      	strh	r3, [r4, #12]
 8008c04:	e7a9      	b.n	8008b5a <__sflush_r+0x1a>
 8008c06:	2340      	movs	r3, #64	; 0x40
 8008c08:	430b      	orrs	r3, r1
 8008c0a:	e7fa      	b.n	8008c02 <__sflush_r+0xc2>
 8008c0c:	690f      	ldr	r7, [r1, #16]
 8008c0e:	2f00      	cmp	r7, #0
 8008c10:	d0a2      	beq.n	8008b58 <__sflush_r+0x18>
 8008c12:	680a      	ldr	r2, [r1, #0]
 8008c14:	600f      	str	r7, [r1, #0]
 8008c16:	1bd2      	subs	r2, r2, r7
 8008c18:	9201      	str	r2, [sp, #4]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	079b      	lsls	r3, r3, #30
 8008c1e:	d100      	bne.n	8008c22 <__sflush_r+0xe2>
 8008c20:	694a      	ldr	r2, [r1, #20]
 8008c22:	60a2      	str	r2, [r4, #8]
 8008c24:	9b01      	ldr	r3, [sp, #4]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	dc00      	bgt.n	8008c2c <__sflush_r+0xec>
 8008c2a:	e795      	b.n	8008b58 <__sflush_r+0x18>
 8008c2c:	003a      	movs	r2, r7
 8008c2e:	0028      	movs	r0, r5
 8008c30:	9b01      	ldr	r3, [sp, #4]
 8008c32:	6a21      	ldr	r1, [r4, #32]
 8008c34:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c36:	47b0      	blx	r6
 8008c38:	2800      	cmp	r0, #0
 8008c3a:	dc06      	bgt.n	8008c4a <__sflush_r+0x10a>
 8008c3c:	2340      	movs	r3, #64	; 0x40
 8008c3e:	2001      	movs	r0, #1
 8008c40:	89a2      	ldrh	r2, [r4, #12]
 8008c42:	4240      	negs	r0, r0
 8008c44:	4313      	orrs	r3, r2
 8008c46:	81a3      	strh	r3, [r4, #12]
 8008c48:	e787      	b.n	8008b5a <__sflush_r+0x1a>
 8008c4a:	9b01      	ldr	r3, [sp, #4]
 8008c4c:	183f      	adds	r7, r7, r0
 8008c4e:	1a1b      	subs	r3, r3, r0
 8008c50:	9301      	str	r3, [sp, #4]
 8008c52:	e7e7      	b.n	8008c24 <__sflush_r+0xe4>
 8008c54:	20400001 	.word	0x20400001

08008c58 <_fflush_r>:
 8008c58:	690b      	ldr	r3, [r1, #16]
 8008c5a:	b570      	push	{r4, r5, r6, lr}
 8008c5c:	0005      	movs	r5, r0
 8008c5e:	000c      	movs	r4, r1
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d102      	bne.n	8008c6a <_fflush_r+0x12>
 8008c64:	2500      	movs	r5, #0
 8008c66:	0028      	movs	r0, r5
 8008c68:	bd70      	pop	{r4, r5, r6, pc}
 8008c6a:	2800      	cmp	r0, #0
 8008c6c:	d004      	beq.n	8008c78 <_fflush_r+0x20>
 8008c6e:	6983      	ldr	r3, [r0, #24]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d101      	bne.n	8008c78 <_fflush_r+0x20>
 8008c74:	f000 f892 	bl	8008d9c <__sinit>
 8008c78:	4b14      	ldr	r3, [pc, #80]	; (8008ccc <_fflush_r+0x74>)
 8008c7a:	429c      	cmp	r4, r3
 8008c7c:	d11b      	bne.n	8008cb6 <_fflush_r+0x5e>
 8008c7e:	686c      	ldr	r4, [r5, #4]
 8008c80:	220c      	movs	r2, #12
 8008c82:	5ea3      	ldrsh	r3, [r4, r2]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d0ed      	beq.n	8008c64 <_fflush_r+0xc>
 8008c88:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c8a:	07d2      	lsls	r2, r2, #31
 8008c8c:	d404      	bmi.n	8008c98 <_fflush_r+0x40>
 8008c8e:	059b      	lsls	r3, r3, #22
 8008c90:	d402      	bmi.n	8008c98 <_fflush_r+0x40>
 8008c92:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c94:	f000 f923 	bl	8008ede <__retarget_lock_acquire_recursive>
 8008c98:	0028      	movs	r0, r5
 8008c9a:	0021      	movs	r1, r4
 8008c9c:	f7ff ff50 	bl	8008b40 <__sflush_r>
 8008ca0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ca2:	0005      	movs	r5, r0
 8008ca4:	07db      	lsls	r3, r3, #31
 8008ca6:	d4de      	bmi.n	8008c66 <_fflush_r+0xe>
 8008ca8:	89a3      	ldrh	r3, [r4, #12]
 8008caa:	059b      	lsls	r3, r3, #22
 8008cac:	d4db      	bmi.n	8008c66 <_fflush_r+0xe>
 8008cae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cb0:	f000 f916 	bl	8008ee0 <__retarget_lock_release_recursive>
 8008cb4:	e7d7      	b.n	8008c66 <_fflush_r+0xe>
 8008cb6:	4b06      	ldr	r3, [pc, #24]	; (8008cd0 <_fflush_r+0x78>)
 8008cb8:	429c      	cmp	r4, r3
 8008cba:	d101      	bne.n	8008cc0 <_fflush_r+0x68>
 8008cbc:	68ac      	ldr	r4, [r5, #8]
 8008cbe:	e7df      	b.n	8008c80 <_fflush_r+0x28>
 8008cc0:	4b04      	ldr	r3, [pc, #16]	; (8008cd4 <_fflush_r+0x7c>)
 8008cc2:	429c      	cmp	r4, r3
 8008cc4:	d1dc      	bne.n	8008c80 <_fflush_r+0x28>
 8008cc6:	68ec      	ldr	r4, [r5, #12]
 8008cc8:	e7da      	b.n	8008c80 <_fflush_r+0x28>
 8008cca:	46c0      	nop			; (mov r8, r8)
 8008ccc:	08009764 	.word	0x08009764
 8008cd0:	08009784 	.word	0x08009784
 8008cd4:	08009744 	.word	0x08009744

08008cd8 <std>:
 8008cd8:	2300      	movs	r3, #0
 8008cda:	b510      	push	{r4, lr}
 8008cdc:	0004      	movs	r4, r0
 8008cde:	6003      	str	r3, [r0, #0]
 8008ce0:	6043      	str	r3, [r0, #4]
 8008ce2:	6083      	str	r3, [r0, #8]
 8008ce4:	8181      	strh	r1, [r0, #12]
 8008ce6:	6643      	str	r3, [r0, #100]	; 0x64
 8008ce8:	0019      	movs	r1, r3
 8008cea:	81c2      	strh	r2, [r0, #14]
 8008cec:	6103      	str	r3, [r0, #16]
 8008cee:	6143      	str	r3, [r0, #20]
 8008cf0:	6183      	str	r3, [r0, #24]
 8008cf2:	2208      	movs	r2, #8
 8008cf4:	305c      	adds	r0, #92	; 0x5c
 8008cf6:	f7fd facf 	bl	8006298 <memset>
 8008cfa:	4b05      	ldr	r3, [pc, #20]	; (8008d10 <std+0x38>)
 8008cfc:	6224      	str	r4, [r4, #32]
 8008cfe:	6263      	str	r3, [r4, #36]	; 0x24
 8008d00:	4b04      	ldr	r3, [pc, #16]	; (8008d14 <std+0x3c>)
 8008d02:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d04:	4b04      	ldr	r3, [pc, #16]	; (8008d18 <std+0x40>)
 8008d06:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d08:	4b04      	ldr	r3, [pc, #16]	; (8008d1c <std+0x44>)
 8008d0a:	6323      	str	r3, [r4, #48]	; 0x30
 8008d0c:	bd10      	pop	{r4, pc}
 8008d0e:	46c0      	nop			; (mov r8, r8)
 8008d10:	08009061 	.word	0x08009061
 8008d14:	08009089 	.word	0x08009089
 8008d18:	080090c1 	.word	0x080090c1
 8008d1c:	080090ed 	.word	0x080090ed

08008d20 <_cleanup_r>:
 8008d20:	b510      	push	{r4, lr}
 8008d22:	4902      	ldr	r1, [pc, #8]	; (8008d2c <_cleanup_r+0xc>)
 8008d24:	f000 f8ba 	bl	8008e9c <_fwalk_reent>
 8008d28:	bd10      	pop	{r4, pc}
 8008d2a:	46c0      	nop			; (mov r8, r8)
 8008d2c:	08008c59 	.word	0x08008c59

08008d30 <__sfmoreglue>:
 8008d30:	b570      	push	{r4, r5, r6, lr}
 8008d32:	2568      	movs	r5, #104	; 0x68
 8008d34:	1e4a      	subs	r2, r1, #1
 8008d36:	4355      	muls	r5, r2
 8008d38:	000e      	movs	r6, r1
 8008d3a:	0029      	movs	r1, r5
 8008d3c:	3174      	adds	r1, #116	; 0x74
 8008d3e:	f7ff fa3d 	bl	80081bc <_malloc_r>
 8008d42:	1e04      	subs	r4, r0, #0
 8008d44:	d008      	beq.n	8008d58 <__sfmoreglue+0x28>
 8008d46:	2100      	movs	r1, #0
 8008d48:	002a      	movs	r2, r5
 8008d4a:	6001      	str	r1, [r0, #0]
 8008d4c:	6046      	str	r6, [r0, #4]
 8008d4e:	300c      	adds	r0, #12
 8008d50:	60a0      	str	r0, [r4, #8]
 8008d52:	3268      	adds	r2, #104	; 0x68
 8008d54:	f7fd faa0 	bl	8006298 <memset>
 8008d58:	0020      	movs	r0, r4
 8008d5a:	bd70      	pop	{r4, r5, r6, pc}

08008d5c <__sfp_lock_acquire>:
 8008d5c:	b510      	push	{r4, lr}
 8008d5e:	4802      	ldr	r0, [pc, #8]	; (8008d68 <__sfp_lock_acquire+0xc>)
 8008d60:	f000 f8bd 	bl	8008ede <__retarget_lock_acquire_recursive>
 8008d64:	bd10      	pop	{r4, pc}
 8008d66:	46c0      	nop			; (mov r8, r8)
 8008d68:	20000705 	.word	0x20000705

08008d6c <__sfp_lock_release>:
 8008d6c:	b510      	push	{r4, lr}
 8008d6e:	4802      	ldr	r0, [pc, #8]	; (8008d78 <__sfp_lock_release+0xc>)
 8008d70:	f000 f8b6 	bl	8008ee0 <__retarget_lock_release_recursive>
 8008d74:	bd10      	pop	{r4, pc}
 8008d76:	46c0      	nop			; (mov r8, r8)
 8008d78:	20000705 	.word	0x20000705

08008d7c <__sinit_lock_acquire>:
 8008d7c:	b510      	push	{r4, lr}
 8008d7e:	4802      	ldr	r0, [pc, #8]	; (8008d88 <__sinit_lock_acquire+0xc>)
 8008d80:	f000 f8ad 	bl	8008ede <__retarget_lock_acquire_recursive>
 8008d84:	bd10      	pop	{r4, pc}
 8008d86:	46c0      	nop			; (mov r8, r8)
 8008d88:	20000706 	.word	0x20000706

08008d8c <__sinit_lock_release>:
 8008d8c:	b510      	push	{r4, lr}
 8008d8e:	4802      	ldr	r0, [pc, #8]	; (8008d98 <__sinit_lock_release+0xc>)
 8008d90:	f000 f8a6 	bl	8008ee0 <__retarget_lock_release_recursive>
 8008d94:	bd10      	pop	{r4, pc}
 8008d96:	46c0      	nop			; (mov r8, r8)
 8008d98:	20000706 	.word	0x20000706

08008d9c <__sinit>:
 8008d9c:	b513      	push	{r0, r1, r4, lr}
 8008d9e:	0004      	movs	r4, r0
 8008da0:	f7ff ffec 	bl	8008d7c <__sinit_lock_acquire>
 8008da4:	69a3      	ldr	r3, [r4, #24]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d002      	beq.n	8008db0 <__sinit+0x14>
 8008daa:	f7ff ffef 	bl	8008d8c <__sinit_lock_release>
 8008dae:	bd13      	pop	{r0, r1, r4, pc}
 8008db0:	64a3      	str	r3, [r4, #72]	; 0x48
 8008db2:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008db4:	6523      	str	r3, [r4, #80]	; 0x50
 8008db6:	4b13      	ldr	r3, [pc, #76]	; (8008e04 <__sinit+0x68>)
 8008db8:	4a13      	ldr	r2, [pc, #76]	; (8008e08 <__sinit+0x6c>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	62a2      	str	r2, [r4, #40]	; 0x28
 8008dbe:	9301      	str	r3, [sp, #4]
 8008dc0:	42a3      	cmp	r3, r4
 8008dc2:	d101      	bne.n	8008dc8 <__sinit+0x2c>
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	61a3      	str	r3, [r4, #24]
 8008dc8:	0020      	movs	r0, r4
 8008dca:	f000 f81f 	bl	8008e0c <__sfp>
 8008dce:	6060      	str	r0, [r4, #4]
 8008dd0:	0020      	movs	r0, r4
 8008dd2:	f000 f81b 	bl	8008e0c <__sfp>
 8008dd6:	60a0      	str	r0, [r4, #8]
 8008dd8:	0020      	movs	r0, r4
 8008dda:	f000 f817 	bl	8008e0c <__sfp>
 8008dde:	2200      	movs	r2, #0
 8008de0:	2104      	movs	r1, #4
 8008de2:	60e0      	str	r0, [r4, #12]
 8008de4:	6860      	ldr	r0, [r4, #4]
 8008de6:	f7ff ff77 	bl	8008cd8 <std>
 8008dea:	2201      	movs	r2, #1
 8008dec:	2109      	movs	r1, #9
 8008dee:	68a0      	ldr	r0, [r4, #8]
 8008df0:	f7ff ff72 	bl	8008cd8 <std>
 8008df4:	2202      	movs	r2, #2
 8008df6:	2112      	movs	r1, #18
 8008df8:	68e0      	ldr	r0, [r4, #12]
 8008dfa:	f7ff ff6d 	bl	8008cd8 <std>
 8008dfe:	2301      	movs	r3, #1
 8008e00:	61a3      	str	r3, [r4, #24]
 8008e02:	e7d2      	b.n	8008daa <__sinit+0xe>
 8008e04:	080093cc 	.word	0x080093cc
 8008e08:	08008d21 	.word	0x08008d21

08008e0c <__sfp>:
 8008e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e0e:	0007      	movs	r7, r0
 8008e10:	f7ff ffa4 	bl	8008d5c <__sfp_lock_acquire>
 8008e14:	4b1f      	ldr	r3, [pc, #124]	; (8008e94 <__sfp+0x88>)
 8008e16:	681e      	ldr	r6, [r3, #0]
 8008e18:	69b3      	ldr	r3, [r6, #24]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d102      	bne.n	8008e24 <__sfp+0x18>
 8008e1e:	0030      	movs	r0, r6
 8008e20:	f7ff ffbc 	bl	8008d9c <__sinit>
 8008e24:	3648      	adds	r6, #72	; 0x48
 8008e26:	68b4      	ldr	r4, [r6, #8]
 8008e28:	6873      	ldr	r3, [r6, #4]
 8008e2a:	3b01      	subs	r3, #1
 8008e2c:	d504      	bpl.n	8008e38 <__sfp+0x2c>
 8008e2e:	6833      	ldr	r3, [r6, #0]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d022      	beq.n	8008e7a <__sfp+0x6e>
 8008e34:	6836      	ldr	r6, [r6, #0]
 8008e36:	e7f6      	b.n	8008e26 <__sfp+0x1a>
 8008e38:	220c      	movs	r2, #12
 8008e3a:	5ea5      	ldrsh	r5, [r4, r2]
 8008e3c:	2d00      	cmp	r5, #0
 8008e3e:	d11a      	bne.n	8008e76 <__sfp+0x6a>
 8008e40:	0020      	movs	r0, r4
 8008e42:	4b15      	ldr	r3, [pc, #84]	; (8008e98 <__sfp+0x8c>)
 8008e44:	3058      	adds	r0, #88	; 0x58
 8008e46:	60e3      	str	r3, [r4, #12]
 8008e48:	6665      	str	r5, [r4, #100]	; 0x64
 8008e4a:	f000 f847 	bl	8008edc <__retarget_lock_init_recursive>
 8008e4e:	f7ff ff8d 	bl	8008d6c <__sfp_lock_release>
 8008e52:	0020      	movs	r0, r4
 8008e54:	2208      	movs	r2, #8
 8008e56:	0029      	movs	r1, r5
 8008e58:	6025      	str	r5, [r4, #0]
 8008e5a:	60a5      	str	r5, [r4, #8]
 8008e5c:	6065      	str	r5, [r4, #4]
 8008e5e:	6125      	str	r5, [r4, #16]
 8008e60:	6165      	str	r5, [r4, #20]
 8008e62:	61a5      	str	r5, [r4, #24]
 8008e64:	305c      	adds	r0, #92	; 0x5c
 8008e66:	f7fd fa17 	bl	8006298 <memset>
 8008e6a:	6365      	str	r5, [r4, #52]	; 0x34
 8008e6c:	63a5      	str	r5, [r4, #56]	; 0x38
 8008e6e:	64a5      	str	r5, [r4, #72]	; 0x48
 8008e70:	64e5      	str	r5, [r4, #76]	; 0x4c
 8008e72:	0020      	movs	r0, r4
 8008e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e76:	3468      	adds	r4, #104	; 0x68
 8008e78:	e7d7      	b.n	8008e2a <__sfp+0x1e>
 8008e7a:	2104      	movs	r1, #4
 8008e7c:	0038      	movs	r0, r7
 8008e7e:	f7ff ff57 	bl	8008d30 <__sfmoreglue>
 8008e82:	1e04      	subs	r4, r0, #0
 8008e84:	6030      	str	r0, [r6, #0]
 8008e86:	d1d5      	bne.n	8008e34 <__sfp+0x28>
 8008e88:	f7ff ff70 	bl	8008d6c <__sfp_lock_release>
 8008e8c:	230c      	movs	r3, #12
 8008e8e:	603b      	str	r3, [r7, #0]
 8008e90:	e7ef      	b.n	8008e72 <__sfp+0x66>
 8008e92:	46c0      	nop			; (mov r8, r8)
 8008e94:	080093cc 	.word	0x080093cc
 8008e98:	ffff0001 	.word	0xffff0001

08008e9c <_fwalk_reent>:
 8008e9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e9e:	0004      	movs	r4, r0
 8008ea0:	0006      	movs	r6, r0
 8008ea2:	2700      	movs	r7, #0
 8008ea4:	9101      	str	r1, [sp, #4]
 8008ea6:	3448      	adds	r4, #72	; 0x48
 8008ea8:	6863      	ldr	r3, [r4, #4]
 8008eaa:	68a5      	ldr	r5, [r4, #8]
 8008eac:	9300      	str	r3, [sp, #0]
 8008eae:	9b00      	ldr	r3, [sp, #0]
 8008eb0:	3b01      	subs	r3, #1
 8008eb2:	9300      	str	r3, [sp, #0]
 8008eb4:	d504      	bpl.n	8008ec0 <_fwalk_reent+0x24>
 8008eb6:	6824      	ldr	r4, [r4, #0]
 8008eb8:	2c00      	cmp	r4, #0
 8008eba:	d1f5      	bne.n	8008ea8 <_fwalk_reent+0xc>
 8008ebc:	0038      	movs	r0, r7
 8008ebe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008ec0:	89ab      	ldrh	r3, [r5, #12]
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	d908      	bls.n	8008ed8 <_fwalk_reent+0x3c>
 8008ec6:	220e      	movs	r2, #14
 8008ec8:	5eab      	ldrsh	r3, [r5, r2]
 8008eca:	3301      	adds	r3, #1
 8008ecc:	d004      	beq.n	8008ed8 <_fwalk_reent+0x3c>
 8008ece:	0029      	movs	r1, r5
 8008ed0:	0030      	movs	r0, r6
 8008ed2:	9b01      	ldr	r3, [sp, #4]
 8008ed4:	4798      	blx	r3
 8008ed6:	4307      	orrs	r7, r0
 8008ed8:	3568      	adds	r5, #104	; 0x68
 8008eda:	e7e8      	b.n	8008eae <_fwalk_reent+0x12>

08008edc <__retarget_lock_init_recursive>:
 8008edc:	4770      	bx	lr

08008ede <__retarget_lock_acquire_recursive>:
 8008ede:	4770      	bx	lr

08008ee0 <__retarget_lock_release_recursive>:
 8008ee0:	4770      	bx	lr
	...

08008ee4 <__swhatbuf_r>:
 8008ee4:	b570      	push	{r4, r5, r6, lr}
 8008ee6:	000e      	movs	r6, r1
 8008ee8:	001d      	movs	r5, r3
 8008eea:	230e      	movs	r3, #14
 8008eec:	5ec9      	ldrsh	r1, [r1, r3]
 8008eee:	0014      	movs	r4, r2
 8008ef0:	b096      	sub	sp, #88	; 0x58
 8008ef2:	2900      	cmp	r1, #0
 8008ef4:	da08      	bge.n	8008f08 <__swhatbuf_r+0x24>
 8008ef6:	220c      	movs	r2, #12
 8008ef8:	5eb3      	ldrsh	r3, [r6, r2]
 8008efa:	2200      	movs	r2, #0
 8008efc:	602a      	str	r2, [r5, #0]
 8008efe:	061b      	lsls	r3, r3, #24
 8008f00:	d411      	bmi.n	8008f26 <__swhatbuf_r+0x42>
 8008f02:	2380      	movs	r3, #128	; 0x80
 8008f04:	00db      	lsls	r3, r3, #3
 8008f06:	e00f      	b.n	8008f28 <__swhatbuf_r+0x44>
 8008f08:	466a      	mov	r2, sp
 8008f0a:	f000 f91b 	bl	8009144 <_fstat_r>
 8008f0e:	2800      	cmp	r0, #0
 8008f10:	dbf1      	blt.n	8008ef6 <__swhatbuf_r+0x12>
 8008f12:	23f0      	movs	r3, #240	; 0xf0
 8008f14:	9901      	ldr	r1, [sp, #4]
 8008f16:	021b      	lsls	r3, r3, #8
 8008f18:	4019      	ands	r1, r3
 8008f1a:	4b05      	ldr	r3, [pc, #20]	; (8008f30 <__swhatbuf_r+0x4c>)
 8008f1c:	18c9      	adds	r1, r1, r3
 8008f1e:	424b      	negs	r3, r1
 8008f20:	4159      	adcs	r1, r3
 8008f22:	6029      	str	r1, [r5, #0]
 8008f24:	e7ed      	b.n	8008f02 <__swhatbuf_r+0x1e>
 8008f26:	2340      	movs	r3, #64	; 0x40
 8008f28:	2000      	movs	r0, #0
 8008f2a:	6023      	str	r3, [r4, #0]
 8008f2c:	b016      	add	sp, #88	; 0x58
 8008f2e:	bd70      	pop	{r4, r5, r6, pc}
 8008f30:	ffffe000 	.word	0xffffe000

08008f34 <__smakebuf_r>:
 8008f34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f36:	2602      	movs	r6, #2
 8008f38:	898b      	ldrh	r3, [r1, #12]
 8008f3a:	0005      	movs	r5, r0
 8008f3c:	000c      	movs	r4, r1
 8008f3e:	4233      	tst	r3, r6
 8008f40:	d006      	beq.n	8008f50 <__smakebuf_r+0x1c>
 8008f42:	0023      	movs	r3, r4
 8008f44:	3347      	adds	r3, #71	; 0x47
 8008f46:	6023      	str	r3, [r4, #0]
 8008f48:	6123      	str	r3, [r4, #16]
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	6163      	str	r3, [r4, #20]
 8008f4e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008f50:	466a      	mov	r2, sp
 8008f52:	ab01      	add	r3, sp, #4
 8008f54:	f7ff ffc6 	bl	8008ee4 <__swhatbuf_r>
 8008f58:	9900      	ldr	r1, [sp, #0]
 8008f5a:	0007      	movs	r7, r0
 8008f5c:	0028      	movs	r0, r5
 8008f5e:	f7ff f92d 	bl	80081bc <_malloc_r>
 8008f62:	2800      	cmp	r0, #0
 8008f64:	d108      	bne.n	8008f78 <__smakebuf_r+0x44>
 8008f66:	220c      	movs	r2, #12
 8008f68:	5ea3      	ldrsh	r3, [r4, r2]
 8008f6a:	059a      	lsls	r2, r3, #22
 8008f6c:	d4ef      	bmi.n	8008f4e <__smakebuf_r+0x1a>
 8008f6e:	2203      	movs	r2, #3
 8008f70:	4393      	bics	r3, r2
 8008f72:	431e      	orrs	r6, r3
 8008f74:	81a6      	strh	r6, [r4, #12]
 8008f76:	e7e4      	b.n	8008f42 <__smakebuf_r+0xe>
 8008f78:	4b0f      	ldr	r3, [pc, #60]	; (8008fb8 <__smakebuf_r+0x84>)
 8008f7a:	62ab      	str	r3, [r5, #40]	; 0x28
 8008f7c:	2380      	movs	r3, #128	; 0x80
 8008f7e:	89a2      	ldrh	r2, [r4, #12]
 8008f80:	6020      	str	r0, [r4, #0]
 8008f82:	4313      	orrs	r3, r2
 8008f84:	81a3      	strh	r3, [r4, #12]
 8008f86:	9b00      	ldr	r3, [sp, #0]
 8008f88:	6120      	str	r0, [r4, #16]
 8008f8a:	6163      	str	r3, [r4, #20]
 8008f8c:	9b01      	ldr	r3, [sp, #4]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d00d      	beq.n	8008fae <__smakebuf_r+0x7a>
 8008f92:	0028      	movs	r0, r5
 8008f94:	230e      	movs	r3, #14
 8008f96:	5ee1      	ldrsh	r1, [r4, r3]
 8008f98:	f000 f8e6 	bl	8009168 <_isatty_r>
 8008f9c:	2800      	cmp	r0, #0
 8008f9e:	d006      	beq.n	8008fae <__smakebuf_r+0x7a>
 8008fa0:	2203      	movs	r2, #3
 8008fa2:	89a3      	ldrh	r3, [r4, #12]
 8008fa4:	4393      	bics	r3, r2
 8008fa6:	001a      	movs	r2, r3
 8008fa8:	2301      	movs	r3, #1
 8008faa:	4313      	orrs	r3, r2
 8008fac:	81a3      	strh	r3, [r4, #12]
 8008fae:	89a0      	ldrh	r0, [r4, #12]
 8008fb0:	4307      	orrs	r7, r0
 8008fb2:	81a7      	strh	r7, [r4, #12]
 8008fb4:	e7cb      	b.n	8008f4e <__smakebuf_r+0x1a>
 8008fb6:	46c0      	nop			; (mov r8, r8)
 8008fb8:	08008d21 	.word	0x08008d21

08008fbc <_malloc_usable_size_r>:
 8008fbc:	1f0b      	subs	r3, r1, #4
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	1f18      	subs	r0, r3, #4
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	da01      	bge.n	8008fca <_malloc_usable_size_r+0xe>
 8008fc6:	580b      	ldr	r3, [r1, r0]
 8008fc8:	18c0      	adds	r0, r0, r3
 8008fca:	4770      	bx	lr

08008fcc <_raise_r>:
 8008fcc:	b570      	push	{r4, r5, r6, lr}
 8008fce:	0004      	movs	r4, r0
 8008fd0:	000d      	movs	r5, r1
 8008fd2:	291f      	cmp	r1, #31
 8008fd4:	d904      	bls.n	8008fe0 <_raise_r+0x14>
 8008fd6:	2316      	movs	r3, #22
 8008fd8:	6003      	str	r3, [r0, #0]
 8008fda:	2001      	movs	r0, #1
 8008fdc:	4240      	negs	r0, r0
 8008fde:	bd70      	pop	{r4, r5, r6, pc}
 8008fe0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d004      	beq.n	8008ff0 <_raise_r+0x24>
 8008fe6:	008a      	lsls	r2, r1, #2
 8008fe8:	189b      	adds	r3, r3, r2
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	2a00      	cmp	r2, #0
 8008fee:	d108      	bne.n	8009002 <_raise_r+0x36>
 8008ff0:	0020      	movs	r0, r4
 8008ff2:	f000 f831 	bl	8009058 <_getpid_r>
 8008ff6:	002a      	movs	r2, r5
 8008ff8:	0001      	movs	r1, r0
 8008ffa:	0020      	movs	r0, r4
 8008ffc:	f000 f81a 	bl	8009034 <_kill_r>
 8009000:	e7ed      	b.n	8008fde <_raise_r+0x12>
 8009002:	2000      	movs	r0, #0
 8009004:	2a01      	cmp	r2, #1
 8009006:	d0ea      	beq.n	8008fde <_raise_r+0x12>
 8009008:	1c51      	adds	r1, r2, #1
 800900a:	d103      	bne.n	8009014 <_raise_r+0x48>
 800900c:	2316      	movs	r3, #22
 800900e:	3001      	adds	r0, #1
 8009010:	6023      	str	r3, [r4, #0]
 8009012:	e7e4      	b.n	8008fde <_raise_r+0x12>
 8009014:	2400      	movs	r4, #0
 8009016:	0028      	movs	r0, r5
 8009018:	601c      	str	r4, [r3, #0]
 800901a:	4790      	blx	r2
 800901c:	0020      	movs	r0, r4
 800901e:	e7de      	b.n	8008fde <_raise_r+0x12>

08009020 <raise>:
 8009020:	b510      	push	{r4, lr}
 8009022:	4b03      	ldr	r3, [pc, #12]	; (8009030 <raise+0x10>)
 8009024:	0001      	movs	r1, r0
 8009026:	6818      	ldr	r0, [r3, #0]
 8009028:	f7ff ffd0 	bl	8008fcc <_raise_r>
 800902c:	bd10      	pop	{r4, pc}
 800902e:	46c0      	nop			; (mov r8, r8)
 8009030:	2000000c 	.word	0x2000000c

08009034 <_kill_r>:
 8009034:	2300      	movs	r3, #0
 8009036:	b570      	push	{r4, r5, r6, lr}
 8009038:	4d06      	ldr	r5, [pc, #24]	; (8009054 <_kill_r+0x20>)
 800903a:	0004      	movs	r4, r0
 800903c:	0008      	movs	r0, r1
 800903e:	0011      	movs	r1, r2
 8009040:	602b      	str	r3, [r5, #0]
 8009042:	f7fa f850 	bl	80030e6 <_kill>
 8009046:	1c43      	adds	r3, r0, #1
 8009048:	d103      	bne.n	8009052 <_kill_r+0x1e>
 800904a:	682b      	ldr	r3, [r5, #0]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d000      	beq.n	8009052 <_kill_r+0x1e>
 8009050:	6023      	str	r3, [r4, #0]
 8009052:	bd70      	pop	{r4, r5, r6, pc}
 8009054:	20000700 	.word	0x20000700

08009058 <_getpid_r>:
 8009058:	b510      	push	{r4, lr}
 800905a:	f7fa f83e 	bl	80030da <_getpid>
 800905e:	bd10      	pop	{r4, pc}

08009060 <__sread>:
 8009060:	b570      	push	{r4, r5, r6, lr}
 8009062:	000c      	movs	r4, r1
 8009064:	250e      	movs	r5, #14
 8009066:	5f49      	ldrsh	r1, [r1, r5]
 8009068:	f000 f8a4 	bl	80091b4 <_read_r>
 800906c:	2800      	cmp	r0, #0
 800906e:	db03      	blt.n	8009078 <__sread+0x18>
 8009070:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009072:	181b      	adds	r3, r3, r0
 8009074:	6563      	str	r3, [r4, #84]	; 0x54
 8009076:	bd70      	pop	{r4, r5, r6, pc}
 8009078:	89a3      	ldrh	r3, [r4, #12]
 800907a:	4a02      	ldr	r2, [pc, #8]	; (8009084 <__sread+0x24>)
 800907c:	4013      	ands	r3, r2
 800907e:	81a3      	strh	r3, [r4, #12]
 8009080:	e7f9      	b.n	8009076 <__sread+0x16>
 8009082:	46c0      	nop			; (mov r8, r8)
 8009084:	ffffefff 	.word	0xffffefff

08009088 <__swrite>:
 8009088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800908a:	001f      	movs	r7, r3
 800908c:	898b      	ldrh	r3, [r1, #12]
 800908e:	0005      	movs	r5, r0
 8009090:	000c      	movs	r4, r1
 8009092:	0016      	movs	r6, r2
 8009094:	05db      	lsls	r3, r3, #23
 8009096:	d505      	bpl.n	80090a4 <__swrite+0x1c>
 8009098:	230e      	movs	r3, #14
 800909a:	5ec9      	ldrsh	r1, [r1, r3]
 800909c:	2200      	movs	r2, #0
 800909e:	2302      	movs	r3, #2
 80090a0:	f000 f874 	bl	800918c <_lseek_r>
 80090a4:	89a3      	ldrh	r3, [r4, #12]
 80090a6:	4a05      	ldr	r2, [pc, #20]	; (80090bc <__swrite+0x34>)
 80090a8:	0028      	movs	r0, r5
 80090aa:	4013      	ands	r3, r2
 80090ac:	81a3      	strh	r3, [r4, #12]
 80090ae:	0032      	movs	r2, r6
 80090b0:	230e      	movs	r3, #14
 80090b2:	5ee1      	ldrsh	r1, [r4, r3]
 80090b4:	003b      	movs	r3, r7
 80090b6:	f000 f81f 	bl	80090f8 <_write_r>
 80090ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090bc:	ffffefff 	.word	0xffffefff

080090c0 <__sseek>:
 80090c0:	b570      	push	{r4, r5, r6, lr}
 80090c2:	000c      	movs	r4, r1
 80090c4:	250e      	movs	r5, #14
 80090c6:	5f49      	ldrsh	r1, [r1, r5]
 80090c8:	f000 f860 	bl	800918c <_lseek_r>
 80090cc:	89a3      	ldrh	r3, [r4, #12]
 80090ce:	1c42      	adds	r2, r0, #1
 80090d0:	d103      	bne.n	80090da <__sseek+0x1a>
 80090d2:	4a05      	ldr	r2, [pc, #20]	; (80090e8 <__sseek+0x28>)
 80090d4:	4013      	ands	r3, r2
 80090d6:	81a3      	strh	r3, [r4, #12]
 80090d8:	bd70      	pop	{r4, r5, r6, pc}
 80090da:	2280      	movs	r2, #128	; 0x80
 80090dc:	0152      	lsls	r2, r2, #5
 80090de:	4313      	orrs	r3, r2
 80090e0:	81a3      	strh	r3, [r4, #12]
 80090e2:	6560      	str	r0, [r4, #84]	; 0x54
 80090e4:	e7f8      	b.n	80090d8 <__sseek+0x18>
 80090e6:	46c0      	nop			; (mov r8, r8)
 80090e8:	ffffefff 	.word	0xffffefff

080090ec <__sclose>:
 80090ec:	b510      	push	{r4, lr}
 80090ee:	230e      	movs	r3, #14
 80090f0:	5ec9      	ldrsh	r1, [r1, r3]
 80090f2:	f000 f815 	bl	8009120 <_close_r>
 80090f6:	bd10      	pop	{r4, pc}

080090f8 <_write_r>:
 80090f8:	b570      	push	{r4, r5, r6, lr}
 80090fa:	0004      	movs	r4, r0
 80090fc:	0008      	movs	r0, r1
 80090fe:	0011      	movs	r1, r2
 8009100:	001a      	movs	r2, r3
 8009102:	2300      	movs	r3, #0
 8009104:	4d05      	ldr	r5, [pc, #20]	; (800911c <_write_r+0x24>)
 8009106:	602b      	str	r3, [r5, #0]
 8009108:	f7fa f826 	bl	8003158 <_write>
 800910c:	1c43      	adds	r3, r0, #1
 800910e:	d103      	bne.n	8009118 <_write_r+0x20>
 8009110:	682b      	ldr	r3, [r5, #0]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d000      	beq.n	8009118 <_write_r+0x20>
 8009116:	6023      	str	r3, [r4, #0]
 8009118:	bd70      	pop	{r4, r5, r6, pc}
 800911a:	46c0      	nop			; (mov r8, r8)
 800911c:	20000700 	.word	0x20000700

08009120 <_close_r>:
 8009120:	2300      	movs	r3, #0
 8009122:	b570      	push	{r4, r5, r6, lr}
 8009124:	4d06      	ldr	r5, [pc, #24]	; (8009140 <_close_r+0x20>)
 8009126:	0004      	movs	r4, r0
 8009128:	0008      	movs	r0, r1
 800912a:	602b      	str	r3, [r5, #0]
 800912c:	f7fa f830 	bl	8003190 <_close>
 8009130:	1c43      	adds	r3, r0, #1
 8009132:	d103      	bne.n	800913c <_close_r+0x1c>
 8009134:	682b      	ldr	r3, [r5, #0]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d000      	beq.n	800913c <_close_r+0x1c>
 800913a:	6023      	str	r3, [r4, #0]
 800913c:	bd70      	pop	{r4, r5, r6, pc}
 800913e:	46c0      	nop			; (mov r8, r8)
 8009140:	20000700 	.word	0x20000700

08009144 <_fstat_r>:
 8009144:	2300      	movs	r3, #0
 8009146:	b570      	push	{r4, r5, r6, lr}
 8009148:	4d06      	ldr	r5, [pc, #24]	; (8009164 <_fstat_r+0x20>)
 800914a:	0004      	movs	r4, r0
 800914c:	0008      	movs	r0, r1
 800914e:	0011      	movs	r1, r2
 8009150:	602b      	str	r3, [r5, #0]
 8009152:	f7fa f827 	bl	80031a4 <_fstat>
 8009156:	1c43      	adds	r3, r0, #1
 8009158:	d103      	bne.n	8009162 <_fstat_r+0x1e>
 800915a:	682b      	ldr	r3, [r5, #0]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d000      	beq.n	8009162 <_fstat_r+0x1e>
 8009160:	6023      	str	r3, [r4, #0]
 8009162:	bd70      	pop	{r4, r5, r6, pc}
 8009164:	20000700 	.word	0x20000700

08009168 <_isatty_r>:
 8009168:	2300      	movs	r3, #0
 800916a:	b570      	push	{r4, r5, r6, lr}
 800916c:	4d06      	ldr	r5, [pc, #24]	; (8009188 <_isatty_r+0x20>)
 800916e:	0004      	movs	r4, r0
 8009170:	0008      	movs	r0, r1
 8009172:	602b      	str	r3, [r5, #0]
 8009174:	f7fa f824 	bl	80031c0 <_isatty>
 8009178:	1c43      	adds	r3, r0, #1
 800917a:	d103      	bne.n	8009184 <_isatty_r+0x1c>
 800917c:	682b      	ldr	r3, [r5, #0]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d000      	beq.n	8009184 <_isatty_r+0x1c>
 8009182:	6023      	str	r3, [r4, #0]
 8009184:	bd70      	pop	{r4, r5, r6, pc}
 8009186:	46c0      	nop			; (mov r8, r8)
 8009188:	20000700 	.word	0x20000700

0800918c <_lseek_r>:
 800918c:	b570      	push	{r4, r5, r6, lr}
 800918e:	0004      	movs	r4, r0
 8009190:	0008      	movs	r0, r1
 8009192:	0011      	movs	r1, r2
 8009194:	001a      	movs	r2, r3
 8009196:	2300      	movs	r3, #0
 8009198:	4d05      	ldr	r5, [pc, #20]	; (80091b0 <_lseek_r+0x24>)
 800919a:	602b      	str	r3, [r5, #0]
 800919c:	f7fa f819 	bl	80031d2 <_lseek>
 80091a0:	1c43      	adds	r3, r0, #1
 80091a2:	d103      	bne.n	80091ac <_lseek_r+0x20>
 80091a4:	682b      	ldr	r3, [r5, #0]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d000      	beq.n	80091ac <_lseek_r+0x20>
 80091aa:	6023      	str	r3, [r4, #0]
 80091ac:	bd70      	pop	{r4, r5, r6, pc}
 80091ae:	46c0      	nop			; (mov r8, r8)
 80091b0:	20000700 	.word	0x20000700

080091b4 <_read_r>:
 80091b4:	b570      	push	{r4, r5, r6, lr}
 80091b6:	0004      	movs	r4, r0
 80091b8:	0008      	movs	r0, r1
 80091ba:	0011      	movs	r1, r2
 80091bc:	001a      	movs	r2, r3
 80091be:	2300      	movs	r3, #0
 80091c0:	4d05      	ldr	r5, [pc, #20]	; (80091d8 <_read_r+0x24>)
 80091c2:	602b      	str	r3, [r5, #0]
 80091c4:	f7f9 ffab 	bl	800311e <_read>
 80091c8:	1c43      	adds	r3, r0, #1
 80091ca:	d103      	bne.n	80091d4 <_read_r+0x20>
 80091cc:	682b      	ldr	r3, [r5, #0]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d000      	beq.n	80091d4 <_read_r+0x20>
 80091d2:	6023      	str	r3, [r4, #0]
 80091d4:	bd70      	pop	{r4, r5, r6, pc}
 80091d6:	46c0      	nop			; (mov r8, r8)
 80091d8:	20000700 	.word	0x20000700

080091dc <_init>:
 80091dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091de:	46c0      	nop			; (mov r8, r8)
 80091e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091e2:	bc08      	pop	{r3}
 80091e4:	469e      	mov	lr, r3
 80091e6:	4770      	bx	lr

080091e8 <_fini>:
 80091e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ea:	46c0      	nop			; (mov r8, r8)
 80091ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ee:	bc08      	pop	{r3}
 80091f0:	469e      	mov	lr, r3
 80091f2:	4770      	bx	lr
