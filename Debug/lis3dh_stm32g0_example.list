
lis3dh_stm32g0_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b18  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08002bd4  08002bd4  00012bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c5c  08002c5c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002c5c  08002c5c  00012c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c64  08002c64  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c64  08002c64  00012c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c68  08002c68  00012c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  2000000c  08002c78  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08002c78  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce07  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fcb  00000000  00000000  0002ce3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a50  00000000  00000000  0002ee08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000978  00000000  00000000  0002f858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178d6  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dc32  00000000  00000000  00047aa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094780  00000000  00000000  000556d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e9e58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000238c  00000000  00000000  000e9ea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002bbc 	.word	0x08002bbc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08002bbc 	.word	0x08002bbc

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	469b      	mov	fp, r3
 8000466:	d433      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000468:	465a      	mov	r2, fp
 800046a:	4653      	mov	r3, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83a      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e078      	b.n	8000574 <__udivmoddi4+0x144>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e075      	b.n	800057a <__udivmoddi4+0x14a>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e028      	b.n	80004fa <__udivmoddi4+0xca>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	2320      	movs	r3, #32
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	4652      	mov	r2, sl
 80004d8:	40da      	lsrs	r2, r3
 80004da:	4641      	mov	r1, r8
 80004dc:	0013      	movs	r3, r2
 80004de:	464a      	mov	r2, r9
 80004e0:	408a      	lsls	r2, r1
 80004e2:	0017      	movs	r7, r2
 80004e4:	4642      	mov	r2, r8
 80004e6:	431f      	orrs	r7, r3
 80004e8:	4653      	mov	r3, sl
 80004ea:	4093      	lsls	r3, r2
 80004ec:	001e      	movs	r6, r3
 80004ee:	42af      	cmp	r7, r5
 80004f0:	d9c4      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	4643      	mov	r3, r8
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0d9      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000500:	07fb      	lsls	r3, r7, #31
 8000502:	0872      	lsrs	r2, r6, #1
 8000504:	431a      	orrs	r2, r3
 8000506:	4646      	mov	r6, r8
 8000508:	087b      	lsrs	r3, r7, #1
 800050a:	e00e      	b.n	800052a <__udivmoddi4+0xfa>
 800050c:	42ab      	cmp	r3, r5
 800050e:	d101      	bne.n	8000514 <__udivmoddi4+0xe4>
 8000510:	42a2      	cmp	r2, r4
 8000512:	d80c      	bhi.n	800052e <__udivmoddi4+0xfe>
 8000514:	1aa4      	subs	r4, r4, r2
 8000516:	419d      	sbcs	r5, r3
 8000518:	2001      	movs	r0, #1
 800051a:	1924      	adds	r4, r4, r4
 800051c:	416d      	adcs	r5, r5
 800051e:	2100      	movs	r1, #0
 8000520:	3e01      	subs	r6, #1
 8000522:	1824      	adds	r4, r4, r0
 8000524:	414d      	adcs	r5, r1
 8000526:	2e00      	cmp	r6, #0
 8000528:	d006      	beq.n	8000538 <__udivmoddi4+0x108>
 800052a:	42ab      	cmp	r3, r5
 800052c:	d9ee      	bls.n	800050c <__udivmoddi4+0xdc>
 800052e:	3e01      	subs	r6, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2e00      	cmp	r6, #0
 8000536:	d1f8      	bne.n	800052a <__udivmoddi4+0xfa>
 8000538:	9800      	ldr	r0, [sp, #0]
 800053a:	9901      	ldr	r1, [sp, #4]
 800053c:	465b      	mov	r3, fp
 800053e:	1900      	adds	r0, r0, r4
 8000540:	4169      	adcs	r1, r5
 8000542:	2b00      	cmp	r3, #0
 8000544:	db24      	blt.n	8000590 <__udivmoddi4+0x160>
 8000546:	002b      	movs	r3, r5
 8000548:	465a      	mov	r2, fp
 800054a:	4644      	mov	r4, r8
 800054c:	40d3      	lsrs	r3, r2
 800054e:	002a      	movs	r2, r5
 8000550:	40e2      	lsrs	r2, r4
 8000552:	001c      	movs	r4, r3
 8000554:	465b      	mov	r3, fp
 8000556:	0015      	movs	r5, r2
 8000558:	2b00      	cmp	r3, #0
 800055a:	db2a      	blt.n	80005b2 <__udivmoddi4+0x182>
 800055c:	0026      	movs	r6, r4
 800055e:	409e      	lsls	r6, r3
 8000560:	0033      	movs	r3, r6
 8000562:	0026      	movs	r6, r4
 8000564:	4647      	mov	r7, r8
 8000566:	40be      	lsls	r6, r7
 8000568:	0032      	movs	r2, r6
 800056a:	1a80      	subs	r0, r0, r2
 800056c:	4199      	sbcs	r1, r3
 800056e:	9000      	str	r0, [sp, #0]
 8000570:	9101      	str	r1, [sp, #4]
 8000572:	e79f      	b.n	80004b4 <__udivmoddi4+0x84>
 8000574:	42a3      	cmp	r3, r4
 8000576:	d8bc      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 8000578:	e783      	b.n	8000482 <__udivmoddi4+0x52>
 800057a:	4642      	mov	r2, r8
 800057c:	2320      	movs	r3, #32
 800057e:	2100      	movs	r1, #0
 8000580:	1a9b      	subs	r3, r3, r2
 8000582:	2200      	movs	r2, #0
 8000584:	9100      	str	r1, [sp, #0]
 8000586:	9201      	str	r2, [sp, #4]
 8000588:	2201      	movs	r2, #1
 800058a:	40da      	lsrs	r2, r3
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	e786      	b.n	800049e <__udivmoddi4+0x6e>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	002a      	movs	r2, r5
 8000598:	4646      	mov	r6, r8
 800059a:	409a      	lsls	r2, r3
 800059c:	0023      	movs	r3, r4
 800059e:	40f3      	lsrs	r3, r6
 80005a0:	4644      	mov	r4, r8
 80005a2:	4313      	orrs	r3, r2
 80005a4:	002a      	movs	r2, r5
 80005a6:	40e2      	lsrs	r2, r4
 80005a8:	001c      	movs	r4, r3
 80005aa:	465b      	mov	r3, fp
 80005ac:	0015      	movs	r5, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	dad4      	bge.n	800055c <__udivmoddi4+0x12c>
 80005b2:	4642      	mov	r2, r8
 80005b4:	002f      	movs	r7, r5
 80005b6:	2320      	movs	r3, #32
 80005b8:	0026      	movs	r6, r4
 80005ba:	4097      	lsls	r7, r2
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	40de      	lsrs	r6, r3
 80005c0:	003b      	movs	r3, r7
 80005c2:	4333      	orrs	r3, r6
 80005c4:	e7cd      	b.n	8000562 <__udivmoddi4+0x132>
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b08b      	sub	sp, #44	; 0x2c
 8000620:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000622:	2414      	movs	r4, #20
 8000624:	193b      	adds	r3, r7, r4
 8000626:	0018      	movs	r0, r3
 8000628:	2314      	movs	r3, #20
 800062a:	001a      	movs	r2, r3
 800062c:	2100      	movs	r1, #0
 800062e:	f002 fabd 	bl	8002bac <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000632:	4b33      	ldr	r3, [pc, #204]	; (8000700 <MX_GPIO_Init+0xe4>)
 8000634:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000636:	4b32      	ldr	r3, [pc, #200]	; (8000700 <MX_GPIO_Init+0xe4>)
 8000638:	2104      	movs	r1, #4
 800063a:	430a      	orrs	r2, r1
 800063c:	635a      	str	r2, [r3, #52]	; 0x34
 800063e:	4b30      	ldr	r3, [pc, #192]	; (8000700 <MX_GPIO_Init+0xe4>)
 8000640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000642:	2204      	movs	r2, #4
 8000644:	4013      	ands	r3, r2
 8000646:	613b      	str	r3, [r7, #16]
 8000648:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800064a:	4b2d      	ldr	r3, [pc, #180]	; (8000700 <MX_GPIO_Init+0xe4>)
 800064c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800064e:	4b2c      	ldr	r3, [pc, #176]	; (8000700 <MX_GPIO_Init+0xe4>)
 8000650:	2120      	movs	r1, #32
 8000652:	430a      	orrs	r2, r1
 8000654:	635a      	str	r2, [r3, #52]	; 0x34
 8000656:	4b2a      	ldr	r3, [pc, #168]	; (8000700 <MX_GPIO_Init+0xe4>)
 8000658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800065a:	2220      	movs	r2, #32
 800065c:	4013      	ands	r3, r2
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	4b27      	ldr	r3, [pc, #156]	; (8000700 <MX_GPIO_Init+0xe4>)
 8000664:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000666:	4b26      	ldr	r3, [pc, #152]	; (8000700 <MX_GPIO_Init+0xe4>)
 8000668:	2101      	movs	r1, #1
 800066a:	430a      	orrs	r2, r1
 800066c:	635a      	str	r2, [r3, #52]	; 0x34
 800066e:	4b24      	ldr	r3, [pc, #144]	; (8000700 <MX_GPIO_Init+0xe4>)
 8000670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000672:	2201      	movs	r2, #1
 8000674:	4013      	ands	r3, r2
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067a:	4b21      	ldr	r3, [pc, #132]	; (8000700 <MX_GPIO_Init+0xe4>)
 800067c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800067e:	4b20      	ldr	r3, [pc, #128]	; (8000700 <MX_GPIO_Init+0xe4>)
 8000680:	2102      	movs	r1, #2
 8000682:	430a      	orrs	r2, r1
 8000684:	635a      	str	r2, [r3, #52]	; 0x34
 8000686:	4b1e      	ldr	r3, [pc, #120]	; (8000700 <MX_GPIO_Init+0xe4>)
 8000688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800068a:	2202      	movs	r2, #2
 800068c:	4013      	ands	r3, r2
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000692:	23a0      	movs	r3, #160	; 0xa0
 8000694:	05db      	lsls	r3, r3, #23
 8000696:	2200      	movs	r2, #0
 8000698:	2120      	movs	r1, #32
 800069a:	0018      	movs	r0, r3
 800069c:	f000 fccc 	bl	8001038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80006a0:	4b18      	ldr	r3, [pc, #96]	; (8000704 <MX_GPIO_Init+0xe8>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	2101      	movs	r1, #1
 80006a6:	0018      	movs	r0, r3
 80006a8:	f000 fcc6 	bl	8001038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80006ac:	193b      	adds	r3, r7, r4
 80006ae:	2220      	movs	r2, #32
 80006b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b2:	193b      	adds	r3, r7, r4
 80006b4:	2201      	movs	r2, #1
 80006b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	193b      	adds	r3, r7, r4
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006be:	193b      	adds	r3, r7, r4
 80006c0:	2202      	movs	r2, #2
 80006c2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80006c4:	193a      	adds	r2, r7, r4
 80006c6:	23a0      	movs	r3, #160	; 0xa0
 80006c8:	05db      	lsls	r3, r3, #23
 80006ca:	0011      	movs	r1, r2
 80006cc:	0018      	movs	r0, r3
 80006ce:	f000 fb4f 	bl	8000d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80006d2:	0021      	movs	r1, r4
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2201      	movs	r2, #1
 80006d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2201      	movs	r2, #1
 80006de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2200      	movs	r2, #0
 80006ea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	4a05      	ldr	r2, [pc, #20]	; (8000704 <MX_GPIO_Init+0xe8>)
 80006f0:	0019      	movs	r1, r3
 80006f2:	0010      	movs	r0, r2
 80006f4:	f000 fb3c 	bl	8000d70 <HAL_GPIO_Init>

}
 80006f8:	46c0      	nop			; (mov r8, r8)
 80006fa:	46bd      	mov	sp, r7
 80006fc:	b00b      	add	sp, #44	; 0x2c
 80006fe:	bd90      	pop	{r4, r7, pc}
 8000700:	40021000 	.word	0x40021000
 8000704:	50000400 	.word	0x50000400

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800070c:	f000 f9f6 	bl	8000afc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000710:	f000 f807 	bl	8000722 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000714:	f7ff ff82 	bl	800061c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000718:	f000 f918 	bl	800094c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800071c:	f000 f84e 	bl	80007bc <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000720:	e7fe      	b.n	8000720 <main+0x18>

08000722 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000722:	b590      	push	{r4, r7, lr}
 8000724:	b093      	sub	sp, #76	; 0x4c
 8000726:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000728:	2410      	movs	r4, #16
 800072a:	193b      	adds	r3, r7, r4
 800072c:	0018      	movs	r0, r3
 800072e:	2338      	movs	r3, #56	; 0x38
 8000730:	001a      	movs	r2, r3
 8000732:	2100      	movs	r1, #0
 8000734:	f002 fa3a 	bl	8002bac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	003b      	movs	r3, r7
 800073a:	0018      	movs	r0, r3
 800073c:	2310      	movs	r3, #16
 800073e:	001a      	movs	r2, r3
 8000740:	2100      	movs	r1, #0
 8000742:	f002 fa33 	bl	8002bac <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000746:	2380      	movs	r3, #128	; 0x80
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	0018      	movs	r0, r3
 800074c:	f000 fc92 	bl	8001074 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000750:	193b      	adds	r3, r7, r4
 8000752:	2202      	movs	r2, #2
 8000754:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000756:	193b      	adds	r3, r7, r4
 8000758:	2280      	movs	r2, #128	; 0x80
 800075a:	0052      	lsls	r2, r2, #1
 800075c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800075e:	193b      	adds	r3, r7, r4
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000764:	193b      	adds	r3, r7, r4
 8000766:	2240      	movs	r2, #64	; 0x40
 8000768:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800076a:	193b      	adds	r3, r7, r4
 800076c:	2200      	movs	r2, #0
 800076e:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000770:	193b      	adds	r3, r7, r4
 8000772:	0018      	movs	r0, r3
 8000774:	f000 fcca 	bl	800110c <HAL_RCC_OscConfig>
 8000778:	1e03      	subs	r3, r0, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800077c:	f000 f819 	bl	80007b2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000780:	003b      	movs	r3, r7
 8000782:	2207      	movs	r2, #7
 8000784:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000786:	003b      	movs	r3, r7
 8000788:	2200      	movs	r2, #0
 800078a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078c:	003b      	movs	r3, r7
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000792:	003b      	movs	r3, r7
 8000794:	2200      	movs	r2, #0
 8000796:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000798:	003b      	movs	r3, r7
 800079a:	2100      	movs	r1, #0
 800079c:	0018      	movs	r0, r3
 800079e:	f000 ffcf 	bl	8001740 <HAL_RCC_ClockConfig>
 80007a2:	1e03      	subs	r3, r0, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0x88>
  {
    Error_Handler();
 80007a6:	f000 f804 	bl	80007b2 <Error_Handler>
  }
}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	46bd      	mov	sp, r7
 80007ae:	b013      	add	sp, #76	; 0x4c
 80007b0:	bd90      	pop	{r4, r7, pc}

080007b2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b6:	b672      	cpsid	i
}
 80007b8:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ba:	e7fe      	b.n	80007ba <Error_Handler+0x8>

080007bc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80007c0:	4b1b      	ldr	r3, [pc, #108]	; (8000830 <MX_SPI1_Init+0x74>)
 80007c2:	4a1c      	ldr	r2, [pc, #112]	; (8000834 <MX_SPI1_Init+0x78>)
 80007c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007c6:	4b1a      	ldr	r3, [pc, #104]	; (8000830 <MX_SPI1_Init+0x74>)
 80007c8:	2282      	movs	r2, #130	; 0x82
 80007ca:	0052      	lsls	r2, r2, #1
 80007cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007ce:	4b18      	ldr	r3, [pc, #96]	; (8000830 <MX_SPI1_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007d4:	4b16      	ldr	r3, [pc, #88]	; (8000830 <MX_SPI1_Init+0x74>)
 80007d6:	22e0      	movs	r2, #224	; 0xe0
 80007d8:	00d2      	lsls	r2, r2, #3
 80007da:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80007dc:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_SPI1_Init+0x74>)
 80007de:	2202      	movs	r2, #2
 80007e0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80007e2:	4b13      	ldr	r3, [pc, #76]	; (8000830 <MX_SPI1_Init+0x74>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_SPI1_Init+0x74>)
 80007ea:	2280      	movs	r2, #128	; 0x80
 80007ec:	0092      	lsls	r2, r2, #2
 80007ee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_SPI1_Init+0x74>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_SPI1_Init+0x74>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_SPI1_Init+0x74>)
 80007fe:	2200      	movs	r2, #0
 8000800:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <MX_SPI1_Init+0x74>)
 8000804:	2200      	movs	r2, #0
 8000806:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_SPI1_Init+0x74>)
 800080a:	2207      	movs	r2, #7
 800080c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <MX_SPI1_Init+0x74>)
 8000810:	2200      	movs	r2, #0
 8000812:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_SPI1_Init+0x74>)
 8000816:	2200      	movs	r2, #0
 8000818:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800081a:	4b05      	ldr	r3, [pc, #20]	; (8000830 <MX_SPI1_Init+0x74>)
 800081c:	0018      	movs	r0, r3
 800081e:	f001 faf1 	bl	8001e04 <HAL_SPI_Init>
 8000822:	1e03      	subs	r3, r0, #0
 8000824:	d001      	beq.n	800082a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000826:	f7ff ffc4 	bl	80007b2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000028 	.word	0x20000028
 8000834:	40013000 	.word	0x40013000

08000838 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000838:	b590      	push	{r4, r7, lr}
 800083a:	b08b      	sub	sp, #44	; 0x2c
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	2414      	movs	r4, #20
 8000842:	193b      	adds	r3, r7, r4
 8000844:	0018      	movs	r0, r3
 8000846:	2314      	movs	r3, #20
 8000848:	001a      	movs	r2, r3
 800084a:	2100      	movs	r1, #0
 800084c:	f002 f9ae 	bl	8002bac <memset>
  if(spiHandle->Instance==SPI1)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a1b      	ldr	r2, [pc, #108]	; (80008c4 <HAL_SPI_MspInit+0x8c>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d130      	bne.n	80008bc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800085a:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <HAL_SPI_MspInit+0x90>)
 800085c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800085e:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <HAL_SPI_MspInit+0x90>)
 8000860:	2180      	movs	r1, #128	; 0x80
 8000862:	0149      	lsls	r1, r1, #5
 8000864:	430a      	orrs	r2, r1
 8000866:	641a      	str	r2, [r3, #64]	; 0x40
 8000868:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <HAL_SPI_MspInit+0x90>)
 800086a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800086c:	2380      	movs	r3, #128	; 0x80
 800086e:	015b      	lsls	r3, r3, #5
 8000870:	4013      	ands	r3, r2
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <HAL_SPI_MspInit+0x90>)
 8000878:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800087a:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <HAL_SPI_MspInit+0x90>)
 800087c:	2101      	movs	r1, #1
 800087e:	430a      	orrs	r2, r1
 8000880:	635a      	str	r2, [r3, #52]	; 0x34
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <HAL_SPI_MspInit+0x90>)
 8000884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000886:	2201      	movs	r2, #1
 8000888:	4013      	ands	r3, r2
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800088e:	0021      	movs	r1, r4
 8000890:	187b      	adds	r3, r7, r1
 8000892:	22c2      	movs	r2, #194	; 0xc2
 8000894:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000896:	187b      	adds	r3, r7, r1
 8000898:	2202      	movs	r2, #2
 800089a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	187b      	adds	r3, r7, r1
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	2200      	movs	r2, #0
 80008a6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80008a8:	187b      	adds	r3, r7, r1
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ae:	187a      	adds	r2, r7, r1
 80008b0:	23a0      	movs	r3, #160	; 0xa0
 80008b2:	05db      	lsls	r3, r3, #23
 80008b4:	0011      	movs	r1, r2
 80008b6:	0018      	movs	r0, r3
 80008b8:	f000 fa5a 	bl	8000d70 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80008bc:	46c0      	nop			; (mov r8, r8)
 80008be:	46bd      	mov	sp, r7
 80008c0:	b00b      	add	sp, #44	; 0x2c
 80008c2:	bd90      	pop	{r4, r7, pc}
 80008c4:	40013000 	.word	0x40013000
 80008c8:	40021000 	.word	0x40021000

080008cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d2:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <HAL_MspInit+0x44>)
 80008d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <HAL_MspInit+0x44>)
 80008d8:	2101      	movs	r1, #1
 80008da:	430a      	orrs	r2, r1
 80008dc:	641a      	str	r2, [r3, #64]	; 0x40
 80008de:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <HAL_MspInit+0x44>)
 80008e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e2:	2201      	movs	r2, #1
 80008e4:	4013      	ands	r3, r2
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ea:	4b09      	ldr	r3, [pc, #36]	; (8000910 <HAL_MspInit+0x44>)
 80008ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008ee:	4b08      	ldr	r3, [pc, #32]	; (8000910 <HAL_MspInit+0x44>)
 80008f0:	2180      	movs	r1, #128	; 0x80
 80008f2:	0549      	lsls	r1, r1, #21
 80008f4:	430a      	orrs	r2, r1
 80008f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80008f8:	4b05      	ldr	r3, [pc, #20]	; (8000910 <HAL_MspInit+0x44>)
 80008fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008fc:	2380      	movs	r3, #128	; 0x80
 80008fe:	055b      	lsls	r3, r3, #21
 8000900:	4013      	ands	r3, r2
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	46bd      	mov	sp, r7
 800090a:	b002      	add	sp, #8
 800090c:	bd80      	pop	{r7, pc}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	40021000 	.word	0x40021000

08000914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <NMI_Handler+0x4>

0800091a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800091e:	e7fe      	b.n	800091e <HardFault_Handler+0x4>

08000920 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000924:	46c0      	nop			; (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000938:	f000 f94a 	bl	8000bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800093c:	46c0      	nop			; (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000950:	4b23      	ldr	r3, [pc, #140]	; (80009e0 <MX_USART2_UART_Init+0x94>)
 8000952:	4a24      	ldr	r2, [pc, #144]	; (80009e4 <MX_USART2_UART_Init+0x98>)
 8000954:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000956:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <MX_USART2_UART_Init+0x94>)
 8000958:	22e1      	movs	r2, #225	; 0xe1
 800095a:	0252      	lsls	r2, r2, #9
 800095c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800095e:	4b20      	ldr	r3, [pc, #128]	; (80009e0 <MX_USART2_UART_Init+0x94>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000964:	4b1e      	ldr	r3, [pc, #120]	; (80009e0 <MX_USART2_UART_Init+0x94>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800096a:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <MX_USART2_UART_Init+0x94>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000970:	4b1b      	ldr	r3, [pc, #108]	; (80009e0 <MX_USART2_UART_Init+0x94>)
 8000972:	220c      	movs	r2, #12
 8000974:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000976:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <MX_USART2_UART_Init+0x94>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800097c:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <MX_USART2_UART_Init+0x94>)
 800097e:	2200      	movs	r2, #0
 8000980:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000982:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <MX_USART2_UART_Init+0x94>)
 8000984:	2200      	movs	r2, #0
 8000986:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000988:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <MX_USART2_UART_Init+0x94>)
 800098a:	2200      	movs	r2, #0
 800098c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800098e:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_USART2_UART_Init+0x94>)
 8000990:	2200      	movs	r2, #0
 8000992:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <MX_USART2_UART_Init+0x94>)
 8000996:	0018      	movs	r0, r3
 8000998:	f001 faec 	bl	8001f74 <HAL_UART_Init>
 800099c:	1e03      	subs	r3, r0, #0
 800099e:	d001      	beq.n	80009a4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009a0:	f7ff ff07 	bl	80007b2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a4:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_USART2_UART_Init+0x94>)
 80009a6:	2100      	movs	r1, #0
 80009a8:	0018      	movs	r0, r3
 80009aa:	f001 fffb 	bl	80029a4 <HAL_UARTEx_SetTxFifoThreshold>
 80009ae:	1e03      	subs	r3, r0, #0
 80009b0:	d001      	beq.n	80009b6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009b2:	f7ff fefe 	bl	80007b2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b6:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <MX_USART2_UART_Init+0x94>)
 80009b8:	2100      	movs	r1, #0
 80009ba:	0018      	movs	r0, r3
 80009bc:	f002 f832 	bl	8002a24 <HAL_UARTEx_SetRxFifoThreshold>
 80009c0:	1e03      	subs	r3, r0, #0
 80009c2:	d001      	beq.n	80009c8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80009c4:	f7ff fef5 	bl	80007b2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009c8:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <MX_USART2_UART_Init+0x94>)
 80009ca:	0018      	movs	r0, r3
 80009cc:	f001 ffb0 	bl	8002930 <HAL_UARTEx_DisableFifoMode>
 80009d0:	1e03      	subs	r3, r0, #0
 80009d2:	d001      	beq.n	80009d8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80009d4:	f7ff feed 	bl	80007b2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009d8:	46c0      	nop			; (mov r8, r8)
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	2000008c 	.word	0x2000008c
 80009e4:	40004400 	.word	0x40004400

080009e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009e8:	b590      	push	{r4, r7, lr}
 80009ea:	b097      	sub	sp, #92	; 0x5c
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	2344      	movs	r3, #68	; 0x44
 80009f2:	18fb      	adds	r3, r7, r3
 80009f4:	0018      	movs	r0, r3
 80009f6:	2314      	movs	r3, #20
 80009f8:	001a      	movs	r2, r3
 80009fa:	2100      	movs	r1, #0
 80009fc:	f002 f8d6 	bl	8002bac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a00:	2410      	movs	r4, #16
 8000a02:	193b      	adds	r3, r7, r4
 8000a04:	0018      	movs	r0, r3
 8000a06:	2334      	movs	r3, #52	; 0x34
 8000a08:	001a      	movs	r2, r3
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	f002 f8ce 	bl	8002bac <memset>
  if(uartHandle->Instance==USART2)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a22      	ldr	r2, [pc, #136]	; (8000aa0 <HAL_UART_MspInit+0xb8>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d13e      	bne.n	8000a98 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a1a:	193b      	adds	r3, r7, r4
 8000a1c:	2202      	movs	r2, #2
 8000a1e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a20:	193b      	adds	r3, r7, r4
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a26:	193b      	adds	r3, r7, r4
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f001 f833 	bl	8001a94 <HAL_RCCEx_PeriphCLKConfig>
 8000a2e:	1e03      	subs	r3, r0, #0
 8000a30:	d001      	beq.n	8000a36 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a32:	f7ff febe 	bl	80007b2 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a36:	4b1b      	ldr	r3, [pc, #108]	; (8000aa4 <HAL_UART_MspInit+0xbc>)
 8000a38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a3a:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <HAL_UART_MspInit+0xbc>)
 8000a3c:	2180      	movs	r1, #128	; 0x80
 8000a3e:	0289      	lsls	r1, r1, #10
 8000a40:	430a      	orrs	r2, r1
 8000a42:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a44:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <HAL_UART_MspInit+0xbc>)
 8000a46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a48:	2380      	movs	r3, #128	; 0x80
 8000a4a:	029b      	lsls	r3, r3, #10
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <HAL_UART_MspInit+0xbc>)
 8000a54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a56:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <HAL_UART_MspInit+0xbc>)
 8000a58:	2101      	movs	r1, #1
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a5e:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <HAL_UART_MspInit+0xbc>)
 8000a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a62:	2201      	movs	r2, #1
 8000a64:	4013      	ands	r3, r2
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000a6a:	2144      	movs	r1, #68	; 0x44
 8000a6c:	187b      	adds	r3, r7, r1
 8000a6e:	220c      	movs	r2, #12
 8000a70:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a72:	187b      	adds	r3, r7, r1
 8000a74:	2202      	movs	r2, #2
 8000a76:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a78:	187b      	adds	r3, r7, r1
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	187b      	adds	r3, r7, r1
 8000a80:	2200      	movs	r2, #0
 8000a82:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	2201      	movs	r2, #1
 8000a88:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8a:	187a      	adds	r2, r7, r1
 8000a8c:	23a0      	movs	r3, #160	; 0xa0
 8000a8e:	05db      	lsls	r3, r3, #23
 8000a90:	0011      	movs	r1, r2
 8000a92:	0018      	movs	r0, r3
 8000a94:	f000 f96c 	bl	8000d70 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a98:	46c0      	nop			; (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	b017      	add	sp, #92	; 0x5c
 8000a9e:	bd90      	pop	{r4, r7, pc}
 8000aa0:	40004400 	.word	0x40004400
 8000aa4:	40021000 	.word	0x40021000

08000aa8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000aa8:	480d      	ldr	r0, [pc, #52]	; (8000ae0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000aaa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000aac:	f7ff ff49 	bl	8000942 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ab0:	480c      	ldr	r0, [pc, #48]	; (8000ae4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ab2:	490d      	ldr	r1, [pc, #52]	; (8000ae8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ab4:	4a0d      	ldr	r2, [pc, #52]	; (8000aec <LoopForever+0xe>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab8:	e002      	b.n	8000ac0 <LoopCopyDataInit>

08000aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000abe:	3304      	adds	r3, #4

08000ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac4:	d3f9      	bcc.n	8000aba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac6:	4a0a      	ldr	r2, [pc, #40]	; (8000af0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ac8:	4c0a      	ldr	r4, [pc, #40]	; (8000af4 <LoopForever+0x16>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000acc:	e001      	b.n	8000ad2 <LoopFillZerobss>

08000ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad0:	3204      	adds	r2, #4

08000ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad4:	d3fb      	bcc.n	8000ace <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ad6:	f002 f845 	bl	8002b64 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000ada:	f7ff fe15 	bl	8000708 <main>

08000ade <LoopForever>:

LoopForever:
  b LoopForever
 8000ade:	e7fe      	b.n	8000ade <LoopForever>
  ldr   r0, =_estack
 8000ae0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000aec:	08002c6c 	.word	0x08002c6c
  ldr r2, =_sbss
 8000af0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000af4:	20000124 	.word	0x20000124

08000af8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000af8:	e7fe      	b.n	8000af8 <ADC1_COMP_IRQHandler>
	...

08000afc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b02:	1dfb      	adds	r3, r7, #7
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b08:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <HAL_Init+0x3c>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <HAL_Init+0x3c>)
 8000b0e:	2180      	movs	r1, #128	; 0x80
 8000b10:	0049      	lsls	r1, r1, #1
 8000b12:	430a      	orrs	r2, r1
 8000b14:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b16:	2000      	movs	r0, #0
 8000b18:	f000 f810 	bl	8000b3c <HAL_InitTick>
 8000b1c:	1e03      	subs	r3, r0, #0
 8000b1e:	d003      	beq.n	8000b28 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b20:	1dfb      	adds	r3, r7, #7
 8000b22:	2201      	movs	r2, #1
 8000b24:	701a      	strb	r2, [r3, #0]
 8000b26:	e001      	b.n	8000b2c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000b28:	f7ff fed0 	bl	80008cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b2c:	1dfb      	adds	r3, r7, #7
 8000b2e:	781b      	ldrb	r3, [r3, #0]
}
 8000b30:	0018      	movs	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	b002      	add	sp, #8
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40022000 	.word	0x40022000

08000b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b3c:	b590      	push	{r4, r7, lr}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b44:	230f      	movs	r3, #15
 8000b46:	18fb      	adds	r3, r7, r3
 8000b48:	2200      	movs	r2, #0
 8000b4a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000b4c:	4b1d      	ldr	r3, [pc, #116]	; (8000bc4 <HAL_InitTick+0x88>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d02b      	beq.n	8000bac <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000b54:	4b1c      	ldr	r3, [pc, #112]	; (8000bc8 <HAL_InitTick+0x8c>)
 8000b56:	681c      	ldr	r4, [r3, #0]
 8000b58:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <HAL_InitTick+0x88>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	0019      	movs	r1, r3
 8000b5e:	23fa      	movs	r3, #250	; 0xfa
 8000b60:	0098      	lsls	r0, r3, #2
 8000b62:	f7ff facf 	bl	8000104 <__udivsi3>
 8000b66:	0003      	movs	r3, r0
 8000b68:	0019      	movs	r1, r3
 8000b6a:	0020      	movs	r0, r4
 8000b6c:	f7ff faca 	bl	8000104 <__udivsi3>
 8000b70:	0003      	movs	r3, r0
 8000b72:	0018      	movs	r0, r3
 8000b74:	f000 f8ef 	bl	8000d56 <HAL_SYSTICK_Config>
 8000b78:	1e03      	subs	r3, r0, #0
 8000b7a:	d112      	bne.n	8000ba2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2b03      	cmp	r3, #3
 8000b80:	d80a      	bhi.n	8000b98 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b82:	6879      	ldr	r1, [r7, #4]
 8000b84:	2301      	movs	r3, #1
 8000b86:	425b      	negs	r3, r3
 8000b88:	2200      	movs	r2, #0
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f000 f8ce 	bl	8000d2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b90:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <HAL_InitTick+0x90>)
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	e00d      	b.n	8000bb4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000b98:	230f      	movs	r3, #15
 8000b9a:	18fb      	adds	r3, r7, r3
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	701a      	strb	r2, [r3, #0]
 8000ba0:	e008      	b.n	8000bb4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ba2:	230f      	movs	r3, #15
 8000ba4:	18fb      	adds	r3, r7, r3
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	701a      	strb	r2, [r3, #0]
 8000baa:	e003      	b.n	8000bb4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bac:	230f      	movs	r3, #15
 8000bae:	18fb      	adds	r3, r7, r3
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000bb4:	230f      	movs	r3, #15
 8000bb6:	18fb      	adds	r3, r7, r3
 8000bb8:	781b      	ldrb	r3, [r3, #0]
}
 8000bba:	0018      	movs	r0, r3
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	b005      	add	sp, #20
 8000bc0:	bd90      	pop	{r4, r7, pc}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	20000008 	.word	0x20000008
 8000bc8:	20000000 	.word	0x20000000
 8000bcc:	20000004 	.word	0x20000004

08000bd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bd4:	4b05      	ldr	r3, [pc, #20]	; (8000bec <HAL_IncTick+0x1c>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	001a      	movs	r2, r3
 8000bda:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <HAL_IncTick+0x20>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	18d2      	adds	r2, r2, r3
 8000be0:	4b03      	ldr	r3, [pc, #12]	; (8000bf0 <HAL_IncTick+0x20>)
 8000be2:	601a      	str	r2, [r3, #0]
}
 8000be4:	46c0      	nop			; (mov r8, r8)
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	20000008 	.word	0x20000008
 8000bf0:	20000120 	.word	0x20000120

08000bf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf8:	4b02      	ldr	r3, [pc, #8]	; (8000c04 <HAL_GetTick+0x10>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
}
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	20000120 	.word	0x20000120

08000c08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c08:	b590      	push	{r4, r7, lr}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	0002      	movs	r2, r0
 8000c10:	6039      	str	r1, [r7, #0]
 8000c12:	1dfb      	adds	r3, r7, #7
 8000c14:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c16:	1dfb      	adds	r3, r7, #7
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	2b7f      	cmp	r3, #127	; 0x7f
 8000c1c:	d828      	bhi.n	8000c70 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c1e:	4a2f      	ldr	r2, [pc, #188]	; (8000cdc <__NVIC_SetPriority+0xd4>)
 8000c20:	1dfb      	adds	r3, r7, #7
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	b25b      	sxtb	r3, r3
 8000c26:	089b      	lsrs	r3, r3, #2
 8000c28:	33c0      	adds	r3, #192	; 0xc0
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	589b      	ldr	r3, [r3, r2]
 8000c2e:	1dfa      	adds	r2, r7, #7
 8000c30:	7812      	ldrb	r2, [r2, #0]
 8000c32:	0011      	movs	r1, r2
 8000c34:	2203      	movs	r2, #3
 8000c36:	400a      	ands	r2, r1
 8000c38:	00d2      	lsls	r2, r2, #3
 8000c3a:	21ff      	movs	r1, #255	; 0xff
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	000a      	movs	r2, r1
 8000c40:	43d2      	mvns	r2, r2
 8000c42:	401a      	ands	r2, r3
 8000c44:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	019b      	lsls	r3, r3, #6
 8000c4a:	22ff      	movs	r2, #255	; 0xff
 8000c4c:	401a      	ands	r2, r3
 8000c4e:	1dfb      	adds	r3, r7, #7
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	0018      	movs	r0, r3
 8000c54:	2303      	movs	r3, #3
 8000c56:	4003      	ands	r3, r0
 8000c58:	00db      	lsls	r3, r3, #3
 8000c5a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c5c:	481f      	ldr	r0, [pc, #124]	; (8000cdc <__NVIC_SetPriority+0xd4>)
 8000c5e:	1dfb      	adds	r3, r7, #7
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	b25b      	sxtb	r3, r3
 8000c64:	089b      	lsrs	r3, r3, #2
 8000c66:	430a      	orrs	r2, r1
 8000c68:	33c0      	adds	r3, #192	; 0xc0
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c6e:	e031      	b.n	8000cd4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c70:	4a1b      	ldr	r2, [pc, #108]	; (8000ce0 <__NVIC_SetPriority+0xd8>)
 8000c72:	1dfb      	adds	r3, r7, #7
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	0019      	movs	r1, r3
 8000c78:	230f      	movs	r3, #15
 8000c7a:	400b      	ands	r3, r1
 8000c7c:	3b08      	subs	r3, #8
 8000c7e:	089b      	lsrs	r3, r3, #2
 8000c80:	3306      	adds	r3, #6
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	18d3      	adds	r3, r2, r3
 8000c86:	3304      	adds	r3, #4
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	1dfa      	adds	r2, r7, #7
 8000c8c:	7812      	ldrb	r2, [r2, #0]
 8000c8e:	0011      	movs	r1, r2
 8000c90:	2203      	movs	r2, #3
 8000c92:	400a      	ands	r2, r1
 8000c94:	00d2      	lsls	r2, r2, #3
 8000c96:	21ff      	movs	r1, #255	; 0xff
 8000c98:	4091      	lsls	r1, r2
 8000c9a:	000a      	movs	r2, r1
 8000c9c:	43d2      	mvns	r2, r2
 8000c9e:	401a      	ands	r2, r3
 8000ca0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	019b      	lsls	r3, r3, #6
 8000ca6:	22ff      	movs	r2, #255	; 0xff
 8000ca8:	401a      	ands	r2, r3
 8000caa:	1dfb      	adds	r3, r7, #7
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	0018      	movs	r0, r3
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	4003      	ands	r3, r0
 8000cb4:	00db      	lsls	r3, r3, #3
 8000cb6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cb8:	4809      	ldr	r0, [pc, #36]	; (8000ce0 <__NVIC_SetPriority+0xd8>)
 8000cba:	1dfb      	adds	r3, r7, #7
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	001c      	movs	r4, r3
 8000cc0:	230f      	movs	r3, #15
 8000cc2:	4023      	ands	r3, r4
 8000cc4:	3b08      	subs	r3, #8
 8000cc6:	089b      	lsrs	r3, r3, #2
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	3306      	adds	r3, #6
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	18c3      	adds	r3, r0, r3
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	601a      	str	r2, [r3, #0]
}
 8000cd4:	46c0      	nop			; (mov r8, r8)
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	b003      	add	sp, #12
 8000cda:	bd90      	pop	{r4, r7, pc}
 8000cdc:	e000e100 	.word	0xe000e100
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	1e5a      	subs	r2, r3, #1
 8000cf0:	2380      	movs	r3, #128	; 0x80
 8000cf2:	045b      	lsls	r3, r3, #17
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d301      	bcc.n	8000cfc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	e010      	b.n	8000d1e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cfc:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <SysTick_Config+0x44>)
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	3a01      	subs	r2, #1
 8000d02:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d04:	2301      	movs	r3, #1
 8000d06:	425b      	negs	r3, r3
 8000d08:	2103      	movs	r1, #3
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f7ff ff7c 	bl	8000c08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d10:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <SysTick_Config+0x44>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d16:	4b04      	ldr	r3, [pc, #16]	; (8000d28 <SysTick_Config+0x44>)
 8000d18:	2207      	movs	r2, #7
 8000d1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	0018      	movs	r0, r3
 8000d20:	46bd      	mov	sp, r7
 8000d22:	b002      	add	sp, #8
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	e000e010 	.word	0xe000e010

08000d2c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60b9      	str	r1, [r7, #8]
 8000d34:	607a      	str	r2, [r7, #4]
 8000d36:	210f      	movs	r1, #15
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	1c02      	adds	r2, r0, #0
 8000d3c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	187b      	adds	r3, r7, r1
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	b25b      	sxtb	r3, r3
 8000d46:	0011      	movs	r1, r2
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f7ff ff5d 	bl	8000c08 <__NVIC_SetPriority>
}
 8000d4e:	46c0      	nop			; (mov r8, r8)
 8000d50:	46bd      	mov	sp, r7
 8000d52:	b004      	add	sp, #16
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	0018      	movs	r0, r3
 8000d62:	f7ff ffbf 	bl	8000ce4 <SysTick_Config>
 8000d66:	0003      	movs	r3, r0
}
 8000d68:	0018      	movs	r0, r3
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	b002      	add	sp, #8
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d7e:	e147      	b.n	8001010 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2101      	movs	r1, #1
 8000d86:	697a      	ldr	r2, [r7, #20]
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	000a      	movs	r2, r1
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d100      	bne.n	8000d98 <HAL_GPIO_Init+0x28>
 8000d96:	e138      	b.n	800100a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	2203      	movs	r2, #3
 8000d9e:	4013      	ands	r3, r2
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d005      	beq.n	8000db0 <HAL_GPIO_Init+0x40>
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	2203      	movs	r2, #3
 8000daa:	4013      	ands	r3, r2
 8000dac:	2b02      	cmp	r3, #2
 8000dae:	d130      	bne.n	8000e12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2203      	movs	r2, #3
 8000dbc:	409a      	lsls	r2, r3
 8000dbe:	0013      	movs	r3, r2
 8000dc0:	43da      	mvns	r2, r3
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	68da      	ldr	r2, [r3, #12]
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	409a      	lsls	r2, r3
 8000dd2:	0013      	movs	r3, r2
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000de6:	2201      	movs	r2, #1
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	409a      	lsls	r2, r3
 8000dec:	0013      	movs	r3, r2
 8000dee:	43da      	mvns	r2, r3
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	4013      	ands	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	091b      	lsrs	r3, r3, #4
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	401a      	ands	r2, r3
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	409a      	lsls	r2, r3
 8000e04:	0013      	movs	r3, r2
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	2203      	movs	r2, #3
 8000e18:	4013      	ands	r3, r2
 8000e1a:	2b03      	cmp	r3, #3
 8000e1c:	d017      	beq.n	8000e4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	2203      	movs	r2, #3
 8000e2a:	409a      	lsls	r2, r3
 8000e2c:	0013      	movs	r3, r2
 8000e2e:	43da      	mvns	r2, r3
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	4013      	ands	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	689a      	ldr	r2, [r3, #8]
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	409a      	lsls	r2, r3
 8000e40:	0013      	movs	r3, r2
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	2203      	movs	r2, #3
 8000e54:	4013      	ands	r3, r2
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d123      	bne.n	8000ea2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	08da      	lsrs	r2, r3, #3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	3208      	adds	r2, #8
 8000e62:	0092      	lsls	r2, r2, #2
 8000e64:	58d3      	ldr	r3, [r2, r3]
 8000e66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	2207      	movs	r2, #7
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	220f      	movs	r2, #15
 8000e72:	409a      	lsls	r2, r3
 8000e74:	0013      	movs	r3, r2
 8000e76:	43da      	mvns	r2, r3
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	691a      	ldr	r2, [r3, #16]
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	2107      	movs	r1, #7
 8000e86:	400b      	ands	r3, r1
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	409a      	lsls	r2, r3
 8000e8c:	0013      	movs	r3, r2
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	08da      	lsrs	r2, r3, #3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3208      	adds	r2, #8
 8000e9c:	0092      	lsls	r2, r2, #2
 8000e9e:	6939      	ldr	r1, [r7, #16]
 8000ea0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	2203      	movs	r2, #3
 8000eae:	409a      	lsls	r2, r3
 8000eb0:	0013      	movs	r3, r2
 8000eb2:	43da      	mvns	r2, r3
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	401a      	ands	r2, r3
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	409a      	lsls	r2, r3
 8000ec8:	0013      	movs	r3, r2
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685a      	ldr	r2, [r3, #4]
 8000eda:	23c0      	movs	r3, #192	; 0xc0
 8000edc:	029b      	lsls	r3, r3, #10
 8000ede:	4013      	ands	r3, r2
 8000ee0:	d100      	bne.n	8000ee4 <HAL_GPIO_Init+0x174>
 8000ee2:	e092      	b.n	800100a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000ee4:	4a50      	ldr	r2, [pc, #320]	; (8001028 <HAL_GPIO_Init+0x2b8>)
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	089b      	lsrs	r3, r3, #2
 8000eea:	3318      	adds	r3, #24
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	589b      	ldr	r3, [r3, r2]
 8000ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	220f      	movs	r2, #15
 8000efc:	409a      	lsls	r2, r3
 8000efe:	0013      	movs	r3, r2
 8000f00:	43da      	mvns	r2, r3
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	4013      	ands	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	23a0      	movs	r3, #160	; 0xa0
 8000f0c:	05db      	lsls	r3, r3, #23
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d013      	beq.n	8000f3a <HAL_GPIO_Init+0x1ca>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a45      	ldr	r2, [pc, #276]	; (800102c <HAL_GPIO_Init+0x2bc>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d00d      	beq.n	8000f36 <HAL_GPIO_Init+0x1c6>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a44      	ldr	r2, [pc, #272]	; (8001030 <HAL_GPIO_Init+0x2c0>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d007      	beq.n	8000f32 <HAL_GPIO_Init+0x1c2>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a43      	ldr	r2, [pc, #268]	; (8001034 <HAL_GPIO_Init+0x2c4>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d101      	bne.n	8000f2e <HAL_GPIO_Init+0x1be>
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e006      	b.n	8000f3c <HAL_GPIO_Init+0x1cc>
 8000f2e:	2305      	movs	r3, #5
 8000f30:	e004      	b.n	8000f3c <HAL_GPIO_Init+0x1cc>
 8000f32:	2302      	movs	r3, #2
 8000f34:	e002      	b.n	8000f3c <HAL_GPIO_Init+0x1cc>
 8000f36:	2301      	movs	r3, #1
 8000f38:	e000      	b.n	8000f3c <HAL_GPIO_Init+0x1cc>
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	697a      	ldr	r2, [r7, #20]
 8000f3e:	2103      	movs	r1, #3
 8000f40:	400a      	ands	r2, r1
 8000f42:	00d2      	lsls	r2, r2, #3
 8000f44:	4093      	lsls	r3, r2
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000f4c:	4936      	ldr	r1, [pc, #216]	; (8001028 <HAL_GPIO_Init+0x2b8>)
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	089b      	lsrs	r3, r3, #2
 8000f52:	3318      	adds	r3, #24
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f5a:	4b33      	ldr	r3, [pc, #204]	; (8001028 <HAL_GPIO_Init+0x2b8>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	43da      	mvns	r2, r3
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	4013      	ands	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685a      	ldr	r2, [r3, #4]
 8000f6e:	2380      	movs	r3, #128	; 0x80
 8000f70:	035b      	lsls	r3, r3, #13
 8000f72:	4013      	ands	r3, r2
 8000f74:	d003      	beq.n	8000f7e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f7e:	4b2a      	ldr	r3, [pc, #168]	; (8001028 <HAL_GPIO_Init+0x2b8>)
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000f84:	4b28      	ldr	r3, [pc, #160]	; (8001028 <HAL_GPIO_Init+0x2b8>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	43da      	mvns	r2, r3
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	4013      	ands	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685a      	ldr	r2, [r3, #4]
 8000f98:	2380      	movs	r3, #128	; 0x80
 8000f9a:	039b      	lsls	r3, r3, #14
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	d003      	beq.n	8000fa8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fa8:	4b1f      	ldr	r3, [pc, #124]	; (8001028 <HAL_GPIO_Init+0x2b8>)
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000fae:	4a1e      	ldr	r2, [pc, #120]	; (8001028 <HAL_GPIO_Init+0x2b8>)
 8000fb0:	2384      	movs	r3, #132	; 0x84
 8000fb2:	58d3      	ldr	r3, [r2, r3]
 8000fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	43da      	mvns	r2, r3
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685a      	ldr	r2, [r3, #4]
 8000fc4:	2380      	movs	r3, #128	; 0x80
 8000fc6:	029b      	lsls	r3, r3, #10
 8000fc8:	4013      	ands	r3, r2
 8000fca:	d003      	beq.n	8000fd4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fd4:	4914      	ldr	r1, [pc, #80]	; (8001028 <HAL_GPIO_Init+0x2b8>)
 8000fd6:	2284      	movs	r2, #132	; 0x84
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000fdc:	4a12      	ldr	r2, [pc, #72]	; (8001028 <HAL_GPIO_Init+0x2b8>)
 8000fde:	2380      	movs	r3, #128	; 0x80
 8000fe0:	58d3      	ldr	r3, [r2, r3]
 8000fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	43da      	mvns	r2, r3
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	4013      	ands	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685a      	ldr	r2, [r3, #4]
 8000ff2:	2380      	movs	r3, #128	; 0x80
 8000ff4:	025b      	lsls	r3, r3, #9
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	d003      	beq.n	8001002 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001002:	4909      	ldr	r1, [pc, #36]	; (8001028 <HAL_GPIO_Init+0x2b8>)
 8001004:	2280      	movs	r2, #128	; 0x80
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	3301      	adds	r3, #1
 800100e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	40da      	lsrs	r2, r3
 8001018:	1e13      	subs	r3, r2, #0
 800101a:	d000      	beq.n	800101e <HAL_GPIO_Init+0x2ae>
 800101c:	e6b0      	b.n	8000d80 <HAL_GPIO_Init+0x10>
  }
}
 800101e:	46c0      	nop			; (mov r8, r8)
 8001020:	46c0      	nop			; (mov r8, r8)
 8001022:	46bd      	mov	sp, r7
 8001024:	b006      	add	sp, #24
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40021800 	.word	0x40021800
 800102c:	50000400 	.word	0x50000400
 8001030:	50000800 	.word	0x50000800
 8001034:	50000c00 	.word	0x50000c00

08001038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	0008      	movs	r0, r1
 8001042:	0011      	movs	r1, r2
 8001044:	1cbb      	adds	r3, r7, #2
 8001046:	1c02      	adds	r2, r0, #0
 8001048:	801a      	strh	r2, [r3, #0]
 800104a:	1c7b      	adds	r3, r7, #1
 800104c:	1c0a      	adds	r2, r1, #0
 800104e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001050:	1c7b      	adds	r3, r7, #1
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d004      	beq.n	8001062 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001058:	1cbb      	adds	r3, r7, #2
 800105a:	881a      	ldrh	r2, [r3, #0]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001060:	e003      	b.n	800106a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001062:	1cbb      	adds	r3, r7, #2
 8001064:	881a      	ldrh	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	629a      	str	r2, [r3, #40]	; 0x28
}
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	46bd      	mov	sp, r7
 800106e:	b002      	add	sp, #8
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800107c:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a19      	ldr	r2, [pc, #100]	; (80010e8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001082:	4013      	ands	r3, r2
 8001084:	0019      	movs	r1, r3
 8001086:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	430a      	orrs	r2, r1
 800108c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	2380      	movs	r3, #128	; 0x80
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	429a      	cmp	r2, r3
 8001096:	d11f      	bne.n	80010d8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001098:	4b14      	ldr	r3, [pc, #80]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0x78>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	0013      	movs	r3, r2
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	189b      	adds	r3, r3, r2
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	4912      	ldr	r1, [pc, #72]	; (80010f0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80010a6:	0018      	movs	r0, r3
 80010a8:	f7ff f82c 	bl	8000104 <__udivsi3>
 80010ac:	0003      	movs	r3, r0
 80010ae:	3301      	adds	r3, #1
 80010b0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010b2:	e008      	b.n	80010c6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	3b01      	subs	r3, #1
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	e001      	b.n	80010c6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80010c2:	2303      	movs	r3, #3
 80010c4:	e009      	b.n	80010da <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010c6:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80010c8:	695a      	ldr	r2, [r3, #20]
 80010ca:	2380      	movs	r3, #128	; 0x80
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	401a      	ands	r2, r3
 80010d0:	2380      	movs	r3, #128	; 0x80
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d0ed      	beq.n	80010b4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	0018      	movs	r0, r3
 80010dc:	46bd      	mov	sp, r7
 80010de:	b004      	add	sp, #16
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	40007000 	.word	0x40007000
 80010e8:	fffff9ff 	.word	0xfffff9ff
 80010ec:	20000000 	.word	0x20000000
 80010f0:	000f4240 	.word	0x000f4240

080010f4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80010f8:	4b03      	ldr	r3, [pc, #12]	; (8001108 <LL_RCC_GetAPB1Prescaler+0x14>)
 80010fa:	689a      	ldr	r2, [r3, #8]
 80010fc:	23e0      	movs	r3, #224	; 0xe0
 80010fe:	01db      	lsls	r3, r3, #7
 8001100:	4013      	ands	r3, r2
}
 8001102:	0018      	movs	r0, r3
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40021000 	.word	0x40021000

0800110c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d101      	bne.n	800111e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e2fe      	b.n	800171c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2201      	movs	r2, #1
 8001124:	4013      	ands	r3, r2
 8001126:	d100      	bne.n	800112a <HAL_RCC_OscConfig+0x1e>
 8001128:	e07c      	b.n	8001224 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800112a:	4bc3      	ldr	r3, [pc, #780]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	2238      	movs	r2, #56	; 0x38
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001134:	4bc0      	ldr	r3, [pc, #768]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	2203      	movs	r2, #3
 800113a:	4013      	ands	r3, r2
 800113c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	2b10      	cmp	r3, #16
 8001142:	d102      	bne.n	800114a <HAL_RCC_OscConfig+0x3e>
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	2b03      	cmp	r3, #3
 8001148:	d002      	beq.n	8001150 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	2b08      	cmp	r3, #8
 800114e:	d10b      	bne.n	8001168 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001150:	4bb9      	ldr	r3, [pc, #740]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	2380      	movs	r3, #128	; 0x80
 8001156:	029b      	lsls	r3, r3, #10
 8001158:	4013      	ands	r3, r2
 800115a:	d062      	beq.n	8001222 <HAL_RCC_OscConfig+0x116>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d15e      	bne.n	8001222 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e2d9      	b.n	800171c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685a      	ldr	r2, [r3, #4]
 800116c:	2380      	movs	r3, #128	; 0x80
 800116e:	025b      	lsls	r3, r3, #9
 8001170:	429a      	cmp	r2, r3
 8001172:	d107      	bne.n	8001184 <HAL_RCC_OscConfig+0x78>
 8001174:	4bb0      	ldr	r3, [pc, #704]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	4baf      	ldr	r3, [pc, #700]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 800117a:	2180      	movs	r1, #128	; 0x80
 800117c:	0249      	lsls	r1, r1, #9
 800117e:	430a      	orrs	r2, r1
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	e020      	b.n	80011c6 <HAL_RCC_OscConfig+0xba>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685a      	ldr	r2, [r3, #4]
 8001188:	23a0      	movs	r3, #160	; 0xa0
 800118a:	02db      	lsls	r3, r3, #11
 800118c:	429a      	cmp	r2, r3
 800118e:	d10e      	bne.n	80011ae <HAL_RCC_OscConfig+0xa2>
 8001190:	4ba9      	ldr	r3, [pc, #676]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4ba8      	ldr	r3, [pc, #672]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 8001196:	2180      	movs	r1, #128	; 0x80
 8001198:	02c9      	lsls	r1, r1, #11
 800119a:	430a      	orrs	r2, r1
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	4ba6      	ldr	r3, [pc, #664]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	4ba5      	ldr	r3, [pc, #660]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 80011a4:	2180      	movs	r1, #128	; 0x80
 80011a6:	0249      	lsls	r1, r1, #9
 80011a8:	430a      	orrs	r2, r1
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	e00b      	b.n	80011c6 <HAL_RCC_OscConfig+0xba>
 80011ae:	4ba2      	ldr	r3, [pc, #648]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	4ba1      	ldr	r3, [pc, #644]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 80011b4:	49a1      	ldr	r1, [pc, #644]	; (800143c <HAL_RCC_OscConfig+0x330>)
 80011b6:	400a      	ands	r2, r1
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	4b9f      	ldr	r3, [pc, #636]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	4b9e      	ldr	r3, [pc, #632]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 80011c0:	499f      	ldr	r1, [pc, #636]	; (8001440 <HAL_RCC_OscConfig+0x334>)
 80011c2:	400a      	ands	r2, r1
 80011c4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d014      	beq.n	80011f8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ce:	f7ff fd11 	bl	8000bf4 <HAL_GetTick>
 80011d2:	0003      	movs	r3, r0
 80011d4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011d6:	e008      	b.n	80011ea <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011d8:	f7ff fd0c 	bl	8000bf4 <HAL_GetTick>
 80011dc:	0002      	movs	r2, r0
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b64      	cmp	r3, #100	; 0x64
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e298      	b.n	800171c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011ea:	4b93      	ldr	r3, [pc, #588]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	2380      	movs	r3, #128	; 0x80
 80011f0:	029b      	lsls	r3, r3, #10
 80011f2:	4013      	ands	r3, r2
 80011f4:	d0f0      	beq.n	80011d8 <HAL_RCC_OscConfig+0xcc>
 80011f6:	e015      	b.n	8001224 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f8:	f7ff fcfc 	bl	8000bf4 <HAL_GetTick>
 80011fc:	0003      	movs	r3, r0
 80011fe:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001200:	e008      	b.n	8001214 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001202:	f7ff fcf7 	bl	8000bf4 <HAL_GetTick>
 8001206:	0002      	movs	r2, r0
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	2b64      	cmp	r3, #100	; 0x64
 800120e:	d901      	bls.n	8001214 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	e283      	b.n	800171c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001214:	4b88      	ldr	r3, [pc, #544]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	2380      	movs	r3, #128	; 0x80
 800121a:	029b      	lsls	r3, r3, #10
 800121c:	4013      	ands	r3, r2
 800121e:	d1f0      	bne.n	8001202 <HAL_RCC_OscConfig+0xf6>
 8001220:	e000      	b.n	8001224 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001222:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2202      	movs	r2, #2
 800122a:	4013      	ands	r3, r2
 800122c:	d100      	bne.n	8001230 <HAL_RCC_OscConfig+0x124>
 800122e:	e099      	b.n	8001364 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001230:	4b81      	ldr	r3, [pc, #516]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	2238      	movs	r2, #56	; 0x38
 8001236:	4013      	ands	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800123a:	4b7f      	ldr	r3, [pc, #508]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	2203      	movs	r2, #3
 8001240:	4013      	ands	r3, r2
 8001242:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	2b10      	cmp	r3, #16
 8001248:	d102      	bne.n	8001250 <HAL_RCC_OscConfig+0x144>
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	2b02      	cmp	r3, #2
 800124e:	d002      	beq.n	8001256 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d135      	bne.n	80012c2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001256:	4b78      	ldr	r3, [pc, #480]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	2380      	movs	r3, #128	; 0x80
 800125c:	00db      	lsls	r3, r3, #3
 800125e:	4013      	ands	r3, r2
 8001260:	d005      	beq.n	800126e <HAL_RCC_OscConfig+0x162>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d101      	bne.n	800126e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e256      	b.n	800171c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800126e:	4b72      	ldr	r3, [pc, #456]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	4a74      	ldr	r2, [pc, #464]	; (8001444 <HAL_RCC_OscConfig+0x338>)
 8001274:	4013      	ands	r3, r2
 8001276:	0019      	movs	r1, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	695b      	ldr	r3, [r3, #20]
 800127c:	021a      	lsls	r2, r3, #8
 800127e:	4b6e      	ldr	r3, [pc, #440]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 8001280:	430a      	orrs	r2, r1
 8001282:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d112      	bne.n	80012b0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800128a:	4b6b      	ldr	r3, [pc, #428]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a6e      	ldr	r2, [pc, #440]	; (8001448 <HAL_RCC_OscConfig+0x33c>)
 8001290:	4013      	ands	r3, r2
 8001292:	0019      	movs	r1, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	691a      	ldr	r2, [r3, #16]
 8001298:	4b67      	ldr	r3, [pc, #412]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 800129a:	430a      	orrs	r2, r1
 800129c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800129e:	4b66      	ldr	r3, [pc, #408]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	0adb      	lsrs	r3, r3, #11
 80012a4:	2207      	movs	r2, #7
 80012a6:	4013      	ands	r3, r2
 80012a8:	4a68      	ldr	r2, [pc, #416]	; (800144c <HAL_RCC_OscConfig+0x340>)
 80012aa:	40da      	lsrs	r2, r3
 80012ac:	4b68      	ldr	r3, [pc, #416]	; (8001450 <HAL_RCC_OscConfig+0x344>)
 80012ae:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80012b0:	4b68      	ldr	r3, [pc, #416]	; (8001454 <HAL_RCC_OscConfig+0x348>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	0018      	movs	r0, r3
 80012b6:	f7ff fc41 	bl	8000b3c <HAL_InitTick>
 80012ba:	1e03      	subs	r3, r0, #0
 80012bc:	d051      	beq.n	8001362 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e22c      	b.n	800171c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d030      	beq.n	800132c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80012ca:	4b5b      	ldr	r3, [pc, #364]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a5e      	ldr	r2, [pc, #376]	; (8001448 <HAL_RCC_OscConfig+0x33c>)
 80012d0:	4013      	ands	r3, r2
 80012d2:	0019      	movs	r1, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	691a      	ldr	r2, [r3, #16]
 80012d8:	4b57      	ldr	r3, [pc, #348]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 80012da:	430a      	orrs	r2, r1
 80012dc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80012de:	4b56      	ldr	r3, [pc, #344]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	4b55      	ldr	r3, [pc, #340]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 80012e4:	2180      	movs	r1, #128	; 0x80
 80012e6:	0049      	lsls	r1, r1, #1
 80012e8:	430a      	orrs	r2, r1
 80012ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ec:	f7ff fc82 	bl	8000bf4 <HAL_GetTick>
 80012f0:	0003      	movs	r3, r0
 80012f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012f4:	e008      	b.n	8001308 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012f6:	f7ff fc7d 	bl	8000bf4 <HAL_GetTick>
 80012fa:	0002      	movs	r2, r0
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e209      	b.n	800171c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001308:	4b4b      	ldr	r3, [pc, #300]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	2380      	movs	r3, #128	; 0x80
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	4013      	ands	r3, r2
 8001312:	d0f0      	beq.n	80012f6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001314:	4b48      	ldr	r3, [pc, #288]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	4a4a      	ldr	r2, [pc, #296]	; (8001444 <HAL_RCC_OscConfig+0x338>)
 800131a:	4013      	ands	r3, r2
 800131c:	0019      	movs	r1, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	021a      	lsls	r2, r3, #8
 8001324:	4b44      	ldr	r3, [pc, #272]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 8001326:	430a      	orrs	r2, r1
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	e01b      	b.n	8001364 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800132c:	4b42      	ldr	r3, [pc, #264]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b41      	ldr	r3, [pc, #260]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 8001332:	4949      	ldr	r1, [pc, #292]	; (8001458 <HAL_RCC_OscConfig+0x34c>)
 8001334:	400a      	ands	r2, r1
 8001336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001338:	f7ff fc5c 	bl	8000bf4 <HAL_GetTick>
 800133c:	0003      	movs	r3, r0
 800133e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001340:	e008      	b.n	8001354 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001342:	f7ff fc57 	bl	8000bf4 <HAL_GetTick>
 8001346:	0002      	movs	r2, r0
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d901      	bls.n	8001354 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e1e3      	b.n	800171c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001354:	4b38      	ldr	r3, [pc, #224]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	2380      	movs	r3, #128	; 0x80
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	4013      	ands	r3, r2
 800135e:	d1f0      	bne.n	8001342 <HAL_RCC_OscConfig+0x236>
 8001360:	e000      	b.n	8001364 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001362:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2208      	movs	r2, #8
 800136a:	4013      	ands	r3, r2
 800136c:	d047      	beq.n	80013fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800136e:	4b32      	ldr	r3, [pc, #200]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	2238      	movs	r2, #56	; 0x38
 8001374:	4013      	ands	r3, r2
 8001376:	2b18      	cmp	r3, #24
 8001378:	d10a      	bne.n	8001390 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800137a:	4b2f      	ldr	r3, [pc, #188]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 800137c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800137e:	2202      	movs	r2, #2
 8001380:	4013      	ands	r3, r2
 8001382:	d03c      	beq.n	80013fe <HAL_RCC_OscConfig+0x2f2>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d138      	bne.n	80013fe <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e1c5      	b.n	800171c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d019      	beq.n	80013cc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001398:	4b27      	ldr	r3, [pc, #156]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 800139a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800139c:	4b26      	ldr	r3, [pc, #152]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 800139e:	2101      	movs	r1, #1
 80013a0:	430a      	orrs	r2, r1
 80013a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a4:	f7ff fc26 	bl	8000bf4 <HAL_GetTick>
 80013a8:	0003      	movs	r3, r0
 80013aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013ae:	f7ff fc21 	bl	8000bf4 <HAL_GetTick>
 80013b2:	0002      	movs	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e1ad      	b.n	800171c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013c0:	4b1d      	ldr	r3, [pc, #116]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 80013c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013c4:	2202      	movs	r2, #2
 80013c6:	4013      	ands	r3, r2
 80013c8:	d0f1      	beq.n	80013ae <HAL_RCC_OscConfig+0x2a2>
 80013ca:	e018      	b.n	80013fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80013cc:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 80013ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013d0:	4b19      	ldr	r3, [pc, #100]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 80013d2:	2101      	movs	r1, #1
 80013d4:	438a      	bics	r2, r1
 80013d6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d8:	f7ff fc0c 	bl	8000bf4 <HAL_GetTick>
 80013dc:	0003      	movs	r3, r0
 80013de:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013e0:	e008      	b.n	80013f4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013e2:	f7ff fc07 	bl	8000bf4 <HAL_GetTick>
 80013e6:	0002      	movs	r2, r0
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d901      	bls.n	80013f4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e193      	b.n	800171c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013f4:	4b10      	ldr	r3, [pc, #64]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 80013f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013f8:	2202      	movs	r2, #2
 80013fa:	4013      	ands	r3, r2
 80013fc:	d1f1      	bne.n	80013e2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2204      	movs	r2, #4
 8001404:	4013      	ands	r3, r2
 8001406:	d100      	bne.n	800140a <HAL_RCC_OscConfig+0x2fe>
 8001408:	e0c6      	b.n	8001598 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800140a:	231f      	movs	r3, #31
 800140c:	18fb      	adds	r3, r7, r3
 800140e:	2200      	movs	r2, #0
 8001410:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	2238      	movs	r2, #56	; 0x38
 8001418:	4013      	ands	r3, r2
 800141a:	2b20      	cmp	r3, #32
 800141c:	d11e      	bne.n	800145c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 8001420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001422:	2202      	movs	r2, #2
 8001424:	4013      	ands	r3, r2
 8001426:	d100      	bne.n	800142a <HAL_RCC_OscConfig+0x31e>
 8001428:	e0b6      	b.n	8001598 <HAL_RCC_OscConfig+0x48c>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d000      	beq.n	8001434 <HAL_RCC_OscConfig+0x328>
 8001432:	e0b1      	b.n	8001598 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e171      	b.n	800171c <HAL_RCC_OscConfig+0x610>
 8001438:	40021000 	.word	0x40021000
 800143c:	fffeffff 	.word	0xfffeffff
 8001440:	fffbffff 	.word	0xfffbffff
 8001444:	ffff80ff 	.word	0xffff80ff
 8001448:	ffffc7ff 	.word	0xffffc7ff
 800144c:	00f42400 	.word	0x00f42400
 8001450:	20000000 	.word	0x20000000
 8001454:	20000004 	.word	0x20000004
 8001458:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800145c:	4bb1      	ldr	r3, [pc, #708]	; (8001724 <HAL_RCC_OscConfig+0x618>)
 800145e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001460:	2380      	movs	r3, #128	; 0x80
 8001462:	055b      	lsls	r3, r3, #21
 8001464:	4013      	ands	r3, r2
 8001466:	d101      	bne.n	800146c <HAL_RCC_OscConfig+0x360>
 8001468:	2301      	movs	r3, #1
 800146a:	e000      	b.n	800146e <HAL_RCC_OscConfig+0x362>
 800146c:	2300      	movs	r3, #0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d011      	beq.n	8001496 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001472:	4bac      	ldr	r3, [pc, #688]	; (8001724 <HAL_RCC_OscConfig+0x618>)
 8001474:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001476:	4bab      	ldr	r3, [pc, #684]	; (8001724 <HAL_RCC_OscConfig+0x618>)
 8001478:	2180      	movs	r1, #128	; 0x80
 800147a:	0549      	lsls	r1, r1, #21
 800147c:	430a      	orrs	r2, r1
 800147e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001480:	4ba8      	ldr	r3, [pc, #672]	; (8001724 <HAL_RCC_OscConfig+0x618>)
 8001482:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001484:	2380      	movs	r3, #128	; 0x80
 8001486:	055b      	lsls	r3, r3, #21
 8001488:	4013      	ands	r3, r2
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800148e:	231f      	movs	r3, #31
 8001490:	18fb      	adds	r3, r7, r3
 8001492:	2201      	movs	r2, #1
 8001494:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001496:	4ba4      	ldr	r3, [pc, #656]	; (8001728 <HAL_RCC_OscConfig+0x61c>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	2380      	movs	r3, #128	; 0x80
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	4013      	ands	r3, r2
 80014a0:	d11a      	bne.n	80014d8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014a2:	4ba1      	ldr	r3, [pc, #644]	; (8001728 <HAL_RCC_OscConfig+0x61c>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	4ba0      	ldr	r3, [pc, #640]	; (8001728 <HAL_RCC_OscConfig+0x61c>)
 80014a8:	2180      	movs	r1, #128	; 0x80
 80014aa:	0049      	lsls	r1, r1, #1
 80014ac:	430a      	orrs	r2, r1
 80014ae:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80014b0:	f7ff fba0 	bl	8000bf4 <HAL_GetTick>
 80014b4:	0003      	movs	r3, r0
 80014b6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ba:	f7ff fb9b 	bl	8000bf4 <HAL_GetTick>
 80014be:	0002      	movs	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e127      	b.n	800171c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014cc:	4b96      	ldr	r3, [pc, #600]	; (8001728 <HAL_RCC_OscConfig+0x61c>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	2380      	movs	r3, #128	; 0x80
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	4013      	ands	r3, r2
 80014d6:	d0f0      	beq.n	80014ba <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d106      	bne.n	80014ee <HAL_RCC_OscConfig+0x3e2>
 80014e0:	4b90      	ldr	r3, [pc, #576]	; (8001724 <HAL_RCC_OscConfig+0x618>)
 80014e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014e4:	4b8f      	ldr	r3, [pc, #572]	; (8001724 <HAL_RCC_OscConfig+0x618>)
 80014e6:	2101      	movs	r1, #1
 80014e8:	430a      	orrs	r2, r1
 80014ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80014ec:	e01c      	b.n	8001528 <HAL_RCC_OscConfig+0x41c>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	2b05      	cmp	r3, #5
 80014f4:	d10c      	bne.n	8001510 <HAL_RCC_OscConfig+0x404>
 80014f6:	4b8b      	ldr	r3, [pc, #556]	; (8001724 <HAL_RCC_OscConfig+0x618>)
 80014f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014fa:	4b8a      	ldr	r3, [pc, #552]	; (8001724 <HAL_RCC_OscConfig+0x618>)
 80014fc:	2104      	movs	r1, #4
 80014fe:	430a      	orrs	r2, r1
 8001500:	65da      	str	r2, [r3, #92]	; 0x5c
 8001502:	4b88      	ldr	r3, [pc, #544]	; (8001724 <HAL_RCC_OscConfig+0x618>)
 8001504:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001506:	4b87      	ldr	r3, [pc, #540]	; (8001724 <HAL_RCC_OscConfig+0x618>)
 8001508:	2101      	movs	r1, #1
 800150a:	430a      	orrs	r2, r1
 800150c:	65da      	str	r2, [r3, #92]	; 0x5c
 800150e:	e00b      	b.n	8001528 <HAL_RCC_OscConfig+0x41c>
 8001510:	4b84      	ldr	r3, [pc, #528]	; (8001724 <HAL_RCC_OscConfig+0x618>)
 8001512:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001514:	4b83      	ldr	r3, [pc, #524]	; (8001724 <HAL_RCC_OscConfig+0x618>)
 8001516:	2101      	movs	r1, #1
 8001518:	438a      	bics	r2, r1
 800151a:	65da      	str	r2, [r3, #92]	; 0x5c
 800151c:	4b81      	ldr	r3, [pc, #516]	; (8001724 <HAL_RCC_OscConfig+0x618>)
 800151e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001520:	4b80      	ldr	r3, [pc, #512]	; (8001724 <HAL_RCC_OscConfig+0x618>)
 8001522:	2104      	movs	r1, #4
 8001524:	438a      	bics	r2, r1
 8001526:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d014      	beq.n	800155a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001530:	f7ff fb60 	bl	8000bf4 <HAL_GetTick>
 8001534:	0003      	movs	r3, r0
 8001536:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001538:	e009      	b.n	800154e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800153a:	f7ff fb5b 	bl	8000bf4 <HAL_GetTick>
 800153e:	0002      	movs	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	4a79      	ldr	r2, [pc, #484]	; (800172c <HAL_RCC_OscConfig+0x620>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e0e6      	b.n	800171c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800154e:	4b75      	ldr	r3, [pc, #468]	; (8001724 <HAL_RCC_OscConfig+0x618>)
 8001550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001552:	2202      	movs	r2, #2
 8001554:	4013      	ands	r3, r2
 8001556:	d0f0      	beq.n	800153a <HAL_RCC_OscConfig+0x42e>
 8001558:	e013      	b.n	8001582 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800155a:	f7ff fb4b 	bl	8000bf4 <HAL_GetTick>
 800155e:	0003      	movs	r3, r0
 8001560:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001562:	e009      	b.n	8001578 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001564:	f7ff fb46 	bl	8000bf4 <HAL_GetTick>
 8001568:	0002      	movs	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	4a6f      	ldr	r2, [pc, #444]	; (800172c <HAL_RCC_OscConfig+0x620>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e0d1      	b.n	800171c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001578:	4b6a      	ldr	r3, [pc, #424]	; (8001724 <HAL_RCC_OscConfig+0x618>)
 800157a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800157c:	2202      	movs	r2, #2
 800157e:	4013      	ands	r3, r2
 8001580:	d1f0      	bne.n	8001564 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001582:	231f      	movs	r3, #31
 8001584:	18fb      	adds	r3, r7, r3
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d105      	bne.n	8001598 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800158c:	4b65      	ldr	r3, [pc, #404]	; (8001724 <HAL_RCC_OscConfig+0x618>)
 800158e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001590:	4b64      	ldr	r3, [pc, #400]	; (8001724 <HAL_RCC_OscConfig+0x618>)
 8001592:	4967      	ldr	r1, [pc, #412]	; (8001730 <HAL_RCC_OscConfig+0x624>)
 8001594:	400a      	ands	r2, r1
 8001596:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	69db      	ldr	r3, [r3, #28]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d100      	bne.n	80015a2 <HAL_RCC_OscConfig+0x496>
 80015a0:	e0bb      	b.n	800171a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015a2:	4b60      	ldr	r3, [pc, #384]	; (8001724 <HAL_RCC_OscConfig+0x618>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	2238      	movs	r2, #56	; 0x38
 80015a8:	4013      	ands	r3, r2
 80015aa:	2b10      	cmp	r3, #16
 80015ac:	d100      	bne.n	80015b0 <HAL_RCC_OscConfig+0x4a4>
 80015ae:	e07b      	b.n	80016a8 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	69db      	ldr	r3, [r3, #28]
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d156      	bne.n	8001666 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b8:	4b5a      	ldr	r3, [pc, #360]	; (8001724 <HAL_RCC_OscConfig+0x618>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	4b59      	ldr	r3, [pc, #356]	; (8001724 <HAL_RCC_OscConfig+0x618>)
 80015be:	495d      	ldr	r1, [pc, #372]	; (8001734 <HAL_RCC_OscConfig+0x628>)
 80015c0:	400a      	ands	r2, r1
 80015c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c4:	f7ff fb16 	bl	8000bf4 <HAL_GetTick>
 80015c8:	0003      	movs	r3, r0
 80015ca:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ce:	f7ff fb11 	bl	8000bf4 <HAL_GetTick>
 80015d2:	0002      	movs	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e09d      	b.n	800171c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015e0:	4b50      	ldr	r3, [pc, #320]	; (8001724 <HAL_RCC_OscConfig+0x618>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	2380      	movs	r3, #128	; 0x80
 80015e6:	049b      	lsls	r3, r3, #18
 80015e8:	4013      	ands	r3, r2
 80015ea:	d1f0      	bne.n	80015ce <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015ec:	4b4d      	ldr	r3, [pc, #308]	; (8001724 <HAL_RCC_OscConfig+0x618>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	4a51      	ldr	r2, [pc, #324]	; (8001738 <HAL_RCC_OscConfig+0x62c>)
 80015f2:	4013      	ands	r3, r2
 80015f4:	0019      	movs	r1, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a1a      	ldr	r2, [r3, #32]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fe:	431a      	orrs	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001604:	021b      	lsls	r3, r3, #8
 8001606:	431a      	orrs	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160c:	431a      	orrs	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	431a      	orrs	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001618:	431a      	orrs	r2, r3
 800161a:	4b42      	ldr	r3, [pc, #264]	; (8001724 <HAL_RCC_OscConfig+0x618>)
 800161c:	430a      	orrs	r2, r1
 800161e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001620:	4b40      	ldr	r3, [pc, #256]	; (8001724 <HAL_RCC_OscConfig+0x618>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	4b3f      	ldr	r3, [pc, #252]	; (8001724 <HAL_RCC_OscConfig+0x618>)
 8001626:	2180      	movs	r1, #128	; 0x80
 8001628:	0449      	lsls	r1, r1, #17
 800162a:	430a      	orrs	r2, r1
 800162c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800162e:	4b3d      	ldr	r3, [pc, #244]	; (8001724 <HAL_RCC_OscConfig+0x618>)
 8001630:	68da      	ldr	r2, [r3, #12]
 8001632:	4b3c      	ldr	r3, [pc, #240]	; (8001724 <HAL_RCC_OscConfig+0x618>)
 8001634:	2180      	movs	r1, #128	; 0x80
 8001636:	0549      	lsls	r1, r1, #21
 8001638:	430a      	orrs	r2, r1
 800163a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163c:	f7ff fada 	bl	8000bf4 <HAL_GetTick>
 8001640:	0003      	movs	r3, r0
 8001642:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001646:	f7ff fad5 	bl	8000bf4 <HAL_GetTick>
 800164a:	0002      	movs	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e061      	b.n	800171c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001658:	4b32      	ldr	r3, [pc, #200]	; (8001724 <HAL_RCC_OscConfig+0x618>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	2380      	movs	r3, #128	; 0x80
 800165e:	049b      	lsls	r3, r3, #18
 8001660:	4013      	ands	r3, r2
 8001662:	d0f0      	beq.n	8001646 <HAL_RCC_OscConfig+0x53a>
 8001664:	e059      	b.n	800171a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001666:	4b2f      	ldr	r3, [pc, #188]	; (8001724 <HAL_RCC_OscConfig+0x618>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	4b2e      	ldr	r3, [pc, #184]	; (8001724 <HAL_RCC_OscConfig+0x618>)
 800166c:	4931      	ldr	r1, [pc, #196]	; (8001734 <HAL_RCC_OscConfig+0x628>)
 800166e:	400a      	ands	r2, r1
 8001670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001672:	f7ff fabf 	bl	8000bf4 <HAL_GetTick>
 8001676:	0003      	movs	r3, r0
 8001678:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800167c:	f7ff faba 	bl	8000bf4 <HAL_GetTick>
 8001680:	0002      	movs	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e046      	b.n	800171c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800168e:	4b25      	ldr	r3, [pc, #148]	; (8001724 <HAL_RCC_OscConfig+0x618>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	2380      	movs	r3, #128	; 0x80
 8001694:	049b      	lsls	r3, r3, #18
 8001696:	4013      	ands	r3, r2
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800169a:	4b22      	ldr	r3, [pc, #136]	; (8001724 <HAL_RCC_OscConfig+0x618>)
 800169c:	68da      	ldr	r2, [r3, #12]
 800169e:	4b21      	ldr	r3, [pc, #132]	; (8001724 <HAL_RCC_OscConfig+0x618>)
 80016a0:	4926      	ldr	r1, [pc, #152]	; (800173c <HAL_RCC_OscConfig+0x630>)
 80016a2:	400a      	ands	r2, r1
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	e038      	b.n	800171a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	69db      	ldr	r3, [r3, #28]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d101      	bne.n	80016b4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e033      	b.n	800171c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80016b4:	4b1b      	ldr	r3, [pc, #108]	; (8001724 <HAL_RCC_OscConfig+0x618>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	2203      	movs	r2, #3
 80016be:	401a      	ands	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a1b      	ldr	r3, [r3, #32]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d126      	bne.n	8001716 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	2270      	movs	r2, #112	; 0x70
 80016cc:	401a      	ands	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d11f      	bne.n	8001716 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016d6:	697a      	ldr	r2, [r7, #20]
 80016d8:	23fe      	movs	r3, #254	; 0xfe
 80016da:	01db      	lsls	r3, r3, #7
 80016dc:	401a      	ands	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d116      	bne.n	8001716 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	23f8      	movs	r3, #248	; 0xf8
 80016ec:	039b      	lsls	r3, r3, #14
 80016ee:	401a      	ands	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d10e      	bne.n	8001716 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80016f8:	697a      	ldr	r2, [r7, #20]
 80016fa:	23e0      	movs	r3, #224	; 0xe0
 80016fc:	051b      	lsls	r3, r3, #20
 80016fe:	401a      	ands	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001704:	429a      	cmp	r2, r3
 8001706:	d106      	bne.n	8001716 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	0f5b      	lsrs	r3, r3, #29
 800170c:	075a      	lsls	r2, r3, #29
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001712:	429a      	cmp	r2, r3
 8001714:	d001      	beq.n	800171a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e000      	b.n	800171c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800171a:	2300      	movs	r3, #0
}
 800171c:	0018      	movs	r0, r3
 800171e:	46bd      	mov	sp, r7
 8001720:	b008      	add	sp, #32
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40021000 	.word	0x40021000
 8001728:	40007000 	.word	0x40007000
 800172c:	00001388 	.word	0x00001388
 8001730:	efffffff 	.word	0xefffffff
 8001734:	feffffff 	.word	0xfeffffff
 8001738:	11c1808c 	.word	0x11c1808c
 800173c:	eefefffc 	.word	0xeefefffc

08001740 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e0e9      	b.n	8001928 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001754:	4b76      	ldr	r3, [pc, #472]	; (8001930 <HAL_RCC_ClockConfig+0x1f0>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2207      	movs	r2, #7
 800175a:	4013      	ands	r3, r2
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	429a      	cmp	r2, r3
 8001760:	d91e      	bls.n	80017a0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001762:	4b73      	ldr	r3, [pc, #460]	; (8001930 <HAL_RCC_ClockConfig+0x1f0>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2207      	movs	r2, #7
 8001768:	4393      	bics	r3, r2
 800176a:	0019      	movs	r1, r3
 800176c:	4b70      	ldr	r3, [pc, #448]	; (8001930 <HAL_RCC_ClockConfig+0x1f0>)
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	430a      	orrs	r2, r1
 8001772:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001774:	f7ff fa3e 	bl	8000bf4 <HAL_GetTick>
 8001778:	0003      	movs	r3, r0
 800177a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800177c:	e009      	b.n	8001792 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800177e:	f7ff fa39 	bl	8000bf4 <HAL_GetTick>
 8001782:	0002      	movs	r2, r0
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	4a6a      	ldr	r2, [pc, #424]	; (8001934 <HAL_RCC_ClockConfig+0x1f4>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e0ca      	b.n	8001928 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001792:	4b67      	ldr	r3, [pc, #412]	; (8001930 <HAL_RCC_ClockConfig+0x1f0>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2207      	movs	r2, #7
 8001798:	4013      	ands	r3, r2
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	429a      	cmp	r2, r3
 800179e:	d1ee      	bne.n	800177e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2202      	movs	r2, #2
 80017a6:	4013      	ands	r3, r2
 80017a8:	d015      	beq.n	80017d6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2204      	movs	r2, #4
 80017b0:	4013      	ands	r3, r2
 80017b2:	d006      	beq.n	80017c2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80017b4:	4b60      	ldr	r3, [pc, #384]	; (8001938 <HAL_RCC_ClockConfig+0x1f8>)
 80017b6:	689a      	ldr	r2, [r3, #8]
 80017b8:	4b5f      	ldr	r3, [pc, #380]	; (8001938 <HAL_RCC_ClockConfig+0x1f8>)
 80017ba:	21e0      	movs	r1, #224	; 0xe0
 80017bc:	01c9      	lsls	r1, r1, #7
 80017be:	430a      	orrs	r2, r1
 80017c0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017c2:	4b5d      	ldr	r3, [pc, #372]	; (8001938 <HAL_RCC_ClockConfig+0x1f8>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	4a5d      	ldr	r2, [pc, #372]	; (800193c <HAL_RCC_ClockConfig+0x1fc>)
 80017c8:	4013      	ands	r3, r2
 80017ca:	0019      	movs	r1, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	4b59      	ldr	r3, [pc, #356]	; (8001938 <HAL_RCC_ClockConfig+0x1f8>)
 80017d2:	430a      	orrs	r2, r1
 80017d4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2201      	movs	r2, #1
 80017dc:	4013      	ands	r3, r2
 80017de:	d057      	beq.n	8001890 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d107      	bne.n	80017f8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017e8:	4b53      	ldr	r3, [pc, #332]	; (8001938 <HAL_RCC_ClockConfig+0x1f8>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	2380      	movs	r3, #128	; 0x80
 80017ee:	029b      	lsls	r3, r3, #10
 80017f0:	4013      	ands	r3, r2
 80017f2:	d12b      	bne.n	800184c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e097      	b.n	8001928 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d107      	bne.n	8001810 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001800:	4b4d      	ldr	r3, [pc, #308]	; (8001938 <HAL_RCC_ClockConfig+0x1f8>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	2380      	movs	r3, #128	; 0x80
 8001806:	049b      	lsls	r3, r3, #18
 8001808:	4013      	ands	r3, r2
 800180a:	d11f      	bne.n	800184c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e08b      	b.n	8001928 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d107      	bne.n	8001828 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001818:	4b47      	ldr	r3, [pc, #284]	; (8001938 <HAL_RCC_ClockConfig+0x1f8>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	4013      	ands	r3, r2
 8001822:	d113      	bne.n	800184c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e07f      	b.n	8001928 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b03      	cmp	r3, #3
 800182e:	d106      	bne.n	800183e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001830:	4b41      	ldr	r3, [pc, #260]	; (8001938 <HAL_RCC_ClockConfig+0x1f8>)
 8001832:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001834:	2202      	movs	r2, #2
 8001836:	4013      	ands	r3, r2
 8001838:	d108      	bne.n	800184c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e074      	b.n	8001928 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800183e:	4b3e      	ldr	r3, [pc, #248]	; (8001938 <HAL_RCC_ClockConfig+0x1f8>)
 8001840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001842:	2202      	movs	r2, #2
 8001844:	4013      	ands	r3, r2
 8001846:	d101      	bne.n	800184c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e06d      	b.n	8001928 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800184c:	4b3a      	ldr	r3, [pc, #232]	; (8001938 <HAL_RCC_ClockConfig+0x1f8>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	2207      	movs	r2, #7
 8001852:	4393      	bics	r3, r2
 8001854:	0019      	movs	r1, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685a      	ldr	r2, [r3, #4]
 800185a:	4b37      	ldr	r3, [pc, #220]	; (8001938 <HAL_RCC_ClockConfig+0x1f8>)
 800185c:	430a      	orrs	r2, r1
 800185e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001860:	f7ff f9c8 	bl	8000bf4 <HAL_GetTick>
 8001864:	0003      	movs	r3, r0
 8001866:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001868:	e009      	b.n	800187e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800186a:	f7ff f9c3 	bl	8000bf4 <HAL_GetTick>
 800186e:	0002      	movs	r2, r0
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	4a2f      	ldr	r2, [pc, #188]	; (8001934 <HAL_RCC_ClockConfig+0x1f4>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d901      	bls.n	800187e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e054      	b.n	8001928 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800187e:	4b2e      	ldr	r3, [pc, #184]	; (8001938 <HAL_RCC_ClockConfig+0x1f8>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	2238      	movs	r2, #56	; 0x38
 8001884:	401a      	ands	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	429a      	cmp	r2, r3
 800188e:	d1ec      	bne.n	800186a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001890:	4b27      	ldr	r3, [pc, #156]	; (8001930 <HAL_RCC_ClockConfig+0x1f0>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2207      	movs	r2, #7
 8001896:	4013      	ands	r3, r2
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	429a      	cmp	r2, r3
 800189c:	d21e      	bcs.n	80018dc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800189e:	4b24      	ldr	r3, [pc, #144]	; (8001930 <HAL_RCC_ClockConfig+0x1f0>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2207      	movs	r2, #7
 80018a4:	4393      	bics	r3, r2
 80018a6:	0019      	movs	r1, r3
 80018a8:	4b21      	ldr	r3, [pc, #132]	; (8001930 <HAL_RCC_ClockConfig+0x1f0>)
 80018aa:	683a      	ldr	r2, [r7, #0]
 80018ac:	430a      	orrs	r2, r1
 80018ae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80018b0:	f7ff f9a0 	bl	8000bf4 <HAL_GetTick>
 80018b4:	0003      	movs	r3, r0
 80018b6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018b8:	e009      	b.n	80018ce <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ba:	f7ff f99b 	bl	8000bf4 <HAL_GetTick>
 80018be:	0002      	movs	r2, r0
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	4a1b      	ldr	r2, [pc, #108]	; (8001934 <HAL_RCC_ClockConfig+0x1f4>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e02c      	b.n	8001928 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018ce:	4b18      	ldr	r3, [pc, #96]	; (8001930 <HAL_RCC_ClockConfig+0x1f0>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2207      	movs	r2, #7
 80018d4:	4013      	ands	r3, r2
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d1ee      	bne.n	80018ba <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2204      	movs	r2, #4
 80018e2:	4013      	ands	r3, r2
 80018e4:	d009      	beq.n	80018fa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80018e6:	4b14      	ldr	r3, [pc, #80]	; (8001938 <HAL_RCC_ClockConfig+0x1f8>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	4a15      	ldr	r2, [pc, #84]	; (8001940 <HAL_RCC_ClockConfig+0x200>)
 80018ec:	4013      	ands	r3, r2
 80018ee:	0019      	movs	r1, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68da      	ldr	r2, [r3, #12]
 80018f4:	4b10      	ldr	r3, [pc, #64]	; (8001938 <HAL_RCC_ClockConfig+0x1f8>)
 80018f6:	430a      	orrs	r2, r1
 80018f8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80018fa:	f000 f829 	bl	8001950 <HAL_RCC_GetSysClockFreq>
 80018fe:	0001      	movs	r1, r0
 8001900:	4b0d      	ldr	r3, [pc, #52]	; (8001938 <HAL_RCC_ClockConfig+0x1f8>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	0a1b      	lsrs	r3, r3, #8
 8001906:	220f      	movs	r2, #15
 8001908:	401a      	ands	r2, r3
 800190a:	4b0e      	ldr	r3, [pc, #56]	; (8001944 <HAL_RCC_ClockConfig+0x204>)
 800190c:	0092      	lsls	r2, r2, #2
 800190e:	58d3      	ldr	r3, [r2, r3]
 8001910:	221f      	movs	r2, #31
 8001912:	4013      	ands	r3, r2
 8001914:	000a      	movs	r2, r1
 8001916:	40da      	lsrs	r2, r3
 8001918:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <HAL_RCC_ClockConfig+0x208>)
 800191a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800191c:	4b0b      	ldr	r3, [pc, #44]	; (800194c <HAL_RCC_ClockConfig+0x20c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	0018      	movs	r0, r3
 8001922:	f7ff f90b 	bl	8000b3c <HAL_InitTick>
 8001926:	0003      	movs	r3, r0
}
 8001928:	0018      	movs	r0, r3
 800192a:	46bd      	mov	sp, r7
 800192c:	b004      	add	sp, #16
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40022000 	.word	0x40022000
 8001934:	00001388 	.word	0x00001388
 8001938:	40021000 	.word	0x40021000
 800193c:	fffff0ff 	.word	0xfffff0ff
 8001940:	ffff8fff 	.word	0xffff8fff
 8001944:	08002bd4 	.word	0x08002bd4
 8001948:	20000000 	.word	0x20000000
 800194c:	20000004 	.word	0x20000004

08001950 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001956:	4b3c      	ldr	r3, [pc, #240]	; (8001a48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	2238      	movs	r2, #56	; 0x38
 800195c:	4013      	ands	r3, r2
 800195e:	d10f      	bne.n	8001980 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001960:	4b39      	ldr	r3, [pc, #228]	; (8001a48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	0adb      	lsrs	r3, r3, #11
 8001966:	2207      	movs	r2, #7
 8001968:	4013      	ands	r3, r2
 800196a:	2201      	movs	r2, #1
 800196c:	409a      	lsls	r2, r3
 800196e:	0013      	movs	r3, r2
 8001970:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001972:	6839      	ldr	r1, [r7, #0]
 8001974:	4835      	ldr	r0, [pc, #212]	; (8001a4c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001976:	f7fe fbc5 	bl	8000104 <__udivsi3>
 800197a:	0003      	movs	r3, r0
 800197c:	613b      	str	r3, [r7, #16]
 800197e:	e05d      	b.n	8001a3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001980:	4b31      	ldr	r3, [pc, #196]	; (8001a48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	2238      	movs	r2, #56	; 0x38
 8001986:	4013      	ands	r3, r2
 8001988:	2b08      	cmp	r3, #8
 800198a:	d102      	bne.n	8001992 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800198c:	4b30      	ldr	r3, [pc, #192]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x100>)
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	e054      	b.n	8001a3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001992:	4b2d      	ldr	r3, [pc, #180]	; (8001a48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	2238      	movs	r2, #56	; 0x38
 8001998:	4013      	ands	r3, r2
 800199a:	2b10      	cmp	r3, #16
 800199c:	d138      	bne.n	8001a10 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800199e:	4b2a      	ldr	r3, [pc, #168]	; (8001a48 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	2203      	movs	r2, #3
 80019a4:	4013      	ands	r3, r2
 80019a6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019a8:	4b27      	ldr	r3, [pc, #156]	; (8001a48 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	091b      	lsrs	r3, r3, #4
 80019ae:	2207      	movs	r2, #7
 80019b0:	4013      	ands	r3, r2
 80019b2:	3301      	adds	r3, #1
 80019b4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2b03      	cmp	r3, #3
 80019ba:	d10d      	bne.n	80019d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80019bc:	68b9      	ldr	r1, [r7, #8]
 80019be:	4824      	ldr	r0, [pc, #144]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x100>)
 80019c0:	f7fe fba0 	bl	8000104 <__udivsi3>
 80019c4:	0003      	movs	r3, r0
 80019c6:	0019      	movs	r1, r3
 80019c8:	4b1f      	ldr	r3, [pc, #124]	; (8001a48 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	0a1b      	lsrs	r3, r3, #8
 80019ce:	227f      	movs	r2, #127	; 0x7f
 80019d0:	4013      	ands	r3, r2
 80019d2:	434b      	muls	r3, r1
 80019d4:	617b      	str	r3, [r7, #20]
        break;
 80019d6:	e00d      	b.n	80019f4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80019d8:	68b9      	ldr	r1, [r7, #8]
 80019da:	481c      	ldr	r0, [pc, #112]	; (8001a4c <HAL_RCC_GetSysClockFreq+0xfc>)
 80019dc:	f7fe fb92 	bl	8000104 <__udivsi3>
 80019e0:	0003      	movs	r3, r0
 80019e2:	0019      	movs	r1, r3
 80019e4:	4b18      	ldr	r3, [pc, #96]	; (8001a48 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	0a1b      	lsrs	r3, r3, #8
 80019ea:	227f      	movs	r2, #127	; 0x7f
 80019ec:	4013      	ands	r3, r2
 80019ee:	434b      	muls	r3, r1
 80019f0:	617b      	str	r3, [r7, #20]
        break;
 80019f2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80019f4:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	0f5b      	lsrs	r3, r3, #29
 80019fa:	2207      	movs	r2, #7
 80019fc:	4013      	ands	r3, r2
 80019fe:	3301      	adds	r3, #1
 8001a00:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	6978      	ldr	r0, [r7, #20]
 8001a06:	f7fe fb7d 	bl	8000104 <__udivsi3>
 8001a0a:	0003      	movs	r3, r0
 8001a0c:	613b      	str	r3, [r7, #16]
 8001a0e:	e015      	b.n	8001a3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001a10:	4b0d      	ldr	r3, [pc, #52]	; (8001a48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	2238      	movs	r2, #56	; 0x38
 8001a16:	4013      	ands	r3, r2
 8001a18:	2b20      	cmp	r3, #32
 8001a1a:	d103      	bne.n	8001a24 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001a1c:	2380      	movs	r3, #128	; 0x80
 8001a1e:	021b      	lsls	r3, r3, #8
 8001a20:	613b      	str	r3, [r7, #16]
 8001a22:	e00b      	b.n	8001a3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001a24:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	2238      	movs	r2, #56	; 0x38
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	2b18      	cmp	r3, #24
 8001a2e:	d103      	bne.n	8001a38 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001a30:	23fa      	movs	r3, #250	; 0xfa
 8001a32:	01db      	lsls	r3, r3, #7
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	e001      	b.n	8001a3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001a3c:	693b      	ldr	r3, [r7, #16]
}
 8001a3e:	0018      	movs	r0, r3
 8001a40:	46bd      	mov	sp, r7
 8001a42:	b006      	add	sp, #24
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	00f42400 	.word	0x00f42400
 8001a50:	007a1200 	.word	0x007a1200

08001a54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a58:	4b02      	ldr	r3, [pc, #8]	; (8001a64 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
}
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	46c0      	nop			; (mov r8, r8)
 8001a64:	20000000 	.word	0x20000000

08001a68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a68:	b5b0      	push	{r4, r5, r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001a6c:	f7ff fff2 	bl	8001a54 <HAL_RCC_GetHCLKFreq>
 8001a70:	0004      	movs	r4, r0
 8001a72:	f7ff fb3f 	bl	80010f4 <LL_RCC_GetAPB1Prescaler>
 8001a76:	0003      	movs	r3, r0
 8001a78:	0b1a      	lsrs	r2, r3, #12
 8001a7a:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a7c:	0092      	lsls	r2, r2, #2
 8001a7e:	58d3      	ldr	r3, [r2, r3]
 8001a80:	221f      	movs	r2, #31
 8001a82:	4013      	ands	r3, r2
 8001a84:	40dc      	lsrs	r4, r3
 8001a86:	0023      	movs	r3, r4
}
 8001a88:	0018      	movs	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a8e:	46c0      	nop			; (mov r8, r8)
 8001a90:	08002c14 	.word	0x08002c14

08001a94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001a9c:	2313      	movs	r3, #19
 8001a9e:	18fb      	adds	r3, r7, r3
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001aa4:	2312      	movs	r3, #18
 8001aa6:	18fb      	adds	r3, r7, r3
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	2380      	movs	r3, #128	; 0x80
 8001ab2:	029b      	lsls	r3, r3, #10
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d100      	bne.n	8001aba <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001ab8:	e0a3      	b.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aba:	2011      	movs	r0, #17
 8001abc:	183b      	adds	r3, r7, r0
 8001abe:	2200      	movs	r2, #0
 8001ac0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ac2:	4bc3      	ldr	r3, [pc, #780]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ac4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ac6:	2380      	movs	r3, #128	; 0x80
 8001ac8:	055b      	lsls	r3, r3, #21
 8001aca:	4013      	ands	r3, r2
 8001acc:	d110      	bne.n	8001af0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ace:	4bc0      	ldr	r3, [pc, #768]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ad0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ad2:	4bbf      	ldr	r3, [pc, #764]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ad4:	2180      	movs	r1, #128	; 0x80
 8001ad6:	0549      	lsls	r1, r1, #21
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	63da      	str	r2, [r3, #60]	; 0x3c
 8001adc:	4bbc      	ldr	r3, [pc, #752]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ade:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ae0:	2380      	movs	r3, #128	; 0x80
 8001ae2:	055b      	lsls	r3, r3, #21
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	60bb      	str	r3, [r7, #8]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aea:	183b      	adds	r3, r7, r0
 8001aec:	2201      	movs	r2, #1
 8001aee:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001af0:	4bb8      	ldr	r3, [pc, #736]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	4bb7      	ldr	r3, [pc, #732]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001af6:	2180      	movs	r1, #128	; 0x80
 8001af8:	0049      	lsls	r1, r1, #1
 8001afa:	430a      	orrs	r2, r1
 8001afc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001afe:	f7ff f879 	bl	8000bf4 <HAL_GetTick>
 8001b02:	0003      	movs	r3, r0
 8001b04:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b06:	e00b      	b.n	8001b20 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b08:	f7ff f874 	bl	8000bf4 <HAL_GetTick>
 8001b0c:	0002      	movs	r2, r0
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d904      	bls.n	8001b20 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001b16:	2313      	movs	r3, #19
 8001b18:	18fb      	adds	r3, r7, r3
 8001b1a:	2203      	movs	r2, #3
 8001b1c:	701a      	strb	r2, [r3, #0]
        break;
 8001b1e:	e005      	b.n	8001b2c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b20:	4bac      	ldr	r3, [pc, #688]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	2380      	movs	r3, #128	; 0x80
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	4013      	ands	r3, r2
 8001b2a:	d0ed      	beq.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001b2c:	2313      	movs	r3, #19
 8001b2e:	18fb      	adds	r3, r7, r3
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d154      	bne.n	8001be0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001b36:	4ba6      	ldr	r3, [pc, #664]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b38:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b3a:	23c0      	movs	r3, #192	; 0xc0
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4013      	ands	r3, r2
 8001b40:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d019      	beq.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4c:	697a      	ldr	r2, [r7, #20]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d014      	beq.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001b52:	4b9f      	ldr	r3, [pc, #636]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b56:	4aa0      	ldr	r2, [pc, #640]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001b58:	4013      	ands	r3, r2
 8001b5a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001b5c:	4b9c      	ldr	r3, [pc, #624]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b60:	4b9b      	ldr	r3, [pc, #620]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b62:	2180      	movs	r1, #128	; 0x80
 8001b64:	0249      	lsls	r1, r1, #9
 8001b66:	430a      	orrs	r2, r1
 8001b68:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001b6a:	4b99      	ldr	r3, [pc, #612]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b6e:	4b98      	ldr	r3, [pc, #608]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b70:	499a      	ldr	r1, [pc, #616]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8001b72:	400a      	ands	r2, r1
 8001b74:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001b76:	4b96      	ldr	r3, [pc, #600]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b78:	697a      	ldr	r2, [r7, #20]
 8001b7a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	4013      	ands	r3, r2
 8001b82:	d016      	beq.n	8001bb2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b84:	f7ff f836 	bl	8000bf4 <HAL_GetTick>
 8001b88:	0003      	movs	r3, r0
 8001b8a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b8c:	e00c      	b.n	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b8e:	f7ff f831 	bl	8000bf4 <HAL_GetTick>
 8001b92:	0002      	movs	r2, r0
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	4a91      	ldr	r2, [pc, #580]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d904      	bls.n	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001b9e:	2313      	movs	r3, #19
 8001ba0:	18fb      	adds	r3, r7, r3
 8001ba2:	2203      	movs	r2, #3
 8001ba4:	701a      	strb	r2, [r3, #0]
            break;
 8001ba6:	e004      	b.n	8001bb2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ba8:	4b89      	ldr	r3, [pc, #548]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bac:	2202      	movs	r2, #2
 8001bae:	4013      	ands	r3, r2
 8001bb0:	d0ed      	beq.n	8001b8e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001bb2:	2313      	movs	r3, #19
 8001bb4:	18fb      	adds	r3, r7, r3
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d10a      	bne.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bbc:	4b84      	ldr	r3, [pc, #528]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc0:	4a85      	ldr	r2, [pc, #532]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	0019      	movs	r1, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bca:	4b81      	ldr	r3, [pc, #516]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	65da      	str	r2, [r3, #92]	; 0x5c
 8001bd0:	e00c      	b.n	8001bec <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001bd2:	2312      	movs	r3, #18
 8001bd4:	18fb      	adds	r3, r7, r3
 8001bd6:	2213      	movs	r2, #19
 8001bd8:	18ba      	adds	r2, r7, r2
 8001bda:	7812      	ldrb	r2, [r2, #0]
 8001bdc:	701a      	strb	r2, [r3, #0]
 8001bde:	e005      	b.n	8001bec <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001be0:	2312      	movs	r3, #18
 8001be2:	18fb      	adds	r3, r7, r3
 8001be4:	2213      	movs	r2, #19
 8001be6:	18ba      	adds	r2, r7, r2
 8001be8:	7812      	ldrb	r2, [r2, #0]
 8001bea:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001bec:	2311      	movs	r3, #17
 8001bee:	18fb      	adds	r3, r7, r3
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d105      	bne.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bf6:	4b76      	ldr	r3, [pc, #472]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001bf8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bfa:	4b75      	ldr	r3, [pc, #468]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001bfc:	4979      	ldr	r1, [pc, #484]	; (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8001bfe:	400a      	ands	r2, r1
 8001c00:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2201      	movs	r2, #1
 8001c08:	4013      	ands	r3, r2
 8001c0a:	d009      	beq.n	8001c20 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c0c:	4b70      	ldr	r3, [pc, #448]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c10:	2203      	movs	r2, #3
 8001c12:	4393      	bics	r3, r2
 8001c14:	0019      	movs	r1, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685a      	ldr	r2, [r3, #4]
 8001c1a:	4b6d      	ldr	r3, [pc, #436]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2202      	movs	r2, #2
 8001c26:	4013      	ands	r3, r2
 8001c28:	d009      	beq.n	8001c3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c2a:	4b69      	ldr	r3, [pc, #420]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c2e:	220c      	movs	r2, #12
 8001c30:	4393      	bics	r3, r2
 8001c32:	0019      	movs	r1, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	4b65      	ldr	r3, [pc, #404]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2210      	movs	r2, #16
 8001c44:	4013      	ands	r3, r2
 8001c46:	d009      	beq.n	8001c5c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001c48:	4b61      	ldr	r3, [pc, #388]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c4c:	4a66      	ldr	r2, [pc, #408]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8001c4e:	4013      	ands	r3, r2
 8001c50:	0019      	movs	r1, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	68da      	ldr	r2, [r3, #12]
 8001c56:	4b5e      	ldr	r3, [pc, #376]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	2380      	movs	r3, #128	; 0x80
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4013      	ands	r3, r2
 8001c66:	d009      	beq.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001c68:	4b59      	ldr	r3, [pc, #356]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c6c:	4a5f      	ldr	r2, [pc, #380]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8001c6e:	4013      	ands	r3, r2
 8001c70:	0019      	movs	r1, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	699a      	ldr	r2, [r3, #24]
 8001c76:	4b56      	ldr	r3, [pc, #344]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	2380      	movs	r3, #128	; 0x80
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	4013      	ands	r3, r2
 8001c86:	d009      	beq.n	8001c9c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001c88:	4b51      	ldr	r3, [pc, #324]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c8c:	4a58      	ldr	r2, [pc, #352]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001c8e:	4013      	ands	r3, r2
 8001c90:	0019      	movs	r1, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69da      	ldr	r2, [r3, #28]
 8001c96:	4b4e      	ldr	r3, [pc, #312]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2220      	movs	r2, #32
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	d009      	beq.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ca6:	4b4a      	ldr	r3, [pc, #296]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001caa:	4a52      	ldr	r2, [pc, #328]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8001cac:	4013      	ands	r3, r2
 8001cae:	0019      	movs	r1, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	691a      	ldr	r2, [r3, #16]
 8001cb4:	4b46      	ldr	r3, [pc, #280]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	2380      	movs	r3, #128	; 0x80
 8001cc0:	01db      	lsls	r3, r3, #7
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d015      	beq.n	8001cf2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001cc6:	4b42      	ldr	r3, [pc, #264]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	0899      	lsrs	r1, r3, #2
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a1a      	ldr	r2, [r3, #32]
 8001cd2:	4b3f      	ldr	r3, [pc, #252]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a1a      	ldr	r2, [r3, #32]
 8001cdc:	2380      	movs	r3, #128	; 0x80
 8001cde:	05db      	lsls	r3, r3, #23
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d106      	bne.n	8001cf2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001ce4:	4b3a      	ldr	r3, [pc, #232]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ce6:	68da      	ldr	r2, [r3, #12]
 8001ce8:	4b39      	ldr	r3, [pc, #228]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cea:	2180      	movs	r1, #128	; 0x80
 8001cec:	0249      	lsls	r1, r1, #9
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	2380      	movs	r3, #128	; 0x80
 8001cf8:	031b      	lsls	r3, r3, #12
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	d009      	beq.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001cfe:	4b34      	ldr	r3, [pc, #208]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d02:	2240      	movs	r2, #64	; 0x40
 8001d04:	4393      	bics	r3, r2
 8001d06:	0019      	movs	r1, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d0c:	4b30      	ldr	r3, [pc, #192]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	2380      	movs	r3, #128	; 0x80
 8001d18:	039b      	lsls	r3, r3, #14
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	d016      	beq.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001d1e:	4b2c      	ldr	r3, [pc, #176]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d22:	4a35      	ldr	r2, [pc, #212]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8001d24:	4013      	ands	r3, r2
 8001d26:	0019      	movs	r1, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d2c:	4b28      	ldr	r3, [pc, #160]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d36:	2380      	movs	r3, #128	; 0x80
 8001d38:	03db      	lsls	r3, r3, #15
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d106      	bne.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001d3e:	4b24      	ldr	r3, [pc, #144]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d40:	68da      	ldr	r2, [r3, #12]
 8001d42:	4b23      	ldr	r3, [pc, #140]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d44:	2180      	movs	r1, #128	; 0x80
 8001d46:	0449      	lsls	r1, r1, #17
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	2380      	movs	r3, #128	; 0x80
 8001d52:	03db      	lsls	r3, r3, #15
 8001d54:	4013      	ands	r3, r2
 8001d56:	d016      	beq.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001d58:	4b1d      	ldr	r3, [pc, #116]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d5c:	4a27      	ldr	r2, [pc, #156]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8001d5e:	4013      	ands	r3, r2
 8001d60:	0019      	movs	r1, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d66:	4b1a      	ldr	r3, [pc, #104]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d70:	2380      	movs	r3, #128	; 0x80
 8001d72:	045b      	lsls	r3, r3, #17
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d106      	bne.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001d78:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d7a:	68da      	ldr	r2, [r3, #12]
 8001d7c:	4b14      	ldr	r3, [pc, #80]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d7e:	2180      	movs	r1, #128	; 0x80
 8001d80:	0449      	lsls	r1, r1, #17
 8001d82:	430a      	orrs	r2, r1
 8001d84:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	2380      	movs	r3, #128	; 0x80
 8001d8c:	011b      	lsls	r3, r3, #4
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d016      	beq.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001d92:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d96:	4a1a      	ldr	r2, [pc, #104]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8001d98:	4013      	ands	r3, r2
 8001d9a:	0019      	movs	r1, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	695a      	ldr	r2, [r3, #20]
 8001da0:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001da2:	430a      	orrs	r2, r1
 8001da4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	695a      	ldr	r2, [r3, #20]
 8001daa:	2380      	movs	r3, #128	; 0x80
 8001dac:	01db      	lsls	r3, r3, #7
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d106      	bne.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001db2:	4b07      	ldr	r3, [pc, #28]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001db4:	68da      	ldr	r2, [r3, #12]
 8001db6:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001db8:	2180      	movs	r1, #128	; 0x80
 8001dba:	0249      	lsls	r1, r1, #9
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001dc0:	2312      	movs	r3, #18
 8001dc2:	18fb      	adds	r3, r7, r3
 8001dc4:	781b      	ldrb	r3, [r3, #0]
}
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	b006      	add	sp, #24
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	46c0      	nop			; (mov r8, r8)
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	40007000 	.word	0x40007000
 8001dd8:	fffffcff 	.word	0xfffffcff
 8001ddc:	fffeffff 	.word	0xfffeffff
 8001de0:	00001388 	.word	0x00001388
 8001de4:	efffffff 	.word	0xefffffff
 8001de8:	fffff3ff 	.word	0xfffff3ff
 8001dec:	fff3ffff 	.word	0xfff3ffff
 8001df0:	ffcfffff 	.word	0xffcfffff
 8001df4:	ffffcfff 	.word	0xffffcfff
 8001df8:	ffbfffff 	.word	0xffbfffff
 8001dfc:	feffffff 	.word	0xfeffffff
 8001e00:	ffff3fff 	.word	0xffff3fff

08001e04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e0a8      	b.n	8001f68 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d109      	bne.n	8001e32 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685a      	ldr	r2, [r3, #4]
 8001e22:	2382      	movs	r3, #130	; 0x82
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d009      	beq.n	8001e3e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	61da      	str	r2, [r3, #28]
 8001e30:	e005      	b.n	8001e3e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	225d      	movs	r2, #93	; 0x5d
 8001e48:	5c9b      	ldrb	r3, [r3, r2]
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d107      	bne.n	8001e60 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	225c      	movs	r2, #92	; 0x5c
 8001e54:	2100      	movs	r1, #0
 8001e56:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	f7fe fcec 	bl	8000838 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	225d      	movs	r2, #93	; 0x5d
 8001e64:	2102      	movs	r1, #2
 8001e66:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2140      	movs	r1, #64	; 0x40
 8001e74:	438a      	bics	r2, r1
 8001e76:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68da      	ldr	r2, [r3, #12]
 8001e7c:	23e0      	movs	r3, #224	; 0xe0
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d902      	bls.n	8001e8a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001e84:	2300      	movs	r3, #0
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	e002      	b.n	8001e90 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001e8a:	2380      	movs	r3, #128	; 0x80
 8001e8c:	015b      	lsls	r3, r3, #5
 8001e8e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68da      	ldr	r2, [r3, #12]
 8001e94:	23f0      	movs	r3, #240	; 0xf0
 8001e96:	011b      	lsls	r3, r3, #4
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d008      	beq.n	8001eae <HAL_SPI_Init+0xaa>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68da      	ldr	r2, [r3, #12]
 8001ea0:	23e0      	movs	r3, #224	; 0xe0
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d002      	beq.n	8001eae <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685a      	ldr	r2, [r3, #4]
 8001eb2:	2382      	movs	r3, #130	; 0x82
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	401a      	ands	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6899      	ldr	r1, [r3, #8]
 8001ebc:	2384      	movs	r3, #132	; 0x84
 8001ebe:	021b      	lsls	r3, r3, #8
 8001ec0:	400b      	ands	r3, r1
 8001ec2:	431a      	orrs	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	2102      	movs	r1, #2
 8001eca:	400b      	ands	r3, r1
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	400b      	ands	r3, r1
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6999      	ldr	r1, [r3, #24]
 8001edc:	2380      	movs	r3, #128	; 0x80
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	400b      	ands	r3, r1
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	2138      	movs	r1, #56	; 0x38
 8001eea:	400b      	ands	r3, r1
 8001eec:	431a      	orrs	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a1b      	ldr	r3, [r3, #32]
 8001ef2:	2180      	movs	r1, #128	; 0x80
 8001ef4:	400b      	ands	r3, r1
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	0011      	movs	r1, r2
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001efe:	2380      	movs	r3, #128	; 0x80
 8001f00:	019b      	lsls	r3, r3, #6
 8001f02:	401a      	ands	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	0c1b      	lsrs	r3, r3, #16
 8001f12:	2204      	movs	r2, #4
 8001f14:	401a      	ands	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	2110      	movs	r1, #16
 8001f1c:	400b      	ands	r3, r1
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f24:	2108      	movs	r1, #8
 8001f26:	400b      	ands	r3, r1
 8001f28:	431a      	orrs	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68d9      	ldr	r1, [r3, #12]
 8001f2e:	23f0      	movs	r3, #240	; 0xf0
 8001f30:	011b      	lsls	r3, r3, #4
 8001f32:	400b      	ands	r3, r1
 8001f34:	431a      	orrs	r2, r3
 8001f36:	0011      	movs	r1, r2
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	2380      	movs	r3, #128	; 0x80
 8001f3c:	015b      	lsls	r3, r3, #5
 8001f3e:	401a      	ands	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	430a      	orrs	r2, r1
 8001f46:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	69da      	ldr	r2, [r3, #28]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4907      	ldr	r1, [pc, #28]	; (8001f70 <HAL_SPI_Init+0x16c>)
 8001f54:	400a      	ands	r2, r1
 8001f56:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	225d      	movs	r2, #93	; 0x5d
 8001f62:	2101      	movs	r1, #1
 8001f64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	0018      	movs	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	b004      	add	sp, #16
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	fffff7ff 	.word	0xfffff7ff

08001f74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e046      	b.n	8002014 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2288      	movs	r2, #136	; 0x88
 8001f8a:	589b      	ldr	r3, [r3, r2]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d107      	bne.n	8001fa0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2284      	movs	r2, #132	; 0x84
 8001f94:	2100      	movs	r1, #0
 8001f96:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	f7fe fd24 	bl	80009e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2288      	movs	r2, #136	; 0x88
 8001fa4:	2124      	movs	r1, #36	; 0x24
 8001fa6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	438a      	bics	r2, r1
 8001fb6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	0018      	movs	r0, r3
 8001fbc:	f000 f830 	bl	8002020 <UART_SetConfig>
 8001fc0:	0003      	movs	r3, r0
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d101      	bne.n	8001fca <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e024      	b.n	8002014 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	f000 fae1 	bl	800259c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	490d      	ldr	r1, [pc, #52]	; (800201c <HAL_UART_Init+0xa8>)
 8001fe6:	400a      	ands	r2, r1
 8001fe8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	212a      	movs	r1, #42	; 0x2a
 8001ff6:	438a      	bics	r2, r1
 8001ff8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2101      	movs	r1, #1
 8002006:	430a      	orrs	r2, r1
 8002008:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	0018      	movs	r0, r3
 800200e:	f000 fb79 	bl	8002704 <UART_CheckIdleState>
 8002012:	0003      	movs	r3, r0
}
 8002014:	0018      	movs	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	b002      	add	sp, #8
 800201a:	bd80      	pop	{r7, pc}
 800201c:	ffffb7ff 	.word	0xffffb7ff

08002020 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002020:	b5b0      	push	{r4, r5, r7, lr}
 8002022:	b090      	sub	sp, #64	; 0x40
 8002024:	af00      	add	r7, sp, #0
 8002026:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002028:	231a      	movs	r3, #26
 800202a:	2220      	movs	r2, #32
 800202c:	189b      	adds	r3, r3, r2
 800202e:	19db      	adds	r3, r3, r7
 8002030:	2200      	movs	r2, #0
 8002032:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	431a      	orrs	r2, r3
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	431a      	orrs	r2, r3
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	69db      	ldr	r3, [r3, #28]
 8002048:	4313      	orrs	r3, r2
 800204a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800204c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4aaf      	ldr	r2, [pc, #700]	; (8002310 <UART_SetConfig+0x2f0>)
 8002054:	4013      	ands	r3, r2
 8002056:	0019      	movs	r1, r3
 8002058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800205e:	430b      	orrs	r3, r1
 8002060:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	4aaa      	ldr	r2, [pc, #680]	; (8002314 <UART_SetConfig+0x2f4>)
 800206a:	4013      	ands	r3, r2
 800206c:	0018      	movs	r0, r3
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	68d9      	ldr	r1, [r3, #12]
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	0003      	movs	r3, r0
 8002078:	430b      	orrs	r3, r1
 800207a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4aa4      	ldr	r2, [pc, #656]	; (8002318 <UART_SetConfig+0x2f8>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d004      	beq.n	8002096 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002092:	4313      	orrs	r3, r2
 8002094:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	4a9f      	ldr	r2, [pc, #636]	; (800231c <UART_SetConfig+0x2fc>)
 800209e:	4013      	ands	r3, r2
 80020a0:	0019      	movs	r1, r3
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020a8:	430b      	orrs	r3, r1
 80020aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b2:	220f      	movs	r2, #15
 80020b4:	4393      	bics	r3, r2
 80020b6:	0018      	movs	r0, r3
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	0003      	movs	r3, r0
 80020c2:	430b      	orrs	r3, r1
 80020c4:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a95      	ldr	r2, [pc, #596]	; (8002320 <UART_SetConfig+0x300>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d131      	bne.n	8002134 <UART_SetConfig+0x114>
 80020d0:	4b94      	ldr	r3, [pc, #592]	; (8002324 <UART_SetConfig+0x304>)
 80020d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d4:	2203      	movs	r2, #3
 80020d6:	4013      	ands	r3, r2
 80020d8:	2b03      	cmp	r3, #3
 80020da:	d01d      	beq.n	8002118 <UART_SetConfig+0xf8>
 80020dc:	d823      	bhi.n	8002126 <UART_SetConfig+0x106>
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d00c      	beq.n	80020fc <UART_SetConfig+0xdc>
 80020e2:	d820      	bhi.n	8002126 <UART_SetConfig+0x106>
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d002      	beq.n	80020ee <UART_SetConfig+0xce>
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d00e      	beq.n	800210a <UART_SetConfig+0xea>
 80020ec:	e01b      	b.n	8002126 <UART_SetConfig+0x106>
 80020ee:	231b      	movs	r3, #27
 80020f0:	2220      	movs	r2, #32
 80020f2:	189b      	adds	r3, r3, r2
 80020f4:	19db      	adds	r3, r3, r7
 80020f6:	2200      	movs	r2, #0
 80020f8:	701a      	strb	r2, [r3, #0]
 80020fa:	e0b4      	b.n	8002266 <UART_SetConfig+0x246>
 80020fc:	231b      	movs	r3, #27
 80020fe:	2220      	movs	r2, #32
 8002100:	189b      	adds	r3, r3, r2
 8002102:	19db      	adds	r3, r3, r7
 8002104:	2202      	movs	r2, #2
 8002106:	701a      	strb	r2, [r3, #0]
 8002108:	e0ad      	b.n	8002266 <UART_SetConfig+0x246>
 800210a:	231b      	movs	r3, #27
 800210c:	2220      	movs	r2, #32
 800210e:	189b      	adds	r3, r3, r2
 8002110:	19db      	adds	r3, r3, r7
 8002112:	2204      	movs	r2, #4
 8002114:	701a      	strb	r2, [r3, #0]
 8002116:	e0a6      	b.n	8002266 <UART_SetConfig+0x246>
 8002118:	231b      	movs	r3, #27
 800211a:	2220      	movs	r2, #32
 800211c:	189b      	adds	r3, r3, r2
 800211e:	19db      	adds	r3, r3, r7
 8002120:	2208      	movs	r2, #8
 8002122:	701a      	strb	r2, [r3, #0]
 8002124:	e09f      	b.n	8002266 <UART_SetConfig+0x246>
 8002126:	231b      	movs	r3, #27
 8002128:	2220      	movs	r2, #32
 800212a:	189b      	adds	r3, r3, r2
 800212c:	19db      	adds	r3, r3, r7
 800212e:	2210      	movs	r2, #16
 8002130:	701a      	strb	r2, [r3, #0]
 8002132:	e098      	b.n	8002266 <UART_SetConfig+0x246>
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a7b      	ldr	r2, [pc, #492]	; (8002328 <UART_SetConfig+0x308>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d131      	bne.n	80021a2 <UART_SetConfig+0x182>
 800213e:	4b79      	ldr	r3, [pc, #484]	; (8002324 <UART_SetConfig+0x304>)
 8002140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002142:	220c      	movs	r2, #12
 8002144:	4013      	ands	r3, r2
 8002146:	2b0c      	cmp	r3, #12
 8002148:	d01d      	beq.n	8002186 <UART_SetConfig+0x166>
 800214a:	d823      	bhi.n	8002194 <UART_SetConfig+0x174>
 800214c:	2b08      	cmp	r3, #8
 800214e:	d00c      	beq.n	800216a <UART_SetConfig+0x14a>
 8002150:	d820      	bhi.n	8002194 <UART_SetConfig+0x174>
 8002152:	2b00      	cmp	r3, #0
 8002154:	d002      	beq.n	800215c <UART_SetConfig+0x13c>
 8002156:	2b04      	cmp	r3, #4
 8002158:	d00e      	beq.n	8002178 <UART_SetConfig+0x158>
 800215a:	e01b      	b.n	8002194 <UART_SetConfig+0x174>
 800215c:	231b      	movs	r3, #27
 800215e:	2220      	movs	r2, #32
 8002160:	189b      	adds	r3, r3, r2
 8002162:	19db      	adds	r3, r3, r7
 8002164:	2200      	movs	r2, #0
 8002166:	701a      	strb	r2, [r3, #0]
 8002168:	e07d      	b.n	8002266 <UART_SetConfig+0x246>
 800216a:	231b      	movs	r3, #27
 800216c:	2220      	movs	r2, #32
 800216e:	189b      	adds	r3, r3, r2
 8002170:	19db      	adds	r3, r3, r7
 8002172:	2202      	movs	r2, #2
 8002174:	701a      	strb	r2, [r3, #0]
 8002176:	e076      	b.n	8002266 <UART_SetConfig+0x246>
 8002178:	231b      	movs	r3, #27
 800217a:	2220      	movs	r2, #32
 800217c:	189b      	adds	r3, r3, r2
 800217e:	19db      	adds	r3, r3, r7
 8002180:	2204      	movs	r2, #4
 8002182:	701a      	strb	r2, [r3, #0]
 8002184:	e06f      	b.n	8002266 <UART_SetConfig+0x246>
 8002186:	231b      	movs	r3, #27
 8002188:	2220      	movs	r2, #32
 800218a:	189b      	adds	r3, r3, r2
 800218c:	19db      	adds	r3, r3, r7
 800218e:	2208      	movs	r2, #8
 8002190:	701a      	strb	r2, [r3, #0]
 8002192:	e068      	b.n	8002266 <UART_SetConfig+0x246>
 8002194:	231b      	movs	r3, #27
 8002196:	2220      	movs	r2, #32
 8002198:	189b      	adds	r3, r3, r2
 800219a:	19db      	adds	r3, r3, r7
 800219c:	2210      	movs	r2, #16
 800219e:	701a      	strb	r2, [r3, #0]
 80021a0:	e061      	b.n	8002266 <UART_SetConfig+0x246>
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a61      	ldr	r2, [pc, #388]	; (800232c <UART_SetConfig+0x30c>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d106      	bne.n	80021ba <UART_SetConfig+0x19a>
 80021ac:	231b      	movs	r3, #27
 80021ae:	2220      	movs	r2, #32
 80021b0:	189b      	adds	r3, r3, r2
 80021b2:	19db      	adds	r3, r3, r7
 80021b4:	2200      	movs	r2, #0
 80021b6:	701a      	strb	r2, [r3, #0]
 80021b8:	e055      	b.n	8002266 <UART_SetConfig+0x246>
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a5c      	ldr	r2, [pc, #368]	; (8002330 <UART_SetConfig+0x310>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d106      	bne.n	80021d2 <UART_SetConfig+0x1b2>
 80021c4:	231b      	movs	r3, #27
 80021c6:	2220      	movs	r2, #32
 80021c8:	189b      	adds	r3, r3, r2
 80021ca:	19db      	adds	r3, r3, r7
 80021cc:	2200      	movs	r2, #0
 80021ce:	701a      	strb	r2, [r3, #0]
 80021d0:	e049      	b.n	8002266 <UART_SetConfig+0x246>
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a50      	ldr	r2, [pc, #320]	; (8002318 <UART_SetConfig+0x2f8>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d13e      	bne.n	800225a <UART_SetConfig+0x23a>
 80021dc:	4b51      	ldr	r3, [pc, #324]	; (8002324 <UART_SetConfig+0x304>)
 80021de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80021e0:	23c0      	movs	r3, #192	; 0xc0
 80021e2:	011b      	lsls	r3, r3, #4
 80021e4:	4013      	ands	r3, r2
 80021e6:	22c0      	movs	r2, #192	; 0xc0
 80021e8:	0112      	lsls	r2, r2, #4
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d027      	beq.n	800223e <UART_SetConfig+0x21e>
 80021ee:	22c0      	movs	r2, #192	; 0xc0
 80021f0:	0112      	lsls	r2, r2, #4
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d82a      	bhi.n	800224c <UART_SetConfig+0x22c>
 80021f6:	2280      	movs	r2, #128	; 0x80
 80021f8:	0112      	lsls	r2, r2, #4
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d011      	beq.n	8002222 <UART_SetConfig+0x202>
 80021fe:	2280      	movs	r2, #128	; 0x80
 8002200:	0112      	lsls	r2, r2, #4
 8002202:	4293      	cmp	r3, r2
 8002204:	d822      	bhi.n	800224c <UART_SetConfig+0x22c>
 8002206:	2b00      	cmp	r3, #0
 8002208:	d004      	beq.n	8002214 <UART_SetConfig+0x1f4>
 800220a:	2280      	movs	r2, #128	; 0x80
 800220c:	00d2      	lsls	r2, r2, #3
 800220e:	4293      	cmp	r3, r2
 8002210:	d00e      	beq.n	8002230 <UART_SetConfig+0x210>
 8002212:	e01b      	b.n	800224c <UART_SetConfig+0x22c>
 8002214:	231b      	movs	r3, #27
 8002216:	2220      	movs	r2, #32
 8002218:	189b      	adds	r3, r3, r2
 800221a:	19db      	adds	r3, r3, r7
 800221c:	2200      	movs	r2, #0
 800221e:	701a      	strb	r2, [r3, #0]
 8002220:	e021      	b.n	8002266 <UART_SetConfig+0x246>
 8002222:	231b      	movs	r3, #27
 8002224:	2220      	movs	r2, #32
 8002226:	189b      	adds	r3, r3, r2
 8002228:	19db      	adds	r3, r3, r7
 800222a:	2202      	movs	r2, #2
 800222c:	701a      	strb	r2, [r3, #0]
 800222e:	e01a      	b.n	8002266 <UART_SetConfig+0x246>
 8002230:	231b      	movs	r3, #27
 8002232:	2220      	movs	r2, #32
 8002234:	189b      	adds	r3, r3, r2
 8002236:	19db      	adds	r3, r3, r7
 8002238:	2204      	movs	r2, #4
 800223a:	701a      	strb	r2, [r3, #0]
 800223c:	e013      	b.n	8002266 <UART_SetConfig+0x246>
 800223e:	231b      	movs	r3, #27
 8002240:	2220      	movs	r2, #32
 8002242:	189b      	adds	r3, r3, r2
 8002244:	19db      	adds	r3, r3, r7
 8002246:	2208      	movs	r2, #8
 8002248:	701a      	strb	r2, [r3, #0]
 800224a:	e00c      	b.n	8002266 <UART_SetConfig+0x246>
 800224c:	231b      	movs	r3, #27
 800224e:	2220      	movs	r2, #32
 8002250:	189b      	adds	r3, r3, r2
 8002252:	19db      	adds	r3, r3, r7
 8002254:	2210      	movs	r2, #16
 8002256:	701a      	strb	r2, [r3, #0]
 8002258:	e005      	b.n	8002266 <UART_SetConfig+0x246>
 800225a:	231b      	movs	r3, #27
 800225c:	2220      	movs	r2, #32
 800225e:	189b      	adds	r3, r3, r2
 8002260:	19db      	adds	r3, r3, r7
 8002262:	2210      	movs	r2, #16
 8002264:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a2b      	ldr	r2, [pc, #172]	; (8002318 <UART_SetConfig+0x2f8>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d000      	beq.n	8002272 <UART_SetConfig+0x252>
 8002270:	e0a9      	b.n	80023c6 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002272:	231b      	movs	r3, #27
 8002274:	2220      	movs	r2, #32
 8002276:	189b      	adds	r3, r3, r2
 8002278:	19db      	adds	r3, r3, r7
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b08      	cmp	r3, #8
 800227e:	d015      	beq.n	80022ac <UART_SetConfig+0x28c>
 8002280:	dc18      	bgt.n	80022b4 <UART_SetConfig+0x294>
 8002282:	2b04      	cmp	r3, #4
 8002284:	d00d      	beq.n	80022a2 <UART_SetConfig+0x282>
 8002286:	dc15      	bgt.n	80022b4 <UART_SetConfig+0x294>
 8002288:	2b00      	cmp	r3, #0
 800228a:	d002      	beq.n	8002292 <UART_SetConfig+0x272>
 800228c:	2b02      	cmp	r3, #2
 800228e:	d005      	beq.n	800229c <UART_SetConfig+0x27c>
 8002290:	e010      	b.n	80022b4 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002292:	f7ff fbe9 	bl	8001a68 <HAL_RCC_GetPCLK1Freq>
 8002296:	0003      	movs	r3, r0
 8002298:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800229a:	e014      	b.n	80022c6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800229c:	4b25      	ldr	r3, [pc, #148]	; (8002334 <UART_SetConfig+0x314>)
 800229e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80022a0:	e011      	b.n	80022c6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80022a2:	f7ff fb55 	bl	8001950 <HAL_RCC_GetSysClockFreq>
 80022a6:	0003      	movs	r3, r0
 80022a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80022aa:	e00c      	b.n	80022c6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80022ac:	2380      	movs	r3, #128	; 0x80
 80022ae:	021b      	lsls	r3, r3, #8
 80022b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80022b2:	e008      	b.n	80022c6 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80022b8:	231a      	movs	r3, #26
 80022ba:	2220      	movs	r2, #32
 80022bc:	189b      	adds	r3, r3, r2
 80022be:	19db      	adds	r3, r3, r7
 80022c0:	2201      	movs	r2, #1
 80022c2:	701a      	strb	r2, [r3, #0]
        break;
 80022c4:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80022c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d100      	bne.n	80022ce <UART_SetConfig+0x2ae>
 80022cc:	e14b      	b.n	8002566 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022d2:	4b19      	ldr	r3, [pc, #100]	; (8002338 <UART_SetConfig+0x318>)
 80022d4:	0052      	lsls	r2, r2, #1
 80022d6:	5ad3      	ldrh	r3, [r2, r3]
 80022d8:	0019      	movs	r1, r3
 80022da:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80022dc:	f7fd ff12 	bl	8000104 <__udivsi3>
 80022e0:	0003      	movs	r3, r0
 80022e2:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80022e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	0013      	movs	r3, r2
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	189b      	adds	r3, r3, r2
 80022ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d305      	bcc.n	8002300 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80022f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80022fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d91d      	bls.n	800233c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8002300:	231a      	movs	r3, #26
 8002302:	2220      	movs	r2, #32
 8002304:	189b      	adds	r3, r3, r2
 8002306:	19db      	adds	r3, r3, r7
 8002308:	2201      	movs	r2, #1
 800230a:	701a      	strb	r2, [r3, #0]
 800230c:	e12b      	b.n	8002566 <UART_SetConfig+0x546>
 800230e:	46c0      	nop			; (mov r8, r8)
 8002310:	cfff69f3 	.word	0xcfff69f3
 8002314:	ffffcfff 	.word	0xffffcfff
 8002318:	40008000 	.word	0x40008000
 800231c:	11fff4ff 	.word	0x11fff4ff
 8002320:	40013800 	.word	0x40013800
 8002324:	40021000 	.word	0x40021000
 8002328:	40004400 	.word	0x40004400
 800232c:	40004800 	.word	0x40004800
 8002330:	40004c00 	.word	0x40004c00
 8002334:	00f42400 	.word	0x00f42400
 8002338:	08002c34 	.word	0x08002c34
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800233c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800233e:	61bb      	str	r3, [r7, #24]
 8002340:	2300      	movs	r3, #0
 8002342:	61fb      	str	r3, [r7, #28]
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002348:	4b92      	ldr	r3, [pc, #584]	; (8002594 <UART_SetConfig+0x574>)
 800234a:	0052      	lsls	r2, r2, #1
 800234c:	5ad3      	ldrh	r3, [r2, r3]
 800234e:	613b      	str	r3, [r7, #16]
 8002350:	2300      	movs	r3, #0
 8002352:	617b      	str	r3, [r7, #20]
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	69b8      	ldr	r0, [r7, #24]
 800235a:	69f9      	ldr	r1, [r7, #28]
 800235c:	f7fe f848 	bl	80003f0 <__aeabi_uldivmod>
 8002360:	0002      	movs	r2, r0
 8002362:	000b      	movs	r3, r1
 8002364:	0e11      	lsrs	r1, r2, #24
 8002366:	021d      	lsls	r5, r3, #8
 8002368:	430d      	orrs	r5, r1
 800236a:	0214      	lsls	r4, r2, #8
 800236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	085b      	lsrs	r3, r3, #1
 8002372:	60bb      	str	r3, [r7, #8]
 8002374:	2300      	movs	r3, #0
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68b8      	ldr	r0, [r7, #8]
 800237a:	68f9      	ldr	r1, [r7, #12]
 800237c:	1900      	adds	r0, r0, r4
 800237e:	4169      	adcs	r1, r5
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	603b      	str	r3, [r7, #0]
 8002386:	2300      	movs	r3, #0
 8002388:	607b      	str	r3, [r7, #4]
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f7fe f82f 	bl	80003f0 <__aeabi_uldivmod>
 8002392:	0002      	movs	r2, r0
 8002394:	000b      	movs	r3, r1
 8002396:	0013      	movs	r3, r2
 8002398:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800239a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800239c:	23c0      	movs	r3, #192	; 0xc0
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d309      	bcc.n	80023b8 <UART_SetConfig+0x398>
 80023a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023a6:	2380      	movs	r3, #128	; 0x80
 80023a8:	035b      	lsls	r3, r3, #13
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d204      	bcs.n	80023b8 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	e0d6      	b.n	8002566 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80023b8:	231a      	movs	r3, #26
 80023ba:	2220      	movs	r2, #32
 80023bc:	189b      	adds	r3, r3, r2
 80023be:	19db      	adds	r3, r3, r7
 80023c0:	2201      	movs	r2, #1
 80023c2:	701a      	strb	r2, [r3, #0]
 80023c4:	e0cf      	b.n	8002566 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	69da      	ldr	r2, [r3, #28]
 80023ca:	2380      	movs	r3, #128	; 0x80
 80023cc:	021b      	lsls	r3, r3, #8
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d000      	beq.n	80023d4 <UART_SetConfig+0x3b4>
 80023d2:	e070      	b.n	80024b6 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80023d4:	231b      	movs	r3, #27
 80023d6:	2220      	movs	r2, #32
 80023d8:	189b      	adds	r3, r3, r2
 80023da:	19db      	adds	r3, r3, r7
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b08      	cmp	r3, #8
 80023e0:	d015      	beq.n	800240e <UART_SetConfig+0x3ee>
 80023e2:	dc18      	bgt.n	8002416 <UART_SetConfig+0x3f6>
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d00d      	beq.n	8002404 <UART_SetConfig+0x3e4>
 80023e8:	dc15      	bgt.n	8002416 <UART_SetConfig+0x3f6>
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d002      	beq.n	80023f4 <UART_SetConfig+0x3d4>
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d005      	beq.n	80023fe <UART_SetConfig+0x3de>
 80023f2:	e010      	b.n	8002416 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80023f4:	f7ff fb38 	bl	8001a68 <HAL_RCC_GetPCLK1Freq>
 80023f8:	0003      	movs	r3, r0
 80023fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80023fc:	e014      	b.n	8002428 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80023fe:	4b66      	ldr	r3, [pc, #408]	; (8002598 <UART_SetConfig+0x578>)
 8002400:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002402:	e011      	b.n	8002428 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002404:	f7ff faa4 	bl	8001950 <HAL_RCC_GetSysClockFreq>
 8002408:	0003      	movs	r3, r0
 800240a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800240c:	e00c      	b.n	8002428 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800240e:	2380      	movs	r3, #128	; 0x80
 8002410:	021b      	lsls	r3, r3, #8
 8002412:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002414:	e008      	b.n	8002428 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8002416:	2300      	movs	r3, #0
 8002418:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800241a:	231a      	movs	r3, #26
 800241c:	2220      	movs	r2, #32
 800241e:	189b      	adds	r3, r3, r2
 8002420:	19db      	adds	r3, r3, r7
 8002422:	2201      	movs	r2, #1
 8002424:	701a      	strb	r2, [r3, #0]
        break;
 8002426:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800242a:	2b00      	cmp	r3, #0
 800242c:	d100      	bne.n	8002430 <UART_SetConfig+0x410>
 800242e:	e09a      	b.n	8002566 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002432:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002434:	4b57      	ldr	r3, [pc, #348]	; (8002594 <UART_SetConfig+0x574>)
 8002436:	0052      	lsls	r2, r2, #1
 8002438:	5ad3      	ldrh	r3, [r2, r3]
 800243a:	0019      	movs	r1, r3
 800243c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800243e:	f7fd fe61 	bl	8000104 <__udivsi3>
 8002442:	0003      	movs	r3, r0
 8002444:	005a      	lsls	r2, r3, #1
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	085b      	lsrs	r3, r3, #1
 800244c:	18d2      	adds	r2, r2, r3
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	0019      	movs	r1, r3
 8002454:	0010      	movs	r0, r2
 8002456:	f7fd fe55 	bl	8000104 <__udivsi3>
 800245a:	0003      	movs	r3, r0
 800245c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800245e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002460:	2b0f      	cmp	r3, #15
 8002462:	d921      	bls.n	80024a8 <UART_SetConfig+0x488>
 8002464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002466:	2380      	movs	r3, #128	; 0x80
 8002468:	025b      	lsls	r3, r3, #9
 800246a:	429a      	cmp	r2, r3
 800246c:	d21c      	bcs.n	80024a8 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800246e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002470:	b29a      	uxth	r2, r3
 8002472:	200e      	movs	r0, #14
 8002474:	2420      	movs	r4, #32
 8002476:	1903      	adds	r3, r0, r4
 8002478:	19db      	adds	r3, r3, r7
 800247a:	210f      	movs	r1, #15
 800247c:	438a      	bics	r2, r1
 800247e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002482:	085b      	lsrs	r3, r3, #1
 8002484:	b29b      	uxth	r3, r3
 8002486:	2207      	movs	r2, #7
 8002488:	4013      	ands	r3, r2
 800248a:	b299      	uxth	r1, r3
 800248c:	1903      	adds	r3, r0, r4
 800248e:	19db      	adds	r3, r3, r7
 8002490:	1902      	adds	r2, r0, r4
 8002492:	19d2      	adds	r2, r2, r7
 8002494:	8812      	ldrh	r2, [r2, #0]
 8002496:	430a      	orrs	r2, r1
 8002498:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	1902      	adds	r2, r0, r4
 80024a0:	19d2      	adds	r2, r2, r7
 80024a2:	8812      	ldrh	r2, [r2, #0]
 80024a4:	60da      	str	r2, [r3, #12]
 80024a6:	e05e      	b.n	8002566 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80024a8:	231a      	movs	r3, #26
 80024aa:	2220      	movs	r2, #32
 80024ac:	189b      	adds	r3, r3, r2
 80024ae:	19db      	adds	r3, r3, r7
 80024b0:	2201      	movs	r2, #1
 80024b2:	701a      	strb	r2, [r3, #0]
 80024b4:	e057      	b.n	8002566 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80024b6:	231b      	movs	r3, #27
 80024b8:	2220      	movs	r2, #32
 80024ba:	189b      	adds	r3, r3, r2
 80024bc:	19db      	adds	r3, r3, r7
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	d015      	beq.n	80024f0 <UART_SetConfig+0x4d0>
 80024c4:	dc18      	bgt.n	80024f8 <UART_SetConfig+0x4d8>
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	d00d      	beq.n	80024e6 <UART_SetConfig+0x4c6>
 80024ca:	dc15      	bgt.n	80024f8 <UART_SetConfig+0x4d8>
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d002      	beq.n	80024d6 <UART_SetConfig+0x4b6>
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d005      	beq.n	80024e0 <UART_SetConfig+0x4c0>
 80024d4:	e010      	b.n	80024f8 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80024d6:	f7ff fac7 	bl	8001a68 <HAL_RCC_GetPCLK1Freq>
 80024da:	0003      	movs	r3, r0
 80024dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80024de:	e014      	b.n	800250a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80024e0:	4b2d      	ldr	r3, [pc, #180]	; (8002598 <UART_SetConfig+0x578>)
 80024e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80024e4:	e011      	b.n	800250a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80024e6:	f7ff fa33 	bl	8001950 <HAL_RCC_GetSysClockFreq>
 80024ea:	0003      	movs	r3, r0
 80024ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80024ee:	e00c      	b.n	800250a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80024f0:	2380      	movs	r3, #128	; 0x80
 80024f2:	021b      	lsls	r3, r3, #8
 80024f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80024f6:	e008      	b.n	800250a <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80024fc:	231a      	movs	r3, #26
 80024fe:	2220      	movs	r2, #32
 8002500:	189b      	adds	r3, r3, r2
 8002502:	19db      	adds	r3, r3, r7
 8002504:	2201      	movs	r2, #1
 8002506:	701a      	strb	r2, [r3, #0]
        break;
 8002508:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800250a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800250c:	2b00      	cmp	r3, #0
 800250e:	d02a      	beq.n	8002566 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002512:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002514:	4b1f      	ldr	r3, [pc, #124]	; (8002594 <UART_SetConfig+0x574>)
 8002516:	0052      	lsls	r2, r2, #1
 8002518:	5ad3      	ldrh	r3, [r2, r3]
 800251a:	0019      	movs	r1, r3
 800251c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800251e:	f7fd fdf1 	bl	8000104 <__udivsi3>
 8002522:	0003      	movs	r3, r0
 8002524:	001a      	movs	r2, r3
 8002526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	085b      	lsrs	r3, r3, #1
 800252c:	18d2      	adds	r2, r2, r3
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	0019      	movs	r1, r3
 8002534:	0010      	movs	r0, r2
 8002536:	f7fd fde5 	bl	8000104 <__udivsi3>
 800253a:	0003      	movs	r3, r0
 800253c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800253e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002540:	2b0f      	cmp	r3, #15
 8002542:	d90a      	bls.n	800255a <UART_SetConfig+0x53a>
 8002544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002546:	2380      	movs	r3, #128	; 0x80
 8002548:	025b      	lsls	r3, r3, #9
 800254a:	429a      	cmp	r2, r3
 800254c:	d205      	bcs.n	800255a <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800254e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002550:	b29a      	uxth	r2, r3
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	60da      	str	r2, [r3, #12]
 8002558:	e005      	b.n	8002566 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800255a:	231a      	movs	r3, #26
 800255c:	2220      	movs	r2, #32
 800255e:	189b      	adds	r3, r3, r2
 8002560:	19db      	adds	r3, r3, r7
 8002562:	2201      	movs	r2, #1
 8002564:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	226a      	movs	r2, #106	; 0x6a
 800256a:	2101      	movs	r1, #1
 800256c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	2268      	movs	r2, #104	; 0x68
 8002572:	2101      	movs	r1, #1
 8002574:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	2200      	movs	r2, #0
 800257a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	2200      	movs	r2, #0
 8002580:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002582:	231a      	movs	r3, #26
 8002584:	2220      	movs	r2, #32
 8002586:	189b      	adds	r3, r3, r2
 8002588:	19db      	adds	r3, r3, r7
 800258a:	781b      	ldrb	r3, [r3, #0]
}
 800258c:	0018      	movs	r0, r3
 800258e:	46bd      	mov	sp, r7
 8002590:	b010      	add	sp, #64	; 0x40
 8002592:	bdb0      	pop	{r4, r5, r7, pc}
 8002594:	08002c34 	.word	0x08002c34
 8002598:	00f42400 	.word	0x00f42400

0800259c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a8:	2201      	movs	r2, #1
 80025aa:	4013      	ands	r3, r2
 80025ac:	d00b      	beq.n	80025c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	4a4a      	ldr	r2, [pc, #296]	; (80026e0 <UART_AdvFeatureConfig+0x144>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	0019      	movs	r1, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	430a      	orrs	r2, r1
 80025c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ca:	2202      	movs	r2, #2
 80025cc:	4013      	ands	r3, r2
 80025ce:	d00b      	beq.n	80025e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	4a43      	ldr	r2, [pc, #268]	; (80026e4 <UART_AdvFeatureConfig+0x148>)
 80025d8:	4013      	ands	r3, r2
 80025da:	0019      	movs	r1, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ec:	2204      	movs	r2, #4
 80025ee:	4013      	ands	r3, r2
 80025f0:	d00b      	beq.n	800260a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	4a3b      	ldr	r2, [pc, #236]	; (80026e8 <UART_AdvFeatureConfig+0x14c>)
 80025fa:	4013      	ands	r3, r2
 80025fc:	0019      	movs	r1, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	430a      	orrs	r2, r1
 8002608:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260e:	2208      	movs	r2, #8
 8002610:	4013      	ands	r3, r2
 8002612:	d00b      	beq.n	800262c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	4a34      	ldr	r2, [pc, #208]	; (80026ec <UART_AdvFeatureConfig+0x150>)
 800261c:	4013      	ands	r3, r2
 800261e:	0019      	movs	r1, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002630:	2210      	movs	r2, #16
 8002632:	4013      	ands	r3, r2
 8002634:	d00b      	beq.n	800264e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	4a2c      	ldr	r2, [pc, #176]	; (80026f0 <UART_AdvFeatureConfig+0x154>)
 800263e:	4013      	ands	r3, r2
 8002640:	0019      	movs	r1, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	430a      	orrs	r2, r1
 800264c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002652:	2220      	movs	r2, #32
 8002654:	4013      	ands	r3, r2
 8002656:	d00b      	beq.n	8002670 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	4a25      	ldr	r2, [pc, #148]	; (80026f4 <UART_AdvFeatureConfig+0x158>)
 8002660:	4013      	ands	r3, r2
 8002662:	0019      	movs	r1, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	430a      	orrs	r2, r1
 800266e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002674:	2240      	movs	r2, #64	; 0x40
 8002676:	4013      	ands	r3, r2
 8002678:	d01d      	beq.n	80026b6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	4a1d      	ldr	r2, [pc, #116]	; (80026f8 <UART_AdvFeatureConfig+0x15c>)
 8002682:	4013      	ands	r3, r2
 8002684:	0019      	movs	r1, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	430a      	orrs	r2, r1
 8002690:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002696:	2380      	movs	r3, #128	; 0x80
 8002698:	035b      	lsls	r3, r3, #13
 800269a:	429a      	cmp	r2, r3
 800269c:	d10b      	bne.n	80026b6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	4a15      	ldr	r2, [pc, #84]	; (80026fc <UART_AdvFeatureConfig+0x160>)
 80026a6:	4013      	ands	r3, r2
 80026a8:	0019      	movs	r1, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ba:	2280      	movs	r2, #128	; 0x80
 80026bc:	4013      	ands	r3, r2
 80026be:	d00b      	beq.n	80026d8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	4a0e      	ldr	r2, [pc, #56]	; (8002700 <UART_AdvFeatureConfig+0x164>)
 80026c8:	4013      	ands	r3, r2
 80026ca:	0019      	movs	r1, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	430a      	orrs	r2, r1
 80026d6:	605a      	str	r2, [r3, #4]
  }
}
 80026d8:	46c0      	nop			; (mov r8, r8)
 80026da:	46bd      	mov	sp, r7
 80026dc:	b002      	add	sp, #8
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	fffdffff 	.word	0xfffdffff
 80026e4:	fffeffff 	.word	0xfffeffff
 80026e8:	fffbffff 	.word	0xfffbffff
 80026ec:	ffff7fff 	.word	0xffff7fff
 80026f0:	ffffefff 	.word	0xffffefff
 80026f4:	ffffdfff 	.word	0xffffdfff
 80026f8:	ffefffff 	.word	0xffefffff
 80026fc:	ff9fffff 	.word	0xff9fffff
 8002700:	fff7ffff 	.word	0xfff7ffff

08002704 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af02      	add	r7, sp, #8
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2290      	movs	r2, #144	; 0x90
 8002710:	2100      	movs	r1, #0
 8002712:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002714:	f7fe fa6e 	bl	8000bf4 <HAL_GetTick>
 8002718:	0003      	movs	r3, r0
 800271a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2208      	movs	r2, #8
 8002724:	4013      	ands	r3, r2
 8002726:	2b08      	cmp	r3, #8
 8002728:	d10c      	bne.n	8002744 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2280      	movs	r2, #128	; 0x80
 800272e:	0391      	lsls	r1, r2, #14
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	4a1a      	ldr	r2, [pc, #104]	; (800279c <UART_CheckIdleState+0x98>)
 8002734:	9200      	str	r2, [sp, #0]
 8002736:	2200      	movs	r2, #0
 8002738:	f000 f832 	bl	80027a0 <UART_WaitOnFlagUntilTimeout>
 800273c:	1e03      	subs	r3, r0, #0
 800273e:	d001      	beq.n	8002744 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e026      	b.n	8002792 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2204      	movs	r2, #4
 800274c:	4013      	ands	r3, r2
 800274e:	2b04      	cmp	r3, #4
 8002750:	d10c      	bne.n	800276c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2280      	movs	r2, #128	; 0x80
 8002756:	03d1      	lsls	r1, r2, #15
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	4a10      	ldr	r2, [pc, #64]	; (800279c <UART_CheckIdleState+0x98>)
 800275c:	9200      	str	r2, [sp, #0]
 800275e:	2200      	movs	r2, #0
 8002760:	f000 f81e 	bl	80027a0 <UART_WaitOnFlagUntilTimeout>
 8002764:	1e03      	subs	r3, r0, #0
 8002766:	d001      	beq.n	800276c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e012      	b.n	8002792 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2288      	movs	r2, #136	; 0x88
 8002770:	2120      	movs	r1, #32
 8002772:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	228c      	movs	r2, #140	; 0x8c
 8002778:	2120      	movs	r1, #32
 800277a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2284      	movs	r2, #132	; 0x84
 800278c:	2100      	movs	r1, #0
 800278e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	0018      	movs	r0, r3
 8002794:	46bd      	mov	sp, r7
 8002796:	b004      	add	sp, #16
 8002798:	bd80      	pop	{r7, pc}
 800279a:	46c0      	nop			; (mov r8, r8)
 800279c:	01ffffff 	.word	0x01ffffff

080027a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b094      	sub	sp, #80	; 0x50
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	603b      	str	r3, [r7, #0]
 80027ac:	1dfb      	adds	r3, r7, #7
 80027ae:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027b0:	e0a7      	b.n	8002902 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027b4:	3301      	adds	r3, #1
 80027b6:	d100      	bne.n	80027ba <UART_WaitOnFlagUntilTimeout+0x1a>
 80027b8:	e0a3      	b.n	8002902 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ba:	f7fe fa1b 	bl	8000bf4 <HAL_GetTick>
 80027be:	0002      	movs	r2, r0
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d302      	bcc.n	80027d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80027ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d13f      	bne.n	8002850 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027d0:	f3ef 8310 	mrs	r3, PRIMASK
 80027d4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80027d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80027d8:	647b      	str	r3, [r7, #68]	; 0x44
 80027da:	2301      	movs	r3, #1
 80027dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e0:	f383 8810 	msr	PRIMASK, r3
}
 80027e4:	46c0      	nop			; (mov r8, r8)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	494e      	ldr	r1, [pc, #312]	; (800292c <UART_WaitOnFlagUntilTimeout+0x18c>)
 80027f2:	400a      	ands	r2, r1
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027f8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027fc:	f383 8810 	msr	PRIMASK, r3
}
 8002800:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002802:	f3ef 8310 	mrs	r3, PRIMASK
 8002806:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800280a:	643b      	str	r3, [r7, #64]	; 0x40
 800280c:	2301      	movs	r3, #1
 800280e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002812:	f383 8810 	msr	PRIMASK, r3
}
 8002816:	46c0      	nop			; (mov r8, r8)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689a      	ldr	r2, [r3, #8]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2101      	movs	r1, #1
 8002824:	438a      	bics	r2, r1
 8002826:	609a      	str	r2, [r3, #8]
 8002828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800282a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800282c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800282e:	f383 8810 	msr	PRIMASK, r3
}
 8002832:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2288      	movs	r2, #136	; 0x88
 8002838:	2120      	movs	r1, #32
 800283a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	228c      	movs	r2, #140	; 0x8c
 8002840:	2120      	movs	r1, #32
 8002842:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2284      	movs	r2, #132	; 0x84
 8002848:	2100      	movs	r1, #0
 800284a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e069      	b.n	8002924 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2204      	movs	r2, #4
 8002858:	4013      	ands	r3, r2
 800285a:	d052      	beq.n	8002902 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	69da      	ldr	r2, [r3, #28]
 8002862:	2380      	movs	r3, #128	; 0x80
 8002864:	011b      	lsls	r3, r3, #4
 8002866:	401a      	ands	r2, r3
 8002868:	2380      	movs	r3, #128	; 0x80
 800286a:	011b      	lsls	r3, r3, #4
 800286c:	429a      	cmp	r2, r3
 800286e:	d148      	bne.n	8002902 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2280      	movs	r2, #128	; 0x80
 8002876:	0112      	lsls	r2, r2, #4
 8002878:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800287a:	f3ef 8310 	mrs	r3, PRIMASK
 800287e:	613b      	str	r3, [r7, #16]
  return(result);
 8002880:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002882:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002884:	2301      	movs	r3, #1
 8002886:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f383 8810 	msr	PRIMASK, r3
}
 800288e:	46c0      	nop			; (mov r8, r8)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4924      	ldr	r1, [pc, #144]	; (800292c <UART_WaitOnFlagUntilTimeout+0x18c>)
 800289c:	400a      	ands	r2, r1
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028a2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	f383 8810 	msr	PRIMASK, r3
}
 80028aa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028ac:	f3ef 8310 	mrs	r3, PRIMASK
 80028b0:	61fb      	str	r3, [r7, #28]
  return(result);
 80028b2:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80028b6:	2301      	movs	r3, #1
 80028b8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028ba:	6a3b      	ldr	r3, [r7, #32]
 80028bc:	f383 8810 	msr	PRIMASK, r3
}
 80028c0:	46c0      	nop			; (mov r8, r8)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2101      	movs	r1, #1
 80028ce:	438a      	bics	r2, r1
 80028d0:	609a      	str	r2, [r3, #8]
 80028d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028d4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	f383 8810 	msr	PRIMASK, r3
}
 80028dc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2288      	movs	r2, #136	; 0x88
 80028e2:	2120      	movs	r1, #32
 80028e4:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	228c      	movs	r2, #140	; 0x8c
 80028ea:	2120      	movs	r1, #32
 80028ec:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2290      	movs	r2, #144	; 0x90
 80028f2:	2120      	movs	r1, #32
 80028f4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2284      	movs	r2, #132	; 0x84
 80028fa:	2100      	movs	r1, #0
 80028fc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e010      	b.n	8002924 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	69db      	ldr	r3, [r3, #28]
 8002908:	68ba      	ldr	r2, [r7, #8]
 800290a:	4013      	ands	r3, r2
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	425a      	negs	r2, r3
 8002912:	4153      	adcs	r3, r2
 8002914:	b2db      	uxtb	r3, r3
 8002916:	001a      	movs	r2, r3
 8002918:	1dfb      	adds	r3, r7, #7
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	429a      	cmp	r2, r3
 800291e:	d100      	bne.n	8002922 <UART_WaitOnFlagUntilTimeout+0x182>
 8002920:	e747      	b.n	80027b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	0018      	movs	r0, r3
 8002926:	46bd      	mov	sp, r7
 8002928:	b014      	add	sp, #80	; 0x50
 800292a:	bd80      	pop	{r7, pc}
 800292c:	fffffe5f 	.word	0xfffffe5f

08002930 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2284      	movs	r2, #132	; 0x84
 800293c:	5c9b      	ldrb	r3, [r3, r2]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d101      	bne.n	8002946 <HAL_UARTEx_DisableFifoMode+0x16>
 8002942:	2302      	movs	r3, #2
 8002944:	e027      	b.n	8002996 <HAL_UARTEx_DisableFifoMode+0x66>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2284      	movs	r2, #132	; 0x84
 800294a:	2101      	movs	r1, #1
 800294c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2288      	movs	r2, #136	; 0x88
 8002952:	2124      	movs	r1, #36	; 0x24
 8002954:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2101      	movs	r1, #1
 800296a:	438a      	bics	r2, r1
 800296c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	4a0b      	ldr	r2, [pc, #44]	; (80029a0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8002972:	4013      	ands	r3, r2
 8002974:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2288      	movs	r2, #136	; 0x88
 8002988:	2120      	movs	r1, #32
 800298a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2284      	movs	r2, #132	; 0x84
 8002990:	2100      	movs	r1, #0
 8002992:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	0018      	movs	r0, r3
 8002998:	46bd      	mov	sp, r7
 800299a:	b004      	add	sp, #16
 800299c:	bd80      	pop	{r7, pc}
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	dfffffff 	.word	0xdfffffff

080029a4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2284      	movs	r2, #132	; 0x84
 80029b2:	5c9b      	ldrb	r3, [r3, r2]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d101      	bne.n	80029bc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80029b8:	2302      	movs	r3, #2
 80029ba:	e02e      	b.n	8002a1a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2284      	movs	r2, #132	; 0x84
 80029c0:	2101      	movs	r1, #1
 80029c2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2288      	movs	r2, #136	; 0x88
 80029c8:	2124      	movs	r1, #36	; 0x24
 80029ca:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2101      	movs	r1, #1
 80029e0:	438a      	bics	r2, r1
 80029e2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	08d9      	lsrs	r1, r3, #3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	0018      	movs	r0, r3
 80029fc:	f000 f854 	bl	8002aa8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2288      	movs	r2, #136	; 0x88
 8002a0c:	2120      	movs	r1, #32
 8002a0e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2284      	movs	r2, #132	; 0x84
 8002a14:	2100      	movs	r1, #0
 8002a16:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	b004      	add	sp, #16
 8002a20:	bd80      	pop	{r7, pc}
	...

08002a24 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2284      	movs	r2, #132	; 0x84
 8002a32:	5c9b      	ldrb	r3, [r3, r2]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d101      	bne.n	8002a3c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002a38:	2302      	movs	r3, #2
 8002a3a:	e02f      	b.n	8002a9c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2284      	movs	r2, #132	; 0x84
 8002a40:	2101      	movs	r1, #1
 8002a42:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2288      	movs	r2, #136	; 0x88
 8002a48:	2124      	movs	r1, #36	; 0x24
 8002a4a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2101      	movs	r1, #1
 8002a60:	438a      	bics	r2, r1
 8002a62:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	4a0e      	ldr	r2, [pc, #56]	; (8002aa4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	0019      	movs	r1, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	430a      	orrs	r2, r1
 8002a78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	f000 f813 	bl	8002aa8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2288      	movs	r2, #136	; 0x88
 8002a8e:	2120      	movs	r1, #32
 8002a90:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2284      	movs	r2, #132	; 0x84
 8002a96:	2100      	movs	r1, #0
 8002a98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	b004      	add	sp, #16
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	f1ffffff 	.word	0xf1ffffff

08002aa8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d108      	bne.n	8002aca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	226a      	movs	r2, #106	; 0x6a
 8002abc:	2101      	movs	r1, #1
 8002abe:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2268      	movs	r2, #104	; 0x68
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002ac8:	e043      	b.n	8002b52 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002aca:	260f      	movs	r6, #15
 8002acc:	19bb      	adds	r3, r7, r6
 8002ace:	2208      	movs	r2, #8
 8002ad0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002ad2:	200e      	movs	r0, #14
 8002ad4:	183b      	adds	r3, r7, r0
 8002ad6:	2208      	movs	r2, #8
 8002ad8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	0e5b      	lsrs	r3, r3, #25
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	240d      	movs	r4, #13
 8002ae6:	193b      	adds	r3, r7, r4
 8002ae8:	2107      	movs	r1, #7
 8002aea:	400a      	ands	r2, r1
 8002aec:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	0f5b      	lsrs	r3, r3, #29
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	250c      	movs	r5, #12
 8002afa:	197b      	adds	r3, r7, r5
 8002afc:	2107      	movs	r1, #7
 8002afe:	400a      	ands	r2, r1
 8002b00:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002b02:	183b      	adds	r3, r7, r0
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	197a      	adds	r2, r7, r5
 8002b08:	7812      	ldrb	r2, [r2, #0]
 8002b0a:	4914      	ldr	r1, [pc, #80]	; (8002b5c <UARTEx_SetNbDataToProcess+0xb4>)
 8002b0c:	5c8a      	ldrb	r2, [r1, r2]
 8002b0e:	435a      	muls	r2, r3
 8002b10:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8002b12:	197b      	adds	r3, r7, r5
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	4a12      	ldr	r2, [pc, #72]	; (8002b60 <UARTEx_SetNbDataToProcess+0xb8>)
 8002b18:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002b1a:	0019      	movs	r1, r3
 8002b1c:	f7fd fb7c 	bl	8000218 <__divsi3>
 8002b20:	0003      	movs	r3, r0
 8002b22:	b299      	uxth	r1, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	226a      	movs	r2, #106	; 0x6a
 8002b28:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002b2a:	19bb      	adds	r3, r7, r6
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	193a      	adds	r2, r7, r4
 8002b30:	7812      	ldrb	r2, [r2, #0]
 8002b32:	490a      	ldr	r1, [pc, #40]	; (8002b5c <UARTEx_SetNbDataToProcess+0xb4>)
 8002b34:	5c8a      	ldrb	r2, [r1, r2]
 8002b36:	435a      	muls	r2, r3
 8002b38:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8002b3a:	193b      	adds	r3, r7, r4
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	4a08      	ldr	r2, [pc, #32]	; (8002b60 <UARTEx_SetNbDataToProcess+0xb8>)
 8002b40:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002b42:	0019      	movs	r1, r3
 8002b44:	f7fd fb68 	bl	8000218 <__divsi3>
 8002b48:	0003      	movs	r3, r0
 8002b4a:	b299      	uxth	r1, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2268      	movs	r2, #104	; 0x68
 8002b50:	5299      	strh	r1, [r3, r2]
}
 8002b52:	46c0      	nop			; (mov r8, r8)
 8002b54:	46bd      	mov	sp, r7
 8002b56:	b005      	add	sp, #20
 8002b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b5a:	46c0      	nop			; (mov r8, r8)
 8002b5c:	08002c4c 	.word	0x08002c4c
 8002b60:	08002c54 	.word	0x08002c54

08002b64 <__libc_init_array>:
 8002b64:	b570      	push	{r4, r5, r6, lr}
 8002b66:	2600      	movs	r6, #0
 8002b68:	4d0c      	ldr	r5, [pc, #48]	; (8002b9c <__libc_init_array+0x38>)
 8002b6a:	4c0d      	ldr	r4, [pc, #52]	; (8002ba0 <__libc_init_array+0x3c>)
 8002b6c:	1b64      	subs	r4, r4, r5
 8002b6e:	10a4      	asrs	r4, r4, #2
 8002b70:	42a6      	cmp	r6, r4
 8002b72:	d109      	bne.n	8002b88 <__libc_init_array+0x24>
 8002b74:	2600      	movs	r6, #0
 8002b76:	f000 f821 	bl	8002bbc <_init>
 8002b7a:	4d0a      	ldr	r5, [pc, #40]	; (8002ba4 <__libc_init_array+0x40>)
 8002b7c:	4c0a      	ldr	r4, [pc, #40]	; (8002ba8 <__libc_init_array+0x44>)
 8002b7e:	1b64      	subs	r4, r4, r5
 8002b80:	10a4      	asrs	r4, r4, #2
 8002b82:	42a6      	cmp	r6, r4
 8002b84:	d105      	bne.n	8002b92 <__libc_init_array+0x2e>
 8002b86:	bd70      	pop	{r4, r5, r6, pc}
 8002b88:	00b3      	lsls	r3, r6, #2
 8002b8a:	58eb      	ldr	r3, [r5, r3]
 8002b8c:	4798      	blx	r3
 8002b8e:	3601      	adds	r6, #1
 8002b90:	e7ee      	b.n	8002b70 <__libc_init_array+0xc>
 8002b92:	00b3      	lsls	r3, r6, #2
 8002b94:	58eb      	ldr	r3, [r5, r3]
 8002b96:	4798      	blx	r3
 8002b98:	3601      	adds	r6, #1
 8002b9a:	e7f2      	b.n	8002b82 <__libc_init_array+0x1e>
 8002b9c:	08002c64 	.word	0x08002c64
 8002ba0:	08002c64 	.word	0x08002c64
 8002ba4:	08002c64 	.word	0x08002c64
 8002ba8:	08002c68 	.word	0x08002c68

08002bac <memset>:
 8002bac:	0003      	movs	r3, r0
 8002bae:	1882      	adds	r2, r0, r2
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d100      	bne.n	8002bb6 <memset+0xa>
 8002bb4:	4770      	bx	lr
 8002bb6:	7019      	strb	r1, [r3, #0]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	e7f9      	b.n	8002bb0 <memset+0x4>

08002bbc <_init>:
 8002bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bc2:	bc08      	pop	{r3}
 8002bc4:	469e      	mov	lr, r3
 8002bc6:	4770      	bx	lr

08002bc8 <_fini>:
 8002bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bca:	46c0      	nop			; (mov r8, r8)
 8002bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bce:	bc08      	pop	{r3}
 8002bd0:	469e      	mov	lr, r3
 8002bd2:	4770      	bx	lr
